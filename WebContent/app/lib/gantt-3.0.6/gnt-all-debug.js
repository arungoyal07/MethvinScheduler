/**
@class Sch.locale.Locale

Base locale class. You need to subclass it, when creating new locales for Bryntum components. Usually subclasses of this class
will be singletones.

See <a href="#!/guide/gantt_scheduler_localization">Localization guide</a> for additional details.

*/
Ext.define('Sch.locale.Locale', {

    /**
     * @cfg {Object} l10n An object with the keys corresponding to class names and values are in turn objects with "phraseName/phraseTranslation"
     * key/values. For example:
     *
    l10n        : {
        'Sch.plugin.EventEditor' : {
            saveText: 'Speichern',
            deleteText: 'LÃ¶schen',
            cancelText: 'Abbrechen'
        },
        'Sch.plugin.CurrentTimeLine' : {
            tooltipText : 'Aktuelle Zeit'
        },

        ...
    }

     */
    l10n            : null,

    legacyMode      : true,

    localeName      : null,
    namespaceId     : null,


    constructor : function () {
        if (!Sch.locale.Active) {
            Sch.locale.Active = {};
            this.bindRequire();
        }

        var name            = this.self.getName().split('.');
        var localeName      = this.localeName = name.pop();
        this.namespaceId    = name.join('.');

        var currentLocale   = Sch.locale.Active[ this.namespaceId ];

        // let's localize all the classes that are loaded
        // except the cases when English locale is being applied over some non-english locale
        if (!(localeName == 'En' && currentLocale && currentLocale.localeName != 'En')) this.apply();
    },

    bindRequire : function () {
        // OVERRIDE
        // we need central hook to localize class once it's been created
        // to achieve it we override Ext.ClassManager.triggerCreated
        var _triggerCreated = Ext.ClassManager.triggerCreated;

        Ext.ClassManager.triggerCreated = function(className) {
            _triggerCreated.apply(this, arguments);

            if (className) {
                var cls     = Ext.ClassManager.get(className);
                // trying to apply locales for the loaded class
                for (var namespaceId in Sch.locale.Active) {
                    Sch.locale.Active[namespaceId].apply(cls);
                }
            }
        };
    },


    applyToClass : function (className, cls) {
        var me        = this,
            localeId  = me.self.getName();

        cls = cls || Ext.ClassManager.get(className);

        if (cls && (cls.activeLocaleId !== localeId)) {
            var locale = me.l10n[className];

            // if it's procedural localization - run provided callback
            if (typeof locale === 'function') {
                locale(className);

            // if it's a singleton - apply to it
            } else if (cls.singleton) {
                cls.l10n = Ext.apply({}, locale, cls.prototype && cls.prototype.l10n);

            // otherwise we override class
            } else {
                Ext.override(cls, { l10n : locale });
            }

            // if we support old locales approach let's duplicate locale to old places
            if (me.legacyMode) {
                var target;

                // we update either class prototype
                if (cls.prototype) {
                    target = cls.prototype;
                // or object itself in case of singleton
                } else if (cls.singleton) {
                    target = cls;
                }

                if (target && target.legacyMode) {

                    if (target.legacyHolderProp) {
                        if (!target[target.legacyHolderProp]) target[target.legacyHolderProp] = {};

                        target = target[target.legacyHolderProp];
                    }

                    for (var p in locale) {
                        if (typeof target[p] !== 'function') target[p] = locale[p];
                    }
                }
            }

            // keep applied locale
            cls.activeLocaleId  = localeId;

            // for singletons we can have some postprocessing
            if (cls.onLocalized) cls.onLocalized();
        }
    },


    /**
     * Apply this locale to classes.
     * @param {String[]/Object[]} [classNames] Array of class names (or classes themself) to localize.
     * If no classes specified then will localize all exisiting classes.
     */
    apply : function (classNames) {
        if (this.l10n) {
            var me = this;

            // if class name is specified
            if (classNames) {
                if (!Ext.isArray(classNames)) classNames = [classNames];

                var name, cls;
                for (var i = 0, l = classNames.length; i < l; i++) {
                    if (Ext.isObject(classNames[i])) {
                        if (classNames[i].singleton) {
                            cls     = classNames[i];
                            name    = Ext.getClassName(Ext.getClass(cls));
                        } else {
                            cls     = Ext.getClass(classNames[i]);
                            name    = Ext.getClassName(cls);
                        }
                    } else {
                        cls     = null;
                        name    = 'string' === typeof classNames[i] ? classNames[i] : Ext.getClassName(classNames[i]);
                    }

                    if (name && name in this.l10n) {
                        me.applyToClass(name, cls);
                    }
                }

            // localize all the classes that we know about
            } else {
                // update active locales
                Sch.locale.Active[this.namespaceId] = this;

                for (var className in this.l10n) {
                    me.applyToClass(className);
                }
            }
        }
    }
});

/**
 * English translations for the Scheduler component
 *
 * NOTE: To change locale for month/day names you have to use the corresponding Ext JS language file.
 */
Ext.define('Sch.locale.En', {
    extend      : 'Sch.locale.Locale',
    singleton   : true,

    constructor : function (config) {

        Ext.apply(this , {
            l10n        : {
                'Sch.util.Date' : {
                    unitNames : {
                        YEAR        : { single : 'year',    plural : 'years',   abbrev : 'yr' },
                        QUARTER     : { single : 'quarter', plural : 'quarters',abbrev : 'q' },
                        MONTH       : { single : 'month',   plural : 'months',  abbrev : 'mon' },
                        WEEK        : { single : 'week',    plural : 'weeks',   abbrev : 'w' },
                        DAY         : { single : 'day',     plural : 'days',    abbrev : 'd' },
                        HOUR        : { single : 'hour',    plural : 'hours',   abbrev : 'h' },
                        MINUTE      : { single : 'minute',  plural : 'minutes', abbrev : 'min' },
                        SECOND      : { single : 'second',  plural : 'seconds', abbrev : 's' },
                        MILLI       : { single : 'ms',      plural : 'ms',      abbrev : 'ms' }
                    }
                },

                'Sch.panel.TimelineGridPanel' : {
                    loadingText : 'Loading, please wait...',
                    savingText  : 'Saving changes, please wait...'
                },

                'Sch.panel.TimelineTreePanel' : {
                    loadingText : 'Loading, please wait...',
                    savingText  : 'Saving changes, please wait...'
                },

                'Sch.mixin.SchedulerView' : {
                    loadingText : 'Loading events...'
                },

                'Sch.plugin.CurrentTimeLine' : {
                    tooltipText : 'Current time'
                },

                'Sch.plugin.EventEditor' : {
                    saveText    : 'Save',
                    deleteText  : 'Delete',
                    cancelText  : 'Cancel'
                },

                'Sch.plugin.SimpleEditor' : {
                    newEventText    : 'New booking...'
                },

                'Sch.widget.ExportDialog' : {
                    generalError                : 'An error occured, try again.',
                    title                       : 'Export Settings',
                    formatFieldLabel            : 'Paper format',
                    orientationFieldLabel       : 'Orientation',
                    rangeFieldLabel             : 'Export range',
                    showHeaderLabel             : 'Add page number',
                    showFooterLabel             : 'Add footer',
                    orientationPortraitText     : 'Portrait',
                    orientationLandscapeText    : 'Landscape',
                    completeViewText            : 'Complete schedule',
                    currentViewText             : 'Current view',
                    dateRangeText               : 'Date range',
                    dateRangeFromText           : 'Export from',
                    pickerText                  : 'Resize column/rows to desired value',
                    dateRangeToText             : 'Export to',
                    exportButtonText            : 'Export',
                    cancelButtonText            : 'Cancel',
                    progressBarText             : 'Exporting...',
                    exportersFieldLabel         : 'Export mode',
                    adjustCols                  : 'Adjust column width',
                    adjustColsAndRows           : 'Adjust column width and row height',
                    specifyDateRange            : 'Specify date range'
                },

                'Sch.plugin.Export' : {
                    fetchingRows            : 'Fetching row {0} of {1}',
                    builtPage               : 'Built page {0} of {1}',
                    requestingPrintServer   : 'Please wait...'
                },

                'Sch.plugin.exporter.AbstractExporter' : {
                    name    : 'Exporter'
                },

                'Sch.plugin.exporter.SinglePage' : {
                    name    : 'Single page'
                },

                'Sch.plugin.exporter.MultiPageVertical' : {
                    name    : 'Multiple pages (vertically)'
                },

                'Sch.plugin.exporter.MultiPage' : {
                    name    : 'Multiple pages'
                },

                // -------------- View preset date formats/strings -------------------------------------
                'Sch.preset.Manager' : {
                    hourAndDay  : {
                        displayDateFormat   : 'G:i',
                        middleDateFormat    : 'G:i',
                        topDateFormat       : 'D d/m'
                    },

                    secondAndMinute : {
                        displayDateFormat   : 'g:i:s',
                        topDateFormat       : 'D, d g:iA'
                    },

                    dayAndWeek      : {
                        displayDateFormat   : 'm/d h:i A',
                        middleDateFormat    : 'D d M'
                    },

                    weekAndDay      : {
                        displayDateFormat   : 'm/d',
                        bottomDateFormat    : 'd M',
                        middleDateFormat    : 'Y F d'
                    },

                    weekAndMonth : {
                        displayDateFormat   : 'm/d/Y',
                        middleDateFormat    : 'm/d',
                        topDateFormat       : 'm/d/Y'
                    },

                    weekAndDayLetter : {
                        displayDateFormat   : 'm/d/Y',
                        middleDateFormat    : 'D d M Y'
                    },

                    weekDateAndMonth : {
                        displayDateFormat   : 'm/d/Y',
                        middleDateFormat    : 'd',
                        topDateFormat       : 'Y F'
                    },

                    monthAndYear : {
                        displayDateFormat   : 'm/d/Y',
                        middleDateFormat    : 'M Y',
                        topDateFormat       : 'Y'
                    },

                    year : {
                        displayDateFormat   : 'm/d/Y',
                        middleDateFormat    : 'Y'
                    },

                    manyYears : {
                        displayDateFormat   : 'm/d/Y',
                        middleDateFormat    : 'Y'
                    }
                }
            }
        });

        this.callParent(arguments);
    }
});

/**
 * @class Sch.util.Patch
 * @static
 * @private
 * Private utility class for Ext JS patches for the Bryntum components
 */
Ext.define('Sch.util.Patch', {
    /**
     * @cfg {String} target The class name to override
     */
    target      : null,

    /**
     * @cfg {String} minVersion The minimum Ext JS version for which this override is applicable. E.g. "4.0.5"
     */
    minVersion  : null,
    
    /**
     * @cfg {String} maxVersion The highest Ext JS version for which this override is applicable. E.g. "4.0.7"
     */
    maxVersion  : null,

    /**
     * @cfg {String} reportUrl A url to the forum post describing the bug/issue in greater detail
     */
    reportUrl   : null,
    
    /**
     * @cfg {String} description A brief description of why this override is required
     */
    description : null,
    
    /**
     * @cfg {Function} applyFn A function that will apply the patch(es) manually, instead of using 'overrides';
     */
    applyFn : null,

    /**
     * @cfg {Boolean} ieOnly true if patch is only applicable to IE
     */
    ieOnly : false,

    /**
     * @cfg {Boolean} macOnly true if patch is only applicable for Mac
     */
    macOnly : false,

    /**
     * @cfg {Object} overrides a custom object containing the methods to be overridden.
     */
    overrides : null,

    onClassExtended: function(cls, data) {
        
        if (Sch.disableOverrides) {
            return;
        }

        if (data.ieOnly && !Ext.isIE) {
            return;
        }

        if (data.macOnly && !Ext.isMac) {
            return;
        }

        if ((!data.minVersion || Ext.versions.extjs.equals(data.minVersion) || Ext.versions.extjs.isGreaterThan(data.minVersion)) &&
            (!data.maxVersion || Ext.versions.extjs.equals(data.maxVersion) || Ext.versions.extjs.isLessThan(data.maxVersion))) {
            if (data.applyFn) {
                // Custom override, implementor has full control
                data.applyFn();
            } else {
                // Simple case, just an Ext override
                Ext.ClassManager.get(data.target).override(data.overrides);
            }
        }
    }
});

if (!Ext.ClassManager.get("Sch.patches.BufferedRenderer")) {

    Ext.define('Sch.patches.BufferedRenderer', {
        extend : 'Sch.util.Patch',

        requires : ['Ext.grid.plugin.BufferedRenderer'],
        target   : 'Ext.grid.plugin.BufferedRenderer',

        overrides : {
            // Patch to solve this issue: http://www.sencha.com/forum/showthread.php?294996
            // remove when fixed
            onRangeFetched : function () {
                this.tableTopBorderWidth = this.tableTopBorderWidth || 0;

                return this.callParent(arguments);
            },

            refreshSize : function (e, t) {

                var me = this,
                    view = me.view;

                if (view.body.dom) {
                    this.callParent(arguments);
                }
            }
        }
    });
}

// IE8 doesn't have indexOf() on native array
// http://www.sencha.com/forum/showthread.php?292336-5.0.1-IE8-treepanel-broken-after-editing
if (!Ext.ClassManager.get("Sch.patches.NodeStore")) Ext.define('Sch.patches.NodeStore', {
    extend          : 'Sch.util.Patch',

    requires        : ['Ext.data.NodeStore'],

    target          : 'Ext.data.NodeStore',
    ieOnly          : true,
    maxVersion      : '5.1.1',
    overrides      : {

        afterEdit       : function (record, modifiedFields) {

            if (this.getNode() && modifiedFields) {
                if (Ext.Array.indexOf(modifiedFields, 'loaded') !== -1) {
                    return this.add(this.retrieveChildNodes(record));
                }
                if (Ext.Array.indexOf(modifiedFields, 'expanded') !== -1) {
                    return this.filter();
                }
                if (Ext.Array.indexOf(modifiedFields, 'sorted') !== -1) {
                    return this.sort();
                }
            }

            //
            Ext.data.Store.prototype.afterEdit.apply(this, arguments);
        }
    }

});

// http://www.sencha.com/forum/showthread.php?295795-Crash-when-adding-new-record-to-tree-with-locked-cols&p=1079983#post1079983
//
if (!Ext.ClassManager.get("Sch.patches.NodeCache")) {

    Ext.define('Sch.patches.NodeCache', {
        extend : 'Sch.util.Patch',

        requires   : ['Ext.view.NodeCache'],
        target     : 'Ext.view.NodeCache',
        minVersion : '5.1.0',

        overrides : {
            scroll : function (newRecords, direction, removeCount) {
                var res;

                if (newRecords.length === 0) {
                    res = [];
                } else {
                    res = this.callParent(arguments);
                }

                return res;
            }
        }
    });
}

//@PATCH to fix https://www.assembla.com/spaces/bryntum/tickets/869#/activity/ticket
// When resizing columns with fixed locked grid width, columns become smaller due to the default Ext header resizing logic
Ext.define('Sch.patches.ColumnResizeTree', {
    override      : 'Sch.panel.TimelineTreePanel',

    afterRender : function() {
        this.callParent(arguments);

        var resizer = this.lockedGrid.headerCt.findPlugin('gridheaderresizer');

        if (resizer) {
            // Implementation from Ext 4.2.0
            resizer.getConstrainRegion = function() {
                var me       = this,
                    dragHdEl = me.dragHd.el,
                    nextHd;



                if (me.headerCt.forceFit) {
                    nextHd = me.dragHd.nextNode('gridcolumn:not([hidden]):not([isGroupHeader])');
                    if (!me.headerInSameGrid(nextHd)) {
                        nextHd = null;
                    }
                }

                return me.adjustConstrainRegion(
                    Ext.util.Region.getRegion(dragHdEl),
                    0,
                    me.headerCt.forceFit ? (nextHd ? nextHd.getWidth() - me.minColWidth : 0) : me.maxColWidth - dragHdEl.getWidth(),
                    0,
                    me.minColWidth
                );
            };
        }
    }
});

if (!Ext.ClassManager.get("Sch.patches.RowSynchronizer")) {
    Ext.define('Sch.patches.RowSynchronizer', {
        extend : 'Sch.util.Patch',

        requires : ['Ext.grid.locking.RowSynchronizer'],

        target     : 'Ext.grid.locking.RowSynchronizer',
        minVersion : '5.1.0',

        overrides : Ext.versions.extjs.isGreaterThan('5.1.0') ? {

            finish : function (other) {
                if (!other) return;

                return this.callParent(arguments);
            }
        } : {}
    });
}

//http://www.sencha.com/forum/showthread.php?296703-iOS-devices-Crash-in-TouchScroller&p=1083470#post1083470
Ext.define('Sch.patches.TouchScroll', {
    extend   : 'Sch.util.Patch',

    requires   : ['Ext.scroll.TouchScroller'],
    target     : 'Ext.scroll.TouchScroller',
    
    minVersion : '5.1.0',

    overrides  : {
        privates : {
            onEvent: function(e) {
                var me = this;

                if (!me[me.listenerMap[e.type]]) return;

                return this.callParent(arguments);
            }
        }
    }
});
//https://www.sencha.com/forum/showthread.php?299097-5.1.0-Chrome-Mac-Scrolling-stutters-in-locked-grid
Ext.define('Sch.patches.PartnerScroll', {
    extend   : 'Sch.util.Patch',

    requires   : ['Ext.scroll.Scroller'],

    minVersion : '5.1.0',

    maxVersion : '5.1.1',

    applyFn : function () {
        // https://www.assembla.com/spaces/bryntum/tickets/2114
        // This patch fixes not only scroll in mac but also in FF for Ext 5.1.0
        // Also in Ext 5.1.1 same issue is not reproducible for FF
        if (Ext.isMac || Ext.isGecko) {
            Ext.ClassManager.get('Ext.scroll.Scroller').override({

                constructor: function (config) {
                    var me = this;

                    me.callParent([config]);

                    this.doNotCall = {};
                },

                privates: {

                    onPartnerScrollEnd: function () {
                        this.doNotCall = {};
                    },

                    invokePartners: function (method, x, y) {
                        var partners = this._partners,
                            partner,
                            id;

                        if (!this.suspendSync) {
                            for (id in partners) {
                                partner = partners[id];
                                //do not bounce back
                                if (!partner.suspendSync && !this.doNotCall[partner.scroller.id]) {
                                    partner.scroller[method](this, x, y);
                                }
                                else {
                                    //needed to sync columnlines
                                    if (!partner.scroller.component.isTableView) {
                                        delete this.doNotCall[partner.scroller.id];
                                    }
                                }
                            }
                        }
                    },

                    onPartnerScroll: function (partner, x, y) {

                        var axis = partner._partners[this.getId()].axis;

                        if (axis) {
                            if (axis === 'x') {
                                y = null;
                            } else if (axis === 'y') {
                                x = null;
                            }
                        }

                        //do not bounce back on partner
                        this.doNotCall[partner.id] = true;

                        this.doScrollTo(x, y, null, false);

                    }
                }
            });
        }
    }
});

//http://www.sencha.com/forum/showthread.php?295892-Ext-JS-5.1-Post-GA-Patches&p=1080371&viewfull=1#post1080371
Ext.define('Sch.patches.View', {
    extend : 'Sch.util.Patch',

    requires   : ['Ext.view.View'],
    target     : 'Ext.view.View',
    minVersion : '5.1.0',

    overrides : {
        handleEvent: function(e) {
            var me = this,
                isKeyEvent = me.keyEventRe.test(e.type),
                nm = me.getNavigationModel();

            e.view = me;

            if (isKeyEvent) {
                e.item = nm.getItem();
                e.record = nm.getRecord();
            }

            // If the key event was fired programatically, it will not have triggered the focus
            // so the NavigationModel will not have this information.
            if (!e.item) {
                e.item = e.getTarget(me.itemSelector);
            }
            if (e.item && !e.record) {
                e.record = me.getRecord(e.item);
            }

            if (me.processUIEvent(e) !== false) {
                me.processSpecialEvent(e);
            }

            // We need to prevent default action on navigation keys
            // that can cause View element scroll unless the event is from an input field.
            // We MUST prevent browser's default action on SPACE which is to focus the event's target element.
            // Focusing causes the browser to attempt to scroll the element into view.

            if (isKeyEvent && !Ext.fly(e.target).isInputField()) {
                if (e.getKey() === e.SPACE || e.isNavKeyPress(true)) {
                    e.preventDefault();
                }
            }
        }
    }
});

Ext.define('Sch.patches.TableView', {
    extend : 'Sch.util.Patch',

    requires   : ['Ext.view.Table'],
    target     : 'Ext.view.Table',
    minVersion : '5.1.0',

    overrides : {
        //https://www.sencha.com/forum/showthread.php?301110-Last-focused-item-is-not-synced-which-causes-scroll-jump
        getLastFocused : function () {
            var result = this.callParent(arguments);

            return result || this.navigationModel.lastFocused;
        }
    }
});

//http://www.sencha.com/forum/showthread.php?295892-Ext-JS-5.1-Post-GA-Patches&p=1080371&viewfull=1#post1080371
Ext.define('Sch.patches.Collection', {
    extend : 'Sch.util.Patch',

    requires   : ['Ext.util.Collection'],
    target     : 'Ext.util.Collection',
    minVersion : '5.1.0',

    overrides : {

        updateKey: function (item, oldKey) {
            var me = this,
                map = me.map,
                indices = me.indices,
                source = me.getSource(),
                newKey;

            if (source && !source.updating) {
                // If we are being told of the key change and the source has the same idea
                // on keying the item, push the change down instead.
                source.updateKey(item, oldKey);
            }
            // If there *is* an existing item by the oldKey and the key yielded by the new item is different from the oldKey...
            else if (map[oldKey] && (newKey = me.getKey(item)) !== oldKey) {
                if (oldKey in map || map[newKey] !== item) {
                    if (oldKey in map) {

                        delete map[oldKey];
                    }

                    // We need to mark ourselves as updating so that observing collections
                    // don't reflect the updateKey back to us (see above check) but this is
                    // not really a normal update cycle so we don't call begin/endUpdate.
                    me.updating++;

                    me.generation++;
                    map[newKey] = item;
                    if (indices) {
                        indices[newKey] = indices[oldKey];
                        delete indices[oldKey];
                    }

                    me.notify('updatekey', [{
                        item: item,
                        newKey: newKey,
                        oldKey: oldKey
                    }]);

                    me.updating--;
                }
            }
        }
    }
});
// TreeStore doesn't support rejectChanges very well
// https://www.sencha.com/forum/showthread.php?300339-rejectChanges-doesn-t-work-for-TreeStore-added-removed-records&p=1097116#post1097116
if (!Ext.ClassManager.get("Sch.patches.TreeStore")) {

    Ext.define('Sch.patches.TreeStore', {
        extend          : 'Sch.util.Patch',

        requires        : ['Ext.data.TreeStore'],

        target          : 'Ext.data.TreeStore',
        minVersion      : '5.1.0',
        overrides      : {

            getRejectRecords : function () {
                return this.getModifiedRecords();
            },

            rejectChanges : function () {
                this.removed = this.removedNodes;
                this.callParent(arguments);
            },

            remove : function (node) {
                if (node.isModel) {

                    node.remove();

                } else if (node instanceof Array && node[0].isModel) {

                    for (var i = 0; i < node.length; i++) node[i].remove();

                } else {
                    this.callParent(arguments);
                }
            }
        }

    });

}
// byInternalIdMap is removed from 5.1.1 and it is widely used in projection mechanism
Ext.define('Sch.patches.TreeStoreInternalIdMap', {
    extend      : 'Sch.util.Patch',

    requires    : ['Ext.data.TreeStore'],
    target      : 'Ext.data.TreeStore',

    minVersion  : '5.1.1',

    overrides   : {
        registerNode: function(node, includeChildren) {
            var me = this;

            if (!me.byInternalIdMap) {
                me.byInternalIdMap = {};
            }

            me.byInternalIdMap[node.internalId] = node;

            me.callParent(arguments);
        },

        unregisterNode: function(node, includeChildren) {
            var me = this;

            if (me.byInternalIdMap) {
                delete me.byInternalIdMap[node.internalId];
            }

            me.callParent(arguments);
        },

        updateRoot: function () {
            this.byInternalIdMap = {};

            this.callParent(arguments);
        }
    }
});
// https://www.sencha.com/forum/showthread.php?301258-Tooltip-should-not-ignore-mouseover-event-on-touch-devices
Ext.define('Sch.patches.ToolTip', {
    extend  : 'Sch.util.Patch',
    
    requires   : ['Ext.tip.ToolTip'],
    target     : 'Ext.tip.ToolTip',
    
    minVersion : '5.1.0',
    
    overrides : {
        setTarget: function(target) {
            var me = this,
                t = Ext.get(target),
                tg;
    
            if (me.target) {
                tg = Ext.get(me.target);
                me.mun(tg, {
                    mouseover: me.onTargetOver,
                    tap: me.onTargetOver,
                    mouseout: me.onTargetOut,
                    mousemove: me.onMouseMove,
                    scope: me
                });
            }
    
            me.target = t;
            if (t) {
                me.mon(t, {
                    mouseover: me.onTargetOver,
                    tap: me.onTargetOver,
                    mouseout: me.onTargetOut,
                    mousemove: me.onMouseMove,
                    scope: me
                });
            }
            if (me.anchor) {
                me.anchorTarget = me.target;
            }
        }
    }
});
Ext.define('Sch.patches.OperationDestroy', {
    extend      : 'Sch.util.Patch',

    requires    : ['Ext.data.operation.Destroy'],
    target      : 'Ext.data.operation.Destroy',

    minVersion  : '5.1.1',

    maxVersion  : '5.1.2',

    overrides   : {
        doProcess   : function () {
            // clientRecords record size gets down on each clientRecords[i].setErased() call
            // so we make a copy by slicing this.getRecords()
            var clientRecords = Ext.Array.slice(this.getRecords()),
                clientLen = clientRecords.length,
                i;
            for (i = 0; i < clientLen; ++i) {
                clientRecords[i].setErased();
            }
        }
    }
});
// fixes issue fix fields layout in Chrome43
Ext.define('Sch.patches.Chrome', {

    extend      : 'Sch.util.Patch',

    requires    : ['Ext.util.CSS'],

    minVersion  : '5.1.0',

    applyFn : function () {
        if (Ext.isChrome && Ext.browser.version.isGreaterThanOrEqual('43')) {
            Ext.util.CSS.createStyleSheet('.sch-timelinepanel .' + Ext.baseCSSPrefix + 'form-text { display: inherit; }');
        }
    }

});
/**
@class Sch.mixin.Localizable

A mixin providing localization functionality to the consuming class.

    Ext.define('My.Toolbar', {
        extend      : 'Ext.Toolbar',
        mixins      : [ 'Sch.mixin.Localizable' ],

        initComponent   : function () {
            Ext.apply(this, {
                items   : [
                    {
                        xtype       : 'button',

                        // get the button label from the current locale
                        text        : this.L('loginText')
                    }
                ]
            });

            this.callParent(arguments);
        }
    });

*/
Ext.define('Sch.mixin.Localizable', {

    // This line used to be like this:
    //      if Sch.config.locale is specified then we'll require corresponding class
    //      by default we require Sch.locale.En class
//          requires            : [ typeof Sch != 'undefined' && Sch.config && Sch.config.locale || 'Sch.locale.En' ],
    //
    // But, SenchaCMD does not support dynamic expressions for `requires`
    // Falling back to requiring English locale - that will cause English locale to always be included in the build
    // (even if user has specified another locale in other `requires`), but thats better than requiring users
    // to always specify and load the locale they need explicitly
    requires            : [ 'Sch.locale.En' ],

    legacyMode          : false,

    activeLocaleId      : '',

    /**
     * @cfg {Object} l10n Container of locales for the class.
     */
    l10n                : null,

    isLocaleApplied     : function () {
        var activeLocaleId = (this.singleton && this.activeLocaleId) || this.self.activeLocaleId;

        if (!activeLocaleId) return false;

        for (var ns in Sch.locale.Active) {
            if (activeLocaleId === Sch.locale.Active[ns].self.getName()) return true;
        }

        return false;
    },

    applyLocale         : function () {
        // loop over activated locale classes and call apply() method of each one
        for (var ns in Sch.locale.Active) {
            Sch.locale.Active[ns].apply(this.singleton ? this : this.self.getName());
        }
    },

    /**
     * This is shorthand reference to {@link #localize}. Retrieves translation of a phrase.
     * @param {String} id Identifier of phrase.
     * @param {String} [legacyHolderProp=this.legacyHolderProp] Legacy class property name containing locales.
     * @param {Boolean} [skipLocalizedCheck=false] Do not localize class if it's not localized yet.
     * @return {String} Translation of specified phrase.
     */
    L                   : function () {
        return this.localize.apply(this, arguments);
    },

    /**
     * Retrieves translation of a phrase. There is a shorthand {@link #L} for this method.
     * @param {String} id Identifier of phrase.
     * @param {String} [legacyHolderProp=this.legacyHolderProp] Legacy class property name containing locales.
     * @param {Boolean} [skipLocalizedCheck=false] Do not localize class if it's not localized yet.
     * @return {String} Translation of specified phrase.
     */
    localize            : function (id, legacyHolderProp, skipLocalizedCheck) {
        // if not localized yet let's do it
        if (!this.isLocaleApplied() && !skipLocalizedCheck) {
            this.applyLocale();
        }

        // `l10n` instance property has highest priority
        if (this.hasOwnProperty('l10n') && this.l10n.hasOwnProperty(id) && 'function' != typeof this.l10n[id]) return this.l10n[id];

        var clsProto    = this.self && this.self.prototype;

        // if there were old properties for localization on this class
        if (this.legacyMode) {
            // if they were kept under some property
            var prop        = legacyHolderProp || this.legacyHolderProp;

            // check object instance first
            var instHolder  = prop ? this[prop] : this;
            if (instHolder && instHolder.hasOwnProperty(id) && 'function' != typeof instHolder[id]) return instHolder[id];

            if (clsProto) {
                // then let's check class definition
                var clsHolder = prop ? clsProto[prop] : clsProto;
                if (clsHolder && clsHolder.hasOwnProperty(id) && 'function' != typeof clsHolder[id]) return clsHolder[id];
            }
        }

        // let's try to get locale from class prototype `l10n` property
        var result      = clsProto.l10n && clsProto.l10n[id];

        // if no transalation found
        if (result === null || result === undefined) {

            var superClass  = clsProto && clsProto.superclass;
            // if parent class also has localize() method
            if (superClass && superClass.localize) {
                // try to get phrase translation from parent class
                result = superClass.localize(id, legacyHolderProp, skipLocalizedCheck);
            }

            if (result === null || result === undefined) throw 'Cannot find locale: '+id+' ['+this.self.getName()+']';
        }

        return result;
    }
});

/**
 @class Sch.crud.AbstractManager
 @abstract

 This is an abstract class serving as the base for the Sch.data.CrudManager class.
 It implements basic mechanisms to organize batch communication with a server.
 Yet it does not contain methods related to _data transfer_ nor _encoding_.
 These methods are to be provided in sub-classes by consuming the appropriate mixins.

 For example, this is how the class can be used to implement an XML encoding system:

        // let's make new CrudManager using AJAX as a transport system and XML for encoding
        Ext.define('MyCrudManager', {
            extend  : 'Sch.crud.AbstractManager',

            mixins  : ['Sch.crud.encoder.Xml', 'Sch.crud.transport.Ajax']
        });

 Data transfer and encoding methods
 ======================================

 Here are the methods that must be provided by subclasses of this class:

 - {@link #sendRequest}
 - {@link #cancelRequest}
 - {@link #encode}
 - {@link #decode}

 */
Ext.define('Sch.crud.AbstractManager', {

    require                 : [
        'Ext.data.StoreManager'
    ],

    mixins                  : {
        observable          : 'Ext.util.Observable'
    },

    /**
     * @property {Integer} revision
     * @readonly
     * The server revision stamp.
     * The _revision stamp_ is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated after each {@link #load} and {@link #sync} call.
     */
    revision                : null,

    /**
     * @property {Object[]} stores
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a _store descriptor_, an object having following structure:
     * @property {String} stores.storeId Unique store identifier.
     * @property {Ext.data.AbstractStore} stores.store Store itself.
     * @property {String} [stores.phantomIdField] Set this if store model has a predefined field to keep phantom record identifier.
     * @property {String} [stores.idProperty] id field name, if it's not specified then class will try to get it from a store model.
     */

    /**
     * @cfg {Ext.data.AbstractStore[]/String[]/Object[]} stores
     * Sets the list of stores controlled by the CRUD manager.
     * Store can be provided by itself, its storeId or an object having the following structure:
     * @cfg {String} stores.storeId Unique store identifier. Under this name the store related requests/responses will be sent.
     * @cfg {Ext.data.AbstractStore} stores.store The store itself.
     * @cfg {String} [stores.phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.
     * @cfg {String} [stores.idProperty] id field name, if it's not specified then class will try to get it from a store model.
     */
    stores                  : null,

    /**
     * @cfg {String} storeIdProperty Name of a store property to retrieve store identifiers from.
     * Store identifier is used as a container name holding corresponding store data while transferring them to/from the server.
     * By default `storeId` property is used. And in case a container identifier has to differ this config can be used:
     *
     *     Ext.define('CatStore', {
     *         model            : 'Cat',
     *         // storeId is "meow" but for sending/receiving store data
     *         // we want have "cats" container in JSON, so we create a new property "stoireIdForCrud"
     *         storeId          : 'meow',
     *         stoireIdForCrud  : 'cats',
     *         proxy            : 'memory'
     *     });
     *
     *     Ext.define('MyCrudManager', {
     *         ...
     *         stores           : ['meow'],
     *         // crud manager will get store identifier from "stoireIdForCrud" property
     *         storeIdProperty  : 'stoireIdForCrud'
     *     });
     *
     * The `storeIdProperty` property can also be specified directly on a store:
     *
     *     Ext.define('CatStore', {
     *         model            : 'Cat',
     *         // storeId is "meow" but for sending/receiving store data
     *         // we want have "cats" container in JSON
     *         storeId          : 'meow',
     *         // so we create a new property "stoireIdForCrud"..
     *         stoireIdForCrud  : 'cats',
     *         // and point CrudManager to use it as the store identifier source
     *         storeIdProperty  : 'stoireIdForCrud',
     *         proxy            : 'memory'
     *     });
     *
     *     Ext.define('DogStore', {
     *         model            : 'MyModel',
     *         // storeId is "dogs" and it will be used as a container name for the store data
     *         storeId          : 'dogs',
     *         proxy            : 'memory'
     *     });
     *
     *     Ext.define('MyCrudManager', {
     *         ...
     *         stores           : ['meow', 'dogs']
     *     });
     *
     */
    storeIdProperty         : 'storeId',

    storesIndex             : null,
    activeRequests          : null,
    delayedSyncs            : null,

    /**
     * @method sendRequest
     * @abstract
     * Sends request to the server.
     * @param {Object} request The request to send. An object having following properties:
     * @param {String} request.data {@link #encode Encoded} request.
     * @param {String} request.type Request type, can be either `load` or `sync`
     * @param {Function} request.success Callback to be started on successful request transferring
     * @param {Function} request.failure Callback to be started on request transfer failure
     * @param {Object} request.scope A scope for the above `success` and `failure` callbacks
     * @return {Object} The request descriptor.
     */

    /**
     * @method cancelRequest
     * @abstract
     * Cancels request to the server.
     * @param {Object} request The request to cancel (a value returned by corresponding {@link #sendRequest} call).
     */

    /**
     * @method encode
     * @abstract
     * Encodes request to the server.
     * @param {Object} request The request to encode.
     * @returns {String} The encoded request.
     */

    /**
     * @method decode
     * @abstract
     * Decodes response from the server.
     * @param {String} response The response to decode.
     * @returns {Object} The decoded response.
     */

    transport               : null,

    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing to decide if a client needs a complete data reloading (`load` response)
     * or it's enough to provide delta (`sync` response).
     * @cfg {Boolean} trackResponseType
     */
    trackResponseType       : false,

    /**
     * @cfg {String} phantomIdField
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField          : '$PhantomId',

    /**
     * @cfg {Boolean} autoLoad
     * `true` to automatically call {@link #load} method after creation.
     */
    autoLoad                : false,

    /**
     * @cfg {Integer} autoSyncTimeout
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when {@link #autoSync} is set to `true`.
     */
    autoSyncTimeout         : 100,
    /**
     * @cfg {Boolean} autoSync
     * `true` to automatically persist stores changes after every edit to any of stores records.
     * Please note that sync request will not be invoked immediately but only after {@link #autoSyncTimeout} interval.
     */
    autoSync                : false,

    /**
     * @cfg {Boolean} resetIdsBeforeSync
     * `True` to reset identifiers (defined by `idProperty` config) of phantom records before submitting them to the server.
     */
    resetIdsBeforeSync      : true,

    /**
     * @property {Object[]} syncApplySequence
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a _store descriptor_, an object having following structure:
     * @property {String} syncApplySequence.storeId Unique store identifier.
     * @property {Ext.data.Store/Ext.data.TreeStore} syncApplySequence.store Store itself.
     * @property {String} [syncApplySequence.phantomIdField] Set this if store model has a predefined field to keep phantom record identifier.
     * @property {String} [syncApplySequence.idProperty] id field name, if it's not specified then class will try to get it from a store model.
     */

    /**
     * @cfg {String[]} syncApplySequence
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default the order in which sync responses are applied to the stores is the same as they registered in.
     * But in case of some tricky dependencies between stores this order can be changed:

            Ext.create('MyCrudManager', {
                // register stores (they will be loaded in the same order: 'store1' then 'store2' and finally 'store3')
                stores : ['store1', 'store2', 'store3'],
                // but we apply changes from server to them in an opposite order
                syncApplySequence : ['store3', 'store2', 'store1']
            });

     */
    syncApplySequence       : null,

    /**
     * @cfg {Boolean} writeAllFields true to write all fields from the record to the server.
     * If set to false it will only send the fields that were modified.
     * Note that any fields that have Ext.data.field.Field.persist set to false will still be
     * ignored while those with Ext.data.field.Field.critical set to true will be included.
     */
    writeAllFields          : false,

    ignoreUpdates           : 0,

    createMissingRecords    : false,
    autoSyncTimerId         : null,


    constructor : function (config) {

        config = config || {};

        this.mixins.observable.constructor.call(this, config);

        this.activeRequests     = {};
        this.delayedSyncs       = [];
        this.transport          = config.transport || this.transport || {};

        // support stores defined in the class prototype as well
        var stores              = config.stores || this.stores;
        this.stores             = [];
        this.addStore(stores);

        var syncApplySequence   = config.syncApplySequence || this.syncApplySequence;
        if (syncApplySequence) {
            // reset this.syncApplySequence since addStoreToApplySequence() will build it
            this.syncApplySequence  = null;
            this.addStoreToApplySequence(syncApplySequence);
        }

        if (this.autoLoad) this.load();
    },


    updateStoreIndex : function () {
        var storesIndex = {};

        for (var i = 0, l = this.stores.length; i < l; i++) {
            var store   = this.stores[i];
            if (store.storeId) {
                storesIndex[store.storeId] = this.stores[i];
            }
        }

        this.storesIndex = storesIndex;
    },

    /**
     * Returns a registered store descriptor.
     * @param {String/Ext.data.AbstractStore} storeId The store identifier or registered store instance.
     * @returns {Object} The descriptor of the store.
     * Store descriptor is an object having following structure:
     *
     *  - `storeId` The store identifier that will be used as a key in requests.
     *  - `store` The store itself.
     *  - `idProperty` The idProperty of the store.
     *  - `phantomIdField` The field holding unique Ids of phantom records (if store has such model).
     */
    getStoreDescriptor : function (storeId) {
        if (!storeId) return;

        if (storeId instanceof Ext.data.AbstractStore) {
            for (var i = 0, l = this.stores.length; i < l; i++) {
                if (this.stores[i].store === storeId) return this.stores[i];
            }

        } else if (typeof storeId == 'object') {
            return this.storesIndex[storeId.storeId];

        } else {
            return this.storesIndex[storeId] || this.getStoreDescriptor(Ext.data.StoreManager.get(storeId));
        }
    },

    /**
     * Returns a registered store.
     * @param {String} storeId Store identifier.
     * @returns {Ext.data.AbstractStore} Found store instance.
     */
    getStore : function (storeId) {
        var storeInfo = this.getStoreDescriptor(storeId);
        return storeInfo && storeInfo.store;
    },

    forEachStore : function (fn, scope) {
        if (!fn) return;

        var stores  = this.stores;

        for (var i = 0, l = stores.length; i < l; i++) {
            if (fn.call(scope || this, stores[i].store, stores[i].storeId, stores[i]) === false) break;
        }
    },


    /**
     * Adds a store to the collection.

    // append stores to the end of collection
    crudManager.addStore([
        store1,
        // storeId
        'bar',
        // store descriptor
        {
            storeId : 'foo',
            store   : store3
        },
        {
            storeId         : 'bar',
            store           : store4,
            // to write all fields of modified records
            writeAllFields  : true
        }
    ]);

     * **Note:** Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * @param {Ext.data.AbstractStore/String/Object/Ext.data.AbstractStore[]/String[]/Object[]} store
     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.
     * The _store descriptor_ is an object having following properties:
     * @param {String} store.storeId The store identifier that will be used as a key in requests.
     * @param {Ext.data.AbstractStore} store.store The store itself.
     * @param {String} [store.idProperty] The idProperty of the store. If not specified will be taken from the store model.
     * @param {String} [store.phantomIdField] The field holding unique Ids of phantom records (if store has such model).
     * @param {Boolean} [store.writeAllFields] Set to true to write all fields from modified records
     * @param {Integer} [position] The relative position of the store. If `fromStore` is specified the this position will be taken relative to it.
     * If not specified then store(s) will be appended to the end of collection.
     * Otherwise it will be just a position in stores collection.

        // insert stores store4, store5 to the start of collection
        crudManager.addStore([ store4, store5 ], 0);

     * @param {String/Ext.data.AbstractStore/Object} [fromStore] The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of {@link #getStoreDescriptor} call).

        // insert store6 just before a store having storeId equal to 'foo'
        crudManager.addStore(store6, 0, 'foo');

        // insert store7 just after store3 store
        crudManager.addStore(store7, 1, store3);

     */
    addStore : function (store, position, fromStore) {
        if (!store) return;

        if (!Ext.isArray(store)) store = [store];

        var data    = [];

        // loop over list of stores to be added
        for (var i = 0, l = store.length; i < l; i++) {
            var storeInfo   = store[i];

            // if store instance provided
            if (storeInfo instanceof Ext.data.AbstractStore) {
                storeInfo  = { store : storeInfo };

            } else if (typeof storeInfo == 'object') {
                // normalize sub-stores (if any)
                if (storeInfo.stores) {
                    if (!Ext.isArray(storeInfo.stores)) storeInfo.stores = [storeInfo.stores];

                    for (var j = 0, n = storeInfo.stores.length; j < n; j++) {
                        var subStore        = storeInfo.stores[j],
                            subStoreInfo    = subStore;

                        if ('string' === typeof subStore) {
                            subStoreInfo  = { storeId : subStore };
                        }

                        // keep reference to the "master" store descriptor
                        subStoreInfo.masterStoreInfo = storeInfo;

                        storeInfo.stores[j] = subStoreInfo;
                    }
                }

            // if it's a store identifier
            } else {
                storeInfo  = { store : Ext.data.StoreManager.get(storeInfo) };
            }

            data.push( this.fillStoreDescriptor(storeInfo) );

            storeInfo.store.crudManager = this;

            // listen to stores' changes
            this.mon(storeInfo.store, {
                add     : this.onStoreChange,
                append  : this.onStoreChange,
                insert  : this.onStoreChange,
                update  : this.onStoreUpdate,
                remove  : this.onStoreChange,
                clear   : this.onStoreChange,
                scope   : this
            });
        }

        // if no position specified then append stores to the end
        if (typeof position === 'undefined') {

            this.stores.push.apply(this.stores, data);

        // if position specified
        } else {
            var pos = position;
            // if specified the store relative to which we should insert new one(-s)
            if (fromStore) {
                if (fromStore instanceof Ext.data.AbstractStore || typeof fromStore !== 'object') fromStore = this.getStoreDescriptor(fromStore);
                // get its position
                pos += Ext.Array.indexOf(this.stores, fromStore);
            }
            // insert new store(-s)
            this.stores.splice.apply(this.stores, [].concat([pos, 0], data));
        }

        this.updateStoreIndex();
    },


    fillStoreDescriptor : function (descriptor) {
        var store           = descriptor.store,
            storeIdProperty = store.storeIdProperty || this.storeIdProperty,
            model           = store.getModel && store.getModel() || store.model;

        model   = model && model.prototype;

        Ext.applyIf(descriptor, {
            storeId         : store[storeIdProperty],
            phantomIdField  : model && model.phantomIdField,
            idProperty      : model && model.idProperty,
            writeAllFields  : store.writeAllFields
        });

        return descriptor;
    },


    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.

    // remove store having storeId equal to "foo"
    crudManager.removeStore("foo");

    // remove store3
    crudManager.removeStore(store3);

     * @param {Object/String/Ext.data.AbstractStore} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStore : function (store) {
        for (var i = 0, l = this.stores.length; i < l; i++) {
            var s   = this.stores[i];
            if (s === store || s.store === store || s.storeId === store) {

                // un-listen to store changes
                this.mun(s.store, {
                    add     : this.onStoreChange,
                    append  : this.onStoreChange,
                    insert  : this.onStoreChange,
                    update  : this.onStoreUpdate,
                    remove  : this.onStoreChange,
                    clear   : this.onStoreChange,
                    scope   : this
                });

                delete this.storesIndex[s.storeId];
                this.stores.splice(i, 1);
                if (this.syncApplySequence) {
                    this.removeStoreFromApplySequence(store);
                }

                break;
            }
        }
    },

    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using {@link #syncApplySequence} option
     * or but calling this method.
     *
     * **Please note**, that if the sequence was not initialized before this method call then
     * you will have to do it yourself like this for example:

        // alternative sequence was not set for this crud manager
        // so let's fill it with existing stores keeping the same order
        crudManager.addStoreToApplySequence(crudManager.stores);

        // and now we can add our new store

        // we will load its data last
        crudManager.addStore(someNewStore);
        // but changes to it will be applied first
        crudManager.addStoreToApplySequence(someNewStore, 0);

     * add registered stores to the sequence along with the store(s) you want to add
     *
     * @param {Ext.data.AbstractStore/Object/Ext.data.AbstractStore[]/Object[]} store The store to add or its _descriptor_ (or array of stores or descriptors).
     * Where _store descriptor_ is an object having following properties:
     * @param {String} store.storeId The store identifier that will be used as a key in requests.
     * @param {Ext.data.AbstractStore} store.store The store itself.
     * @param {String} [store.idProperty] The idProperty of the store. If not specified will be taken from the store model.
     * @param {String} [store.phantomIdField] The field holding unique Ids of phantom records (if store has such model).

     * @param {Integer} [position] The relative position of the store. If `fromStore` is specified the this position will be taken relative to it.
     * If not specified then store(s) will be appended to the end of collection.
     * Otherwise it will be just a position in stores collection.

        // insert stores store4, store5 to the start of sequence
        crudManager.addStoreToApplySequence([ store4, store5 ], 0);

     * @param {String/Ext.data.AbstractStore/Object} [fromStore] The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of {@link #getStoreDescriptor} call).

        // insert store6 just before a store having storeId equal to 'foo'
        crudManager.addStoreToApplySequence(store6, 0, 'foo');

        // insert store7 just after store3 store
        crudManager.addStoreToApplySequence(store7, 1, store3);

     */
    addStoreToApplySequence : function (store, position, fromStore) {
        if (!store) return;

        if (!Ext.isArray(store)) store = [store];

        var data = [];
        // loop over list of stores to add
        for (var i = 0, l = store.length; i < l; i++) {
            var s   = this.getStoreDescriptor(store[i]);
            if (s) data.push(s);
        }

        if (!this.syncApplySequence) this.syncApplySequence = [];

        // if no position specified then append stores to the end
        if (typeof position === 'undefined') {
            this.syncApplySequence.push.apply(this.syncApplySequence, data);

        // if position specified
        } else {
            var pos = position;
            // if specified the store relative to which we should insert new one(-s)
            if (fromStore) {
                if (fromStore instanceof Ext.data.AbstractStore || typeof fromStore !== 'object') fromStore = this.getStoreDescriptor(fromStore);
                // get its position
                pos += Ext.Array.indexOf(this.syncApplySequence, fromStore);
            }
            // insert new store(-s)
            this.syncApplySequence.splice.apply(this.syncApplySequence, [].concat([pos, 0], data));
        }
    },


    /**
     * Removes a store from the alternative sync sequence.

    // remove store having storeId equal to "foo"
    crudManager.removeStore("foo");

    // remove store3
    crudManager.removeStore(store3);

     * @param {Object/String/Ext.data.AbstractStore} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence : function (store) {
        for (var i = 0, l = this.syncApplySequence.length; i < l; i++) {
            var s   = this.syncApplySequence[i];
            if (s === store || s.store === store || s.storeId === store) {
                this.syncApplySequence.splice(i, 1);
                break;
            }
        }
    },


    onStoreUpdate : function (store, record) {
        if (!store.isTreeStore || record !== store.getRoot()) {
            this.onStoreChange();
        }
    },


    onStoreChange : function () {
        if (this.ignoreUpdates) return;

        var me  = this;

        /**
         * @event haschanges
         * Fires when some of registered stores records gets changed.

        crudManager.on('haschanges', function (crud) {
            // enable persist changes button when some store gets changed
            saveButton.enable();
        });

         * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
         */

        this.fireEvent(this.hasChanges() ? 'haschanges' : 'nochanges', this);

        if (this.autoSync) {
            // add deferred call if it's not scheduled yet
            if (!this.autoSyncTimerId) {
                this.autoSyncTimerId    = setTimeout(function() {
                    me.autoSyncTimerId  = null;
                    me.sync();
                }, this.autoSyncTimeout);
            }
        }
    },

    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.

    // if we have any unsaved changes
    if (crudManager.hasChanges()) {
        // persist them
        crudManager.sync();
    // otherwise
    } else {
        alert("There are no unsaved changes...");
    }

     * @param {String/Ext.data.AbstractStore} [storeId] The store identifier or store instance to check changes for.
     * If not specified then will check changes for all of the registered stores.
     * @returns {Boolean} `true` if there are not persisted changes.
     */
    hasChanges : function (storeId) {
        var store;

        if (storeId) {
            store   = this.getStore(storeId);
            if (!store) return;

            return Boolean(store.getModifiedRecords().length || store.getRemovedRecords().length);
        }

        for (var i = 0, l = this.stores.length; i < l; i++) {
            store   = this.stores[i].store;
            if (store.getModifiedRecords().length || store.getRemovedRecords().length) return true;
        }

        return false;
    },


    getLoadPackage : function (options) {
        var pack    = {
            type        : 'load',
            requestId   : this.getRequestId(),
            stores      : []
        };

        var stores      = this.stores,
            packStores  = pack.stores;

        for (var i = 0, l = stores.length; i < l; i++) {

            var store       = stores[i],
                opts        = options && options[store.storeId],
                pageSize    = store.pageSize || store.store.pageSize;

            if (opts || pageSize) {

                var params  = Ext.apply({
                    storeId     : store.storeId,
                    page        : 1,
                    pageSize    : pageSize
                }, opts);

                stores[i].currentPage   = params.page;

                packStores.push(params);

            } else {

                packStores.push(store.storeId);

            }
        }

        return pack;
    },

    prepareAdded : function (list, phantomIdField, stores) {
        var result  = [];

        for (var i = 0, l = list.length; i < l; i++) {
            var record  = list[i],
                data    = {},
                fields  = record.getFields();

            if (!data.hasOwnProperty(phantomIdField)) {
                data[phantomIdField]    = record.getId();
            }

            for (var f = 0, fLen = fields.length; f < fLen; f++) {
                var field   = fields[f];

                if (field) {
                    if (field.persist && (record.data.hasOwnProperty(field.name) || field.critical)) {
                        if (field.serialize) {
                            data[field.name]    = field.serialize(record.data[field.name], record);
                        } else {
                            data[field.name]    = record.data[field.name];
                        }
                    }
                }
            }

            if (this.resetIdsBeforeSync) delete data[record.idProperty];

            // if the store has embedded ones
            if (stores) {
                this.processSubStores(record, data, stores);
            }

            result.push(data);
        }

        return result;
    },

    prepareUpdated : function (list, stores, storeInfo) {
        var result          = [],
            writeAllFields  = storeInfo.writeAllFields || (storeInfo.writeAllFields !== false && this.writeAllFields),
            data, field;

        for (var i = 0, l = list.length; i < l; i++) {
            var record      = list[i],
                f;

            if (writeAllFields) {
                //write all fields
                data        = record.getData();
                data[record.idProperty] = record.getId();

                for (f in data) {
                    field   = record.getField(f);

                    // remove not persistable/critical fields
                    if (!field || !field.persist && !field.critical) {
                        delete data[f];
                    } else if (field.serialize) {
                        data[f]    = field.serialize(data[f], record);
                    } else {
                        data[f]    = record.get(f);
                    }
                }
            } else {
                data        = record.getChanges();
                data[record.idProperty] = record.getId();

                // process fields to get rid of non-persistable ones
                // and use "serialize" when it's presented
                for (f in data) {
                    field   = record.getField(f);

                    if (!field || !field.persist) {
                        delete data[f];
                    } else if (field.serialize) {
                        data[f]    = field.serialize(data[f], record);
                    } else {
                        data[f]    = record.get(f);
                    }
                }

                // critical fields should always be presented
                var criticalFields  = record.getCriticalFields();

                for (var j = 0; j < criticalFields.length; j++) {
                    field   = criticalFields[j];

                    if (field.serialize) {
                        data[field.getName()] = field.serialize(record.get(field.getName()), record);
                    } else {
                        data[field.getName()] = record.get(field.getName());
                    }
                }
            }

            // if the store has embedded ones
            if (stores) {
                this.processSubStores(record, data, stores);
            }

            result.push(data);
        }

        return result;
    },

    prepareRemoved : function (list) {
        var result  = [], data;

        for (var i = 0, l = list.length; i < l; i++) {
            data    = {};
            data[list[i].idProperty] = list[i].getId();

            result.push(data);
        }

        return result;
    },

    processSubStores : function (record, data, stores) {
        for (var j = 0, n = stores.length; j < n; j++) {
            var id      = stores[j].storeId,
                store   = record.get(id);
            // if embedded store is assigned to the record
            if (store) {
                // let's collect its changes as well
                var changes     = this.getStoreChanges(Ext.apply({ store : store }, stores[j]));

                if (changes) {
                    data[id]    = Ext.apply(changes, { $store : true });
                } else {
                    delete data[id];
                }
            } else {
                delete data[id];
            }
        }
    },

    getStoreChanges : function (store, phantomIdField) {

        phantomIdField  = phantomIdField || store.phantomIdField || this.phantomIdField;

        var s           = store.store,
            added       = s.getNewRecords(),
            updated     = s.getUpdatedRecords(),
            removed     = s.getRemovedRecords(),
            // sub-stores
            stores      = store.stores;

        var result;

        if (added.length) added       = this.prepareAdded(added, phantomIdField, stores);
        if (updated.length) updated   = this.prepareUpdated(updated, stores, store);
        if (removed.length) removed   = this.prepareRemoved(removed);

        // if this store has changes
        if (added.length || updated.length || removed.length) {

            result  = {};

            if (added.length) result.added       = added;
            if (updated.length) result.updated   = updated;
            if (removed.length) result.removed   = removed;
        }

        return result;
    },


    getChangeSetPackage : function () {
        var pack    = {
            type        : 'sync',
            requestId   : this.getRequestId(),
            revision    : this.revision
        };

        var stores  = this.stores,
            found   = 0;

        for (var i = 0, l = stores.length; i < l; i++) {
            var store           = stores[i],
                phantomIdField  = store.phantomIdField || this.phantomIdField,
                storeId         = store.storeId;

            var changes = this.getStoreChanges(store, phantomIdField);
            if (changes) {
                found++;

                pack[storeId]   = changes;
            }
        }

        return found ? pack : null;
    },


    getSubStoresData : function (rows, subStores, idProperty, isTree) {
        if (!rows) return;

        var result = [];

        var processRow  = function (row, subStores) {
            for (var j = 0, m = subStores.length; j < m; j++) {
                var storeId = subStores[j].storeId;
                // if row contains data for this sub-store
                if (row[storeId]) {
                    // keep them for the later loading
                    result.push({
                        id          : row[idProperty],
                        storeDesc   : subStores[j],
                        data        : row[storeId]
                    });
                    // and remove reference from the row
                    delete row[storeId];
                }
            }
        };

        var i = 0, l = rows.length;

        // if it's a TreeStore
        if (isTree) {
            // loop over nodes
            for (; i < l; i++) {
                processRow(rows[i], subStores);

                // also let's grab sub-stores from node children
                var childrenSubData = this.getSubStoresData(rows[i].children, subStores, idProperty, true);
                if (childrenSubData) {
                    result  = result.concat(childrenSubData);
                }
            }
        // if it's a "flat" store
        } else {
            for (; i < l; i++) processRow(rows[i], subStores);
        }

        return result;
    },


    loadDataToStore : function (storeDesc, data) {
        var store       = storeDesc.store,
            // nested stores list
            subStores   = storeDesc.stores,
            idProperty  = storeDesc.idProperty || 'id',
            isTree      = store instanceof Ext.data.TreeStore,
            subData;

        var rows        = data && data.rows;

        // apply server provided meta data to the store
        store.metaData  = data && data.metaData;

        if (rows) {
            if (subStores) subData  = this.getSubStoresData(rows, subStores, idProperty, isTree);

            store.__loading         = true;

            if (isTree) {
                store.proxy.data    = rows;
                store.load();
            } else {
                store.totalCount    = data.total;
                store.currentPage   = storeDesc.currentPage;
                store.loadData(rows);

                store.fireEvent('load', store, store.getRange(), true);
            }

            if (subData) {
                // load sub-stores as well (if we have them)
                for (var i = 0, l = subData.length; i < l; i++) {
                    var subDatum  = subData[i];

                    this.loadDataToStore(
                        Ext.apply({
                            store   : store[isTree ? 'getNodeById' : 'getById'](subDatum.id).get(subDatum.storeDesc.storeId)
                        }, subDatum.storeDesc),
                        subDatum.data
                    );
                }
            }

            store.__loading         = false;
        }
    },


    loadData : function (response) {
        // we load data to the stores in the order they're kept in this.stores array
        for (var i = 0, l = this.stores.length; i < l; i++) {
            var storeDesc   = this.stores[i],
                data        = response[storeDesc.storeId];

            if (data) this.loadDataToStore(storeDesc, data);
        }
    },


    applyChangesToRecord : function (record, changes, stores) {
        var fields      = record.fields,
            data        = record.data,
            done        = {},
            editStarted = false,
            name;


        // if this store has sub-stores assigned to some fields
        if (stores) {
            // then first we apply changes to that stores
            for (var j = 0, n = stores.length; j < n; j++) {
                name    = stores[j].storeId;

                if (changes.hasOwnProperty(name)) {
                    // remember that we processed this field
                    done[name]  = true;
                    var store   = record.get(name);

                    if (store) {
                        this.applyChangesToStore(Ext.apply({ store : store }, stores[j]), changes[name]);
                    } else {
                        Ext.log("Can't find store for the response sub-package");
                    }
                }
            }
        }

        // here we apply all the `changes` properties to the record
        // since in ExtJS 5 for some reason `fields` is not populated with items enumerated in store.fields config
        //for (var i = 0, l = fields.length; i < l; i++) {
        //    name    = fields[i].getName();
        for (name in changes) {

            if (changes.hasOwnProperty(name) && !done[name]) {
                var value   = changes[name];

                if (!record.isEqual(data[name], value)) {
                    // we call beginEdit/endEdit only if real changes were applied
                    if (!editStarted) {
                        editStarted     = true;
                        record.beginEdit();
                    }
                    // for the record ID we will use setId() call
                    if (name === record.idProperty) {
                        record.setId(value);
                    } else {
                        record.set(name, value);
                    }
                }
            }
        }

        this.ignoreUpdates++;

        // we call beginEdit/endEdit only if real changes were applied
        if (editStarted) record.endEdit();

        this.ignoreUpdates--;

        record.commit();
    },

    applyRemovals : function (store, removed, context) {

        var idProperty      = context.idProperty,
            removedStash    = store.getRemovedRecords(),
            findByIdFn      = context.findByIdFn,
            removeRecordFn  = context.removeRecordFn,
            applied         = 0;

        for (var j = 0, k = removed.length; j < k; j++) {
            var done    = false;
            var id      = removed[j][idProperty];

            // just find the record in store.removed array and delete it from there
            for (var jj = 0, kk = removedStash.length; jj < kk; jj++) {
                if (removedStash[jj].getId() == id) {
                    removedStash.splice(jj, 1);
                    done    = true;
                    // number of removals applied
                    applied++;
                    break;
                }
            }

            // if responded removed record isn`t found in store.removed
            // probably don't removed on the client side yet (server driven removal)
            if (!done) {
                var record  = findByIdFn(id);

                if (record) {
                    this.ignoreUpdates++;

                    removeRecordFn(record);

                    Ext.Array.remove(removedStash, record);
                    // number of removals applied
                    applied++;

                    this.ignoreUpdates--;
                } else {
                    Ext.log("Can't find record to remove from the response package");
                }
            }
        }

        return applied;
    },

    applyChangesToStore : function (store, storeResponse) {
        var j, k, id;

        var phantomIdField  = store.phantomIdField || this.phantomIdField,
            idProperty      = store.idProperty,
            s               = store.store;

        if (!idProperty) {
            var model   = s.getModel && s.getModel() || s.model;
            model       = model && model.prototype;
            idProperty  = model && model.idProperty || 'id';
        }

        // TODO: this might need to be refactored taking Sch.data.mixin.UniversalModelGetter methods into account
        var findByKey   = function (id) { return s.data.getByKey(id); },
            findById    = function (id) { return s.getById(id); },
            findNode    = function (id) { return s.getNodeById(id); },
            addRecordFn, removeRecordFn;

        var findByPhantomFn, findByIdFn;

        // if it's a tree store
        if (s instanceof Ext.data.TreeStore) {
            findByPhantomFn = findByIdFn = findNode;

            addRecordFn     = function (data) {
                var parent  = (data.parentId && s.getNodeById(data.parentId)) || s.getRootNode();

                return parent.appendChild(data);
            };

            removeRecordFn  = function (record) {
                return record.parentNode.removeChild(record);
            };

        // plain store
        } else {
            findByPhantomFn = findByKey;
            findByIdFn      = findById;
            addRecordFn     = function (data) { return s.add(data)[0]; };
            removeRecordFn  = function (record) { return s.remove(record); };
        }

        var rows    = storeResponse.rows,
            removed = storeResponse.removed,
            record;

        // process added/updated records
        if (rows) {

            var data, phantomId,
                // sub-stores
                stores  = store.stores;

            for (j = 0, k = rows.length; j < k; j++) {
                data        = rows[j];
                phantomId   = data[phantomIdField];
                id          = data[idProperty];
                record      = null;

                // if phantomId is provided then we will use it to find added record
                if (phantomId != null) {

                    record  = findByPhantomFn(phantomId);

                // if id is provided then we will use it to find updated record
                } else if (idProperty) {

                    record  = findByIdFn(id);

                }

                if (record) {
                    this.applyChangesToRecord(record, data, stores);
                } else {
                    this.ignoreUpdates++;

                    // create new record in the store
                    record  = addRecordFn(data);

                    this.ignoreUpdates--;

                    record.commit();
                }
            }
        }

        // process removed records
        if (removed && this.applyRemovals(s, removed, {
            idProperty      : idProperty,
            findByIdFn      : findByIdFn,
            removeRecordFn  : removeRecordFn
        })) {
            s.fireEvent('datachanged', s);
        }
    },


    applySyncResponse : function (response) {
        // we apply received changes to the stores in the order they're kept in either this.syncApplySequence or this.stores array
        var stores  = this.syncApplySequence || this.stores;
        for (var i = 0, l = stores.length; i < l; i++) {
            var storeResponse   = response[stores[i].storeId];

            if (storeResponse) {
                this.applyChangesToStore(stores[i], storeResponse);
            }
        }
    },


    applyLoadResponse : function (response) {
        this.loadData(response);
    },


    applyResponse : function (requestType, response) {
        // in trackResponseType we check response type before deciding how to react on the response
        if (this.trackResponseType) {
            requestType = response.type || requestType;
        }

        switch (requestType) {
            case 'load' : this.applyLoadResponse(response); break;
            case 'sync' : this.applySyncResponse(response); break;
        }
    },


    /**
     * Generates unique request identifier.
     * @protected
     * @template
     * @return {Integer} The request identifier.
     */
    getRequestId : function () {
        // TODO: this is not very reliable, two calls to this method withing one ms will ruin the logic
        return Ext.Date.now();
    },


    onResponse : function (requestType, rawResponse, responseOptions) {
        // reset last requested package ID
        this.activeRequests[requestType]    = null;

        var response    = this.decode(rawResponse);

        if (!response || !response.success) {

            /**
             * @event requestfail
             * Fires when a request gets failed.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {String} requestType The request type (`sync` or `load`).
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The response options.
             */
            this.fireEvent('requestfail', this, requestType, response, responseOptions);
            /**
             * @event loadfail
             * Fires when {@link #load load request} gets failed.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The response options.
             */
            /**
             * @event syncfail
             * Fires when {@link #sync sync request} gets failed.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The response options.
             */
            this.fireEvent(requestType+'fail', this, response, responseOptions);

            this.warn('CrudManager: '+requestType+' failed, please inspect the server response', rawResponse);

            return response;
        }

        /**
         * @event beforeresponseapply
         * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
         * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
         * @param {String} requestType The request type (`sync` or `load`).
         * @param {Object} response The decoded server response object.
         */
        /**
         * @event beforeloadapply
         * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
         * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
         * @param {Object} response The decoded server response object.
         */
        /**
         * @event beforesyncapply
         * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
         * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
         * @param {Object} response The decoded server response object.
         */
        if ((this.fireEvent('beforeresponseapply', this, requestType, response) !== false) && (this.fireEvent('before'+requestType+'apply', this, response) !== false)) {

            this.revision = response.revision;

            this.applyResponse(requestType, response);

            /**
             * @event requestdone
             * Fires on successful request completion after data gets applied to the stores.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {String} requestType The request type (`sync` or `load`).
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The server response options.
             */
            this.fireEvent('requestdone', this, requestType, response, responseOptions);
            /**
             * @event load
             * Fires on successful {@link #load load request} completion after data gets loaded to the stores.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The server response options.
             */
            /**
             * @event sync
             * Fires on successful {@link #sync sync request} completion.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The server response options.
             */
            this.fireEvent(requestType, this, response, responseOptions);

            if (!this.hasChanges()) {
                /**
                 * @event nochanges
                 * Fires when registered stores get into state when they don't have any
                 * not persisted change. This happens after {@link #method-load load} or {@link #method-sync sync} request
                 * completion. Or this may happen after a record update which turns its fields back to their original state.

                crudManager.on('nochanges', function (crud) {
                    // disable persist changes button when there is no changes
                    saveButton.disable();
                });

                 * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
                 */
                this.fireEvent('nochanges', this);
            }
        }

        return response;
    },


    onLoad : function (rawResponse, responseOptions) {
        return this.onResponse('load', rawResponse, responseOptions);
    },


    onSync : function (rawResponse, responseOptions) {
        return this.onResponse('sync', rawResponse, responseOptions);
    },

    /**
     * Loads data to the stores registered in the crud manager. For example:

        crudManager.load(
            // here are request parameters
            {
                store1 : { page : 3, smth : 'foo' },
                store2 : { page : 2, bar : '!!!' }
            },
            // here is callback
            function () { alert('OMG! It works!') },
            // here is errback
            function (response) { alert('Oops: '+response.message); }
        );

     * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by {@link #cancelRequest} calling.

     * @param {Object} [parameters] The request parameters. This argument can be omitted like this:

        crudManager.load(
            // here is callback
            function () { alert('OMG! It works!') },
            // here is errback
            function (response) { alert('Oops: '+response.message); }
        );

     * When presented it should be an object where keys are store Ids and values are, in turn, objects
     * of parameters related to the corresponding store. And these parameters will be transferred with a load request.

            {
                store1 : { page : 3, smth : 'foo' },
                store2 : { page : 2, bar : '!!!' }
            },

     * @param {Function} [callback] An optional callback to be started on successful request completion.
     * There is also a {@link #event-load load} event which can be used for load request completion processing.
     * @param {Function} [errback] A callback to be started on request failure.
     * There is also an {@link #loadfail} event which can be used for load request failures processing.
     * @param {Object/Function} [scope] A scope to be used for `callback` and `errback` calls.
     */
    load : function (callback, errback, scope) {
        var options;

        if (typeof callback === 'object') {
            options     = callback;
            callback    = errback;
            errback     = scope;
            scope       = arguments[3];
        }

        var pack    = this.getLoadPackage(options);

        /**
         * @event beforeload
         * Fires before {@link #load load request} is sent. Return `false` to cancel load request.
         * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
         * @param {Object} request The request object.
         */
        if (this.fireEvent('beforeload', this, pack) !== false) {
            scope   = scope || this;

            // if another load request is in progress let's cancel it
            if (this.activeRequests.load) {
                this.cancelRequest(this.activeRequests.load.desc);

                this.fireEvent('loadcanceled', this, pack);
            }

            this.activeRequests.load = { id : pack.requestId };

            this.activeRequests.load.desc = this.sendRequest({
                data        : this.encode(pack),
                type        : 'load',
                success     : function (rawResponse, responseOptions) {
                    var response = this.onLoad(rawResponse, responseOptions);

                    if (errback && (!response || !response.success)) {
                        errback.call(scope, response, rawResponse);

                    } else if (callback) {
                        callback.call(scope, response, rawResponse);
                    }
                },
                failure     : function (rawResponse, responseOptions) {
                    this.onLoad(rawResponse, responseOptions);

                    if (errback) errback.apply(scope, arguments);
                },
                scope       : this
            });
        // if loading was canceled let's fire event
        } else {
            /**
             * @event loadcanceled
             * Fired after {@link #load load request} was canceled by some {@link #beforeload} listener
             * or due to incomplete prior load request.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {Object} request The request object.
             */
            this.fireEvent('loadcanceled', this, pack);
        }
    },

    /**
     * Persists changes made on the registered stores to the server.
     * Request runs asynchronously so if user need to execute some code after request completion it has to be provided in the `callback` function:
     *
     *      // persist and run a callback on request completion
     *      sync(function(){ alert("Changes saved..."); }, function(response){ alert("Error: "+response.message); });
     *
     * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it until previous request completion.
     * In this case {@link #syncdelayed} event will be fired.
     *
     * ** Note: ** Please take a look at {@link #autoSync} config. This option allows to persist changes automatically after any data modification.
     *
     * @param {Function} [callback] A function to start on successful request completion.
     * There is also a {@link #event-sync sync} event which can be used for sync request completion processing.
     *
     * **Note:** If there is no changes to persist then callback will be started immediately without sending any request
     * and {@link #event-sync sync} event will not be fired.
     * @param {Function} [errback] A function to start on request failure.
     * There is also an {@link #syncfail} event which can be used for sync request failures processing.
     * @param {Object} [scope] A scope for above `callback` and `errback` functions.
     */
    sync : function (callback, errback, scope) {
        if (this.activeRequests.sync) {
            // let's delay this call and start it only after server response
            this.delayedSyncs.push(arguments);

            /**
             * @event syncdelayed
             * Fires after {@link #sync sync request} was delayed due to incomplete previous one.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {Object} arguments The arguments of {@link #sync} call.
             */
            this.fireEvent('syncdelayed', this, arguments);

            return;
        }

        // get current changes set package
        var pack    = this.getChangeSetPackage();

        scope       = scope || this;

        // if no data to persist we run callback and exit
        if (!pack) {
            if (callback) callback.call(scope, null, null);

            return;
        }

        /**
         * @event beforesync
         * Fires before {@link #sync sync request} is sent. Return `false` to cancel sync request.

        crudManager.on('beforesync', function() {
            // cannot persist changes before at least one record is added
            // to the `someStore` store
            if (!someStore.getCount()) return false;
        });

         * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
         * @param {Object} request The request object.
         */
        if (this.fireEvent('beforesync', this, pack) === false) {
            // if this sync was canceled let's fire event about it
            /**
             * @event synccanceled
             * Fires after {@link #sync sync request} was canceled by some {@link #beforesync} listener.
             * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
             * @param {Object} request The request object.
             */
            this.fireEvent('synccanceled', this, pack);

            return;
        }

        // keep active reaqest Id
        this.activeRequests.sync = { id : pack.requestId };

        // send sync package
        this.activeRequests.sync.desc = this.sendRequest({
            data        : this.encode(pack),
            type        : 'sync',
            success     : function (rawResponse, options) {
                var request     = this.activeRequests.sync;
                var response    = this.onSync(rawResponse, options);

                if (errback && (!response || !response.success)) {
                    errback.call(scope, response, rawResponse, request);

                } else if (callback) {
                    callback.call(scope, response, rawResponse, request);
                }

                // execute delayed sync() call
                this.runDelayedSync();
            },
            failure     :  function (rawResponse, options) {
                this.onSync(rawResponse, options);

                if (errback) errback.apply(scope, arguments);

                // execute delayed sync() call
                this.runDelayedSync();
            },
            scope       : this
        });
    },


    runDelayedSync : function () {
        var args  = this.delayedSyncs.shift();
        if (!args) return;

        this.sync.apply(this, args);
    },

    /**
     * Commits all records changes of all the registered stores.
     */
    commit : function () {
        for (var i = 0, l = this.stores.length; i < l; i++) {
            this.stores[i].store.commitChanges();
        }
    },

    /**
     * Rejects all records changes on all stores and re-insert any records that were removed locally. Any phantom records will be removed.
     */
    reject : function () {
        for (var i = 0, l = this.stores.length; i < l; i++) {
            this.stores[i].store.rejectChanges();
        }
    },

    warn : function() {
        if ('console' in window) {
            var c = console;
            c.log && c.log.apply && c.log.apply(c, arguments);
        }
    },

    // Used to help the UI know if the manager is already working and a loadmask should be shown when a consuming UI panel is created.
    isLoading               : function() {
        return !!this.activeRequests.load;
    }
});

/**
@class Sch.crud.transport.Ajax
@abstract
Implements data transferring functional that can be used for {@link Sch.crud.AbstractManager} super classing.
Uses AJAX as a transport system.

    // let's make new CrudManager using AJAX as a transport system and XML for encoding
    Ext.define('MyCrudManager', {
        extend  : 'Sch.crud.AbstractManager',

        mixins  : ['Sch.crud.encoder.Xml', 'Sch.crud.transport.Ajax']
    });

*/
Ext.define('Sch.crud.transport.Ajax', {

    /**
     * @cfg {Object} transport
     * Configuration of the AJAX requests used to communicate with a server-side.
     * An object where you can set the following possible properties:
     * @cfg {Object} transport.load Load requests configuration:
     * @cfg {String} transport.load.url URL to request for data loading.
     * @cfg {String} [transport.load.method='POST'] HTTP method to be used for load requests.
     * @cfg {String} [transport.load.paramName] Name of parameter in which a packet will be transfered. If not specified then a packet will be transfered in a request body (default).
     * @cfg {Object} [transport.load.params] Extra load request params if needed.
     * @cfg {Object} [transport.load.requestConfig] Ext.Ajax.request config. Can be used instead of above `url`, `method`, `params`:
     *
     *      transport   : {
     *          load    : {
     *              requestConfig : {
     *                  url             : 'http://some-url',
     *                  method          : 'GET',
     *                  // get rid of cache-buster parameter
     *                  disableCaching  : false,
     *                  // extra request parameters
     *                  params          : {
     *                      foo         : 'bar'
     *                  },
     *                  // custom request headers
     *                  headers         : {
     *                      ...
     *                  }
     *              }
     *          }
     *      }
     *
     * @cfg {Object} transport.sync Sync requests configuration:
     * @cfg {String} transport.sync.url URL to request for data persisting.
     * @cfg {String} [transport.sync.method='POST'] HTTP method to be used for sync requests.
     * @cfg {String} [transport.sync.paramName] Name of parameter in which a packet will be transfered. If not specified then a packet will be transfered in a request body (default).
     * @cfg {Object} [transport.sync.params] Extra sync request params if needed.
     * @cfg {Object} [transport.sync.requestConfig] Ext.Ajax.request config. Can be used instead of above `url`, `method`, `params`:
     *
     *      transport   : {
     *          sync    : {
     *              requestConfig : {
     *                  url             : 'http://some-url',
     *                  method          : 'GET',
     *                  // get rid of cache-buster parameter
     *                  disableCaching  : false,
     *                  // extra request parameters
     *                  params          : {
     *                      foo         : 'bar'
     *                  },
     *                  // custom request headers
     *                  headers         : {
     *                      ...
     *                  }
     *              }
     *          }
     *      }
     */

    defaultMethod   : {
        load    : 'GET',
        sync    : 'POST'
    },

    /**
     * Cancels sent request.
     * @param {Object} request The descriptor of request to be canceled. The _request descriptor_ is a value returned by corresponding {@link #sendRequest} call.
     */
    cancelRequest : function (request) {
        Ext.Ajax.abort(request);
    },

    /**
     * Sends request to the server.
     * @param {Object} request The request configuration object having following properties:
     * @param {String} request.data The encoded request.
     * @param {String} request.type The request type. Either `load` or `sync`.
     * @param {Function} request.success A function to be started on successful request transferring.
     * @param {Function} request.failure A function to be started on request transfer failure.
     * @param {Object} request.scope A scope for the above `success` and `failure` functions.
     * @return {Object} The request descriptor.
     */
    sendRequest : function (config) {
        var pack        = config.data,
            packCfg     = this.transport[config.type],
            paramName   = packCfg.paramName,
            params      = Ext.apply({}, packCfg && packCfg.params),
            method      = packCfg.method || this.defaultMethod[config.type];

        var requestConfig   = Ext.apply({
            url         : packCfg.url,
            method      : method,
            params      : params,
            failure     : config.failure,
            success     : function (response, options) {
                if (config.success) {
                    config.success.call(config.scope || this, response.responseXml || response.responseText);
                }
            },
            scope       : config.scope
        }, packCfg.requestConfig);

        // if no param name specified then we'll transfer package in the request body
        if (!paramName) {
            if (this.format === 'xml') {
                Ext.apply(requestConfig, { xmlData : pack });
            } else {
                Ext.apply(requestConfig, { jsonData : pack });
            }
        // ..otherwise we use parameter
        } else {
            requestConfig.params            = requestConfig.params || {};
            requestConfig.params[paramName] = pack;
        }

        /**
         * @event beforesend
         * Fires before a request is sent to the server.

        crudManager.on('beforesend', function (crud, params, requestType) {
            // let's set "sync" request parameters
            if (requestType == 'sync') {
                // dynamically depending on "flag" value
                if (flag) {
                    params.foo = 'bar';
                } else {
                    params.foo = 'smth';
                }
            }
        });

         * @param {Sch.crud.AbstractManager} crudManager The CRUD manager.
         * @param {Object} params Request params
         * @param {String} requestType Request type (`load`/`sync`)
         * @param {Object} requestConfig Configuration object for Ext.Ajax.request call
         */
        this.fireEvent('beforesend', this, params, config.type, requestConfig);

        return Ext.Ajax.request(requestConfig);
    }

});

/**
@class Sch.crud.encoder.Json
@abstract
Implements data encoding functional that should be mixed to a {@link Sch.crud.AbstractManager} sub-class.
Uses _JSON_ as an encoding system.

    // let's make new CrudManager using AJAX as a transport system and JSON for encoding
    Ext.define('MyCrudManager', {
        extend  : 'Sch.crud.AbstractManager',

        mixins  : ['Sch.crud.encoder.Json', 'Sch.crud.transport.Ajax']
    });

*/
Ext.define('Sch.crud.encoder.Json', {

    format  : 'json',

    /**
     * Encodes an request object to _JSON_ encoded string.
     * @param {Object} request The request to encode.
     */
    encode : function (request) {
        return Ext.JSON.encode(request);
    },

    /**
     * Decodes (parses) a _JSON_ response string to an object.
     * @param {Object} response The response to decode.
     */
    decode : function (response) {
        if (typeof response == 'object') return response;

        return Ext.JSON.decode(response, true);
    }

});

/**
@class Sch.crud.encoder.Xml
@abstract
Implements data encoding functional that should be mixed to a {@link Sch.crud.AbstractManager} sub-class.
Uses _XML_ as an encoding system.

    // let's make new CrudManager using AJAX as a transport system and XML for encoding
    Ext.define('MyCrudManager', {
        extend  : 'Sch.crud.AbstractManager',

        mixins  : ['Sch.crud.encoder.Xml', 'Sch.crud.transport.Ajax']
    });

# Request structure

Load request example:

    <load requestId="123890">
        <store id="store1" page="1" pageSize="10"/>
        <store id="store2"/>
        <store id="store3"/>
    </load>

Sync request:

    <sync requestId="123890" revision="123">
        <store id="store1">
            <added>
                <record>
                    <field id="$PhantomId">q1w2e3r4t5</field>
                    <field id="SomeField">smth</field>
                    ...
                </record>
                ...
            </added>
            <updated>
                <record>
                    <field id="Id">123</field>
                    <field id="SomeField">new value</field>
                    ...
                </record>
                ...
            </updated>
            <removed>
                <record>
                    <field id="Id">345</field>
                </record>
                ...
            </removed>
        </store>

        <store id="store2">
            <added>...</added>
            <updated>...</updated>
            <removed>...</removed>
        </store>
    </sync>

# Response structure

Load response example:

    <data requestId="123890" revision="123" success="true">

        <store id="store1">
            <rows total="5">
                <record>
                    <field id="Id">9000</field>
                    <field id="SomeField">xxxx</field>
                    ...
                </record>
                <record>
                    <field id="Id">123</field>
                    <field id="SomeField">yyyy</field>
                    ...
                </record>
            </rows>
        </store>

        <store id="store2">
            <rows total="2">
                <record>
                    <field id="Id">1</field>
                    <field id="Field1">aaa</field>
                    ...
                </record>
                <record>
                    <field id="Id">2</field>
                    <field id="Field1">bbb</field>
                    ...
                </record>
            </rows>
        </store>

        <store id="store3">
            <rows total="2">
                <record>
                    <field id="Id">1</field>
                    <field id="Field2">aaa</field>
                    ...
                </record>
                <record>
                    <field id="Id">2</field>
                    <field id="Field2">bbb</field>
                    ...
                </record>
            </rows>
        </store>
    </data>

Sync response:

    <data requestId="123890" success="true" revision="124">
        <store id="store1">
            <rows>
                <record>
                    <field id="$PhantomId">q1w2e3r4t5</field>
                    <field id="Id">9000</field>
                </record>
                <record>
                    <field id="Id">123</field>
                    <field id="SomeField2">2013-08-01</field>
                </record>
            </rows>
            <removed>
                <record>
                    <field id="Id">345</field>
                </record>
                ...
            </removed>
        </store>

        <store id="store2">
            <rows>...</rows>
            <removed>...</removed>
        </store>
    </data>

# Error response

    <data requestId="123890" success="true" code="13">
        <message>Error description goes here</message>
    </data>

*/
Ext.define("Sch.crud.encoder.Xml", {

    requires        : ['Ext.XTemplate'],

    format          : 'xml',

    stringReplaces  : [
        [ /&/g, '&amp;' ],
        [ /</g, '&lt;' ],
        [ />/g, '&gt;' ],
        [ /"/g, '&quot;' ]
    ],

    // Translates a string characters to XML safe ones
    encodeString : function (text) {
        if (!text) return text;

        var result      = text.toString(),
            replaces    = this.stringReplaces;
        for (var i = 0, l = replaces.length; i < l; i++) {
            result  = result.replace(replaces[i][0], replaces[i][1]);
        }

        return result;
    },

    encodeRecords : function (records) {
        var result = '';
        for (var i = 0, l = records.length; i < l; i++) {
            result += this.encodeRecord(records[i]);
        }
        return result;
    },

    encodeRecord : function (record) {
        var result = '<record>';

        for (var i in record) {
            var field   = record[i];

            result  += '<field id="' + this.encodeString(i) + '">' +
                (field && field.$store ? this.encodeStoreChanges({ storeId : i }, field) : this.encodeString(field)) +
                '</field>';
        }

        result += '</record>';

        return result;
    },

    encodeStoreChanges : function (store, changes) {
        var result = '<store id="' + this.encodeString(store.storeId) + '">';

        if (changes.added) {
            result += '<added>' + this.encodeRecords(changes.added) + '</added>';
        }
        if (changes.updated) {
            result += '<updated>' + this.encodeRecords(changes.updated) + '</updated>';
        }
        if (changes.removed) {
            result += '<removed>' + this.encodeRecords(changes.removed) + '</removed>';
        }

        result += '</store>';

        return result;
    },

    /**
     * Encodes an request object to _XML_ encoded string. The formats of requests are displayed in an intro.
     * @param {Object} request The request to encode.
     */
    encode : function (packet) {
        var result, i, l, store;

        switch (packet.type) {
            case 'load':
                result = '<load requestId="' + this.encodeString(packet.requestId) + '">';

                for (i = 0, l = packet.stores.length; i < l; i ++) {
                    store   = packet.stores[i];

                    if (typeof store === 'string') {
                        result += '<store id="' + this.encodeString(store) + '"/>';
                    } else {
                        result += '<store id="' + this.encodeString(store.storeId) + '" page="' +
                            this.encodeString(store.page) + '" pageSize="' + this.encodeString(store.pageSize) + '"/>';
                    }
                }

                result += '</load>';

                return result;

            case 'sync':
                result = '<sync requestId="' + this.encodeString(packet.requestId) + '" revision="' + this.encodeString(packet.revision) + '">';
                for (i in packet) {
                    if (packet.hasOwnProperty(i)) {
                        store   = this.getStore(i);

                        if (store) {
                            result += this.encodeStoreChanges(store, packet[i]);
                        }
                    }
                }
                result += '</sync>';
                break;
        }

        return result;
    },


    stringToXML : function (text) {
        if (!text) return;

        var document;
        
        /*global DOMParser: false, ActiveXObject: false */

        if (window.DOMParser) {
            document    = (new DOMParser()).parseFromString(text, 'text/xml');
        } else if (window.ActiveXObject) {
            document        = new ActiveXObject('Microsoft.XMLDOM');
            document.async  = false;
            document.loadXML(text);
        }

        return document;
    },


    decodeRecords : function (rows) {
        var result   = [];

        for (var j = 0, m = rows.length; j < m; j++) {
            result.push( this.decodeRecord(rows[j]) );
        }

        return result;
    },


    decodeRecord : function (node) {
        var fields  = node.childNodes,
            result  = {},
            value;

        for (var i = 0, l = fields.length; i < l; i++) {
            var field   = fields[i];

            if (field.nodeName == 'field') {

                value       = '';

                if (field.firstChild) {
                    var store   = this.getElementByTagName(field, 'store');

                    value       = store ? this.decodeStore(store) : field.firstChild.nodeValue;
                }

                result[field.getAttribute('id')]    = value;
            }
        }

        return result;
    },

    // search specified nodes only in a first level of children
    getElementsByTagName : function (node, name) {
        var children    = node.childNodes,
            records     = [];

        for (var i = 0, l = children.length; i < l; i++) {
            if (children[i].nodeName == name) records.push(children[i]);
        }

        return records;
    },

    getElementByTagName : function (node, name) {
        var children    = node.childNodes;

        for (var i = 0, l = children.length; i < l; i++) {
            if (children[i].nodeName == name) return children[i];
        }
    },

    decodeStore : function (store) {
        var data    = {},
            rows    = this.getElementsByTagName(store, 'rows');

        if (rows.length) {
            data.rows   = this.decodeRecords(this.getElementsByTagName(rows[0], 'record'));

            var total   = parseInt(rows[0].getAttribute('total'), 10);
            if (isNaN(total) || total < data.rows.length) total = data.rows.length;

            data.total  = total;
        }

        var removed = this.getElementByTagName(store, 'removed');
        if (removed) {
            data.removed    = this.decodeRecords(this.getElementsByTagName(removed, 'record'));
        }

        return data;
    },

    /**
     * Decodes (parses) a _XML_ response string to an object. The formats of processable server responses are displayed in an intro.
     * @param {Object} response The response to decode.
     */
    decode : function (packet) {
        var xml = typeof packet == 'string' ? this.stringToXML(packet) : packet;

        if (!xml) return;

        var result  = {},
            root    = xml.documentElement,
            stores  = root.getElementsByTagName('store'),
            store, storeId;

        result.requestId    = root.getAttribute('requestId');
        result.revision     = root.getAttribute('revision');
        result.success      = root.getAttribute('success') || 'false';
        result.success      = result.success.toLowerCase() == 'true';

        if (!result.success) {
            // extract error code
            result.code     = root.getAttribute('code');

            var message     = root.getElementsByTagName('message')[0];
            result.message  = message && message.firstChild && message.firstChild.nodeValue;
        }

        for (var i = 0, l = stores.length; i < l; i++) {
            store   = stores[i];
            storeId = store.getAttribute('id');

            if (this.getStore(storeId)) {
                result[storeId]     = this.decodeStore(store);
            }
        }

        return result;
    }

});

/**
 * @class Sch.util.Date
 * @static
 * Static utility class for Date manipulation
 */
Ext.define('Sch.util.Date', {
    requires        : 'Ext.Date',
    mixins          : ['Sch.mixin.Localizable'],
    singleton       : true,

    // These stem from Ext.Date in Ext JS but since they don't exist in Sencha Touch we'll need to keep them here
    stripEscapeRe   : /(\\.)/g,
    hourInfoRe      : /([gGhHisucUOPZ]|MS)/,

    unitHash        : null,
    unitsByName     : {},

    // Override this to localize the time unit names.
    //unitNames   : {
        //YEAR    : { single : 'year', plural : 'years', abbrev : 'yr' },
        //QUARTER : { single : 'quarter', plural : 'quarters', abbrev : 'q' },
        //MONTH   : { single : 'month', plural : 'months', abbrev : 'mon' },
        //WEEK    : { single : 'week', plural : 'weeks', abbrev : 'w' },
        //DAY     : { single : 'day', plural : 'days', abbrev : 'd' },
        //HOUR    : { single : 'hour', plural : 'hours', abbrev : 'h' },
        //MINUTE  : { single : 'minute', plural : 'minutes', abbrev : 'min' },
        //SECOND  : { single : 'second', plural : 'seconds', abbrev : 's' },
        //MILLI   : { single : 'ms', plural : 'ms', abbrev : 'ms' }
    //},


    constructor : function () {
        var ED = Ext.Date;
        var unitHash = this.unitHash = {
            /**
             * Date interval constant
             * @static
             * @type String
             */
            MILLI : ED.MILLI,

            /**
             * Date interval constant
             * @static
             * @type String
             */
            SECOND : ED.SECOND,

            /**
             * Date interval constant
             * @static
             * @type String
             */
            MINUTE : ED.MINUTE,

            /** Date interval constant
             * @static
             * @type String
             */
            HOUR : ED.HOUR,

            /**
             * Date interval constant
             * @static
             * @type String
             */
            DAY : ED.DAY,

            /**
             * Date interval constant
             * @static
             * @type String
             */
            WEEK : "w",

            /**
             * Date interval constant
             * @static
             * @type String
             */
            MONTH : ED.MONTH,

            /**
             * Date interval constant
             * @static
             * @type String
             */
            QUARTER : "q",

            /**
             * Date interval constant
             * @static
             * @type String
             */
            YEAR : ED.YEAR
        };
        Ext.apply(this, unitHash);

        var me = this;
        this.units = [me.MILLI, me.SECOND, me.MINUTE, me.HOUR, me.DAY, me.WEEK, me.MONTH, me.QUARTER, me.YEAR];
    },


    onLocalized : function () {
        this.setUnitNames(this.L('unitNames'));
    },


    /**
     * Call this method to provide your own, localized values for duration unit names. See the "/js/Sch/locale/sch-lang-*.js" files for examples
     *
     * @param {Object} unitNames
     */
    setUnitNames : function (unitNames, preserveLocales) {
        var unitsByName = this.unitsByName = {};

        this.l10n.unitNames = unitNames;

        this._unitNames     = Ext.apply({}, unitNames);

        var unitHash        = this.unitHash;

        // Make it possible to lookup readable date names from both 'DAY' and 'd' etc.
        for (var name in unitHash) {
            if (unitHash.hasOwnProperty(name)) {
                var unitValue = unitHash[name];

                this._unitNames[ unitValue ] = this._unitNames[name];

                unitsByName[ name ] = unitValue;
                unitsByName[ unitValue ] = unitValue;
            }
        }
    },


    /**
     * Checks if this date is >= start and < end.
     * @param {Date} date The source date
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Boolean} true if this date falls on or between the given start and end dates.
     * @static
     */
    betweenLesser : function (date, start, end) {
        var t = date.getTime();
        return start.getTime() <= t && t < end.getTime();
    },

    /**
     * Constrains the date within a min and a max date
     * @param {Date} date The date to constrain
     * @param {Date} min Min date
     * @param {Date} max Max date
     * @return {Date} The constrained date
     * @static
     */
    constrain : function (date, min, max) {
        return this.min(this.max(date, min), max);
    },

    /**
     * Returns 1 if first param is a greater unit than second param, -1 if the opposite is true or 0 if they're equal
     * @static
     *
     * @param {String} unit1 The 1st unit
     * @param {String} unit2 The 2nd unit
     */
    compareUnits : function (u1, u2) {
        var ind1 = Ext.Array.indexOf(this.units, u1),
            ind2 = Ext.Array.indexOf(this.units, u2);

        return ind1 > ind2 ? 1 : (ind1 < ind2 ? -1 : 0);
    },

    /**
     * Returns true if first unit passed is strictly greater than the second.
     * @static
     *
     * @param {String} unit1 The 1st unit
     * @param {String} unit2 The 2nd unit
     */
    isUnitGreater : function (u1, u2) {
        return this.compareUnits(u1, u2) > 0;
    },

    /**
     * Copies hours, minutes, seconds, milliseconds from one date to another
     * @static
     *
     * @param {String} targetDate The target date
     * @param {String} sourceDate The source date
     */
    copyTimeValues : function (targetDate, sourceDate) {
        targetDate.setHours(sourceDate.getHours());
        targetDate.setMinutes(sourceDate.getMinutes());
        targetDate.setSeconds(sourceDate.getSeconds());
        targetDate.setMilliseconds(sourceDate.getMilliseconds());
    },

    /**
     * Adds a date unit and interval
     * @param {Date} date The source date
     * @param {String} unit The date unit to add
     * @param {Number} value The number of units to add to the date
     * @return {Date} The new date
     * @static
     */
    add : function (date, unit, value) {
        var d = Ext.Date.clone(date);
        if (!unit || value === 0) return d;

        switch (unit.toLowerCase()) {
            case this.MILLI:
                d = new Date(date.getTime() + value);
                break;
            case this.SECOND:
                d = new Date(date.getTime() + (value * 1000));
                break;
            case this.MINUTE:
                d = new Date(date.getTime() + (value * 60000));
                break;
            case this.HOUR:
                d = new Date(date.getTime() + (value * 3600000));
                break;
            case this.DAY:
                d.setDate(date.getDate() + value);

                if(d.getHours() === 23 && date.getHours() === 0) {
                    d = Ext.Date.add(d, Ext.Date.HOUR, 1);
                }
                break;
            case this.WEEK:
                d.setDate(date.getDate() + value * 7);
                break;
            case this.MONTH:
                var day = date.getDate();
                if (day > 28) {
                    day = Math.min(day, Ext.Date.getLastDateOfMonth(this.add(Ext.Date.getFirstDateOfMonth(date), this.MONTH, value)).getDate());
                }
                d.setDate(day);
                d.setMonth(d.getMonth() + value);
                break;
            case this.QUARTER:
                d = this.add(date, this.MONTH, value * 3);
                break;
            case this.YEAR:
                d.setFullYear(date.getFullYear() + value);
                break;
        }
        return d;
    },
    
    
    getUnitDurationInMs : function (unit) {
        // hopefully there were no DST changes in year 1
        return this.add(new Date(1, 0, 1), unit, 1) - new Date(1, 0, 1);
    },


    getMeasuringUnit : function (unit) {
        if (unit === this.WEEK) {
            return this.DAY;
        }
        return unit;
    },


    /**
     * Returns a duration of the timeframe in the given unit.
     * @static
     * @param {Date} start The start date of the timeframe
     * @param {Date} end The end date of the timeframe
     * @param {String} unit Duration unit
     * @return {Number} The duration in the units
     */
    getDurationInUnit : function (start, end, unit, doNotRound) {
        var units;

        switch (unit) {
            case this.YEAR:
                units = this.getDurationInYears(start, end);
                break;

            case this.QUARTER:
                units = this.getDurationInMonths(start, end) / 3;
                break;

            case this.MONTH:
                units = this.getDurationInMonths(start, end);
                break;

            case this.WEEK:
                units = this.getDurationInDays(start, end) / 7;
                break;

            case this.DAY:
                units = this.getDurationInDays(start, end);
                break;

            case this.HOUR:
                units = this.getDurationInHours(start, end);
                break;

            case this.MINUTE:
                units = this.getDurationInMinutes(start, end);
                break;

            case this.SECOND:
                units = this.getDurationInSeconds(start, end);
                break;

            case this.MILLI:
                units = this.getDurationInMilliseconds(start, end);
                break;
        }

        return doNotRound ? units : Math.round(units);
    },


    getUnitToBaseUnitRatio : function (baseUnit, unit) {
        if (baseUnit === unit) {
            return 1;
        }

        switch (baseUnit) {
            case this.YEAR:
                switch (unit) {
                    case this.QUARTER:
                        return 1 / 4;

                    case this.MONTH:
                        return 1 / 12;
                }
                break;

            case this.QUARTER:
                switch (unit) {
                    case this.YEAR:
                        return 4;

                    case this.MONTH:
                        return 1 / 3;
                }
                break;

            case this.MONTH:
                switch (unit) {
                    case this.YEAR:
                        return 12;

                    case this.QUARTER:
                        return 3;
                }
                break;

            case this.WEEK:
                switch (unit) {
                    case this.DAY:
                        return 1 / 7;

                    case this.HOUR:
                        return 1 / 168;
                }
                break;

            case this.DAY:
                switch (unit) {
                    case this.WEEK:
                        return 7;

                    case this.HOUR:
                        return 1 / 24;

                    case this.MINUTE:
                        return 1 / 1440;
                }
                break;

            case this.HOUR:
                switch (unit) {
                    case this.DAY:
                        return 24;

                    case this.MINUTE:
                        return 1 / 60;
                }
                break;

            case this.MINUTE:
                switch (unit) {
                    case this.HOUR:
                        return 60;

                    case this.SECOND:
                        return 1 / 60;

                    case this.MILLI:
                        return 1 / 60000;
                }
                break;

            case this.SECOND:
                switch (unit) {
                    case this.MILLI:
                        return 1 / 1000;
                }
                break;


            case this.MILLI:
                switch (unit) {
                    case this.SECOND:
                        return 1000;
                }
                break;

        }

        return -1;
    },

    /**
     * Returns the number of milliseconds between the two dates
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Number} true number of minutes between the two dates
     * @static
     */
    getDurationInMilliseconds : function (start, end) {
        return (end - start);
    },

    /**
     * Returns the number of seconds between the two dates
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Number} The number of seconds between the two dates
     * @static
     */
    getDurationInSeconds : function (start, end) {
        return (end - start) / 1000;
    },

    /**
     * Returns the number of minutes between the two dates
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Number} true number of minutes between the two dates
     * @static
     */
    getDurationInMinutes : function (start, end) {
        return (end - start) / 60000;
    },

    /**
     * Returns the number of hours between the two dates.
     *
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Number} true number of hours between the two dates
     * @static
     */
    getDurationInHours : function (start, end) {
        return (end - start) / 3600000;
    },

    /**
     * This method returns the number of days between the two dates. It assumes a day is 24 hours and tries to take the DST into account.
     * 
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Number} true number of days between the two dates
     * 
     * @static
     */
    getDurationInDays : function (start, end) {
        var dstDiff     = start.getTimezoneOffset() - end.getTimezoneOffset();
        
        return (end - start + dstDiff * 60 * 1000) / 86400000;
    },

    /**
     * Returns the number of whole months between the two dates
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Number} The number of whole months between the two dates
     * @static
     */
    getDurationInMonths : function (start, end) {
        return ((end.getFullYear() - start.getFullYear()) * 12) + (end.getMonth() - start.getMonth());
    },

    /**
     * Returns the number of years between the two dates
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Number} The number of whole months between the two dates
     * @static
     */
    getDurationInYears : function (start, end) {
        return this.getDurationInMonths(start, end) / 12;
    },

    /**
     * Returns the lesser of the two dates
     * @param {Date} date1
     * @param {Date} date2
     * @return {Date} Returns the lesser of the two dates
     * @static
     */
    min : function (d1, d2) {
        return d1 < d2 ? d1 : d2;
    },

    /**
     * Returns the greater of the two dates
     * @param {Date} date1
     * @param {Date} date2
     * @return {Date} Returns the greater of the two dates
     * @static
     */
    max : function (d1, d2) {
        return d1 > d2 ? d1 : d2;
    },

    /**
     * Returns true if dates intersect
     * @param {Date} start1
     * @param {Date} end1
     * @param {Date} start2
     * @param {Date} end2
     * @return {Boolean} Returns true if dates intersect
     * @static
     */
    intersectSpans : function (date1Start, date1End, date2Start, date2End) {
        return this.betweenLesser(date1Start, date2Start, date2End) ||
            this.betweenLesser(date2Start, date1Start, date1End);
    },

    /**
     * Returns a name of the duration unit, matching its property on the Sch.util.Date class.
     * So, for example:
     *
     *      Sch.util.Date.getNameOfUnit(Sch.util.Date.DAY) == 'DAY' // true
     *
     * @static
     * @param {String} unit Duration unit
     * @return {String}
     */
    getNameOfUnit : function (unit) {
        unit = this.getUnitByName(unit);

        switch (unit.toLowerCase()) {
            case this.YEAR      :
                return 'YEAR';
            case this.QUARTER   :
                return 'QUARTER';
            case this.MONTH     :
                return 'MONTH';
            case this.WEEK      :
                return 'WEEK';
            case this.DAY       :
                return 'DAY';
            case this.HOUR      :
                return 'HOUR';
            case this.MINUTE    :
                return 'MINUTE';
            case this.SECOND    :
                return 'SECOND';
            case this.MILLI     :
                return 'MILLI';
        }

        throw "Incorrect UnitName";
    },

    /**
     * Returns a human-readable name of the duration unit. For for example for `Sch.util.Date.DAY` it will return either
     * "day" or "days", depending from the `plural` argument
     * @static
     * @param {String} unit Duration unit
     * @param {Boolean} plural Whether to return a plural name or singular
     * @return {String}
     */
    getReadableNameOfUnit : function (unit, plural) {
        if (!this.isLocaleApplied()) this.applyLocale();
        return this._unitNames[ unit ][ plural ? 'plural' : 'single' ];
    },

    /**
     * Returns an abbreviated form of the name of the duration unit.
     * @static
     * @param {String} unit Duration unit
     * @return {String}
     */
    getShortNameOfUnit : function (unit) {
        if (!this.isLocaleApplied()) this.applyLocale();
        return this._unitNames[ unit ].abbrev;
    },

    getUnitByName : function (name) {
        if (!this.isLocaleApplied()) this.applyLocale();

        if (!this.unitsByName[ name ]) {
            Ext.Error.raise('Unknown unit name: ' + name);
        }

        return this.unitsByName[ name ];
    },


    /**
     * Returns the beginning of the Nth next duration unit, after the provided `date`.
     * For example for the this call:
     *      Sch.util.Date.getNext(new Date('Jul 15, 2011'), Sch.util.Date.MONTH, 1)
     *
     * will return: Aug 1, 2011
     *
     * @static
     * @param {Date} date The date
     * @param {String} unit The duration unit
     * @param {Number} increment How many duration units to skip
     * @param {Number} weekStartDay The day index of the 1st day of the week.
     *                Only required when `unit` is `WEEK`. 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on (defaults to 1).
     * @return {Date} The beginning of the next duration unit interval
     */
    getNext : function (date, unit, increment, weekStartDay) {
        var dt          = Ext.Date.clone(date);

        weekStartDay    = arguments.length < 4 ? 1 : weekStartDay;
        // support 0 increment
        increment       = increment == null ? 1 : increment;

        switch (unit) {
            case this.MILLI:
                dt = this.add(date, unit, increment);
                break;

            case this.SECOND:
                dt = this.add(date, unit, increment);

                if (dt.getMilliseconds() > 0) {
                    dt.setMilliseconds(0);
                }
                break;

            case this.MINUTE:
                dt = this.add(date, unit, increment);

                if (dt.getSeconds() > 0) {
                    dt.setSeconds(0);
                }
                if (dt.getMilliseconds() > 0) {
                    dt.setMilliseconds(0);
                }
                break;

            case this.HOUR:
                dt = this.add(date, unit, increment);

                // Without these checks Firefox messes up the date and it changes timezone in certain edge cases
                // See test 021_sch_util_date_dst.t.js
                if (dt.getMinutes() > 0) {
                    dt.setMinutes(0);
                }
                if (dt.getSeconds() > 0) {
                    dt.setSeconds(0);
                }
                if (dt.getMilliseconds() > 0) {
                    dt.setMilliseconds(0);
                }
                break;

            case this.DAY:
                // Check if date has 23 hrs and is in Chile timezone
                var midnightNotInTimeScale = date.getHours() === 23 && this.add(dt, this.HOUR, 1).getHours() === 1;

                if (midnightNotInTimeScale) {
                    // Correct the date manually for DST transitions happening at 00:00
                    dt = this.add(dt, this.DAY, 2);
                    this.clearTime(dt);

                    return dt;
                }

                this.clearTime(dt);

                dt = this.add(dt, this.DAY, increment);

                // Brazil timezone issue #1642, tested in 028_timeaxis_dst.t.js
                if (dt.getHours() === 1) {
                    this.clearTime(dt);
                }
                break;

            case this.WEEK:

                this.clearTime(dt);
                var day = dt.getDay();
                dt = this.add(dt, this.DAY, weekStartDay - day + 7 * (increment - (weekStartDay <= day ? 0 : 1)));

                // For south american timezones, midnight does not exist on DST transitions, adjust...
                if (dt.getDay() !== weekStartDay) {
                    dt = this.add(dt, this.HOUR, 1);
                } else {
                    this.clearTime(dt);
                }
                break;

            case this.MONTH:
                dt = this.add(dt, this.MONTH, increment);
                dt.setDate(1);
                this.clearTime(dt);
                break;

            case this.QUARTER:
                dt = this.add(dt, this.MONTH, ((increment - 1) * 3) + (3 - (dt.getMonth() % 3)));
                this.clearTime(dt);
                dt.setDate(1);
                break;

            case this.YEAR:
                dt = new Date(dt.getFullYear() + increment, 0, 1);
                break;

            default:
                throw 'Invalid date unit';
        }

        return dt;
    },


    getNumberOfMsFromTheStartOfDay : function (date) {
        return date - this.clearTime(date, true) || 86400000;
    },


    getNumberOfMsTillTheEndOfDay : function (date) {
        return this.getStartOfNextDay(date, true) - date;
    },


    getStartOfNextDay : function (date, clone, noNeedToClearTime) {
        var nextDay = this.add(noNeedToClearTime ? date : this.clearTime(date, clone), this.DAY, 1);

        // DST case
        if (nextDay.getDate() == date.getDate()) {
            var offsetNextDay   = this.add(this.clearTime(date, clone), this.DAY, 2).getTimezoneOffset();
            var offsetDate      = date.getTimezoneOffset();

            nextDay             = this.add(nextDay, this.MINUTE, offsetDate - offsetNextDay);
        }

        return nextDay;
    },

    getEndOfPreviousDay : function (date, noNeedToClearTime) {
        var dateOnly = noNeedToClearTime ? date : this.clearTime(date, true);

        // dates are different
        if (dateOnly - date) {
            return dateOnly;
        } else {
            return this.add(dateOnly, this.DAY, -1);
        }
    },

    /**
     * Returns true if the first time span completely 'covers' the second time span. E.g.
     *      Sch.util.Date.timeSpanContains(new Date(2010, 1, 2), new Date(2010, 1, 5), new Date(2010, 1, 3), new Date(2010, 1, 4)) ==> true
     *      Sch.util.Date.timeSpanContains(new Date(2010, 1, 2), new Date(2010, 1, 5), new Date(2010, 1, 3), new Date(2010, 1, 6)) ==> false
     * @static
     * @param {Date} spanStart The start date for initial time span
     * @param {Date} spanEnd The end date for initial time span
     * @param {Date} otherSpanStart The start date for the 2nd time span
     * @param {Date} otherSpanEnd The end date for the 2nd time span
     * @return {Boolean}
     */
    timeSpanContains : function (spanStart, spanEnd, otherSpanStart, otherSpanEnd) {
        return (otherSpanStart - spanStart) >= 0 && (spanEnd - otherSpanEnd) >= 0;
    },

    /**
     * Compares two days with given precision, for example if `date1` is Aug 1st, 2014 08:00 AM and `date2` 
     * is Aug 1st, 2014 09:00 and `precisionUnit` is {@link Sch.util.Date.DAY} then both dates a considered equal
     * since they point to the same day.
     *
     * @param {Date} date1
     * @param {Date} date2
     * @param {String} [precisionUnit=Sch.util.Date.MILLI]
     * @return {Integer}
     * - -1 if `date1` is lesser than `date2`
     * - +1 if `date1` is greater than `date2`
     * -  0 if `date1` is equal to `date2`
     */
    compareWithPrecision : function(date1, date2, precisionUnit) {
        var D = Sch.util.Date,
            ED = Ext.Date,
            result;
        
        switch (precisionUnit) {
            case D.DAY:
                date1 = Number(ED.format(date1, 'Ymd'));
                date2 = Number(ED.format(date2, 'Ymd'));
                break;
            case D.WEEK:
                date1 = Number(ED.format(date1, 'YmW'));
                date2 = Number(ED.format(date2, 'YmW'));
                break;
            case D.MONTH:
                date1 = Number(ED.format(date1, 'Ym'));
                date2 = Number(ED.format(date2, 'Ym'));
                break;
            case D.QUARTER:
                date1 = date1.getFullYear() * 4 + Math.floor(date1.getMonth() / 3);
                date2 = date2.getFullYear() * 4 + Math.floor(date2.getMonth() / 3);
                break;
            case D.YEAR:
                date1 = date1.getFullYear();
                date2 = date2.getFullYear();
                break;
            default:
            case D.MILLI:
            case D.SECOND:
            case D.MINUTE:
            case D.HOUR:
                precisionUnit = precisionUnit && this.getUnitDurationInMs(precisionUnit) || 1;
                date1 = Math.floor(date1.valueOf() / precisionUnit);
                date2 = Math.floor(date2.valueOf() / precisionUnit);
                break;
        }

        ((date1 < date2) && (result = -1)) ||
        ((date1 > date2) && (result = +1)) ||
                            (result =  0);
                            
        return result;
    },

    getValueInUnits : function (date, unit) {
        switch (unit) {
            case this.MONTH : return date.getMonth();
            case this.DAY   : return date.getDate();
            case this.HOUR  : return date.getHours();
            case this.MINUTE    : return date.getMinutes();
            case this.SECOND    : return date.getSeconds();
        }
    },
    
    setValueInUnits : function (date, unit, value) {
        var result = Ext.Date.clone(date),
            f;
        
        switch (unit) {
            case this.YEAR      : f = 'setFullYear'; break;
            case this.MONTH     : f = 'setMonth'; break;
            case this.DAY       : f = 'setDate'; break;
            case this.HOUR      : f = 'setHours'; break;
            case this.MINUTE    : f = 'setMinutes'; break;
            case this.SECOND    : f = 'setSeconds'; break;
            case this.MILLI     : f = 'setMilliseconds'; break;
        }
        
        result[f](value);
        
        return result;
    },
    
    getSubUnit          : function (unit) {
        switch (unit) {
            case this.YEAR      : return this.MONTH;
            /* falls through */
            case this.MONTH     : return this.DAY;
            /* falls through */
            case this.DAY       : return this.HOUR;
            /* falls through */
            case this.HOUR      : return this.MINUTE;
            /* falls through */
            case this.MINUTE    : return this.SECOND;
            /* falls through */
            case this.SECOND    : return this.MILLI;
            /* falls through */
        }
    },
    
    setValueInSubUnits  : function (date, unit, value) {
        unit = this.getSubUnit(unit);
        return this.setValueInUnits(date, unit, value);
    },
    /*
     * section for calendar view related functions
     */
    
    mergeDates : function (target, source, unit) {
        var copy        = Ext.Date.clone(target);

        switch (unit) {
            case this.YEAR      : copy.setFullYear(source.getFullYear()); 

            /* falls through */
            case this.MONTH     : copy.setMonth(source.getMonth()); 

            /* falls through */
            case this.WEEK      :

            /* falls through */
            case this.DAY       :
                // we want to return week start day for this case
                if (unit === this.WEEK) {
                    copy = this.add(copy, this.DAY, source.getDay() - copy.getDay());
                } else {
                    copy.setDate(source.getDate());
                }

            /* falls through */
            case this.HOUR      : copy.setHours(source.getHours()); 

            /* falls through */
            case this.MINUTE    : copy.setMinutes(source.getMinutes()); 

            /* falls through */
            case this.SECOND    : copy.setSeconds(source.getSeconds());

            /* falls through */
            case this.MILLI     : copy.setMilliseconds(source.getMilliseconds());
        }
        
        return copy;
    },
    
    // splitting specified unit to subunits including start of the next span
    // e.g. week will be split to days, days to hours, etc.
    splitToSubUnits : function (start, unit, increment, weekStartDay) {
        increment       = increment || 1;
        weekStartDay    = arguments.length < 4 ? 1 : weekStartDay;
        switch (unit) {
//            case this.YEAR      : return this.splitYear(start, increment, weekStartDay);
            case this.MONTH     : return this.splitMonth(start, increment, weekStartDay);
            case this.WEEK      : //return this.splitWeek(start, increment, weekStartDay);
            /* falls through */
            case this.DAY       : return this.splitDay(start, increment);
//            case this.HOUR      : return this.splitHour(start, increment);
//            case this.MINUTE    : return this.splitMinute(start, increment);
            default : break;
        }
    },
    
    splitYear   : function (start, increment) {
        var newStart    = this.clearTime(start, true);
        newStart.setMonth(0);
        newStart.setDate(1);
        
        var result      = [];
        
        for (var i = 0; i <= 12; i = i + increment) {
            result.push(this.add(newStart, this.MONTH, i));
        }
        
        return result;
    },
    
    splitMonth  : function (start, increment, weekStartDay) {
        var newStart    = this.clearTime(start, true);
        newStart.setDate(1);
        newStart        = this.add(newStart, this.DAY, weekStartDay - newStart.getDay());
        
        var currentDate = Ext.Date.clone(newStart);
        var monthEnd    = this.add(newStart, this.MONTH, 1);
        
        var result      = [];
        
        for (var i = 0; currentDate.getTime() < monthEnd.getTime(); i = i + increment) {
            currentDate = this.add(newStart, this.WEEK, i);
            result.push(currentDate);
        }
        
        return result;
    },
    
    splitWeek   : function (start, increment, weekStartDay) {
        var newStart    = this.add(start, this.DAY, weekStartDay - start.getDay());
        newStart        = this.clearTime(newStart);
        
        var result      = [];
        
        for (var i = 0; i <= 7; i = i + increment) {
            result.push(this.add(newStart, this.DAY, i));
        }
        
        return result;
    },
    
    splitDay    : function (start, increment) {
        var copy    = this.clearTime(start, true);
        
        var result  = [];
        
        for (var i = 0; i <= 24; i = i + increment) {
            result.push(this.add(copy, this.HOUR, i));
        }

        return result;
    },
    
    splitHour   : function (start, increment) {
        var copy = new Date(start.getTime());
        copy.setMinutes(0);
        copy.setSeconds(0);
        copy.setMilliseconds(0);
        
        var result = [];
        
        for (var i = 0; i <= 60; i = i + increment) {
            result.push(this.add(copy, this.MINUTE, i));
        }
        
        return result;
    },
    
    splitMinute : function (start, increment) {
        var copy    = Ext.Date.clone(start);
        copy.setSeconds(0);
        copy.setMilliseconds(0);
        
        var result  = [];
        
        for (var i = 0; i <= 60; i = i + increment) {
            result.push(this.add(copy, this.SECOND, i));
        }
        
        return result;
    },

    // Need this to prevent some browsers (Safari in Sydney timezone) to not mess up a date
    // See tests marked *dst* and https://www.assembla.com/spaces/bryntum/tickets/1757#/activity/ticket:
    clearTime : function(dt, clone) {
        if (dt.getHours() > 0 || dt.getMinutes() > 0 || dt.getSeconds() > 0) {
            return Ext.Date.clearTime(dt, clone);
        }
        
        return clone ? Ext.Date.clone(dt) : dt;
    }
});

/**
 * @class Sch.util.DragTracker
 * @private
 *
 * Simple drag tracker with an extra useful getRegion method
 **/
Ext.define('Sch.util.DragTracker', {
    extend : 'Ext.dd.DragTracker',

    requires : [
        'Ext.util.Region'
    ],

    /**
     * @cfg {Number} xStep
     * The number of horizontal pixels to snap to when dragging
     */
    xStep : 1,

    /**
     * @cfg {Number} yStep
     * The number of vertical pixels to snap to when dragging
     */
    yStep : 1,

    /**
     * @cfg {Number} deferredActivation
     * The number of ms to defer the activation of the drag tracker
     */
    deferredActivation : 0,

    constructor : function () {

        this.callParent(arguments);

        // ScrollManager might trigger a scroll as we are dragging, trigger manual onMouseMove in this case
        this.on('dragstart', function () {
            var el = this.el;

            var listeners = {
                scroll     : this.onMouseMove,
                // We only care about single touches
                pinchstart : this.onMouseUp,
                scope      : this
            };

            el.on(listeners);

            this.on('dragend', function () {
                el.un(listeners);
            }, this, {single : true});
        });

        this.moveListener = {
            pinchstart : this.abortWait,
            touchend   : this.abortWait,
            mouseup    : this.abortWait,
            mousemove  : this.onMoveWhileWaiting,
            scope      : this,
            capture    : true
        };
    },

    /**
     * Set the number of horizontal pixels to snap to when dragging
     * @param {Number} step
     */
    setXStep : function (step) {
        this.xStep = step;
    },

    startScroll : null,

    deferTimer     : null,
    deferTolerance : 10,

    moveListener : null,

    /**
     * Set the number of vertical pixels to snap to when dragging
     * @param {Number} step
     */
    setYStep : function (step) {
        this.yStep = step;
    },

    onMoveWhileWaiting : function (e, t) {

        var xy = e.getXY();
        var s = this.startXY;

        if (Math.max(Math.abs(s[0] - xy[0]), Math.abs(s[1] - xy[1])) > this.deferTolerance) {
            this.abortWait();
            this.onMouseUp(e);
        }
    },

    abortWait : function () {
        clearTimeout(this.deferTimer);
        this.deferTimer = null;

        Ext.getDoc().un(this.moveListener);
    },

    getRegion   : function () {
        var startXY = this.startXY,
            currentScroll = this.el.getScroll(),
            currentXY = this.getXY(),
            currentX = currentXY[0],
            currentY = currentXY[1],
            scrollLeftDelta = currentScroll.left - this.startScroll.left,
            scrollTopDelta = currentScroll.top - this.startScroll.top,
            startX = startXY[0] - scrollLeftDelta,
            startY = startXY[1] - scrollTopDelta,
            minX = Math.min(startX, currentX),
            minY = Math.min(startY, currentY),
            width = Math.abs(startX - currentX),
            height = Math.abs(startY - currentY);

        return new Ext.util.Region(minY, minX + width, minY + height, minX);
    },


    // @OVERRIDE
    onMouseDown : function (e, target) {

        // Ignore multi touches
        if (e.event.touches && e.event.touches.length > 1) return;

        // HACK - Ext calls stopPropagation which prevents global mousedown listeners on the document/body
        // which messes up blur of EventEditor plugin. See event editor tests for reference
        e.stopPropagation = Ext.emptyFn;

        this.startXY = e.getXY();

        if (this.deferredActivation) {
            var me = this;

            Ext.getDoc().on(this.moveListener);

            this.deferTimer = setTimeout(function () {
                var old = me.deferredActivation;

                // Detect moves and abort if exceeding threshold
                Ext.getDoc().un(me.moveListener);

                me.deferredActivation = false;
                me.onMouseDown(e, target);
                me.deferredActivation = old;
            }, this.deferredActivation);

            return;
        }

        this.callParent([e, target]);

        this.lastXY = this.startXY;
        this.startScroll = this.el.getScroll();
    },

    // @OVERRIDE
    // Adds support for snapping to increments while dragging
    onMouseMove : function (e, target) {
        // Bug fix required for IE
        if (this.active && e.type === 'mousemove' && Ext.isIE9m && !e.browserEvent.button) {
            e.preventDefault();
            this.onMouseUp(e);
            return;
        }

        e.preventDefault();

        var xy = e.type === 'scroll' ? this.lastXY : e.getXY(),
            s = this.startXY;

        if (!this.active) {
            if (Math.max(Math.abs(s[0] - xy[0]), Math.abs(s[1] - xy[1])) > this.tolerance) {
                this.triggerStart(e);
            } else {
                return;
            }
        }

        var x = xy[0],
            y = xy[1];

        // TODO handle if this.el is scrolled
        if (this.xStep > 1) {
            x -= this.startXY[0];
            x = Math.round(x / this.xStep) * this.xStep;
            x += this.startXY[0];
        }

        if (this.yStep > 1) {
            y -= this.startXY[1];
            y = Math.round(y / this.yStep) * this.yStep;
            y += this.startXY[1];
        }

        var snapping = this.xStep > 1 || this.yStep > 1;

        if (!snapping || x !== xy[0] || y !== xy[1]) {
            this.lastXY = [x, y];

            if (this.fireEvent('mousemove', this, e) === false) {
                this.onMouseUp(e);
            } else {
                this.onDrag(e);
                this.fireEvent('drag', this, e);
            }
        }
    }
});

/**
 * @class 
 * @static
 * @private
 * Private utility class for dealing with scroll triggering based on various mousemove events in the UI
 */
Ext.define('Sch.util.ScrollManager', {
    singleton      : true,

    vthresh        : 25,
    hthresh        : 25,
    increment      : 100,
    frequency      : 500,
    animate        : true,
    animDuration   : 200,
    activeCmp      : null,
    activeEl       : null,
    targetScroller : null,
    scrollElRegion : null,
    scrollProcess  : {},
    pt             : null,
    scrollWidth    : null,
    scrollHeight   : null,

    // "horizontal", "vertical" or "both"
    direction		: 'both',

    constructor : function () {
        this.doScroll = Ext.Function.bind(this.doScroll, this);
    },

    triggerRefresh : function () {

        if (this.activeEl) {

            this.refreshElRegion();

            this.clearScrollInterval();
            this.onMouseMove();
        }
    },

    doScroll : function () {
        var scrollProcess   = this.scrollProcess,
            scrollProcessCmp = scrollProcess.cmp,
            dir              = scrollProcess.dir[0],
            increment        = this.increment,
            scrollLeft       = this.activeCmp.getScrollX(),
            scrollTop        = this.activeCmp.getScrollY();

        // Make sure we don't scroll too far
        if (dir === 'r') {
            increment = Math.min(increment, this.scrollWidth - scrollLeft - this.activeEl.dom.clientWidth);
        } else if (dir === 'd') {
            increment = Math.min(increment, this.scrollHeight - scrollTop - this.activeEl.dom.clientHeight);
        }

        increment = Math.max(increment, 0);
        var deltaX = 0, deltaY = 0;

        if (dir === 'r') deltaX = increment;
        if (dir === 'l') deltaX = -increment;
        if (dir === 'u') deltaY = -increment;
        if (dir === 'd') deltaY = increment;

        scrollProcessCmp.scrollBy(deltaX, deltaY, {
            duration : this.animDuration,
            callback : this.triggerRefresh,
            scope    : this
        });
    },

    clearScrollInterval : function () {
        var scrollProcess = this.scrollProcess;

        if (scrollProcess.id) {
            clearTimeout(scrollProcess.id);
        }

        scrollProcess.id = 0;
        scrollProcess.cmp = null;
        scrollProcess.dir = "";
    },

	isScrollAllowed : function(dir){
		
		switch(this.direction){
			case 'both':
				return true;
				
			case 'horizontal':
				return dir === 'right' || dir === 'left';	
		
			case 'vertical':
				return dir === 'up' || dir === 'down';
				
			default:
				throw 'Invalid direction: ' + this.direction;
		
		}
		
	},

    startScrollInterval : function (cmp, dir) {

       if(!this.isScrollAllowed(dir)){
			return;
       }
        
        this.clearScrollInterval();
        this.scrollProcess.cmp = cmp;
        this.scrollProcess.dir = dir;

        this.scrollProcess.id = setTimeout(this.doScroll, this.frequency);
    },

    onMouseMove : function (e) {

        var pt = e ? e.getPoint() : this.pt,
            x = pt.x,
            y = pt.y,
            scrollProcess = this.scrollProcess,
            scrollLeft    = this.activeCmp.getScrollX(),
            scrollTop     = this.activeCmp.getScrollY(),
            id,
            cmp = this.activeCmp,
            el = this.activeEl,
            region = this.scrollElRegion,
            elDom = el.dom,
            me = this;

        this.pt = pt;

        if (region && region.contains(pt) && el.isScrollable()) {
            if (region.bottom - y <= me.vthresh && (this.scrollHeight - scrollTop - elDom.clientHeight > 0)) {

                if (scrollProcess.cmp != cmp) {
                    this.startScrollInterval(this.activeCmp, "down");
                }
                return;
            } else if (region.right - x <= me.hthresh && (this.scrollWidth - scrollLeft - elDom.clientWidth > 0) ) {

                if (scrollProcess.cmp != cmp) {
                    this.startScrollInterval(this.activeCmp, "right");
                }
                return;
            } else if (y - region.top <= me.vthresh && scrollTop > 0) {
                if (scrollProcess.cmp != cmp) {
                    this.startScrollInterval(this.activeCmp, "up");
                }
                return;
            } else if (x - region.left <= me.hthresh && scrollLeft > 0) {
                if (scrollProcess.cmp != cmp) {
                    this.startScrollInterval(this.activeCmp, "left");
                }
                return;
            }
        }

        this.clearScrollInterval();
    },

    refreshElRegion : function () {
        this.scrollElRegion = this.activeEl.getRegion();
    },

    // Pass an element, and optionally a direction ("horizontal", "vertical" or "both")
    activate : function (cmp, direction) {
        
        this.direction = direction || 'both';

        this.activeCmp = cmp;
        this.activeEl  = cmp.getEl();

        if (cmp.scrollManager) {
            this.targetScroller = cmp.scrollManager.scroller;

            this.scrollWidth  = this.targetScroller.getMaxPosition().x;
            this.scrollHeight = this.targetScroller.getMaxPosition().y;
        } else {
            this.scrollWidth  = this.activeEl.dom.scrollWidth;
            this.scrollHeight = this.activeEl.dom.scrollHeight;
        }

        this.refreshElRegion();
        this.activeEl.on('mousemove', this.onMouseMove, this);
    },

    deactivate : function () {
        this.clearScrollInterval();

        this.activeEl.un('mousemove', this.onMouseMove, this);
        this.targetScroller = this.activeEl = this.activeCmp = this.scrollElRegion = this.scrollWidth = this.scrollHeight = null;

        this.direction = 'both';
    }
});

/**
 * Simple caching utility.
 *
 * Internaly obtains a key value suitable to be used as object property name via {@link Sch.util.Cache#key key()}
 * method and caches a value provided under the key obtained, values with the same key are groupped
 * into single array. Cached values are obtained via {@link Sch.util.Cache#get get()} method and are managed via
 * {@link Sch.util.Cache#add add()}, {@link Sch.util.Cache#remove remove()}, {@link Sch.util.Cache#move move()},
 * {@link Sch.util.Cache#clear clear()}
 * methods.
 */
Ext.define('Sch.util.Cache', {

    cache : null,

    /**
     * @constructor
     */
    constructor : function() {
        this.cache = {};
    },

    /**
     * A function returning a key for given value.
     *
     * @param  {Mixed} v
     * @return {String}
     * @template
     */
    key : function(v) {
        var result;

        if (v instanceof Ext.data.Model) {
            result = v.getId().toString();
        }
        else if (v === undefined || v === null) {
            result = "[ undefined / null ]";
        }
        else {
            result = (v).toString();
        }

        return result;
    },

    /**
     * Returns all values cached with a given key, or if key isn't present executes a given function, caches
     * it's result (which should be array) after it's mapped over {@link #map} and returns it.
     *
     * *Warning*: the array returned must not be modified otherwise cache integrity will be violated.
     *
     * @param {Mixed} k
     * @param {Function} [fn]
     * @param {[Mixed]}  [fn.return]
     * @return {[Mixed]}
     */
    get : function(k, fn) {
        var me = this,
            result;

        k = me.key(k);

        result = me.cache.hasOwnProperty(k) && me.cache[k];

        if (!result && fn) {
            result = fn();
        }
        else if (!result) {
            result = [];
        }

        me.cache[k] = result;

        return result;
    },

    /**
     * Caches a value using either a key provided or a key obtained from {@link #key key()} method.
     *
     * @param {Mixed} k
     * @param {Mixed} v
     * @chainable
     */
    add : function(k, v) {
        var me = this,
            kAdopted = me.key(k);

        if (!me.cache.hasOwnProperty(kAdopted)) {
            me.cache[kAdopted] = me.get(k); // initial key cache filling
        }

        Ext.Array.include(me.cache[kAdopted], v);

        return me;
    },

    /**
     * Removes cached value from cache under a given key or under a key obtained from {@link #key key()} method.
     *
     * @param {Mixed} k
     * @param {Mixed} v
     * @chainable
     */
    remove : function(k, v) {
        var me = this;

        k = me.key(k);

        if (me.cache.hasOwnProperty(k)) {
            Ext.Array.remove(me.cache[k], v);
        }

        return me;
    },

    /**
     * Moves all items or a single item under old key to new key
     *
     * @param {Mixed} oldKey
     * @param {Mixed} newKey
     */
    move : function(oldKey, newKey, v) {
        var me = this;

        oldKey = me.key(oldKey);
        newKey = me.key(newKey);

        if (oldKey != newKey && arguments.length >= 3) {
            me.remove(oldKey, v);
            me.add(newKey, v);
        }
        else if (oldKey != newKey && me.cache.hasOwnProperty(oldKey) && me.cache.hasOwnProperty(newKey)) {
            me.cache[newKey] = Ext.Array.union(me.cache[newKey], me.cache[oldKey]);
            me.cache[oldKey] = [];
        }
        else if (oldKey != newKey && me.cache.hasOwnProperty(oldKey)) {
            me.cache[newKey] = me.cache[oldKey];
            me.cache[oldKey] = [];
        }
    },

    /**
     * Clears entire cache, or clears cache for a given key.
     *
     * @param {Mixed} [k]
     * @chainable
     */
    clear : function(k) {
        var me = this;

        if (!arguments.length) {
            me.cache = {};
        }
        else {
            k = me.key(k);
            if (me.cache.hasOwnProperty(k)) {
                delete me.cache[k];
            }
        }

        return me;
    },

    /**
     * Removes value from entire cache (from every key it exists under).
     *
     * @param {Mixed} v
     * @chanable
     */
    uncache : function(v) {
        var me = this,
            k;

        for (k in me.cache) {
            if (me.cache.hasOwnProperty(k)) {
                me.cache[k] = Ext.Array.remove(me.cache[k], v);
            }
        }

        return me;
    }
});

/**
@class Sch.model.Customizable
@extends Ext.data.Model

This class represent a model with customizable field names. Customizable fields are defined in separate
class config `customizableFields`. The format of definition is just the same as for usual fields:

        Ext.define('BaseModel', {
            extend      : 'Sch.model.Customizable',

            customizableFields  : [
                { name      : 'StartDate',  type    : 'date', dateFormat : 'c' },
                { name      : 'EndDate',    type    : 'date', dateFormat : 'c' }
            ],

            fields              : [
                'UsualField'
            ],

            getEndDate : function () {
                return "foo"
            }
        });

For each customizable field will be created getter and setter, using the camel-cased name of the field ("stable name"),
prepended with "get/set" respectively. They will not overwrite any existing methods:

        var baseModel   = new BaseModel({
            StartDate   : new Date(2012, 1, 1),
            EndDate     : new Date(2012, 2, 3)
        });

        // using getter for "StartDate" field
        // returns date for "2012/02/01"
        var startDate   = baseModel.getStartDate();

        // using custom getter for "EndDate" field
        // returns "foo"
        var endDate     = baseModel.getEndDate();

You can change the name of the customizable fields in the subclasses of the model or completely re-define them.
For that, add a special property to the class, name of this property should be formed as name of the field with lowercased first
letter, appended with "Field". The value of the property should contain the new name of the field.

        Ext.define('SubModel', {
            extend      : 'BaseModel',

            startDateField      : 'beginDate',
            endDateField        : 'finalizeDate',

            fields              : [
                { name      : 'beginDate',  type    : 'date', dateFormat : 'Y-m-d' },
            ]
        });

        var subModel       = new SubModel({
            beginDate       : new Date(2012, 1, 1),
            finalizeDate    : new Date(2012, 2, 3)
        });

        // name of getter is still the same
        var startDate   = subModel.getStartDate();

In the example above the `StartDate` field was completely re-defined to the `beginDate` field with different date format.
The `EndDate` has just changed its name to "finalizeDate". Note, that getters and setters are always named after "stable"
field name, not the customized one.
*/

// Don't redefine the class, which will screw up instanceof checks etc
if (!Ext.ClassManager.get("Sch.model.Customizable")) {

    Ext.define('Sch.model.Customizable', {
        extend      : 'Ext.data.Model',


        /**
         * @cfg {Array} customizableFields
         *
         * The array of customizale fields definitions.
         */
        customizableFields      : null,

        // @private
        // Keeps temporary state of the previous state for a model, but is only available
        // when a model has changed, e.g. after 'set' or 'reject'. After those operations are completed, this property is cleared.
        previous                : null,

        // temp flag to check if we're currently editing the model
        __editing               : null,

        // To support nested beginEdit calls (see 043_nested_beginedit.t.js in Gantt)
        __editCounter               : 0,

        constructor             : function() {
            // Sencha Touch requires the return value to be returned, hard crash without it
            var retVal = this.callParent(arguments);

            return retVal;
        },

        onClassExtended : function (cls, data, hooks) {
            var onBeforeCreated = hooks.onBeforeCreated;

            hooks.onBeforeCreated = function (cls, data) {
                onBeforeCreated.apply(this, arguments);

                var proto                   = cls.prototype;

                if (!proto.customizableFields) {
                    return;
                }

                // combining our customizable fields with ones from superclass
                // our fields goes after fields from superclass to overwrite them if some names match
                proto.customizableFields    = (cls.superclass.customizableFields || []).concat(proto.customizableFields);

                var customizableFields      = proto.customizableFields;

                // collect fields here, overwriting old ones with new
                var customizableFieldsByName    = {};
                // HACK, crashes without these in 5.1
                var me = this;
                var idField = Ext.Array.findBy(cls.fields, function(f) { return f.name === proto.idProperty; });

                me.idField = proto.idField = idField;

                if (!cls.fieldsMap[proto.idProperty]) {
                    cls.fieldsMap[proto.idProperty] = idField;
                }
                // EOF HACK, crashes without these in 5.1

                Ext.Array.forEach(customizableFields, function (field) {
                    // normalize to object
                    if (typeof field == 'string') field = { name : field };

                    customizableFieldsByName[ field.name ] = field;
                });

                // already processed by the Ext.data.Model `onBeforeCreated`
                var fields                  = proto.fields;
                var toAdd                   = [];
                var toRemove                = [];

                Ext.Array.forEach(fields, function (field) {
                    if (field.isCustomizableField) {
                        toRemove.push(field.getName());
                    }
                });

                if (proto.idProperty !== 'id' && proto.getField('id')) {

                    if (!proto.getField('id').hasOwnProperty('name')) {
                        toRemove.push('id');
                    }
                }

                if (proto.idProperty !== 'Id' && proto.getField('Id')) {

                    if (!proto.getField('Id').hasOwnProperty('name')) {
                        toRemove.push('Id');
                    }
                }

                cls.removeFields(toRemove);

                Ext.Object.each(customizableFieldsByName, function (name, customizableField) {
                    // mark all customizable fields with special property, to be able remove them later
                    customizableField.isCustomizableField     = true;

                    var stableFieldName     = customizableField.name || customizableField.getName();
                    var fieldProperty       = stableFieldName === 'Id' ? 'idProperty' : stableFieldName.charAt(0).toLowerCase() + stableFieldName.substr(1) + 'Field';
                    var overrideFieldName   = proto[ fieldProperty ];

                    var realFieldName       = overrideFieldName || stableFieldName;
                    var field;

                    if (proto.getField(realFieldName)) {
                        field = Ext.applyIf({ name : stableFieldName, isCustomizableField : true }, proto.getField(realFieldName));

                        // if user has re-defined some customizable field, mark it accordingly
                        // such fields weren't be inheritable though (won't replace the customizable field)
                        proto.getField(realFieldName).isCustomizableField = true;

                        // add it to our customizable fields list on the last position, so in the subclasses
                        // it will overwrite other fields with this name

                        field = Ext.create('data.field.' + (field.type || 'auto'), field);

                        customizableFields.push(field);
                    } else {
                        field = Ext.applyIf({ name : realFieldName, isCustomizableField : true }, customizableField);

                        field = Ext.create('data.field.' + (field.type || 'auto'), field);

                        // we create a new copy of the `customizableField` using possibly new name
                        toAdd.push(field);
                    }

                    var capitalizedStableName  = Ext.String.capitalize(stableFieldName);

                    // don't overwrite `getId` method
                    if (capitalizedStableName != 'Id') {
                        var getter              = 'get' + capitalizedStableName;
                        var setter              = 'set' + capitalizedStableName;

                        // overwrite old getters, pointing to a different field name
                        if (!proto[ getter ] || proto[ getter ].__getterFor__ && proto[ getter ].__getterFor__ != realFieldName) {
                            proto[ getter ] = function () {
                                return this.get(realFieldName);
                            };

                            proto[ getter ].__getterFor__   = realFieldName;
                        }

                        // same for setters
                        if (!proto[ setter ] || proto[ setter ].__setterFor__ && proto[ setter ].__setterFor__ != realFieldName) {
                            proto[ setter ] = function (value) {
                                return this.set(realFieldName, value);
                            };

                            proto[ setter ].__setterFor__   = realFieldName;
                        }
                    }
                });

                cls.addFields(toAdd);
            };
        },

        // Overridden to be able to track previous record field values
        set : function(fieldName, value) {
            var currentValue;
            var retVal;

            this.previous = this.previous || {};

            if (typeof fieldName === 'string') {
                currentValue = this.get(fieldName);

                // convert new value to Date if needed
                if (currentValue instanceof Date && !(value instanceof Date)) {
                    value   = this.getField(fieldName).convert(value, this);
                }

                // Store previous field value if it changed, if value didn't change - just return
                if ((currentValue instanceof Date && (currentValue - value)) || !(currentValue instanceof Date) && currentValue !== value) {
                    this.previous[fieldName] = currentValue;
                } else {
                    return [];
                }
            } else {
                for (var o in fieldName) {
                    currentValue    = this.get(o);

                    var newValue    = fieldName[o];

                    // convert new value to Date if needed
                    if (currentValue instanceof Date && !(newValue instanceof Date)) {
                        newValue    = this.getField(o).convert(newValue, this);
                    }

                    // Store previous field value
                    if ((currentValue instanceof Date && (currentValue - newValue)) || !(currentValue instanceof Date) && currentValue !== newValue) {
                        this.previous[o] = currentValue;
                    }
                }
            }
            retVal = this.callParent(arguments);

            if (!this.__editing) {
                delete this.previous;
            }

            return retVal;
        },

        // Overridden to be able to track previous record field values
        reject : function () {
            var me = this,
                modified = me.modified || {},
                field;

            // Ext could call 'set' during the callParent which should not reset the 'previous' object
            me.__editing = true;

            me.previous = me.previous || {};

            for (field in modified) {
                if (modified.hasOwnProperty(field)) {
                    if (typeof modified[field] != "function") {
                        me.previous[field] = me.get(field);
                    }
                }
            }
            me.callParent(arguments);

            // Reset the previous tracking object
            delete me.previous;
            me.__editing = false;
        },

        beginEdit: function () {
            this.__editCounter++;
            this.__editing = true;

            this.callParent(arguments);
        },

        cancelEdit: function () {
            this.__editCounter = 0;
            this.__editing = false;
            this.callParent(arguments);

            delete this.previous;
        },

        // Overridden to be able to clear the previous record field values. Must be done here to have access to the 'previous' object after
        // an endEdit call.
        endEdit: function (silent, modifiedFieldNames) {
            if (--this.__editCounter === 0) {

                // OVERRIDE HACK: If no fields were changed, make sure no events are fired by signaling 'silent'
                if (!silent && this.getModifiedFieldNames /* Touch doesn't have this method, skip optimization */ ) {
                    var editMemento = this.editMemento;
                    if (!modifiedFieldNames) {
                        modifiedFieldNames = this.getModifiedFieldNames(editMemento.data);
                    }

                    if (modifiedFieldNames && modifiedFieldNames.length === 0) {
                        silent = true;
                    }
                }

                this.callParent([silent].concat(Array.prototype.slice.call(arguments, 1)));

                this.__editing = false;
                delete this.previous;
            }
        }
        // -------------- EOF Supporting nested beginEdit calls - see test 043_nested_beginedit.t.js
    });
}

/**
 * Event store's resource->events cache.
 * Uses resource records or resource record ids as keys.
 *
 * @private
 */
Ext.define('Sch.data.util.ResourceEventsCache', {
    extend   : 'Sch.util.Cache',
    requires : [
        'Ext.data.Model'
    ],

    eventStore            : null,
    eventStoreDetacher    : null,
    resourceStoreDetacher : null,

    constructor : function(eventStore) {
        var me = this,
            resourceStore = eventStore.getResourceStore();

        me.callParent();

        function onEventAdd(eventStore, events) {
            Ext.Array.forEach(events, function(event) {
                me.add(event.getResourceId(), event);
            });
        }

        function onEventRemove(eventStore, events) {
            Ext.Array.forEach(events, function(event) {
                me.remove(event.getResourceId(), event);
            });
        }

        function onEventUpdate(eventStore, event, operation, modifiedFieldNames) {
            var resourceIdField    = event.resourceIdField,
                resourceIdChanged  = event.previous && resourceIdField in event.previous,
                previousResourceId = resourceIdChanged && event.previous[resourceIdField];

            if (operation != Ext.data.Model.COMMIT && resourceIdChanged) {
                me.move(previousResourceId, event.getResourceId(), event);
            }
        }

        function onEventStoreClearOrReset() {
            me.clear();
        }

        function onEventStoreResourceStoreChange(eventStore, newResourceStore, oldResourceStore) {
            me.clear();
            attachToResourceStore(newResourceStore);
        }

        function onResourceIdChanged(resourceStore, resource, oldId, newId) {
            me.move(oldId, newId);
        }

        function onResourceRemove(resourceStore, resources) {
            Ext.Array.forEach(resources, function(resource) {
                me.clear(resource);
            });
        }

        function onResourceStoreClearOrReset() {
            me.clear();
        }

        function attachToResourceStore(resourceStore) {
            Ext.destroy(me.resourceStoreDetacher);
            me.resourceStoreDetacher = resourceStore && resourceStore.on({
                idchanged      : onResourceIdChanged,
                remove         : onResourceRemove,
                clear          : onResourceStoreClearOrReset,
                cacheresethint : onResourceStoreClearOrReset,
                rootchange     : onResourceStoreClearOrReset,
                priority       : 100,
                destroyable    : true
            });
        }

        me.eventStoreDetacher = eventStore.on({
            add                 : onEventAdd,
            remove              : onEventRemove,
            update              : onEventUpdate,
            clear               : onEventStoreClearOrReset,
            cacheresethint      : onEventStoreClearOrReset,
            rootchange          : onEventStoreClearOrReset,
            resourcestorechange : onEventStoreResourceStoreChange,
            // subscribing to the CRUD using priority - should guarantee that our listeners
            // will be called first (before any other listeners, that could be provided in the "listeners" config)
            // and state in other listeners will be correct
            priority    : 100,
            destroyable : true
        });

        attachToResourceStore(resourceStore);

        me.eventStore = eventStore;
    },

    destroy : function() {
        var me = this;
        Ext.destroyMembers(
            me,
            'eventStoreDetacher',
            'resourceStoreDetacher'
        );
        me.eventStore = null;
    },

    get : function(k, fn) {
        var me = this;

        k = me.key(k);

        fn = fn || function() {
            return Ext.Array.filter(me.eventStore.getRange(), function(event) {
                return event.getResourceId() == k;
            });
        };

        return me.callParent([k, fn]);
    }
});

/**
 * Assignment store event->assignments cache.
 * Uses event records or event record ids as keys.
 *
 * @private
 */
Ext.define('Sch.data.util.EventAssignmentsCache', {
    extend   : 'Sch.util.Cache',
    requires : [
        'Ext.data.Model'
    ],

    assignmentStore         : null,
    assignmentStoreDetacher : null,
    eventStoreDetacher      : null,

    constructor : function(assignmentStore) {
        var me = this,
            eventStore = assignmentStore.getEventStore();

        me.callParent();

        function onAssignmentAdd(store, assignments) {
            Ext.Array.forEach(assignments, function(assignment) {
                me.add(assignment.getEventId(), assignment);
            });
        }

        function onAssignmentRemove(store, assignments) {
            Ext.Array.forEach(assignments, function(assignment) {
                me.remove(assignment.getEventId(), assignment);
            });
        }

        function onAssignmentUpdate(store, assignment, operation) {
            var eventIdField    = assignment.eventIdField,
                eventIdChanged  = assignment.previous && eventIdField in assignment.previous,
                previousEventId = eventIdChanged && assignment.previous[eventIdField];

            if (operation != Ext.data.Model.COMMIT && eventIdChanged) {
                me.move(previousEventId, assignment.getEventId(), assignment);
            }
        }

        function onAssignmentStoreClearOrReset(store) {
            me.clear();
        }

        function onAssignmentStoreEventStoreChange(store, eventStore) {
            me.clear();
            attachToEventStore(eventStore);
        }

        function onEventIdChanged(eventStore, event, oldId, newId) {
            me.move(oldId, newId);
        }

        function onEventRemove(eventStore, events) {
            Ext.Array.forEach(events, function(event) {
                me.clear(event);
            });
        }

        function onEventStoreClearOrReset() {
            me.clear();
        }

        function attachToEventStore(eventStore) {
            Ext.destroy(me.eventStoreDetacher);
            me.eventStoreDetacher = eventStore && eventStore.on({
                idchanged      : onEventIdChanged,
                remove         : onEventRemove,
                cacheresethint : onEventStoreClearOrReset,
                clear          : onEventStoreClearOrReset,
                rootchange     : onEventStoreClearOrReset,
                priority       : 100,
                destroyable    : true
            });
        }

        me.assignmentStoreDetacher = assignmentStore.on({
            add              : onAssignmentAdd,
            remove           : onAssignmentRemove,
            update           : onAssignmentUpdate,
            cacheresethint   : onAssignmentStoreClearOrReset,
            clear            : onAssignmentStoreClearOrReset,
            eventstorechange : onAssignmentStoreEventStoreChange,
            // subscribing to the CRUD using priority - should guarantee that our listeners
            // will be called first (before any other listeners, that could be provided in the "listeners" config)
            // and state in other listeners will be correct
            priority    : 100,
            destroyable : true
        });

        attachToEventStore(eventStore);

        me.assignmentStore = assignmentStore;
    },

    destroy : function() {
        var me = this;
        Ext.destroyMembers(
            me,
            'assignmentStoreDetacher',
            'eventStoreDetacher'
        );
        me.assignmentStore = null;
    },

    get : function(k, fn) {
        var me = this;

        k = me.key(k);

        fn = fn || function() {
            return Ext.Array.filter(me.assignmentStore.getRange(), function(assignment) {
                return assignment.getEventId() == k;
            });
        };

        return me.callParent([k, fn]);
    }
});

/**
 * Assignment store resource->assignments cache.
 * Uses resource records or resource record ids as keys.
 *
 * @private
 */
Ext.define('Sch.data.util.ResourceAssignmentsCache', {
    extend   : 'Sch.util.Cache',
    requires : [
        'Ext.data.Model'
    ],

    assignmentStore         : null,
    assignmentStoreDetacher : null,
    eventStoreDetacher      : null,
    resourceStoreDetacher   : null,

    constructor : function(assignmentStore) {
        var me = this,
            eventStore = assignmentStore.getEventStore(),
            resourceStore = eventStore && eventStore.getResourceStore();

        me.callParent();

        function onAssignmentAdd(store, assignments) {
            Ext.Array.forEach(assignments, function(assignment) {
                me.add(assignment.getResourceId(), assignment);
            });
        }

        function onAssignmentRemove(store, assignments) {
            Ext.Array.forEach(assignments, function(assignment) {
                me.remove(assignment.getResourceId(), assignment);
            });
        }

        function onAssignmentUpdate(store, assignment, operation) {
            var resourceIdField    = assignment.resourceIdField,
                resourceIdChanged  = assignment.previous && resourceIdField in assignment.previous,
                previousResourceId = resourceIdChanged && assignment.previous[resourceIdField];

            if (operation != Ext.data.Model.COMMIT && resourceIdChanged) {
                me.move(previousResourceId, assignment.getResourceId(), assignment);
            }
        }

        function onAssignmentStoreClearOrReset(store) {
            me.clear();
        }

        function onAssignmentStoreEventStoreChange(store, eventStore) {
            attachToEventStore(eventStore);
            attachToResourceStore(eventStore && eventStore.getResourceStore());
        }

        function onEventStoreResourceStoreChange(eventStore, resourceStore) {
            me.clear();
            attachToResourceStore(resourceStore);
        }

        function onResourceIdChanged(resourceStore, resource, oldId, newId) {
            me.move(oldId, newId);
        }

        function onResourceRemove(resourceStore, resources) {
            Ext.Array.forEach(resources, function(resource) {
                me.clear(resource);
            });
        }

        function onResourceStoreClearOrReset() {
            me.clear();
        }

        function attachToEventStore(eventStore) {
            Ext.destroy(me.eventStoreDetacher);
            me.eventStoreDetacher = eventStore && eventStore.on({
                resourcestorechange : onEventStoreResourceStoreChange,
                priority    : 100,
                destroyable : true
            });
        }

        function attachToResourceStore(resourceStore) {
            Ext.destroy(me.resourceStoreDetacher);
            me.resourceStoreDetacher = resourceStore && resourceStore.on({
                idchanged      : onResourceIdChanged,
                remove         : onResourceRemove,
                clear          : onResourceStoreClearOrReset,
                cacheresethint : onResourceStoreClearOrReset,
                rootchange     : onResourceStoreClearOrReset,
                priority       : 100,
                destroyable    : true
            });
        }

        me.assignmentStoreDetacher = assignmentStore.on({
            add              : onAssignmentAdd,
            remove           : onAssignmentRemove,
            update           : onAssignmentUpdate,
            clear            : onAssignmentStoreClearOrReset,
            cacheresethint   : onAssignmentStoreClearOrReset,
            eventstorechange : onAssignmentStoreEventStoreChange,
            // subscribing to the CRUD using priority - should guarantee that our listeners
            // will be called first (before any other listeners, that could be provided in the "listeners" config)
            // and state in other listeners will be correct
            priority    : 100,
            destroyable : true
        });

        attachToEventStore(eventStore);
        attachToResourceStore(resourceStore);

        me.assignmentStore = assignmentStore;
    },

    destroy : function() {
        var me = this;
        Ext.destroyMembers(
            me,
            'assignmentStoreDetacher',
            'eventStoreDetacher',
            'resourceStoreDetacher'
        );
        me.assignmentStore = null;
    },

    get : function(k, fn) {
        var me = this;

        k = me.key(k);

        fn = fn || function() {
            return Ext.Array.filter(me.assignmentStore.getRange(), function(assignment) {
                return assignment.getResourceId() == k;
            });
        };

        return me.callParent([k, fn]);
    }
});

/**
 * Assignment store event->resources cache.
 * Uses event records or event record ids as keys.
 *
 * @private
 */
if (!Ext.ClassManager.get('Sch.data.util.AssignmentStoreEventResourcesCache')) Ext.define('Sch.data.util.AssignmentStoreEventResourcesCache', {
    extend   : 'Sch.util.Cache',
    requires : [
        'Ext.data.Model'
    ],

    assignmentStore         : null,
    assignmentStoreDetacher : null,
    eventStoreDetacher      : null,
    resourceStoreDetacher   : null,

    constructor : function(assignmentStore) {
        var me = this,
            eventStore = assignmentStore.getEventStore(),
            resourceStore = eventStore && eventStore.getResourceStore();

        me.callParent();

        function onAssignmentAdd(store, assignments) {
            var eventStore = me.assignmentStore.getEventStore(),
                resourceStore = eventStore && eventStore.getResourceStore();

            Ext.Array.forEach(assignments, function(assignment) {
                var resource = resourceStore && resourceStore.getModelById(assignment.getResourceId());

                if (resource) {
                    me.add(assignment.getEventId(), resource);
                }
                // Cache can't be validly updated, so clearing key entirily hoping that upon next key get() operation
                // the event will be there in the resource store
                else {
                    me.clear(assignment.getEventId());
                }
            });
        }

        function onAssignmentRemove(store, assignments) {
            var eventStore = me.assignmentStore.getEventStore(),
                resourceStore = eventStore && eventStore.getResourceStore();

            Ext.Array.forEach(assignments, function(assignment) {
                var resource = resourceStore.getModelById(assignment.getResourceId());

                if (resource) {
                    me.remove(assignment.getEventId(), resource);
                }
                // Cache can't be validly updated, so clearing key entirily hoping that upon next key get() operation
                // the event will be there in the resource store
                else {
                    me.clear(assignment.getEventId());
                }
            });
        }

        function onAssignmentUpdate(store, assignment, operation) {
            var resourceIdField    = assignment.resourceIdField,
                resourceIdChanged  = assignment.previous && resourceIdField in assignment.previous,
                previousResourceId = resourceIdChanged && assignment.previous[resourceIdField],
                eventIdField       = assignment.eventIdField,
                eventIdChanged     = assignment.previous && eventIdField in assignment.previous,
                previousEventId    = eventIdChanged && assignment.previous[eventIdField],
                eventStore         = me.assignmentStore.getEventStore(),
                resourceStore      = eventStore && eventStore.getResourceStore(),
                resource;

            if (operation != Ext.data.Model.COMMIT && (resourceIdChanged || eventIdChanged)) {

                previousResourceId = resourceIdChanged ? previousResourceId : assignment.getResourceId();
                previousEventId    = eventIdChanged    ? previousEventId    : assignment.getEventId();

                resource = resourceStore.getModelById(previousResourceId);
                if (resource) {
                    me.remove(previousEventId, resource);
                }
                else {
                    me.clear(previousEventId);
                }

                resource = resourceStore.getModelById(assignment.getResourceId());
                if (resource) {
                    me.add(assignment.getEventId(), resource);
                }
                else {
                    me.clear(assignment.getEventId());
                }
            }
        }

        function onAssignmentStoreClearOrReset(store) {
            me.clear();
        }

        function onAssignmentStoreEventStoreChange(store, eventStore) {
            me.clear();
            attachToEventStore(eventStore);
            attachToResourceStore(eventStore && eventStore.getResourceStore());
        }

        function onEventIdChanged(eventStore, event, oldId, newId) {
            me.move(oldId, newId);
        }

        function onEventRemove(eventStore, events) {
            Ext.Array.forEach(events, function(event) {
                me.clear(event);
            });
        }

        function onEventStoreClearOrReset() {
            me.clear();
        }

        function onEventStoreResourceStoreChange(eventStore, resourceStore) {
            me.clear();
            attachToResourceStore(resourceStore);
        }

        function onResourceRemove(resourceStore, resources) {
            Ext.Array.forEach(resources, function(resource) {
                me.uncache(resource);
            });
        }

        function onResourceStoreClearOrReset() {
            me.clear();
        }

        function attachToEventStore(eventStore) {
            Ext.destroy(me.eventStoreDetacher);
            me.eventStoreDetacher = eventStore && eventStore.on({
                idchanged           : onEventIdChanged,
                remove              : onEventRemove,
                clear               : onEventStoreClearOrReset,
                cacheresethint      : onEventStoreClearOrReset,
                rootchange          : onEventStoreClearOrReset,
                resourcestorechange : onEventStoreResourceStoreChange,
                priority            : 100,
                destroyable         : true
            });
        }

        function attachToResourceStore(resourceStore) {
            Ext.destory(me.resourceStoreDetacher);
            me.resourceStoreDetacher = resourceStore && resourceStore.on({
                remove         : onResourceRemove,
                clear          : onResourceStoreClearOrReset,
                cacheresethint : onResourceStoreClearOrReset,
                rootchange     : onResourceStoreClearOrReset,
                priority       : 100,
                destroyable    : true
            });
        }

        me.assignmentStoreDetacher = assignmentStore.on({
            add            : onAssignmentAdd,
            remove         : onAssignmentRemove,
            update         : onAssignmentUpdate,
            clear          : onAssignmentStoreClearOrReset,
            cacheresethint : onAssignmentStoreClearOrReset,
            // subscribing to the CRUD using priority - should guarantee that our listeners
            // will be called first (before any other listeners, that could be provided in the "listeners" config)
            // and state in other listeners will be correct
            priority    : 100,
            destroyable : true
        });

        me.assignmentStore = assignmentStore;
    },

    destroy : function() {
        var me = this;
        Ext.destroyMembers(
            me,
            'assignmentStoreDetacher',
            'eventStoreDetacher',
            'resourceStoreDetacher'
        );
        me.assignmentStore = null;
    },

    get : function(k, fn) {
        var me = this;

        fn = fn || function() {
            return me.assignmentStore.mapAssignmentsForEvent(
                k,
                function mapper(assignment) {
                    return assignment.getResource();
                },
                function filter(resource) {
                    return !!resource;
                }
            );
        };

        return me.callParent([k, fn]);
    }
});

/**
 * Assignment store resource->events cache.
 * Uses resource records or resource record ids as keys.
 *
 * @private
 */
if (!Ext.ClassManager.get('Sch.data.util.AssignmentStoreResourceEventsCache')) Ext.define('Sch.data.util.AssignmentStoreResourceEventsCache', {
    extend   : 'Sch.util.Cache',
    requires : [
        'Ext.data.Model'
    ],

    assignmentStore         : null,
    assignmentStoreDetacher : null,
    eventStoreDetacher      : null,
    resourceStoreDetacher   : null,

    constructor : function(assignmentStore) {
        var me = this,
            eventStore = assignmentStore.getEventStore(),
            resourceStore = eventStore && eventStore.getResourceStore();

        me.callParent();

        function onAssignmentAdd(store, assignments) {
            var eventStore = me.assignmentStore.getEventStore();

            Ext.Array.forEach(assignments, function(assignment) {
                var event = eventStore && eventStore.getModelById(assignment.getEventId());

                if (event) {
                    me.add(assignment.getResourceId(), event);
                }
                // Cache can't be validly updated, so clearing key entirily hoping that upon next key get() operation
                // the event will be there in the event store
                else {
                    me.clear(assignment.getResourceId());
                }
            });
        }

        function onAssignmentRemove(store, assignments) {
            var eventStore = me.assignmentStore.getEventStore();

            Ext.Array.forEach(assignments, function(assignment) {
                var event = eventStore && eventStore.getModelById(assignment.getEventId());

                if (event) {
                    me.remove(assignment.getResourceId(), event);
                }
                // Cache can't be validly updated, so clearing key entirily hoping that upon next key get() operation
                // the event will be there in the event store
                else {
                    me.clear(assignment.getResourceId());
                }
            });
        }

        function onAssignmentUpdate(store, assignment, operation) {
            var resourceIdField    = assignment.resourceIdField,
                resourceIdChanged  = assignment.previous && resourceIdField in assignment.previous,
                previousResourceId = resourceIdChanged && assignment.previous[resourceIdField],
                eventIdField       = assignment.eventIdField,
                eventIdChanged     = assignment.previous && eventIdField in assignment.previous,
                previousEventId    = eventIdChanged && assignment.previous[eventIdField],
                eventStore         = me.assignmentStore.getEventStore(),
                event;

            if (operation != Ext.data.Model.COMMIT && (resourceIdChanged || eventIdChanged)) {

                previousResourceId = resourceIdChanged ? previousResourceId : assignment.getResourceId();
                previousEventId    = eventIdChanged    ? previousEventId    : assignment.getEventId();

                event = eventStore && eventStore.getModelById(previousEventId);
                if (event) {
                    me.remove(previousResourceId, event);
                }
                else {
                    me.clear(previousResourceId);
                }

                event = eventStore && eventStore.getModelById(assignment.getEventId());
                if (event) {
                    me.add(assignment.getResourceId(), event);
                }
                else {
                    me.clear(assignment.getResourceId());
                }
            }
        }

        function onAssignmentStoreClearOrReset(store) {
            me.clear();
        }

        function onAssignmentStoreEventStoreChange(store, eventStore) {
            me.clear();
            attachToEventStore(eventStore);
            attachToResourceStore(eventStore && eventStore.getResourceStore());
        }

        function onEventRemove(eventStore, events) {
            Ext.Array.forEach(events, function(event) {
                me.uncache(event);
            });
        }

        function onEventStoreClearOrReset() {
            me.clear();
        }

        function onEventStoreResourceStoreChange(store, resourceStore) {
            me.clear();
            attachToResourceStore(resourceStore);
        }

        function onResourceIdChanged(resourceStore, resource, oldId, newId) {
            me.move(oldId, newId);
        }

        function onResourceRemove(resourceStore, resources) {
            Ext.Array.forEach(resources, function(resource) {
                me.clear(resource);
            });
        }

        function onResourceStoreClearOrReset() {
            me.clear();
        }

        function attachToEventStore(eventStore) {
            Ext.destroy(me.eventStoreDetacher);
            me.eventStoreDetacher = eventStore && eventStore.on({
                remove              : onEventRemove,
                cacheresethint      : onEventStoreClearOrReset,
                clear               : onEventStoreClearOrReset,
                rootchange          : onEventStoreClearOrReset,
                resourcestorechange : onEventStoreResourceStoreChange,
                priority            : 100,
                destroyable         : true
            });
        }

        function attachToResourceStore(resourceStore) {
            Ext.destroy(me.resourceStoreDetacher);
            me.resourceStoreDetacher = resourceStore && resourceStore.on({
                idchanged      : onResourceIdChanged,
                remove         : onResourceRemove,
                cacheresethint : onResourceStoreClearOrReset,
                clear          : onResourceStoreClearOrReset,
                rootchange     : onResourceStoreClearOrReset,
                priority       : 100,
                destroyable    : true
            });
        }

        me.assignmentStoreDetacher = assignmentStore.on({
            add              : onAssignmentAdd,
            remove           : onAssignmentRemove,
            update           : onAssignmentUpdate,
            cacheresethint   : onAssignmentStoreClearOrReset,
            clear            : onAssignmentStoreClearOrReset,
            eventstorechange : onAssignmentStoreEventStoreChange,
            // subscribing to the CRUD using priority - should guarantee that our listeners
            // will be called first (before any other listeners, that could be provided in the "listeners" config)
            // and state in other listeners will be correct
            priority         : 100,
            destroyable      : true
        });

        attachToEventStore(eventStore);
        attachToResourceStore(resourceStore);

        me.assignmentStore = assignmentStore;
    },

    destroy : function() {
        var me = this;
        Ext.destroyMembers(
            me,
            'assignmentStoreDetacher',
            'eventStoreDetacher',
            'resourceStoreDetacher'
        );
        me.assignmentStore = null;
    },

    get : function(k, fn) {
        var me = this;

        fn = fn || function() {
            return me.assignmentStore.mapAssignmentsForResource(
                k,
                function mapper(assignment) {
                    return assignment.getEvent();
                },
                function filter(event) {
                    return !!event;
                }
            );
        };

        return me.callParent([k, fn]);
    }
});

/**
 * This class manages model persistency, it listens to model stores' beforesync event and removes all non persistable
 * records from sync operation. The logic has meaning only for CRUD-less sync operations.
 *
 * @private
 */
if (!Ext.ClassManager.get("Sch.data.util.ModelPersistencyManager")) Ext.define('Sch.data.util.ModelPersistencyManager', {

    config : {
        eventStore      : null,
        resourceStore   : null,
        assignmentStore : null
    },

    eventStoreDetacher      : null,
    resourceStoreDetacher   : null,
    assignmentStoreDetacher : null,

    constructor : function(config) {
        this.initConfig(config);
    },

    // {{{ Event attachers
    updateEventStore : function(newEventStore, oldEventStore) {
        var me = this;

        Ext.destroyMembers(me, 'eventStoreDetacher');

        if (newEventStore && newEventStore.autoSync) {
            me.eventStoreDetacher = newEventStore.on({
                beforesync  : me.onEventStoreBeforeSync,
                scope       : me,
                destroyable : true,
                // Just in case
                priority    : 100
            });
        }
    },

    updateResourceStore : function(newResourceStore, oldResourceStore) {
        var me = this;

        Ext.destroyMembers(me, 'resourceStoreDetacher');

        if (newResourceStore && newResourceStore.autoSync) {
            me.resourceStoreDetacher = newResourceStore.on({
                beforesync  : me.onResourceStoreBeforeSync,
                scope       : me,
                destroyable : true,
                // Just in case
                priority    : 100
            });
        }
    },

    updateAssignmentStore : function(newAssignmentStore, oldAssignmentStore) {
        var me = this;

        Ext.destroyMembers(me, 'assignmentStoreDetacher');

        if (newAssignmentStore && newAssignmentStore.autoSync) {
            me.assignmentStoreDetacher = newAssignmentStore.on({
                beforesync  : me.onAssignmentStoreBeforeSync,
                scope       : me,
                destroyable : true,
                // Just in case
                priority    : 100
            });
        }
    },
    // }}}

    // {{{ Event handlers
    onEventStoreBeforeSync : function(options) {
        var me = this;
        me.removeNonPersistableRecordsToCreate(options);
        return me.shallContinueSync(options);
    },

    onResourceStoreBeforeSync : function(options) {
        var me = this;
        me.removeNonPersistableRecordsToCreate(options);
        return me.shallContinueSync(options);
    },

    onAssignmentStoreBeforeSync : function(options) {
        var me = this;
        me.removeNonPersistableRecordsToCreate(options);
        return me.shallContinueSync(options);
    },
    // }}}

    // {{{ Management rules
    removeNonPersistableRecordsToCreate : function(options) {
        var recordsToCreate = options.create || [],
            r, i;

        // We remove from the array we iterate thus we iterate from end to start
        for (i = recordsToCreate.length - 1; i >= 0; --i) {
            r = recordsToCreate[i];
            if (!r.isPersistable()) {
                Ext.Array.remove(recordsToCreate, r);
            }
        }

        // Prevent empty create request
        if (recordsToCreate.length === 0) {
            delete options.create;
        }
    },

    shallContinueSync : function(options) {
        return Boolean((options.create  && options.create.length  > 0) ||
                       (options.update  && options.update.length  > 0) ||
                       (options.destroy && options.destroy.length > 0));
    }
    // }}}
});

/**
 * This class manages id consistency among model stores, it listens to 'idchanged' event on each store and updates
 * referential fields referencing records with changed ids in other model entities.
 *
 * Note on update process:
 *  at the time when 'idchanged' handler is called we can effectively query stores which are using caches for
 *  a data cached under old id, but we cannot update related models with the new id since at the time of
 *  'idchanged' handler is called a record which id has been updated is still marked as phantom, it's
 *  phantom flag will be reset only at 'update' event time (and 'idchanged' event is always followed by 'update'
 *  event) and it's important we start updating related records after primary records are not phantoms
 *  any more since we might rely on this flag (for example a related store sync operation might be blocked
 *  if primary store records it relies on are still phantom).
 *
 * @private
 */
if (!Ext.ClassManager.get("Sch.data.util.IdConsistencyManager")) Ext.define('Sch.data.util.IdConsistencyManager', {

    config : {
        eventStore      : null,
        resourceStore   : null,
        assignmentStore : null
    },

    eventStoreDetacher     : null,
    resourceStoreDetacher  : null,

    constructor : function(config) {
        this.initConfig(config);
    },

    // {{{ Event attachers
    updateEventStore : function(newEventStore, oldEventStore) {
        var me = this;

        Ext.destroyMembers(me, 'eventStoreDetacher');

        if (newEventStore) {
            me.eventStoreDetacher = newEventStore.on({
                idchanged   : me.onEventIdChanged,
                scope       : me,
                destroyable : true,
                // It's important that priority here was more then in assignment/event store caches
                // otherwise quering by old id won't return correct results, assignment will be moved
                // to new event id already if this priority is lower then the one used in cache
                priority    : 200
            });
        }
    },

    updateResourceStore : function(newResourceStore, oldResourceStore) {
        var me = this;

        Ext.destroyMembers(me, 'resourceStoreDetacher');

        if (newResourceStore) {
            me.resourceStoreDetacher = newResourceStore.on({
                idchanged   : me.onResourceIdChanged,
                scope       : me,
                destroyable : true,
                // It's important that priority here was more then in assignment/event store caches
                // otherwise quering by old id won't return correct results, assignment will be moved
                // to new resource id already if this priority is lower then the one used in cache
                priority    : 200
            });
        }
    },
    // }}}

    // {{{ Event handlers

    // Please see the note at the class description
    onEventIdChanged : function(eventStore, event, oldId, newId) {
        var me = this,
            assignmentStore = me.getAssignmentStore(),
            assignmentsUpdater;

        if (assignmentStore) {
            assignmentsUpdater = me.getUpdateAssignmentEventIdFieldFn(assignmentStore, oldId, newId);
            eventStore.on(
                'update',
                assignmentsUpdater,
                null,
                { single : true, priority : 200 }
            );
        }
    },

    // Please see the note at the class description
    onResourceIdChanged : function(resourceStore, resource, oldId, newId) {
        var me = this,
            eventStore = me.getEventStore(),
            assignmentStore = me.getAssignmentStore(),
            eventsUpdater,
            assignmentsUpdater;

        if (eventStore && !assignmentStore) {
            eventsUpdater = me.getUpdateEventResourceIdFieldFn(eventStore, oldId, newId);
        }

        if (assignmentStore) {
            assignmentsUpdater = me.getUpdateAssignmentResourceIdFieldFn(assignmentStore, oldId, newId);
        }

        if (eventsUpdater || assignmentStore) {
            resourceStore.on(
                'update',
                function() {
                    eventsUpdater && eventsUpdater();
                    assignmentsUpdater && assignmentsUpdater();
                },
                null,
                { single : true, priority : 200 }
            );
        }
    },
    // }}}

    // {{{ Update rules
    getUpdateEventResourceIdFieldFn : function(eventStore, oldId, newId) {
        var events = eventStore.getRange();

        return function() {
            Ext.Array.forEach(events, function(event) {
                event.getResourceId() == oldId && event.setResourceId(newId);
            });
        };
    },

    getUpdateAssignmentEventIdFieldFn : function(assignmentStore, oldId, newId) {
        var assignments = assignmentStore.getAssignmentsForEvent(oldId);

        return function() {
            Ext.Array.forEach(assignments, function(assignment) {
                assignment.getEventId() == oldId && assignment.setEventId(newId);
            });
        };
    },

    getUpdateAssignmentResourceIdFieldFn : function(assignmentStore, oldId, newId) {
        var assignments = assignmentStore.getAssignmentsForResource(oldId);

        return function() {
            Ext.Array.forEach(assignments, function(assignment) {
                assignment.getResourceId() == oldId && assignment.setResourceId(newId);
            });
        };
    }
    // }}}
});

/**
 * This mixin eliminates differences between flat/tree store in get by [internal] id functionality and it should be
 * mixed into data model stores.
 *
 * It adds two methods {@link #getModelById getModelById()} and {@link #getModelByInternalId getModelByInternalId()}
 * which should be used everywhere in the code instead of native getById() / getByInternalId() methods.
 *
 * @private
 */
if (!Ext.ClassManager.get("Sch.data.mixin.UniversalModelGetter")) Ext.define('Sch.data.mixin.UniversalModelGetter', {

    getModelById : function(id) {
        var me = this;
        return me.getNodeById ? me.getNodeById(id) : me.getById(id);
    },

    getModelByInternalId : function(id) {
        var me = this;
        return me.byInternalIdMap ? me.byInternalIdMap[id] : me.getByInternalId(id);
    }

});

/**
 * This mixin intercepts a set of store methods and firing a set of events providing a cache with a better hint
 * when to update itself.
 *
 * @private
 */
if (!Ext.ClassManager.get('Sch.data.mixin.CacheHintHelper')) Ext.define('Sch.data.mixin.CacheHintHelper', {
    extend : 'Ext.Mixin',

    mixinConfig : {
        before : {
            loadRecords : 'loadRecords'
        }
    },

    // Call to loadRecords() results in 'datachanged' and 'refresh' events, but 'datachanged' is also fired upon
    // call to add/remove/write/filter/sort/removeAll so a cache cannot detect what method call results in 'datachanged'
    // in case of previosly mentioned methods a cache shouldn't handle 'datachanged' event it is not affected by
    // write/filter/sort at all, as for add/remove/removeAll it listens to preceding events like 'add'/'remove'/'clear'
    // and reflects updates correspondingly. But in case of loadRecords() the sequence of events fired 'datachanged' and
    // 'refresh' provides to little information to make right decision whether to reset a cache or not, moreover resetting
    // a cache on 'refresh' is to late since a lot of logic (rendering logic especially) start quering the store
    // upon 'datachanged' event and thus if cache wasn't reset it will provide that logic with outdated data.
    // Thus I have to override loadRecords() and make it fire private 'loadrecords' event to provide a cache with
    // a way to reset itself beforehand.
    loadRecords : function() {
        var me = this;
        me.fireEvent('cacheresethint', me);
    }
});

/**
@class Sch.data.mixin.EventStore

This is a mixin, containing functionality related to managing events.

It is consumed by the regular {@link Sch.data.EventStore} class and {@link Gnt.data.TaskStore} class
to allow data sharing between gantt chart and scheduler. Please note though, that datasharing is still
an experimental feature and not all methods of this mixin can be used yet on a TaskStore.

*/
if (!Ext.ClassManager.get("Sch.data.mixin.EventStore")) Ext.define("Sch.data.mixin.EventStore", {
    extend : 'Ext.Mixin',

    requires : [
        'Sch.util.Date',
        'Sch.data.util.IdConsistencyManager',
        'Sch.data.util.ModelPersistencyManager',
        'Sch.data.util.ResourceEventsCache'
    ],

    isEventStore : true,

    resourceStore         : null,
    resourceStoreDetacher : null,
    assignmentStore       : null,

    resourceEventsCache     : null,
    idConsistencyManager    : null,
    modelPersistencyManager : null,

    mixinConfig : {
        after : {
            constructor : 'constructor',
            destroy : 'destroy'
        }
    },

    /**
     * @constructor
     */
    constructor : function() {
        var me = this;
        me.resourceEventsCache     = me.createResourceEventsCache();
        me.idConsistencyManager    = me.createIdConsistencyManager();
        me.modelPersistencyManager = me.createModelPersistencyManager();
    },

    destroy : function() {
        var me = this;
        Ext.destroyMembers(
            me,
            'resourceEventsCache',
            'idConsistencyManager',
            'modelPersistencyManager'
        );
    },

    /**
     * Creates and returns Resource->Events cache.
     *
     * @return {Sch.data.util.ResourceEventsCache}
     * @template
     * @protected
     */
    createResourceEventsCache : function() {
        return new Sch.data.util.ResourceEventsCache(this);
    },

    /**
     * Creates and returns id consistency manager
     *
     * @return {Sch.data.util.IdConsistencyManager}
     * @tempalte
     * @protected
     */
    createIdConsistencyManager : function() {
        var me = this;
        return new Sch.data.util.IdConsistencyManager({
            eventStore      : me,
            resourceStore   : me.getResourceStore(),
            assignmentStore : me.getAssignmentStore()
        });
    },

    /**
     * Creates and returns model persistency manager
     *
     * @return {Sch.data.util.ModelPersistencyManager}
     * @tempalte
     * @protected
     */
    createModelPersistencyManager : function() {
        var me = this;
        return new Sch.data.util.ModelPersistencyManager({
            eventStore      : me,
            resourceStore   : me.getResourceStore(),
            assignmentStore : me.getAssignmentStore()
        });
    },

    /**
     * Gets the resource store for this store
     *
     * @return {Sch.data.ResourceStore} resourceStore
     */
    getResourceStore : function () {
        return this.resourceStore;
    },

    /**
     * Sets the resource store for this store
     *
     * @param {Sch.data.ResourceStore} resourceStore
     */
    setResourceStore : function (resourceStore) {
        var me = this,
            oldStore = me.resourceStore;

        if (me.resourceStore) {
            me.resourceStore.setEventStore(null);
            me.idConsistencyManager && me.idConsistencyManager.setResourceStore(null);
            me.modelPersistencyManager && me.modelPersistencyManager.setResourceStore(null);
        }

        me.resourceStore = resourceStore && Ext.StoreMgr.lookup(resourceStore) || null;

        if (me.resourceStore) {
            me.modelPersistencyManager && me.modelPersistencyManager.setResourceStore(me.resourceStore);
            me.idConsistencyManager && me.idConsistencyManager.setResourceStore(me.resourceStore);
            resourceStore.setEventStore(me);
        }

        if ((oldStore || resourceStore) && oldStore !== resourceStore) {
            /**
             * @event resourcestorechange
             * Fires when new resource store is set via {@link #setResourceStore} method.
             * @param {Sch.data.EventStore}         this
             * @param {Sch.data.ResourceStore|null} newResourceStore
             * @param {Sch.data.ResourceStore|null} oldResourceStore
             */
            me.fireEvent('resourcestorechange', me, resourceStore, oldStore);
        }
    },

    /**
     * Returns assignment store this event store is using by default.
     *
     * @return {Sch.data.AssignmentStore|null}
     */
    getAssignmentStore : function() {
        return this.assignmentStore;
    },

    /**
     * Sets assignment store instance this event store will be using by default.
     *
     * @param {Sch.data.AssignmentStore} store
     */
    setAssignmentStore : function(assignmentStore) {
        var me = this,
            oldStore = me.assignmentStore;

        if (me.assignmentStore) {
            me.assignmentStore.setEventStore(null);
            me.idConsistencyManager && me.idConsistencyManager.setAssignmentStore(null);
            me.modelPersistencyManager && me.modelPersistencyManager.setAssignmentStore(null);
        }

        me.assignmentStore = assignmentStore && Ext.StoreMgr.lookup(assignmentStore) || null;

        if (me.assignmentStore) {
            me.modelPersistencyManager && me.modelPersistencyManager.setAssignmentStore(me.assignmentStore);
            me.idConsistencyManager && me.idConsistencyManager.setAssignmentStore(me.assignmentStore);
            me.assignmentStore.setEventStore(me);
            // If assignment store's set then caching now will be done by it
            // and event store doesn't need to maintain it's own resource-to-events cache.
            Ext.destroy(me.resourceEventsCache);
        }
        else {
            // If assignment store's reset then caching now should be done by
            // event store again.
            me.resourceEventsCache = me.createResourceEventsCache();
        }

        if ((oldStore || assignmentStore) && oldStore !== assignmentStore) {
            /**
             * @event assignmentstorechange
             * Fires when new assignment store is set via {@link #setAssignmentStore} method.
             * @param {Sch.data.EventStore}           this
             * @param {Sch.data.AssignmentStore|null} newAssignmentStore
             * @param {Sch.data.AssignmentStore|null} oldAssignmentStore
             */
            me.fireEvent('assignmentstorechange', me, assignmentStore, oldStore);
        }
    },

    /**
    * Checks if a date range is allocated or not for a given resource.
    * @param {Date} start The start date
    * @param {Date} end The end date
    * @param {Sch.model.Event} excludeEvent An event to exclude from the check (or null)
    * @param {Sch.model.Resource} resource The resource
    * @return {Boolean} True if the timespan is available for the resource
    */
    isDateRangeAvailable: function (start, end, excludeEvent, resource) {
        var DATE = Sch.util.Date,
            events = this.getEventsForResource(resource),
            available = true;

        // This can be optimized further if we use simple for() statement (will lead to -1 function call in the loop)
        Ext.each(events, function (ev) {

            available = (
                excludeEvent === ev ||
                !DATE.intersectSpans(start, end, ev.getStartDate(), ev.getEndDate())
            );

            return available; // to immediately stop looping if interval is occupied by a non excluding event
        });

        return available;
    },

    /**
    * Returns events between the supplied start and end date
    * @param {Date} start The start date
    * @param {Date} end The end date
    * @param {Boolean} allowPartial false to only include events that start and end inside of the span
    * @return {Ext.util.MixedCollection} the events
    */
    getEventsInTimeSpan: function (start, end, allowPartial) {
        var coll = new Ext.util.MixedCollection(); // TODO: do we real need the mixed collection here?
        var events = [];

        if (allowPartial !== false) {
            var DATE = Sch.util.Date;

            this.forEachScheduledEvent(function (event, eventStart, eventEnd) {
                if (DATE.intersectSpans(eventStart, eventEnd, start, end)) {
                    events.push(event);
                }
            });
        } else {
            this.forEachScheduledEvent(function (event, eventStart, eventEnd) {
                if (eventStart - start >= 0 && end - eventEnd >= 0) {
                    events.push(event);
                }
            });
        }

        coll.addAll(events);

        return coll;
    },

    /**
     * Calls the supplied iterator function once for every scheduled event, providing these arguments
     *      - event : the event record
     *      - startDate : the event start date
     *      - endDate : the event end date
     *
     * Returning false cancels the iteration.
     *
     * @param {Function} fn iterator function
     * @param {Object} scope scope for the function
     */
    forEachScheduledEvent : function (fn, scope) {

        this.each(function (event) {
            var eventStart = event.getStartDate(),
                eventEnd = event.getEndDate();

            if (eventStart && eventEnd) {
                return fn.call(scope || this, event, eventStart, eventEnd);
            }
        }, this);
    },

    /**
     * Returns an object defining the earliest start date and the latest end date of all the events in the store.
     *
     * @return {Object} An object with 'start' and 'end' Date properties (or null values if data is missing).
     */
    getTotalTimeSpan : function() {
        var earliest = new Date(9999,0,1),
            latest = new Date(0),
            D = Sch.util.Date;

        this.each(function(r) {
            if (r.getStartDate()) {
                earliest = D.min(r.getStartDate(), earliest);
            }
            if (r.getEndDate()) {
                latest = D.max(r.getEndDate(), latest);
            }
        });

        // TODO: this will fail in programs designed to work with events in the past (after Jan 1, 1970)
        earliest = earliest < new Date(9999,0,1) ? earliest : null;
        latest = latest > new Date(0) ? latest : null;

        return {
            start : earliest || null,
            end : latest || earliest || null
        };
    },

    /**
     * Filters the events associated with a resource, based on the function provided. An array will be returned for those
     * events where the passed function returns true.
     * @private {Sch.model.Resource} resource
     * @param {Sch.model.Resource} resource
     * @param {Function} fn The function
     * @param {Object} [scope] The 'this object' for the function
     * @return {Sch.model.Event[]} the events in the time span
     */
    filterEventsForResource : function (resource, fn, scope) {
        // `getEvents` method of the resource will use either `indexByResource` or perform a full scan of the event store
        var events = resource.getEvents(this);

        return Ext.Array.filter(events, fn, scope || this);
    },

    // This method provides a way for the store to append a new record, and the consuming class has to implement it
    // since Store and TreeStore don't share the add API.
    append : function(record) {
        throw 'Must be implemented by consuming class';
    },

    // {{{ Entire data model management methods

    /**
     * Returns all resources assigned to an event.
     *
     * @param {Sch.model.Event|Mixed} event
     * @return {[Sch.model.Resource]}
     */
    getResourcesForEvent : function(event) {
        var me = this,
            assignmentStore = me.getAssignmentStore(),
            resourceStore   = me.getResourceStore(),
            result;

        if (assignmentStore) {
            result = assignmentStore.getResourcesForEvent(event);
        }
        else if (resourceStore) {
            event   = event instanceof Sch.model.Event && event || me.getModelById(event);
            result = event && resourceStore.getModelById(event.getResourceId());
            result = result && [result] || [];
        }
        else {
            result = [];
        }

        return result;
    },

    /**
     * Returns all events assigned to a resource
     *
     * @param {Sch.model.Resource|Mixed} resource
     * @return {[Sch.model.Event]}
     */
    getEventsForResource : function(resource) {
        var me = this,
            assignmentStore = me.getAssignmentStore(),
            resourceStore,
            result;

        if (assignmentStore) {
            result = assignmentStore.getEventsForResource(resource);
        }
        // Resource->Events cache is not always accessable, a subclass might override createResourceEventsCache() method
        // returning null
        else if (me.resourceEventsCache) {
            result = me.resourceEventsCache.get(resource);
        }
        else {
            result = [];
        }

        return result;
    },

    /**
     * Returns all assignments for a given event.
     *
     * @param {Sch.model.Event|Mixed} event
     * @return {[Sch.model.Assignment]}
     */
    getAssignmentsForEvent : function(event) {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        return assignmentStore && assignmentStore.getAssignmentsForEvent(event) || [];
    },

    /**
     * Returns all assignments for a given resource.
     *
     * @param {Sch.model.Resource|Mixed} resource
     * @return {[Sch.model.Assignment]}
     */
    getAssignmentsForResource : function(resource) {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        return assignmentStore && assignmentStore.getAssignmentsForResource(resource) || [];
    },

    /**
     * Creates and adds assignment record for a given event and a resource.
     *
     * @param {Sch.model.Event|Mixed} The event
     * @param {Sch.model.Resource|Mixed|[Sch.model.Resource]|[Mixed]} The resource(s) to assign to the event
     */
    assignEventToResource : function(event, resource) {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        if (assignmentStore) {
            assignmentStore.assignEventToResource(event, resource);
        }
        else {
            event = event instanceof Sch.model.Event && event || me.getModelById(event);
            resource = resource instanceof Sch.model.Resource ? resource.getId() : resource; // resource id might be 0 thus we use ? operator
            event && event.setResourceId(resource); // This will update resource events cache via 'update' event.
        }
    },

    /**
     * Removes assignment record for a given event and a resource.
     *
     * @param {Sch.model.Event|Mixed} event
     * @param {Sch.model.Resource|Mixed} resource
     */
    unassignEventFromResource : function(event, resource) {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        if (assignmentStore) {
            assignmentStore.unassignEventFromResource(event, resource);
        }
        else  {
            event    = event instanceof Sch.model.Event && event || me.getModelById(event);
            resource = resource instanceof Sch.model.Resource ? resource.getId() : resource; // resource id might be 0 thus we use ? operator
            if (event && event.getResourceId() == resource) {
                event.setResourceId(null); // This will update resource events cache via 'update' event
            }
        }
    },

    /**
     * Reassigns an event from an old resource to a new resource
     *
     * @param {Sch.model.Event/Mixed}    event    An event to reassign
     * @param {Sch.model.Resource/Mixed} resource A resource to unassign from
     * @parma {Sch.model.Resource/Mixed} resource A resource to assign to
     */
    reassignEventFromResourceToResource : function(event, oldResource, newResource) {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        if (assignmentStore) {
            assignmentStore.unassignEventFromResource(event, oldResource);
            assignmentStore.assignEventToResource(event, newResource);
        }
        else {
            event = event instanceof Sch.model.Event && event || me.getModelById(event);
            oldResource = oldResource instanceof Sch.model.Resource ? oldResource.getId() : oldResource; // resource id might be 0 thus we use ? operator
            newResource = newResource instanceof Sch.model.Resource ? newResource.getId() : newResource; // resource id might be 0 thus we use ? operator
            if (event.getResourceId() == oldResource) {
                event.setResourceId(newResource);
            }
        }
    },

    /**
     * Checks whether an event is assigned to a resource.
     *
     * @param {Sch.model.Event|Mixed} event
     * @param {Sch.model.Resource|Mixed} resource
     * @param {Function} [fn] Function which will resieve assignment record if one present
     * @return {Boolean}
     */
    isEventAssignedToResource : function(event, resource) {
        var me = this,
            assignmentStore = me.getAssignmentStore(),
            result;

        if (assignmentStore) {
            result = assignmentStore.isEventAssignedToResource(event, resource);
        }
        else {
            event    = event    instanceof Sch.model.Event && event || me.getModelById(event);
            resource = resource instanceof Sch.model.Resource ? resource.getId() : resource; // resource id might be 0 thus we use ? operator
            result = event && (event.getResourceId() == resource) || false;
        }

        return result;
    },

    /**
     * Removes all assignments for given event
     *
     * @param {Sch.model.Event|Mixed} event
     */
    removeAssignmentsForEvent : function(event) {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        if (assignmentStore) {
            assignmentStore.removeAssignmentsForEvent(event);
        }
        else {
            event = event instanceof Sch.model.Event && event || me.getModelById(event);
            event && event.setResourceId(null); // This will update resource events cache via 'update' event
        }
    },

    /**
     * Removes all assignments for given resource
     *
     * @param {Sch.model.Resource|Mixed} resource
     */
    removeAssignmentsForResource : function(resource) {
        var me = this,
            assignmentStore = me.getAssignmentStore(),
            resourceStore   = me.getResourceStore();

        if (assignmentStore) {
            assignmentStore.removeAssignmentsForResource(resource);
        }
        else if (resourceStore) {
            resource = resource instanceof Sch.model.Resource && resource || resourceStore.getModelById(resource);
            resource && Ext.Array.forEach(me.resourceEventsCache.get(resource), function(event) {
                event.setResourceId(null); // This will update resource events cache via 'update' event
            });
        }
        else {
            resource = resource instanceof Sch.model.Resource ? resource.getId() : resource; // resource id might be 0 thus we use ? operator
            Ext.Array.forEach(me.getRange(), function(event) {
                event.getResourceId() == resource && event.setResourceId(null); // This will update resource events cache via 'update' event
            });
        }
    },

    /**
     * Checks if given event record is persistable.
     * In case assignment store is used to assign events to resources and vise versa event is considered to be always
     * persistable. Otherwise backward compatible logic is used, i.e. event is considered to be persistable when
     * resources it's assigned to are not phantom.
     *
     * @param {Sch.model.Range} event
     * @return {Boolean}
     */
    isEventPersistable : function(event) {
        var me = this,
            assignmentStore = me.getAssignmentStore(),
            resources, i, len,
            result = true;

        if (!assignmentStore) {
            resources = event.getResources();
            for (i = 0, len = resources.length; result && i < len; ++i) {
                result = resources[i].phantom !== true;
            }
        }

        return result;
    }
    // }}}
});

/**

 @class Sch.model.Range
 @extends Sch.model.Customizable

 This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.

 Its a subclass of the {@link Sch.model.Customizable}, which is in turn subclass of {@link Ext.data.Model}.
 Please refer to documentation of those classes to become familar with the base interface of this class.

 A range has the following fields:

 - `StartDate`   - start date of the task in the ISO 8601 format
 - `EndDate`     - end date of the task in the ISO 8601 format (not inclusive)
 - `Name`        - an optional name of the range
 - `Cls`         - an optional CSS class to be associated with the range.

 The name of any field can be customized in the subclass. Please refer to {@link Sch.model.Customizable} for details.

 */

if (!Ext.ClassManager.get("Sch.model.Range")) {
    Ext.define('Sch.model.Range', {
        extend : 'Sch.model.Customizable',

        requires : [
            'Sch.util.Date'
        ],

        idProperty : 'Id',

        // For Sencha Touch
        config     : Ext.versions.touch ? { idProperty : 'Id' } : null,

        /**
         * @cfg {String} startDateField The name of the field that defines the range start date. Defaults to "StartDate".
         */
        startDateField : 'StartDate',

        /**
         * @cfg {String} endDateField The name of the field that defines the range end date. Defaults to "EndDate".
         */
        endDateField : 'EndDate',

        /**
         * @cfg {String} nameField The name of the field that defines the range name. Defaults to "Name".
         */
        nameField : 'Name',

        /**
         * @cfg {String} clsField The name of the field that holds the range "class" value (usually corresponds to a CSS class). Defaults to "Cls".
         */
        clsField : 'Cls',

        customizableFields : [
        /**
         * @method getStartDate
         *
         * Returns the range start date
         *
         * @return {Date} The start date
         */
            { name : 'StartDate', type : 'date', dateFormat : 'c' },

        /**
         * @method getEndDate
         *
         * Returns the range end date
         *
         * @return {Date} The end date
         */
            { name : 'EndDate', type : 'date', dateFormat : 'c' },

        /**
         * @method getCls
         *
         * Gets the "class" of the range
         *
         * @return {String} cls The "class" of the range
         */
        /**
         * @method setCls
         *
         * Sets the "class" of the range
         *
         * @param {String} cls The new class of the range
         */
            {
                name : 'Cls', type : 'string'
            },

        /**
         * @method getName
         *
         * Gets the name of the range
         *
         * @return {String} name The "name" of the range
         */
        /**
         * @method setName
         *
         * Sets the "name" of the range
         *
         * @param {String} name The new name of the range
         */
            {
                name : 'Name', type : 'string'
            }
        ],

        /**
         * @method setStartDate
         *
         * Sets the range start date
         *
         * @param {Date} date The new start date
         * @param {Boolean} keepDuration Pass `true` to keep the duration of the task ("move" the event), `false` to change the duration ("resize" the event).
         * Defaults to `false`
         */
        setStartDate : function (date, keepDuration) {
            var endDate = this.getEndDate();
            var oldStart = this.getStartDate();

            this.set(this.startDateField, date);

            if (keepDuration === true && endDate && oldStart) {
                this.setEndDate(Sch.util.Date.add(date, Sch.util.Date.MILLI, endDate - oldStart));
            }
        },

        /**
         * @method setEndDate
         *
         * Sets the range end date
         *
         * @param {Date} date The new end date
         * @param {Boolean} keepDuration Pass `true` to keep the duration of the task ("move" the event), `false` to change the duration ("resize" the event).
         * Defaults to `false`
         */
        setEndDate : function (date, keepDuration) {
            var startDate = this.getStartDate();
            var oldEnd = this.getEndDate();

            this.set(this.endDateField, date);

            if (keepDuration === true && startDate && oldEnd) {
                this.setStartDate(Sch.util.Date.add(date, Sch.util.Date.MILLI, -(oldEnd - startDate)));
            }
        },

        /**
         * Sets the event start and end dates
         *
         * @param {Date} start The new start date
         * @param {Date} end The new end date
         */
        setStartEndDate : function (start, end) {
            this.beginEdit();

            this.set(this.startDateField, start);
            this.set(this.endDateField, end);

            this.endEdit();
        },

        /**
         * Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.
         * @return {Date[]}
         */
        getDates : function () {
            var dates = [],
                endDate = this.getEndDate();

            for (var date = Ext.Date.clearTime(this.getStartDate(), true); date < endDate; date = Sch.util.Date.add(date, Sch.util.Date.DAY, 1)) {

                dates.push(date);
            }

            return dates;
        },


        /**
         * Iterates over the results from {@link #getDates}
         * @param {Function} func The function to call for each date
         * @param {Object} scope The scope to use for the function call
         */
        forEachDate : function (func, scope) {
            return Ext.each(this.getDates(), func, scope);
        },

        // Simple check if end date is greater than start date
        isValid     : function () {
            var valid = this.callParent(arguments);

            if (valid) {
                var start = this.getStartDate(),
                    end = this.getEndDate();

                valid = !start || !end || (end - start >= 0);
            }

            return valid;
        },

        /**
         * Shift the dates for the date range by the passed amount and unit
         * @param {String} unit The unit to shift by (e.g. range.shift(Sch.util.Date.DAY, 2); ) to bump the range 2 days forward
         * @param {Number} amount The amount to shift
         */
        shift : function (unit, amount) {
            this.setStartEndDate(
                Sch.util.Date.add(this.getStartDate(), unit, amount),
                Sch.util.Date.add(this.getEndDate(), unit, amount)
            );
        },

        fullCopy : function () {
            return this.copy.apply(this, arguments);
        }
    });
}
/*
 * @class Sch.model.TimeAxisTick
 * @extends Sch.model.Range
 *
 * A simple model with a start/end date interval defining a 'tick' on the time axis.
 */
if (!Ext.ClassManager.get("Sch.model.TimeAxisTick")) {
    Ext.define('Sch.model.TimeAxisTick', {
        extend : 'Sch.model.Range',

        startDateField : 'start',
        endDateField   : 'end'
    });
}

/**
 * @class Sch.model.Assignment
 * @extends Sch.model.Customizable
 *
 * This class represent a single assignment of a resource to an event in scheduler.
 * It is a subclass of the {@link Sch.model.Customizable} class, which in its turn subclasses {@link Ext.data.Model}.
 * Please refer to documentation of those classes to become familar with the base interface of this class.
 *
 * An Assignment has the following fields:
 * - `Id` - The id of the assignment
 * - `ResourceId` - The id of the resource assigned
 * - `EventId` - The id of the event to which the resource is assigned
 *
 * The names of these fields can be customized by subclassing this class.
 * Please refer to {@link Sch.model.Customizable} for details.
 */
if (!Ext.ClassManager.get("Sch.model.Assignment")) Ext.define('Sch.model.Assignment', {
    extend  : 'Sch.model.Customizable',

    idProperty : 'Id',

    customizableFields  : [
        { name : 'ResourceId' },
        { name : 'EventId' }
    ],

    /**
     * @cfg {String} resourceIdField The name of the field identifying the resource to which an assignment belongs.
     * Defaults to "ResourceId".
     */
    resourceIdField         : 'ResourceId',

    /**
     * @cfg {String} eventIdField The name of the field identifying an event to which an assignment belongs.
     * Defaults to "EventId".
     */
    eventIdField             : 'EventId',

    getInternalId : function() {
        return this.internalId;
    },

    /**
     * Returns an assigment store this assignment is part of. Assignment must be part of an assigment store
     * to be able to retrieve it.
     *
     * @return {Sch.data.AssignmentStore|null}
     */
    getAssignmentStore : function() {
        return this.joined && this.joined[ 0 ];
    },

    /**
     * Returns an event store this assignment uses as default event store. Assignment must be part
     * of an assignment store to be able to retrieve default event store.
     *
     * @return {Sch.data.EventStore|null}
     */
    getEventStore : function() {
        var assignmentStore = this.getAssignmentStore();
        return assignmentStore && assignmentStore.getEventStore();
    },

    /**
     * Returns a resource store this assignment uses as default resource store. Assignment must be part
     * of an assignment store to be able to retrieve default resource store.
     *
     * @return {Sch.data.ResourceStore|null}
     */
    getResourceStore : function() {
        var eventStore = this.getEventStore();
        return eventStore && eventStore.getResourceStore();
    },

    /**
     * Returns an event associated with this assignment.
     *
     * @privateparam  {Sch.data.EventStore} [eventStore]
     * @return {Sch.model.Range} Event instance
     */
    getEvent: function(eventStore) {
        var me = this;
        // removed assignment will not have "this.joined" so we are providing a way to get an event via provided
        // event store
        eventStore = eventStore || me.getEventStore();
        return eventStore && eventStore.getModelById(me.getEventId());
    },

    /**
     * Returns the resource associated with this assignment.
     *
     * @privateparam {Sch.data.ResourceStore} [resourceStore]
     * @return {Sch.model.Resource} Instance of resource
     */
    getResource: function(resourceStore) {
        var me = this;
        // removed assignment will not have "this.joined" so we are providing a way to get a resource via provided
        // resource store
        resourceStore = resourceStore || me.getResourceStore();
        return resourceStore && resourceStore.getModelById(me.getResourceId());
    },

    /**
     * Convenience method to get a name of the associated event.
     *
     * @privateparam  {Sch.data.EventStore} [eventStore]
     * @return {String} name
     */
    getEventName : function(eventStore) {
        var evnt = this.getEvent(eventStore);
        return evnt && evnt.getName() || '';
    },

    /**
     * Convenience method to get a name of the associated resource.
     *
     * @privateparam {Sch.data.ResourceStore} [resourceStore]
     * @return {String} name
     */
    getResourceName : function(resourceStore) {
        var resource = this.getResource(resourceStore);
        return resource && resource.getName() || '';
    },

    /**
     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')
     *
     * @return {Boolean} true if this model can be persisted to server.
     */
    isPersistable : function() {
        var me       = this,
            event    = me.getEvent(),
            resource = me.getResource();

        return event && !event.phantom && resource && !resource.phantom;
    },

    fullCopy : function() {
        return this.copy.apply(this, arguments);
    }
});

/**
@class Sch.model.Resource
@extends Sch.model.Customizable

This class represent a single Resource in the scheduler chart. It's a subclass of the {@link Sch.model.Customizable}, which is in turn subclass of {@link Ext.data.Model}.
Please refer to documentation of those classes to become familar with the base interface of the resource.

A Resource has only 2 mandatory fields - `Id` and `Name`. If you want to add more fields with meta data describing your resources then you should subclass this class:

    Ext.define('MyProject.model.Resource', {
        extend      : 'Sch.model.Resource',

        fields      : [
            // `Id` and `Name` fields are already provided by the superclass
            { name: 'Company',          type : 'string' }
        ],

        getCompany : function () {
            return this.get('Company');
        },
        ...
    });

If you want to use other names for the Id and Name fields you can configure them as seen below:

    Ext.define('MyProject.model.Resource', {
        extend      : 'Sch.model.Resource',

        nameField   : 'UserName',
        ...
    });

Please refer to {@link Sch.model.Customizable} for details.
*/

// Don't redefine the class, which will screw up instanceof checks etc
if (!Ext.ClassManager.get('Sch.model.Resource')) Ext.define('Sch.model.Resource', {
    extend : 'Sch.model.Customizable',

    idProperty : 'Id',
    config     : Ext.versions.touch ? { idProperty : 'Id' } : null,

    /**
     * @cfg {String} nameField The name of the field that holds the resource name. Defaults to "Name".
     */
    nameField : 'Name',

    customizableFields : [
        /**
         * @method getName
         *
         * Returns the resource name
         *
         * @return {String} The name of the resource
         */
        /**
         * @method setName
         *
         * Sets the resource name
         *
         * @param {String} The new name of the resource
         */
        { name : 'Name', type : 'string' }
    ],

    getInternalId : function() {
        return this.internalId;
    },

    /**
     * Returns a resource store this resource is part of. Resource must be part
     * of a resource store to be able to retrieve resource store.
     *
     * @return {Sch.data.ResourceStore|null}
     */
    getResourceStore : function() {
        return this.joined && this.joined[ 0 ];
    },

    /**
     * Returns an event store this resource uses as default. Resource must be part
     * of a resource store to be able to retrieve event store.
     *
     * @return {Sch.data.EventStore|null}
     */
    getEventStore : function () {
        var resourceStore = this.getResourceStore();
        return resourceStore && resourceStore.getEventStore() || this.parentNode && this.parentNode.getEventStore();
    },

    /**
     * Returns as assignment store this resources uses as default. Resource must be part
     * of a resource store to be able to retrieve default assignment store.
     *
     * @return {Sch.data.AssignmentStore|null}
     */
    getAssignmentStore : function() {
        var eventStore = this.getEventStore();
        return eventStore && eventStore.getAssignmentStore();
    },

    /**
     * Returns an array of events, associated with this resource
     *
     * @param {Sch.data.EventStore} eventStore (optional) The event store to get events for (if a resource is bound to multiple stores)
     * @return {Sch.model.Range[]}
     */
    getEvents : function (eventStore) {
        var me = this;
        eventStore = eventStore || me.getEventStore();
        return eventStore && eventStore.getEventsForResource(me) || [];
    },

    /**
     * Returns all assignments for the resource. Resource must be part of the store for this method to work.
     *
     * @return {[Sch.model.Assignment]}
     */
    getAssignments : function() {
        var me = this,
            eventStore = me.getEventStore();

        return eventStore && eventStore.getAssignmentsForResource(me);
    },

    /**
     * Returns true if the Resource can be persisted.
     * In a flat store resource is always considered to be persistable, in a tree store resource is considered to
     * be persitable if it's parent node is persistable.
     *
     * @return {Boolean} true if this model can be persisted to server.
     */
    isPersistable : function() {
        var parent = this.parentNode;
        return !parent || !parent.phantom || (parent.isRoot && parent.isRoot());
    }
});

/**
 * @class Sch.data.mixin.ResourceStore
 * This is a mixin for the ResourceStore functionality. It is consumed by the {@link Sch.data.ResourceStore} class ("usual" store) and {@link Sch.data.ResourceTreeStore} - tree store.
 *
 */
if (!Ext.ClassManager.get("Sch.data.mixin.ResourceStore")) Ext.define("Sch.data.mixin.ResourceStore", {

    eventStore : null,

    /**
     * Returns the associated event store instance.
     *
     * @return {Gnt.data.EventStore}
     */
    getEventStore: function() {
        return this.eventStore;
    },

    /**
     * Sets the associated event store instance.
     *
     * @param {Sch.data.EventStore} eventStore
     */
    setEventStore: function(eventStore) {
        var me = this,
            oldStore;

        if (me.eventStore !== eventStore) {
            oldStore      = me.eventStore;
            me.eventStore = eventStore && Ext.StoreMgr.lookup(eventStore) || null;
            /**
             * @event eventstorechange
             * Fires when new event store is set via {@link #setEventStore} method.
             * @param {Sch.data.ResourceStore}   this
             * @param {Sch.data.EventStore|null} newEventStore
             * @param {Sch.data.EventStore|null} oldEventStore
             */
            me.fireEvent('eventstorechange', me, eventStore, oldStore);
        }
    }
});

/**
@class Sch.data.mixin.FilterableTreeStore

This is a mixin for the Ext.data.TreeStore providing filtering functionality. Please note, that Ext JS does not support filtering of tree stores,
and the functionality of this mixin is not related to the standard Ext JS store filtering (which utilizes Ext.util.Filter etc). This implementation should however be flexible
enough to cover all common uses cases.

The functionality of this class can be divided into two sections:

Filtering
=========

Filtering of a tree store is different from filtering flat stores. In a flat store, all nodes (items)
are of the same type and on the same hierarchical level. Filtering can hide any nodes that not matching some criteria.

On the other hand, in tree stores some of the nodes represent parent nodes with child nodes
("parent", "folder", "group" etc) and other nodes are "leaves". And usually a "leaf" node can't be
sufficiently identified w/o its parents - i.e. it is important to know all the parents that
a particular leaf node belongs to. So when filtering tree stores, we need to show all parent nodes of the filtered nodes.

Moreover, filtering is usually being used for searching and thus should ignore the "expanded/collapsed"
state of tree nodes (we need to search among all nodes, including collapsed ones).

Filtering can be activated with the {@link #filterTreeBy} method and cleared with {@link #clearTreeFilter}.

Hiding/Showing nodes
====================

Sometimes we want to keep some nodes in the tree, but remove them from the visual presentation and hide them.
This can be done with {@link #hideNodesBy} method and {@link #showAllNodes} can be used to restore the previous state.
When a node is hidden, all its child nodes are hidden too.

"Hidden" nodes will never appear in filtered results - consider them removed from the tree store completely.
They will, however, appear in a data package for a `store.sync()` operation (you can override the the "filterUpdated" method to exclude them from there if needed).

Note, that it is possible to filter a store with hidden nodes, but not the other way around (hide some nodes of a filtered store).

*/
Ext.define("Sch.data.mixin.FilterableTreeStore", {

    isFilteredFlag                      : false,
    isHiddenFlag                        : false,

    // ref to the last filter applied
    lastTreeFilter                      : null,
    lastTreeHiding                      : null,

    /**
     * @cfg {Boolean} allowExpandCollapseWhileFiltered When enabled (by default), tree store allows user to expand/collapse nodes while it is
     * filtered with the {@link #filterTreeBy} method. Please set it explicitly to `false` to restore the previous behavior,
     * where collapse/expand operations were disabled.
     */
    allowExpandCollapseWhileFiltered    : true,

    /**
     * @cfg {Boolean} reApplyFilterOnDataChange When enabled (by default), tree store will update the filtering (both {@link #filterTreeBy}
     * and {@link #hideNodesBy}) after new data is added to the tree or removed from it. Please set it explicitly to `false` to restore the previous behavior,
     * where this feature did not exist.
     */
    reApplyFilterOnDataChange           : true,

    suspendIncrementalFilterRefresh     : 0,

    filterGeneration                    : 0,
    currentFilterGeneration             : null,

    dataChangeListeners                 : null,
    monitoringDataChange                : false,
    
    filterUpdateSuspended               : false,

    onClassMixedIn : function (cls) {
        cls.override(Sch.data.mixin.FilterableTreeStore.prototype.inheritables() || {});
    },

     // Events (private)
     //    'filter-set',
     //    'filter-clear',
     //    'nodestore-datachange-start',
     //    'nodestore-datachange-end'

    /**
     * Should be called in the constructor of the consuming class, to activate the filtering functionality.
     */
    initTreeFiltering : function () {
        this.treeFilter = new Ext.util.Filter({
            filterFn    : this.isNodeFilteredIn,
            scope       : this
        });

        this.dataChangeListeners    = {
            nodeappend  : this.onNeedToUpdateFilter,
            nodeinsert  : this.onNeedToUpdateFilter,

            scope       : this
        };
        
        if (Ext.getVersion().isGreaterThan('5.1.0.107')) {
            // in Ext 5.1.1 sencha apparently fixed some issue and now each 'endupdate' on filters
            // lead to view refresh. When store is loading, filter is applied to each record and each time view is refreshed.
            // This code suspend filters until 'load' event is fired
            Ext.apply(this.dataChangeListeners, {
                beforeload  : this.onStoreBeforeLoad,
                load        : this.onStoreLoad
            });
        }
    },
    
    onStoreBeforeLoad : function () {
        this.filterUpdateSuspended = true;
    },
    
    onStoreLoad : function () {
        this.filterUpdateSuspended = false;
        this.onNeedToUpdateFilter();
    },

    startDataChangeMonitoring : function () {
        if (this.monitoringDataChange) return;

        this.monitoringDataChange   = true;

        this.on(this.dataChangeListeners);
    },


    stopDataChangeMonitoring : function () {
        if (!this.monitoringDataChange) return;

        this.monitoringDataChange   = false;

        this.un(this.dataChangeListeners);
    },


    onNeedToUpdateFilter : function () {
        if (this.reApplyFilterOnDataChange &&
            !this.filterUpdateSuspended && 
            !this.suspendIncrementalFilterRefresh) this.reApplyFilter();
    },


    /**
     * Clears the current filter (if any).
     *
     * See also {@link Sch.data.mixin.FilterableTreeStore} for additional information.
     */
    clearTreeFilter : function () {
        if (!this.isTreeFiltered()) return;

        this.currentFilterGeneration = null;
        this.isFilteredFlag     = false;
        this.lastTreeFilter     = null;

        if (!this.isTreeFiltered(true)) this.stopDataChangeMonitoring();

        this.refreshNodeStoreContent();

        this.fireEvent('filter-clear', this);
    },


    reApplyFilter : function () {
        // bypass the nodeStore content refresh if store has both hiding and filtering
        if (this.isHiddenFlag) this.hideNodesBy.apply(this, this.lastTreeHiding.concat(this.isFilteredFlag));

        if (this.isFilteredFlag) this.filterTreeBy(this.lastTreeFilter);
    },


    refreshNodeStoreContent : function () {
        var me      = this,
            filters = me.getFilters();

        if (filters.indexOf(me.treeFilter) < 0) {
            me.addFilter(me.treeFilter);
        } else {
            this.getFilters().fireEvent('endupdate', this.getFilters());
        }
    },


    getIndexInTotalDataset : function (record) {
        var root            = this.getRootNode(),
            index           = -1;

        var rootVisible     = this.rootVisible;

        if (!rootVisible && record == root) return -1;

        var isFiltered      = this.isTreeFiltered();
        var currentFilterGeneration = this.currentFilterGeneration;

        var collectNodes    = function (node) {
            if (isFiltered && node.__filterGen != currentFilterGeneration || node.hidden)
                // stop scanning if record we are looking for is hidden
                if (node == record) return false;

            if (rootVisible || node != root) index++;

            // stop scanning if we found the record
            if (node == record) return false;

            if (!node.data.leaf && node.isExpanded()) {
                var childNodes  = node.childNodes,
                    length      = childNodes.length;

                for (var k = 0; k < length; k++)
                    if (collectNodes(childNodes[ k ]) === false) return false;
            }
        };

        collectNodes(root);

        return index;
    },

    /**
     * Returns true if this store is currently filtered
     *
     * @return {Boolean}
     */
    isTreeFiltered : function (orHasHiddenNodes) {
        return this.isFilteredFlag || orHasHiddenNodes && this.isHiddenFlag;
    },

    markFilteredNodes : function (top, params) {
        var me                  = this;
        var filterGen           = this.currentFilterGeneration;
        var visibleNodes        = {};

        var root                = this.getRootNode(),
            rootVisible         = this.rootVisible;

        var includeParentNodesInResults = function (node) {
            var parent  = node.parentNode;

            while (parent && !visibleNodes[ parent.internalId ]) {
                visibleNodes[ parent.internalId ] = true;

                parent = parent.parentNode;
            }
        };

        var filter                  = params.filter;
        var scope                   = params.scope || this;
        var shallowScan             = params.shallow;
        var checkParents            = params.checkParents || shallowScan;
        var fullMatchingParents     = params.fullMatchingParents;
        var onlyParents             = params.onlyParents || fullMatchingParents;

        if (onlyParents && checkParents) throw new Error("Can't combine `onlyParents` and `checkParents` options");

        if (rootVisible) visibleNodes[ root.internalId ] = true;

        var collectNodes    = function (node) {
            if (node.hidden) return;

            var nodeMatches, childNodes, length, k;

            // `collectNodes` should not be called for leafs at all
            if (node.data.leaf) {
                if (filter.call(scope, node, visibleNodes)) {
                    visibleNodes[ node.internalId ] = true;

                    includeParentNodesInResults(node);
                }
            } else {
                if (onlyParents) {
                    nodeMatches     = filter.call(scope, node);

                    childNodes      = node.childNodes;
                    length          = childNodes.length;

                    if (nodeMatches) {
                        visibleNodes[ node.internalId ] = true;

                        includeParentNodesInResults(node);

                        // if "fullMatchingParents" option enabled we gather all matched parent's sub-tree
                        if (fullMatchingParents) {
                            node.cascadeBy(function (currentNode) {
                                visibleNodes[ currentNode.internalId ] = true;
                            });

                            return;
                        }
                    }

                    // at this point nodeMatches and fullMatchingParents can't be both true
                    for (k = 0; k < length; k++)
                        if (nodeMatches && childNodes[ k ].data.leaf)
                            visibleNodes[ childNodes[ k ].internalId ] = true;
                        else if (!childNodes[ k ].data.leaf)
                            collectNodes(childNodes[ k ]);

                } else {
                    // mark matching nodes to be kept in results
                    if (checkParents) {
                        nodeMatches = filter.call(scope, node, visibleNodes);

                        if (nodeMatches) {
                            visibleNodes[ node.internalId ] = true;

                            includeParentNodesInResults(node);
                        }
                    }

                    // recurse if
                    // - we don't check parents
                    // - shallow scan is not enabled
                    // - shallow scan is enabled and parent node matches the filter or it does not, but its and invisible root, so we don't care
                    if (!checkParents || !shallowScan || shallowScan && (nodeMatches || node == root && !rootVisible)) {
                        childNodes      = node.childNodes;
                        length          = childNodes.length;

                        for (k = 0; k < length; k++) collectNodes(childNodes[ k ]);
                    }
                }
            }
        };

        collectNodes(top);

        // additional filtering of the result set
        // removes parent nodes which do not match filter themselves and have no matching children


        root.cascadeBy(function (node) {
            if (visibleNodes[ node.internalId ]) {
                node.__filterGen = filterGen;

                if (me.allowExpandCollapseWhileFiltered && !node.data.leaf) node.expand();
            }
        });

    },


    /**
     * This method filters the tree store. It accepts an object with the following properties:
     *
     * - `filter` - a function to check if a node should be included in the result. It will be called for each **leaf** node in the tree and will receive the current node as the first argument.
     * It should return `true` if the node should remain visible, `false` otherwise. The result will also contain all parents nodes of all matching leafs. Results will not include
     * parent nodes, which do not have at least one matching child.
     * To call this method for parent nodes too, pass an additional parameter - `checkParents` (see below).
     * - `scope` - a scope to call the filter with (optional)
     * - `checkParents` - when set to `true` will also call the `filter` function for each parent node. If the function returns `false` for some parent node,
     * it could still be included in the filtered result if some of its children match the `filter` (see also "shallow" option below). If the function returns `true` for a parent node, it will be
     * included in the filtering results even if it does not have any matching child nodes.
     * - `shallow` - implies `checkParents`. When set to `true`, it will stop checking child nodes if the `filter` function return `false` for a parent node. The whole sub-tree, starting
     * from a non-matching parent, will be excluded from the result in such case.
     * - `onlyParents` - alternative to `checkParents`. When set to `true` it will only call the provided `filter` function for parent tasks. If
     * the filter returns `true`, the parent and all its direct child leaf nodes will be included in the results. If the `filter` returns `false`, a parent node still can
     * be included in the results (w/o direct children leafs), if some of its child nodes matches the filter.
     * - `fullMatchingParents` - implies `onlyParents`. In this mode, if a parent node matches the filter, then not only its direct children
     * will be included in the results, but the whole sub-tree, starting from the matching node.
     *
     * Repeated calls to this method will clear previous filters.
     *
     * This function can be also called with 2 arguments, which should be the `filter` function and `scope` in such case.
     *
     * For example:

    treeStore.filterTreeBy({
        filter          : function (node) { return node.get('name').match(/some regexp/) },
        checkParents    : true
    })

    // or, if you don't need to set any options:
    treeStore.filterTreeBy(function (node) { return node.get('name').match(/some regexp/) })

     *
     * See also {@link Sch.data.mixin.FilterableTreeStore} for additional information.
     *
     * @param {Object} params
     */
    filterTreeBy : function (params, scope) {
        this.currentFilterGeneration = this.filterGeneration++;

        var filter;

        if (arguments.length == 1 && Ext.isObject(arguments[ 0 ])) {
            scope       = params.scope;
            filter      = params.filter;
        } else {
            filter      = params;
            params      = { filter : filter, scope : scope };
        }

        this.fireEvent('nodestore-datachange-start', this);

        params                      = params || {};

        this.markFilteredNodes(this.getRootNode(), params);

        this.startDataChangeMonitoring();

        this.isFilteredFlag     = true;
        this.lastTreeFilter     = params;

        //this.fireEvent('clear', this);

        this.fireEvent('nodestore-datachange-end', this);

        this.fireEvent('filter-set', this);

        this.refreshNodeStoreContent();
    },


    isNodeFilteredIn : function (node) {
        var isFiltered              = this.isTreeFiltered();
        var currentFilterGeneration = this.currentFilterGeneration;

        return this.loading || !Boolean(isFiltered && node.__filterGen != currentFilterGeneration || node.hidden);
    },


    hasNativeFilters : function () {
        var me      = this,
            filters = me.getFilters(),
            count   = filters.getCount();

        return (count && count > 1) || filters.indexOf(me.treeFilter) < 0;
    },


    /**
     * Hide nodes from the visual presentation of tree store (they still remain in the store).
     *
     * See also {@link Sch.data.mixin.FilterableTreeStore} for additional information.
     *
     * @param {Function} filter - A filtering function. Will be called for each node in the tree store and receive
     * the current node as the 1st argument. Should return `true` to **hide** the node
     * and `false`, to **keep it visible**.
     * @param {Object} scope (optional).
     */
    hideNodesBy : function (filter, scope, skipNodeStoreRefresh) {
        var me      = this;

        if (me.isFiltered() && me.hasNativeFilters()) throw new Error("Can't hide nodes of the filtered tree store");

        scope       = scope || me;

        me.getRootNode().cascadeBy(function (node) {
            node.hidden = Boolean(filter.call(scope, node, me));
        });

        me.startDataChangeMonitoring();

        me.isHiddenFlag     = true;
        me.lastTreeHiding   = [ filter, scope ];

        if (!skipNodeStoreRefresh) me.refreshNodeStoreContent();
    },


    /**
     * Shows all nodes that was previously hidden with {@link #hideNodesBy}
     *
     * See also {@link Sch.data.mixin.FilterableTreeStore} for additional information.
     */
    showAllNodes : function (skipNodeStoreRefresh) {
        this.getRootNode().cascadeBy(function (node) {
            node.hidden     = false;
        });

        this.isHiddenFlag       = false;
        this.lastTreeHiding     = null;

        if (!this.isTreeFiltered(true)) this.stopDataChangeMonitoring();

        if (!skipNodeStoreRefresh) this.refreshNodeStoreContent();
    },


    inheritables : function () {
        return {
            // @OVERRIDE
            onNodeExpand: function (parent, records, suppressEvent) {
                if (this.isTreeFiltered(true) && parent == this.getRoot()) {
                    this.callParent(arguments);
                    // the expand of the root node - most probably its the data loading
                    this.reApplyFilter();
                } else
                    return this.callParent(arguments);
            },

            // @OVERRIDE
            onNodeCollapse: function (parent, records, suppressEvent, callback, scope) {
                var me                      = this;
                var data                    = me.data;
                var prevContains            = data.contains;

                var isFiltered              = me.isTreeFiltered();
                var currentFilterGeneration = me.currentFilterGeneration;

                // the default implementation of `onNodeCollapse` only checks if the 1st record from collapsed nodes
                // exists in the node store. Meanwhile, that 1st node can be hidden, so we need to check all of them
                // thats what we do in the `for` loop below
                // then, if we found a node, we want to do actual removing of nodes and we override the original code from NodeStore
                // by always returning `false` from our `data.contains` override
                data.contains           = function () {
                    var node, sibling, lastNodeIndexPlus;

                    var collapseIndex   = me.indexOf(parent) + 1;
                    var found           = false;

                    for (var i = 0; i < records.length; i++)
                        if (
                            !(records[ i ].hidden || isFiltered && records[ i ].__filterGen != currentFilterGeneration) &&
                            prevContains.call(this, records[ i ])
                        ) {
                            // this is our override for internal part of `onNodeCollapse` method

                            // Calculate the index *one beyond* the last node we are going to remove
                            // Need to loop up the tree to find the nearest view sibling, since it could
                            // exist at some level above the current node.
                            node = parent;
                            while (node.parentNode) {
                                sibling = node;
                                do {
                                    sibling = sibling.nextSibling;
                                } while (sibling && (sibling.hidden || isFiltered && sibling.__filterGen != currentFilterGeneration));

                                if (sibling) {
                                    found = true;
                                    lastNodeIndexPlus = me.indexOf(sibling);
                                    break;
                                } else {
                                    node = node.parentNode;
                                }
                            }
                            if (!found) {
                                lastNodeIndexPlus = me.getCount();
                            }

                            // Remove the whole collapsed node set.
                            me.removeAt(collapseIndex, lastNodeIndexPlus - collapseIndex);

                            break;
                        }

                    // always return `false`, so original NodeStore code won't execute
                    return false;
                };

                this.callParent(arguments);

                data.contains           = prevContains;
            },

            // @OVERRIDE
            handleNodeExpand : function (parent, records, toAdd) {
                var me                      = this;
                var visibleRecords          = [];
                var isFiltered              = me.isTreeFiltered();
                var currentFilterGeneration = me.currentFilterGeneration;

                for (var i = 0; i < records.length; i++) {
                    var record          = records[ i ];

                    if (
                        !(isFiltered && record.__filterGen != currentFilterGeneration || record.hidden)
                    ) {
                        visibleRecords[ visibleRecords.length ] = record;
                    }
                }

                return this.callParent([ parent, visibleRecords, toAdd ]);
            },

            // @OVERRIDE
            onNodeInsert: function(parent, node, index) {
                var me = this,
                    refNode,
                    sibling,
                    storeReader,
                    nodeProxy,
                    nodeReader,
                    reader,
                    data = node.raw || node.data,
                    dataRoot,
                    isVisible,
                    childType;

                if (me.filterFn) {
                    isVisible = me.filterFn(node);
                    node.set('visible', isVisible);

                    // If a node which passes the filter is added to a parent node
                    if (isVisible) {
                        parent.set('visible', me.filterFn(parent));
                    }
                }

                // Register node by its IDs
                me.registerNode(node, true);

                me.beginUpdate();

                // Only react to a node append if it is to a node which is expanded.
                if (me.isVisible(node)) {
                    if (index === 0 || !node.previousSibling) {
                        refNode = parent;
                    } else {
                        // Find the previous visible sibling (filtering may have knocked out intervening nodes)
                        for (sibling = node.previousSibling; sibling && !sibling.get('visible'); sibling = sibling.previousSibling);
                        if (!sibling) {
                            refNode = parent;
                        } else {
                            while (sibling.isExpanded() && sibling.lastChild) {
                                sibling = sibling.lastChild;
                            }
                            refNode = sibling;
                        }
                    }

                    // The reaction to collection add joins the node to this Store
                    me.insert(me.indexOf(refNode) + 1, node);
                    if (!node.isLeaf() && node.isExpanded()) {
                        if (node.isLoaded()) {
                            // Take a shortcut
                            me.onNodeExpand(node, node.childNodes);
                        } else if (!me.fillCount) {
                            // If the node has been marked as expanded, it means the children
                            // should be provided as part of the raw data. If we're filling the nodes,
                            // the children may not have been loaded yet, so only do this if we're
                            // not in the middle of populating the nodes.
                            node.set('expanded', false);
                            node.expand();
                        }
                    }
                }

                // Set sync flag if the record needs syncing.
                else {
                    me.needsSync = me.needsSync || node.phantom || node.dirty;
                }

                if (!node.isLeaf() && !node.isLoaded() && !me.lazyFill) {
                    // With heterogeneous nodes, different levels may require differently configured readers to extract children.
                    // For example a "Disk" node type may configure it's proxy reader with root: 'folders', while a "Folder" node type
                    // might configure its proxy reader with root: 'files'. Or the root property could be a configured-in accessor.
                    storeReader = me.getProxy().getReader();
                    nodeProxy = node.getProxy();
                    nodeReader = nodeProxy ? nodeProxy.getReader() : null;

                    // If the node's reader was configured with a special root (property name which defines the children array) use that.
                    reader = nodeReader && nodeReader.initialConfig.rootProperty ? nodeReader : storeReader;

                    dataRoot = reader.getRoot(data);
                    if (dataRoot) {
                        childType = node.childType;
                        me.fillNode(node, reader.extractData(dataRoot, childType ? {
                            model: childType
                        } : undefined));
                    }
                }
                me.endUpdate();
            },

            isFiltered : function () {
                return this.callParent(arguments) || this.isTreeFiltered();
            }
        };
    }

});

/**
@class Sch.data.ResourceStore

This is a class holding the collection the {@link Sch.model.Resource resources} to be rendered into a {@link Sch.panel.SchedulerGrid scheduler panel}.
Its a subclass of "Ext.data.Store" - a store with linear data presentation.

*/
if (!Ext.ClassManager.get("Sch.data.ResourceStore")) Ext.define("Sch.data.ResourceStore", {
    extend      : 'Ext.data.Store',
    model       : 'Sch.model.Resource',
    config      : { model : 'Sch.model.Resource' },
    alias       : 'store.resourcestore',

    requires    : [
        'Sch.patches.OperationDestroy'
    ],

    mixins      : [
        'Sch.data.mixin.UniversalModelGetter',
        'Sch.data.mixin.CacheHintHelper',
        'Sch.data.mixin.ResourceStore'
    ],

    storeId     : 'resources',
    proxy       : 'memory',

    constructor : function() {
        this.callParent(arguments);

        if (this.getModel() !== Sch.model.Resource && !(this.getModel().prototype instanceof Sch.model.Resource)) {
            throw 'The model for the ResourceStore must subclass Sch.model.Resource';
        }
    }
});

/**
 * @class Sch.data.AssignmentStore
 * @extends Ext.data.Store
 *
 * A class representing a collection of assignments between events in the {@link Sch.data.EventStore} and resources
 * in the {@link Sch.data.ResourceStore}.
 *
 * Contains a collection of {@link Sch.model.Assignment} records.
 */
if (!Ext.ClassManager.get("Sch.data.AssignmentStore")) Ext.define('Sch.data.AssignmentStore', {
    extend      : 'Ext.data.Store',

    mixins : [
        'Sch.data.mixin.UniversalModelGetter',
        'Sch.data.mixin.CacheHintHelper'
    ],

    requires    : [
        'Sch.model.Assignment',
        'Sch.model.Range',
        'Sch.model.Resource',
        'Sch.data.util.EventAssignmentsCache',
        'Sch.data.util.ResourceAssignmentsCache',
        'Sch.data.util.AssignmentStoreEventResourcesCache',
        'Sch.data.util.AssignmentStoreResourceEventsCache'
    ],

    model       : 'Sch.model.Assignment',
    alias       : 'store.assignmentstore',
    storeId     : 'assignments',
    proxy       : 'memory',

    eventResourceCache    : null,
    resourceEventsCache   : null,

    eventStoreDetacher    : null,
    resourceStoreDetacher : null,

    /**
     * @property {Sch.data.EventStore} eventStore The event store to which this assignment store is associated.
     * Usually it is configured automatically, by the event store itself.
     *
     * @readonly
     */
    eventStore   : null,

    constructor : function(config) {
        var me = this;

        me.callParent([config]);

        me.eventAssignmentsCache    = me.eventAssignmentsCache    || new Sch.data.util.EventAssignmentsCache(me);
        me.resourceAssignmentsCache = me.resourceAssignmentsCache || new Sch.data.util.ResourceAssignmentsCache(me);
        // The caches commented are conflicting with the fact that assignments might be added to assignment store
        // before corresponding events/records are. For example SchedulerDragZone::updateRecords() does that
        // as soon as it's fixed this might be uncommented thus we might gain more performace at
        // event::getResources()/resource::getEvents() and corresponding methods
        //me.eventResourceCache       = me.eventResourceCache       || new Sch.data.util.AssignmentStoreEventResourcesCache(me);
        //me.resourceEventsCache      = me.resourceEventsCache      || new Sch.data.util.AssignmentStoreResourceEventsCache(me);
    },

    destroy : function() {
        var me = this;
        Ext.destroyMembers(
            me,
            'eventResourceCache',
            'resourceEventsCache',
            'eventAssignmentsCache',
            'resourceEventsCache',
            'eventStoreDetacher',
            'resourceStoreDetacher'
        );
        me.callParent();
    },

    /**
     * Returns the associated event store instance.
     *
     * @return {Gnt.data.EventStore}
     */
    getEventStore: function() {
        return this.eventStore;
    },

    /**
     * Sets the associated event store instance.
     *
     * @param {Sch.data.EventStore} eventStore
     */
    setEventStore: function(eventStore) {
        var me = this,
            oldStore = me.eventStore;

        if (me.eventStore) {
        }

        me.eventStore = eventStore && Ext.StoreMgr.lookup(eventStore) || null;

        if (me.eventStore) {
        }

        me.attachToEventStore(me.eventStore);

        if ((oldStore || eventStore) && oldStore !== eventStore) {
            /**
             * @event eventstorechange
             * Fires when new event store is set via {@link #setEventStore} method.
             * @param {Sch.data.AssignmentStore} this
             * @param {Sch.data.EventStore|null} newEventStore
             * @param {Sch.data.EventStore|null} oldEventStore
             */
            me.fireEvent('eventstorechange', me, eventStore, oldStore);
        }
    },

    attachToEventStore : function(eventStore) {
        var me = this;

        Ext.destroy(me.eventStoreDetacher);

        if (eventStore && eventStore instanceof Ext.data.TreeStore) {
            me.eventStoreDetacher = eventStore.on({
                'noderemove'          : me.onEventNodeRemove,
                'resourcestorechange' : me.onEventStoreResourceStoreChange,
                scope       : me,
                destroyable : true,
                priority    : 200 // higher then in cache
            });
        }
        else if (eventStore) {
            me.eventStoreDetacher = eventStore.on({
                'remove'              : me.onEventRemove,
                'resourcestorechange' : me.onEventStoreResourceStoreChange,
                scope       : me,
                destroyable : true,
                priority    : 200 // higher then in cache
            });
        }

        me.attachToResourceStore(eventStore && eventStore.getResourceStore());
    },

    attachToResourceStore : function(resourceStore) {
        var me = this;

        Ext.destroy(me.resourceStoreDetacher);

        if (resourceStore && resourceStore instanceof Ext.data.TreeStore) {
            me.resourceStoreDetacher = resourceStore.on({
                'noderemove' : me.onResourceNodeRemove,
                scope        : me,
                destroyable  : true,
                priority     : 200 // higher then in cache
            });
        }
        else if (resourceStore) {
            me.resourceStoreDetacher = resourceStore.on({
                'remove'    : me.onResourceRemove,
                scope       : me,
                destroyable : true,
                priority    : 200 // higher then in cache
            });
        }
    },

    onEventStoreResourceStoreChange : function(eventStore, newResourceStore, oldResourceStore) {
        this.attachToResourceStore(newResourceStore);
    },

    onEventRemove : function(eventStore, events, index, isMove) {
        var me = this,
            assignments;

        if (!isMove) {
            assignments = [];

            Ext.Array.forEach(events, function(event) {
                assignments = assignments.concat(me.getAssignmentsForEvent(event));
            });

            assignments.length && me.remove(assignments);
        }
    },

    onEventNodeRemove : function(eventStore, event, isMove) {
        var me = this,
            assignments;

        if (!isMove) {
            assignments = [];

            event.cascadeBy(function(cascadingEvent) {
                assignments = assignments.concat(me.getAssignmentsForEvent(cascadingEvent));
            });

            assignments.length && me.remove(assignments);
        }
    },

    onResourceRemove : function(resourceStore, resources, index, isMove) {
        var me = this,
            assignments;

        if (!isMove) {
            assignments = [];

            Ext.Array.forEach(resources, function(resource) {
                assignments = assignments.concat(me.getAssignmentsForResource(resource));
            });

            assignments.length && me.remove(assignments);
        }
    },

    onResourceNodeRemove : function(resourceStore, resource, isMove) {
        var me = this,
            assignments;

        if (!isMove) {
            assignments = [];

            resource.cascadeBy(function(cascadingResource) {
                assignments = assignments.concat(me.getAssignmentsForResource(cascadingResource));
            });

            assignments.length && me.remove(assignments);
        }
    },

    /**
     * Maps over event assignments.
     *
     * @param {Sch.model.Range|Mixed} event
     * @param {Function} [fn=Ext.identityFn]
     * @param {Function} [filterFn=Ext.returnTrue]
     * @return {[Mixed]}
     */
    mapAssignmentsForEvent : function(event, fn, filterFn) {
        var me = this,
            result = [];

        fn       = fn || Ext.identityFn;
        filterFn = filterFn || Ext.returnTrue;


        if (fn !== Ext.identityFn || filterFn !== Ext.returnTrue) {
            Ext.Array.forEach(me.eventAssignmentsCache.get(event), function(assignment) {
                var mapResult = fn(assignment);
                filterFn(mapResult) && result.push(mapResult);
            });
        }
        else {
            result = [].concat(me.eventAssignmentsCache.get(event));
        }

        return result;
    },

    /**
     * Maps over resource assignments.
     *
     * @param {Sch.model.Resource|Mixed} resource
     * @param {Function} [fn=Ext.identityFn]
     * @param {Function} [filterFn=Ext.returnTrue]
     * @return {[Mixed]}
     */
    mapAssignmentsForResource : function(resource, fn, filterFn) {
        var me = this,
            result = [];

        fn       = fn || Ext.identityFn;
        filterFn = filterFn || Ext.returnTrue;

        if (fn !== Ext.identityFn || filterFn !== Ext.returnTrue) {
            Ext.Array.forEach(me.resourceAssignmentsCache.get(resource), function(assignment) {
                var mapResult = fn(assignment);
                filterFn(mapResult) && result.push(mapResult);
            });
        }
        else {
            result = [].concat(me.resourceAssignmentsCache.get(resource));
        }

        return result;
    },

    /**
     * Returns all assignments for a given event.
     *
     * @param {Sch.model.Range|Mixed} event
     * @return {[Sch.model.Assignment]}
     */
    getAssignmentsForEvent : function(event) {
        return this.mapAssignmentsForEvent(event);
    },

    /**
     * Removes all assignments for given event
     *
     * @param {Sch.model.Range|Mixed} event
     */
    removeAssignmentsForEvent : function(event) {
        var me = this;
        me.remove(me.getAssignmentsForEvent(event));
    },

    /**
     * Returns all assignments for a given resource.
     *
     * @param {Sch.model.Resource|Mixed} event
     * @return {[Sch.model.Range]}
     */
    getAssignmentsForResource : function(resource) {
        return this.mapAssignmentsForResource(resource);
    },

    /**
     * Removes all assignments for given resource
     *
     * @param {Sch.model.Resource|Mixed} resource
     */
    removeAssignmentsForResource : function(resource) {
        var me = this;
        me.remove(me.getAssignmentsForResource(resource));
    },

    /**
     * Returns all resources assigned to an event.
     *
     * @param {Sch.model.Range|Mixed} event
     * @return {[Sch.model.Resource]}
     */
    getResourcesForEvent : function(event) {
        var me = this,
            result;

        if (me.eventResourceCache) {
            result = me.eventResourceCache.get(event);
        }
        else {
            result = me.mapAssignmentsForEvent(
                event,
                function mapper(assignment) {
                    return assignment.getResource();
                },
                function filter(resource) {
                    return !!resource;
                }
            );
        }

        return result;
    },

    /**
     * Returns all events assigned to a resource
     *
     * @param {Sch.model.Resource|Mixed} resource
     * @return {[Sch.model.Range]}
     */
    getEventsForResource : function(resource) {
        var me = this,
            result;

        if (me.resourceEventsCache) {
            result = me.resourceEventsCache.get(resource);
        }
        else {
            result = me.mapAssignmentsForResource(
                resource,
                function mapper(assignment) {
                    return assignment.getEvent();
                },
                function filter(event) {
                    return !!event;
                }
            );
        }

        return result;
    },

    /**
     * Creates and adds assignment record for a given event and a resource.
     *
     * @param {Sch.model.Range|Mixed} event
     * @param {Sch.model.Resource|Mixed|Array} resource The resource(s) to assign to the event
     * @privateparam {Function} [assignmentSetupFn=Ext.identityFn]
     * @return {[Sch.model.Assignment]} An array with the created assignment(s)
     */
    assignEventToResource : function(event, resource, assignmentSetupFn) {
        var me = this,
            assignments = [];

        assignmentSetupFn = assignmentSetupFn || Ext.identityFn;

        var resources = Ext.isArray(resource) ? resource : [resource];

        Ext.Array.forEach(resources, function(resource) {
            if (!me.isEventAssignedToResource(event, resource)) {
                var assignment = new me.model();
                assignment.setEventId(event instanceof Ext.data.Model && event.getId() || event);
                assignment.setResourceId(resource instanceof Ext.data.Model && resource.getId() || resource);
                assignment = assignmentSetupFn(assignment);

                assignments.push(assignment);
            }
        });

        me.add(assignments);

        return assignments;
    },

    /**
     * Removes assignment record for a given event and a resource.
     *
     * @param {Sch.model.Range|Mixed} event
     * @param {Sch.model.Resource|Mixed} [resource] The resource to unassign the event from. If omitted, all resources of the events will be unassigned
     * @return {Sch.model.Assignment}
     */
    unassignEventFromResource : function(event, resource) {
        var me = this,
            assignment;

        if (!resource) {
            this.removeAssignmentsForEvent(event);
        } else if (me.isEventAssignedToResource(event, resource)) {
            assignment = me.getAssignmentForEventAndResource(event, resource);
            me.remove(assignment);
        }

        return assignment;
    },

    /**
     * Checks whether an event is assigned to a resource.
     *
     * @param {Sch.model.Range|Mixed} event
     * @param {Sch.model.Resource|Mixed} resource
     * @return {Boolean}
     */
    isEventAssignedToResource : function(event, resource) {
        var me = this,
            records = me.getResourcesForEvent(event),
            result = false,
            i, len;

        resource = resource instanceof Ext.data.Model && resource.getId() || resource;

        for (i = 0, len = records.length; !result && i < len; i++) {
            result = records[i];
            result = result.getId() == resource;
        }

        return result;
    },

    /**
     * Returns assignment record for given event and resource
     *
     * @param {Sch.model.Range} event
     * @param {Sch.model.Resource} resource
     * @return {Sch.model.Assignment|null}
     */
    getAssignmentForEventAndResource : function(event, resource) {
        var me = this,
            records = me.getAssignmentsForEvent(event),
            result = null,
            i, len;

        resource = resource instanceof Ext.data.Model && resource.getId() || resource;

        for (i = 0, len = records.length; !result && i < len; i++) {
            result = records[i];
            result = result.getResourceId() == resource && result || null;
        }

        return result;
    }
});

/**
@class Sch.data.TimeAxis
@extends Ext.data.JsonStore

A class representing the time axis of the scheduler. The scheduler timescale is based on the ticks generated by this class.
This is a pure "data" (model) representation of the time axis and has no UI elements.

The time axis can be {@link #continuous} or not. In continuos mode, each timespan starts where the previous ended, and in non-continuous mode
 there can be gaps between the ticks.
A non-continuous time axis can be used when want to filter out certain periods of time (like weekends) from the time axis.

To create a non-continuos time axis you have 2 options. First, you can create a time axis containing only the time spans of interest.
To do that, subclass this class and override the {@link #generateTicks} method. See the `noncontinuous-timeaxis` example in the Ext Scheduler SDK for guidance.

The other alternative is to call the {@link #filterBy} method, passing a function to it which should return `false` if the time tick should be filtered out.
Calling the {@link #clearFilter} method will return you to full time axis.

*/
Ext.define("Sch.data.TimeAxis", {
    extend      : "Ext.data.JsonStore",

    requires    : [
        'Sch.util.Date',
        // this "require" is needed for Sencha Touch
        'Sch.model.TimeAxisTick'
    ],

    model               : 'Sch.model.TimeAxisTick',

    /**
    * @cfg {Boolean} continuous
    * Set to false if the timeline is not continuous, e.g. the next timespan does not start where the previous ended (for example skipping weekends etc).
    */
    continuous          : true,

    originalContinuous  : null,

    /**
    * @cfg {Boolean} autoAdjust
    * Automatically adjust the timespan when generating ticks with {@link #generateTicks} according to the `viewPreset` configuration. Setting this to false
    * may lead to shifting time/date of ticks.
    */
    autoAdjust          : true,

    unit                : null,
    increment           : null,
    resolutionUnit      : null,
    resolutionIncrement : null,

    weekStartDay        : null,

    mainUnit            : null,
    shiftUnit           : null,

    shiftIncrement      : 1,
    defaultSpan         : 1,

    isConfigured        : false,

    // in case of `autoAdjust : false`, the 1st and last ticks can be truncated, containing only part of the normal tick
    // these dates will contain adjusted start/end (like if the tick has not been truncated)
    adjustedStart       : null,
    adjustedEnd         : null,
    // the visible position in the first tick, can actually be > 1 because the adjustment is done by the `mainUnit`
    visibleTickStart    : null,
    // the visible position in the first tick, is always ticks count - 1 < value <= ticks count, in case of autoAdjust, always = ticks count
    visibleTickEnd      : null,

    // name of the current preset
    presetName          : null,

    /**
     * @cfg {String} mode This option determines how timeaxis should be rounded.
     * When we round timeAxis for calendar we want to get minimum number of weeks that comprises desired month.
     * Options: ['plain', 'calendar']
     */
    mode                : 'plain',

    /**
     * @cfg {Number} startTime Start time for calendar mode, used only with day/week presets.
     */
    startTime           : 0,
    
    /**
     * @cfg {Number} endTime End time for calendar mode, used only with day/week presets.
     */
    endTime             : 24,

    /**
     * @event beforereconfigure
     * Fires before the timeaxis is about to be reconfigured (e.g. new start/end date or unit/increment). Return false to abort the operation.
     * @param {Sch.data.TimeAxis} timeAxis The time axis instance
     * @param {Date} startDate The new time axis start date
     * @param {Date} endDate The new time axis end date
     */

    /**
     * @event endreconfigure
     * @private
     * Event that is triggered when we end reconfiguring and everything ui-related should be done
     */

    /**
     * @event reconfigure
     * Fires when the timeaxis has been reconfigured (e.g. new start/end date or unit/increment)
     * @param {Sch.data.TimeAxis} timeAxis The time axis instance
     */

    // private
    constructor : function(config) {
        var me = this;

        config = config || {};

        // For Sencha Touch, config system
        if (me.setModel) {
            me.setModel(me.model);
        }

        me.setMode(config.mode || me.mode);

        me.originalContinuous = me.continuous;

        me.callParent(arguments);

        me.on(Ext.versions.touch ? 'refresh' : 'datachanged', function(ta) {
            me.fireEvent('reconfigure', me, false);
        });

        me.on('endreconfigure', function(me, suppressRefresh) {
            me.fireEvent('reconfigure', me, suppressRefresh);
        });

        if (config.viewPreset) {
            var preset      = Sch.preset.Manager.getPreset(config.viewPreset);
            preset && me.consumeViewPreset(preset);
        }

        // not sure what me.start is but just in case I'm leaving previous condition
        if (config.start || me.start) {
            me.reconfigure(config);
        }
    },

    /**
    * Reconfigures the time axis based on the config object supplied and generates the new 'ticks'.
    * @param {Object} config
    * @private
    */
    reconfigure : function (config, suppressRefresh) {
        this.isConfigured   = true;

        Ext.apply(this, config);

        var adjusted        = this.getAdjustedDates(config.start, config.end, true);
        var normalized      = this.getAdjustedDates(config.start, config.end);

        var start           = normalized.start;
        var end             = normalized.end;

        if (this.fireEvent('beforereconfigure', this, start, end) !== false) {

            this.fireEvent('beginreconfigure', this);

            var unit                = this.unit;
            var increment           = this.increment || 1;
            var ticks               = this.generateTicks(start, end, unit, increment, this.mainUnit);

            // Suspending to be able to detect an invalid filter
            this.removeAll(true);
            this.suspendEvents();
            this.add(ticks);

            if (this.getCount() === 0) {
                Ext.Error.raise('Invalid time axis configuration or filter, please check your input data.');
            }
            this.resumeEvents();

            var DATE                = Sch.util.Date;
            var count               = ticks.length;

            if (this.isContinuous()) {
                this.adjustedStart      = adjusted.start;
                this.adjustedEnd        = this.getNext(count > 1 ? ticks[ count - 1 ].start : adjusted.start, unit, increment);
            } else {
                this.adjustedStart      = this.getStart();
                this.adjustedEnd        = this.getEnd();
            }

            // if visibleTickStart > 1 this means some tick is fully outside of the view - we are not interested in it and want to
            // drop it and adjust "adjustedStart" accordingly
            do {
                // TODO this has to use more sophisticated formula to take into account that months for example can be expressed in ms consistenly
                this.visibleTickStart   = (this.getStart() - this.adjustedStart) / (DATE.getUnitDurationInMs(unit) * increment);

                if (this.visibleTickStart >= 1) this.adjustedStart = DATE.getNext(this.adjustedStart, unit, increment);
            } while (this.visibleTickStart >= 1);

            do {
                this.visibleTickEnd     = count - (this.adjustedEnd - this.getEnd()) / (DATE.getUnitDurationInMs(unit) * increment);

                if (count - this.visibleTickEnd >= 1) this.adjustedEnd = DATE.getNext(this.adjustedEnd, unit, -1);
            } while (count - this.visibleTickEnd >= 1);

            this.fireEvent('endreconfigure', this, suppressRefresh);
        }
    },

    setMode : function (mode) {
        this.mode = mode;
        
        if (mode === 'calendar') {
            this.generateTicksValidatorFn = function (start) { 
                if (this.startTime > 0 || this.endTime < 24) {
                    return (start.getHours() >= this.startTime && start.getHours() < this.endTime);
                } else {
                    return true;
                }
            };
        } else {
            this.generateTicksValidatorFn = function () { return true; };
        }
    },

    /**
    * Changes the time axis timespan to the supplied start and end dates.
    * @param {Date} start The new start date
    * @param {Date} end The new end date
    */
    setTimeSpan : function (start, end) {
        var adjusted    = this.getAdjustedDates(start, end);

        start           = adjusted.start;
        end             = adjusted.end;

        if (this.getStart() - start !== 0 || this.getEnd() - end !== 0) {
            this.reconfigure({
                start   : start,
                end     : end
            });
        }
    },

    /**
     * [Experimental] Filter the time axis by a function. The passed function will be called with each tick in time axis.
     * If the function returns true, the 'tick' is included otherwise it is filtered.
     * @param {Function} fn The function to be called, it will receive an object with start/end properties, and 'index' of the tick.
     * @param {Object} scope (optional) The scope (`this` reference) in which the function is executed.
     */
    filterBy : function(fn, scope) {
        this.continuous = false;
        scope = scope || this;

        this.clearFilter(true);
        // Suspending to be able to detect an invalid filter
        this.suspendEvents(true);
        this.filter([{
            filterFn : function(t, index) {
                return fn.call(scope, t.data, index);
            }
        }]);

        if (this.getCount() === 0) {
            this.clearFilter();
            this.resumeEvents();
            Ext.Error.raise('Invalid time axis filter - no ticks passed through the filter. Please check your filter method.');
        }
        this.resumeEvents();
    },

    /**
     * Returns `true` if the time axis is continuos (will return `false` when filtered)
     * @return {Boolean}
     */
    isContinuous : function() {
        return this.continuous && !this.isFiltered();
    },

    /**
     * Clear the current filter of the time axis
     */
    clearFilter : function() {
        this.continuous = this.originalContinuous;
        this.callParent(arguments);
    },

    /**
     * Method generating the ticks for this time axis. Should return an array of ticks. Each tick is an object of the following structure:
        {
            start       : ..., // start date
            end         : ...  // end date
        }
     *
     * Take notice, that this function either has to be called with `start`/`end` parameters, or create those variables.
     *
     * @param {Date} startDate The start date of the interval
     * @param {Date} endDate The end date of the interval
     * @param {String} unit The unit of the time axis
     * @param {Mixed} increment The increment for the unit specified.
     * @return {Array} ticks The ticks representing the time axis
     */
    generateTicks : function (start, end, unit, increment) {
        var ticks           = [],
            intervalEnd,
            DATE            = Sch.util.Date,
            dstDiff         = 0;

        unit                = unit || this.unit;
        increment           = increment || this.increment;

        var adjusted        = this.getAdjustedDates(start, end);

        start               = adjusted.start;
        end                 = adjusted.end;

        while (start < end) {
            intervalEnd     = this.getNext(start, unit, increment);

            if (!this.autoAdjust && intervalEnd > end) intervalEnd = end;

            // Handle hourly increments crossing DST boundaries to keep the timescale looking correct
            // Only do this for HOUR resolution currently, and only handle it once per tick generation.
            if (unit === DATE.HOUR && increment > 1 && ticks.length > 0 && dstDiff === 0) {
                var prev    = ticks[ ticks.length - 1 ];

                dstDiff     = ((prev.start.getHours() + increment) % 24) - prev.end.getHours();

                if (dstDiff !== 0) {
                    // A DST boundary was crossed in previous tick, adjust this tick to keep timeaxis "symmetric".
                    intervalEnd = DATE.add(intervalEnd, DATE.HOUR, dstDiff);
                }
            }

            this.generateTicksValidatorFn(start) && ticks.push({
                start   : start,
                end     : intervalEnd
            });
            
            start           = intervalEnd;
        }

        return ticks;
    },


    getVisibleTickTimeSpan : function () {
        return this.isContinuous() ? this.visibleTickEnd - this.visibleTickStart : this.getCount();
    },


    getAdjustedDates : function (start, end, forceAdjust) {
        var DATE    = Sch.util.Date;
        start       = start || this.getStart();
        end         = end || DATE.add(start, this.mainUnit, this.defaultSpan);

        if (this.mode === 'calendar') {
            // 'month' is tricky so we have to handle it separately
            if (this.shiftUnit === DATE.MONTH) {
                var startWeekEnd = DATE.add(start, DATE.WEEK, 1);
                var endWeekStart = DATE.add(end, DATE.WEEK, -1);
                // when this method is called from 'switchViewPreset' end date isn't provided, so we should just create one
                if (!end) {
                    end = this.getNext(start, this.shiftUnit, 1);
                    end = this.ceilDate(end, false, this.shiftUnit, 1);
                    end = this.ceilDate(end, false, this.mainUnit, 1);
                }
                if (startWeekEnd.getMonth() !== start.getMonth() && endWeekStart.getMonth() !== end.getMonth()) {
                    return {
                        start   : start,
                        end     : end
                    };
                }
            }

            // This code sets time span to 1 viewPreset's shiftUnit from the time axis start date
            var adjustedStart   = this.floorDate(start, false, this.shiftUnit, 1);
            adjustedStart       = this.floorDate(adjustedStart, false, this.mainUnit, 1);

            var clone           = this.getNext(start, this.shiftUnit, 1);
            var adjustedEnd     = this.ceilDate(clone, false, this.shiftUnit, 1);
            adjustedEnd         = this.ceilDate(adjustedEnd, false, this.mainUnit, 1);

            return {
                start   : adjustedStart,
                end     : adjustedEnd
            };
        } else {
            return this.autoAdjust || forceAdjust ? {
                start   : this.floorDate(start, false, this.autoAdjust ? this.mainUnit : this.unit, 1),
                end     : this.ceilDate(end, false, this.autoAdjust ? this.mainUnit : this.unit, 1)
            } : {
                start   : start,
                end     : end
            };
        }
    },

    /**
     * Gets a tick "coordinate" representing the date position on the time scale. Returns -1 if the date is not part of the time axis.
     * @param {Date} date the date
     * @return {Number} the tick position on the scale or -1 if the date is not part of the time axis
     */
    getTickFromDate : function (date) {
        var ticks           = this.data.items;
        var lastTickIndex   = ticks.length - 1;

        // quick bailout
        if (date < ticks[ 0 ].data.start || date > ticks[ lastTickIndex ].data.end) {
            return -1;
        }

        var tick, tickStart, tickEnd;

        if (this.isContinuous()) {
            if (date - ticks[ 0 ].data.start === 0) return this.visibleTickStart;
            if (date - ticks[ lastTickIndex ].data.end === 0) return this.visibleTickEnd;

            var adjustedStart   = this.adjustedStart;
            var adjustedEnd     = this.adjustedEnd;

            var tickIndex       = Math.floor(ticks.length * (date - adjustedStart) / (adjustedEnd - adjustedStart));

            // for the date == adjustedEnd case
            if (tickIndex > lastTickIndex) tickIndex = lastTickIndex;

            tickStart           = tickIndex === 0 ? adjustedStart : ticks[ tickIndex ].data.start;
            tickEnd             = tickIndex == lastTickIndex ? adjustedEnd : ticks[ tickIndex ].data.end;

            tick                = tickIndex + (date - tickStart) / (tickEnd - tickStart);

            // in case of `autoAdjust : false` the actual visible timespan starts not from 0 tick coordinate, but
            // from `visibleTickStart` coordinate, this check generally repeats the "quick bailout" check in the begining of the method,
            // but still
            if (tick < this.visibleTickStart || tick > this.visibleTickEnd) return -1;

            return tick;
        } else {
            for (var i = 0; i <= lastTickIndex; i++) {
                tickEnd         = ticks[ i ].data.end;

                if (date <= tickEnd) {
                    tickStart   = ticks[ i ].data.start;

                    // date < tickStart can occur in filtered case
                    tick        = i + (date > tickStart ? (date - tickStart) / (tickEnd - tickStart) : 0);

                    return tick;
                }
            }
        }

        return -1;
    },

    /**
    * Gets the time represented by a tick "coordinate".
    * @param {Number} tick the tick "coordinate"
    * @param {String} roundingMethod The rounding method to use
    * @return {Date} The date to represented by the tick "coordinate", or null if invalid.
    */
    getDateFromTick : function (tick, roundingMethod) {
        if (tick === this.visibleTickEnd) return this.getEnd();

        var wholeTick   = Math.floor(tick),
            fraction    = tick - wholeTick,
            t           = this.getAt(wholeTick);

        if (!t) return null;

        var tickData    = t.data;
        var start       = wholeTick === 0 ? this.adjustedStart : tickData.start;
        // if we've filtered timeaxis using filterBy, then we cannot trust to adjustedEnd property and should use tick end
        var end         = (wholeTick == this.getCount() - 1) && this.isContinuous() ? this.adjustedEnd : tickData.end;

        var date        = Sch.util.Date.add(start, Sch.util.Date.MILLI, fraction * (end - start));

        if (roundingMethod) {
            date        = this[ roundingMethod + 'Date' ](date);
        }

        return date;
    },

    /**
    * Returns the ticks of the timeaxis in an array of objects with a "start" and "end" date.
    * @return {Object[]} the ticks on the scale
    */
    getTicks : function() {
        var ticks = [];

        this.each(function (r) { ticks.push(r.data); });
        return ticks;
    },

    /**
    * Method to get the current start date of the time axis
    * @return {Date} The start date
    */
    getStart : function() {
        var first = this.first();

        if (first) {
            return new Date(first.data.start);
        }
        return null;
    },

    /**
    * Method to get a the current end date of the time axis
    * @return {Date} The end date
    */
    getEnd : function() {
        var last = this.last();

        if (last) {
            return new Date(last.data.end);
        }
        return null;
    },

    // Floors a date and optionally snaps it to one of the following resolutions:
    // 1. 'resolutionUnit'. If param 'resolutionUnit' is passed, the date will simply be floored to this unit.
    // 2. If resolutionUnit is not passed: If date should be snapped relative to the timeaxis start date,
    // the resolutionUnit of the timeAxis will be used, or the timeAxis 'mainUnit' will be used to snap the date
    //
    // returns a copy of the original date
    // private
    floorDate : function(date, relativeToStart, resolutionUnit, incr) {
        relativeToStart = relativeToStart !== false;

        var dt          = Ext.Date.clone(date),
            relativeTo  = relativeToStart ? this.getStart() : null,
            increment   = incr || this.resolutionIncrement,
            unit;

        if (resolutionUnit) {
            unit        = resolutionUnit;
        } else {
            unit        = relativeToStart ? this.resolutionUnit : this.mainUnit;
        }

        var DATE        = Sch.util.Date;
        var snap        = function (value, increment) { return Math.floor(value / increment) * increment; };

        switch (unit) {
            case DATE.MILLI:
                if (relativeToStart) {
                    dt          = DATE.add(relativeTo, DATE.MILLI, snap(DATE.getDurationInMilliseconds(relativeTo, dt), increment));
                }
                break;

            case DATE.SECOND:
                if (relativeToStart) {
                    dt          = DATE.add(relativeTo, DATE.MILLI, snap(DATE.getDurationInSeconds(relativeTo, dt), increment) * 1000);
                } else {
                    dt.setMilliseconds(0);
                    dt.setSeconds(snap(dt.getSeconds(), increment));
                }
                break;

            case DATE.MINUTE:
                if (relativeToStart) {
                    dt          = DATE.add(relativeTo, DATE.SECOND, snap(DATE.getDurationInMinutes(relativeTo, dt), increment) * 60);
                } else {
                    dt.setMinutes(snap(dt.getMinutes(), increment));
                    dt.setSeconds(0);
                    dt.setMilliseconds(0);
                }
                break;

            case DATE.HOUR:
                if (relativeToStart) {
                    dt           = DATE.add(relativeTo, DATE.MINUTE, snap(DATE.getDurationInHours(this.getStart(), dt), increment) * 60);
                } else {
                    dt.setMinutes(0);
                    dt.setSeconds(0);
                    dt.setMilliseconds(0);
                    dt.setHours(snap(dt.getHours(), increment));
                }
                break;

            case DATE.DAY:
                if (relativeToStart) {
                    dt            = DATE.add(relativeTo, DATE.DAY, snap(DATE.getDurationInDays(relativeTo, dt), increment));
                } else {
                    Sch.util.Date.clearTime(dt);
                    // days are 1-based so need to make additional adjustments
                    dt.setDate(snap(dt.getDate() - 1, increment) + 1);
                }
                break;

            case DATE.WEEK:
                var day      = dt.getDay()       || 7;
                var startDay = this.weekStartDay || 7;
                Sch.util.Date.clearTime(dt);

                dt      = DATE.add(dt, DATE.DAY, day >= startDay ? startDay - day : -(7 - startDay + day));

                // Watch out for Brazil DST craziness (see test 028_timeaxis_dst.t.js)
                if (dt.getDay() !== startDay && dt.getHours() === 23) {
                    dt = DATE.add(dt, DATE.HOUR, 1);
                }
                break;

            case DATE.MONTH:
                if (relativeToStart) {
                    dt      = DATE.add(relativeTo, DATE.MONTH, snap(DATE.getDurationInMonths(relativeTo, dt), increment));
                } else {
                    Sch.util.Date.clearTime(dt);
                    dt.setDate(1);
                    dt.setMonth(snap(dt.getMonth(), increment));
                }
                break;

            case DATE.QUARTER:
                Sch.util.Date.clearTime(dt);
                dt.setDate(1);
                dt                      = DATE.add(dt, DATE.MONTH, - (dt.getMonth() % 3));
                break;

            case DATE.YEAR:
                if (relativeToStart) {
                    dt                  = DATE.add(relativeTo, DATE.YEAR, snap(DATE.getDurationInYears(relativeTo, dt), increment));
                } else {
                    // years are 1-based so need to make additional adjustments
                    dt                  = new Date(snap(date.getFullYear() - 1, increment) + 1, 0, 1);
                }
                break;
        }

        return dt;
    },


    // Rounds the date to nearest unit increment
    // private
    roundDate : function(date, relativeTo) {
        var dt = Ext.Date.clone(date),
            increment = this.resolutionIncrement;

        relativeTo = relativeTo || this.getStart();

        switch(this.resolutionUnit) {
            case Sch.util.Date.MILLI:
                var milliseconds = Sch.util.Date.getDurationInMilliseconds(relativeTo, dt),
                    snappedMilliseconds = Math.round(milliseconds / increment) * increment;
                dt = Sch.util.Date.add(relativeTo, Sch.util.Date.MILLI, snappedMilliseconds);
                break;

            case Sch.util.Date.SECOND:
                var seconds = Sch.util.Date.getDurationInSeconds(relativeTo, dt),
                    snappedSeconds = Math.round(seconds / increment) * increment;
                dt = Sch.util.Date.add(relativeTo, Sch.util.Date.MILLI, snappedSeconds * 1000);
                break;

            case Sch.util.Date.MINUTE:
                var minutes = Sch.util.Date.getDurationInMinutes(relativeTo, dt),
                    snappedMinutes = Math.round(minutes / increment) * increment;
                dt = Sch.util.Date.add(relativeTo, Sch.util.Date.SECOND, snappedMinutes * 60);
                break;

            case Sch.util.Date.HOUR:
                var nbrHours = Sch.util.Date.getDurationInHours(relativeTo, dt),
                    snappedHours = Math.round(nbrHours / increment) * increment;
                dt = Sch.util.Date.add(relativeTo, Sch.util.Date.MINUTE, snappedHours * 60);
                break;

            case Sch.util.Date.DAY:
                var nbrDays = Sch.util.Date.getDurationInDays(relativeTo, dt),
                    snappedDays = Math.round(nbrDays / increment) * increment;
                dt = Sch.util.Date.add(relativeTo, Sch.util.Date.DAY, snappedDays);
                break;

            case Sch.util.Date.WEEK:
                Sch.util.Date.clearTime(dt);

                var distanceToWeekStartDay = dt.getDay() - this.weekStartDay,
                    toAdd;

                if (distanceToWeekStartDay < 0) {
                    distanceToWeekStartDay = 7 + distanceToWeekStartDay;
                }

                if (Math.round(distanceToWeekStartDay/7) === 1) {
                    toAdd = 7 - distanceToWeekStartDay;
                } else {
                    toAdd = -distanceToWeekStartDay;
                }

                dt = Sch.util.Date.add(dt, Sch.util.Date.DAY, toAdd);
                break;

            case Sch.util.Date.MONTH:
                var nbrMonths = Sch.util.Date.getDurationInMonths(relativeTo, dt) + (dt.getDate() / Ext.Date.getDaysInMonth(dt)),
                    snappedMonths = Math.round(nbrMonths / increment) * increment;
                dt = Sch.util.Date.add(relativeTo, Sch.util.Date.MONTH, snappedMonths);
                break;

            case Sch.util.Date.QUARTER:
                Sch.util.Date.clearTime(dt);
                dt.setDate(1);
                dt = Sch.util.Date.add(dt, Sch.util.Date.MONTH, 3 - (dt.getMonth() % 3));
                break;

            case Sch.util.Date.YEAR:
                var nbrYears = Sch.util.Date.getDurationInYears(relativeTo, dt),
                    snappedYears = Math.round(nbrYears / increment) * increment;
                dt = Sch.util.Date.add(relativeTo, Sch.util.Date.YEAR, snappedYears);
                break;
        }

        return dt;
    },

    // private
    ceilDate : function(date, relativeToStart, resolutionUnit) {
        var dt = Ext.Date.clone(date);
        relativeToStart = relativeToStart !== false;

        var increment = relativeToStart ? this.resolutionIncrement : 1,
            doCall = false,
            unit;

        if (resolutionUnit){
            unit = resolutionUnit;
        } else {
            unit = relativeToStart ? this.resolutionUnit : this.mainUnit;
        }

        switch (unit) {
            case Sch.util.Date.HOUR:
                if (dt.getMinutes() > 0 || dt.getSeconds() > 0 || dt.getMilliseconds() > 0) {
                    doCall = true;
                }
            break;

            case Sch.util.Date.DAY:
                if (dt.getHours() > 0 || dt.getMinutes() > 0 || dt.getSeconds() > 0 || dt.getMilliseconds() > 0) {
                    doCall = true;
                }
            break;

            case Sch.util.Date.WEEK:
                Sch.util.Date.clearTime(dt);
                if (dt.getDay() !== this.weekStartDay || date.getTime() - dt.getTime() > 0) {
                    doCall = true;
                }
            break;

            case Sch.util.Date.MONTH:
                Sch.util.Date.clearTime(dt);
                if (dt.getDate() !== 1 || date.getTime() - dt.getTime() > 0) {
                    doCall = true;
                }
            break;

            case Sch.util.Date.QUARTER:
                Sch.util.Date.clearTime(dt);
                if (dt.getMonth() % 3 !== 0 || dt.getDate() !== 1 || date.getTime() - dt.getTime() > 0) {
                    doCall = true;
                }
            break;

            case Sch.util.Date.YEAR:
                Sch.util.Date.clearTime(dt);
                if (dt.getMonth() !== 0 || dt.getDate() !== 1 || date.getTime() - dt.getTime() > 0) {
                    doCall = true;
                }
            break;

            default:
            break;
        }

        if (doCall) {
            return this.getNext(dt, unit, increment);
        } else {
            return dt;
        }
    },

    // private
    getNext : function(date, unit, increment) {
        return Sch.util.Date.getNext(date, unit, increment, this.weekStartDay);
    },

    // private
    getResolution : function() {
        return {
            unit : this.resolutionUnit,
            increment : this.resolutionIncrement
        };
    },

    // private
    setResolution : function(unit, increment) {
        this.resolutionUnit = unit;
        this.resolutionIncrement = increment || 1;
    },

    /**
     * Moves the time axis by the passed amount and unit.
     * @param {Number} amount The number of units to jump
     * @param {String} unit The unit (Day, Week etc)
     */
    shift: function (amount, unit) {
        this.setTimeSpan(Sch.util.Date.add(this.getStart(), unit, amount), Sch.util.Date.add(this.getEnd(), unit, amount));
    },

    /**
    * Moves the time axis forward in time in units specified by the view preset `shiftUnit`, and by the amount specified by the `shiftIncrement`
    * config of the current view preset.
    * @param {Number} amount (optional) The number of units to jump forward
    */
    shiftNext: function (amount) {
        amount      = amount || this.getShiftIncrement();
        var unit    = this.getShiftUnit();

        this.setTimeSpan(Sch.util.Date.add(this.getStart(), unit, amount), Sch.util.Date.add(this.getEnd(), unit, amount));
    },

    /**
    * Moves the time axis backward in time in units specified by the view preset `shiftUnit`, and by the amount specified by the `shiftIncrement` config of the current view preset.
    * @param {Number} amount (optional) The number of units to jump backward
    */
    shiftPrevious: function (amount) {
        amount = -(amount || this.getShiftIncrement());
        var unit = this.getShiftUnit();
        this.setTimeSpan(Sch.util.Date.add(this.getStart(), unit, amount), Sch.util.Date.add(this.getEnd(), unit, amount));
    },

    getShiftUnit: function () {
        return this.shiftUnit || this.mainUnit;
    },

    // private
    getShiftIncrement: function () {
        return this.shiftIncrement || 1;
    },

    // private
    getUnit: function () {
        return this.unit;
    },

    // private
    getIncrement: function () {
        return this.increment;
    },
    
    // to keep rows and time axis in sync, we use this function to return ticks to generate rows.
    getRowTicks    : function () {
        if (this.mode === 'plain') {
            return;
        } else {
            var start = this.getStart();
            var end = Sch.util.Date.add(start, this.headerConfig.middle.splitUnit, 1);
            
            var endIndex = this.findBy(function (record) {
                return record.getStartDate().getTime() >= end.getTime();
            });
            
            // if no such record was found - we are dealing with day view
            if (endIndex === -1) {
                return this.getRange();
            }
            
            return this.getRange(0, endIndex - 1);
        }
    },

    /**
    * Returns true if the passed date is inside the span of the current time axis.
    * @param {Date} date The date to query for
    * @return {Boolean} true if the date is part of the timeaxis
    */
    dateInAxis: function(date) {
        return Sch.util.Date.betweenLesser(date, this.getStart(), this.getEnd());
    },

    /**
    * Returns true if the passed timespan is part of the current time axis (in whole or partially).
    * @param {Date} start The start date
    * @param {Date} end The end date
    * @return {boolean} true if the timespan is part of the timeaxis
    */
    timeSpanInAxis: function(start, end) {
        if (this.isContinuous()) {
            return Sch.util.Date.intersectSpans(start, end, this.getStart(), this.getEnd());
        } else {
            return (start < this.getStart() && end > this.getEnd()) ||
                   this.getTickFromDate(start) !== this.getTickFromDate(end);
        }
    },

    // Accepts a Sch.model.Range model
    isRangeInAxis: function(range) {
        var start = range.getStartDate(),
            end = range.getEndDate();

        // only consider fully scheduled ranges
        if (!start || !end) return false;

        return this.timeSpanInAxis(start, end);
    },


    /**
     * Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.
     * @protected
     * @param {String} unit The unit to use when iterating over the timespan
     * @param {Number} increment The increment to use when iterating over the timespan
     * @param {Function} iteratorFn The function to call
     * @param {Object} scope (optional) The "this" object to use for the function call
     */
    forEachAuxInterval : function (unit, increment, iteratorFn, scope) {
        scope               = scope || this;

        var end             = this.getEnd(),
            dt              = this.getStart(),
            i               = 0,
            intervalEnd;

        if (dt > end) throw 'Invalid time axis configuration';

        while (dt < end) {
            intervalEnd     =  Sch.util.Date.min(this.getNext(dt, unit, increment || 1), end);
            iteratorFn.call(scope, dt, intervalEnd, i);
            dt              = intervalEnd;
            i++;
        }
    },


    consumeViewPreset : function (preset) {
        Ext.apply(this, {
            unit                : preset.getBottomHeader().unit,
            increment           : preset.getBottomHeader().increment || 1,

            resolutionUnit      : preset.timeResolution.unit,
            resolutionIncrement : preset.timeResolution.increment,

            mainUnit            : preset.getMainHeader().unit,
            shiftUnit           : preset.shiftUnit,
            shiftIncrement      : preset.shiftIncrement || 1,

            defaultSpan         : preset.defaultSpan || 1,
            presetName          : preset.name,

            // Calendar columns are updated upon 'datachanged' event on this object.
            // We have to pass headerConfig in order to render them correctly (timeAxisViewModel is incorrect in required time)
            headerConfig        : preset.headerConfig
        });
    }
});
/**
@class Sch.preset.ViewPreset
Not used directly, but the properties below are rather provided inline as seen in the source of {@link Sch.preset.Manager}. This class is just provided for documentation purposes.

A sample preset looks like:

    hourAndDay : {
        timeColumnWidth         : 60,       // Time column width (used for rowHeight in vertical mode)
        rowHeight               : 24,       // Only used in horizontal orientation
        resourceColumnWidth     : 100,      // Only used in vertical orientation

        displayDateFormat       : 'G:i',    // Controls how dates will be displayed in tooltips etc

        shiftIncrement          : 1,        // Controls how much time to skip when calling shiftNext and shiftPrevious.
        shiftUnit               : "DAY",    // Valid values are "MILLI", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
        defaultSpan             : 12,       // By default, if no end date is supplied to a view it will show 12 hours

        timeResolution          : {         // Dates will be snapped to this resolution
            unit        : "MINUTE",         // Valid values are "MILLI", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
            increment   : 15
        },

        headerConfig            : {         // This defines your header, you must include a "middle" object, and top/bottom are optional.
            middle      : {                 // For each row you can define "unit", "increment", "dateFormat", "renderer", "align", and "scope"
                unit        : "HOUR",
                dateFormat  : 'G:i'
            },
            top         : {
                unit        : "DAY",
                dateFormat  : 'D d/m'
            }
        },

        linesFor                : 'middle'  // Defines header level column lines will be drawn for
    },

See the {@link Sch.preset.Manager} for the list of available presets.

*/
Ext.define("Sch.preset.ViewPreset", {
    name                : null,

    /**
     * @cfg {Number} rowHeight The height of the row in horizontal orientation
     */
    rowHeight           : null,

    /**
     * @cfg {Number} timeColumnWidth The width of the time tick column in horizontal orientation. Also used as height of time tick row
     * in vertical orientation, unless {@link #timeRowHeight} is provided.
     */
    timeColumnWidth     : 50,

    /**
     * @cfg {Number} timeRowHeight The height of the time tick row in vertical orientation. If omitted, a value of {@link #timeColumnWidth}
     * is used.
     */
    timeRowHeight       : null,

    /**
     * @cfg {Number} timeAxisColumnWidth The width of the time axis column in the vertical orientation
     */
    timeAxisColumnWidth : null,

    /**
    * @cfg {String} displayDateFormat Defines how dates will be formatted in tooltips etc
    */
    displayDateFormat   : 'G:i',

    /**
     * @cfg {String} shiftUnit The unit to shift when calling shiftNext/shiftPrevious to navigate in the chart.
     * Valid values are "MILLI", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
     */
    shiftUnit           : "HOUR",

    /**
     * @cfg {Number} shiftIncrement The amount to shift (in shiftUnits)
     */
    shiftIncrement      : 1,

    /**
     * @cfg {Number} defaultSpan The amount of time to show by default in a view (in the unit defined by the middle header)
     */
    defaultSpan         : 12,

    /**
     * @cfg {Object} timeResolution An object containing a unit identifier and an increment variable. Example:
     *
        timeResolution : {
            unit        : "HOUR",  //Valid values are "MILLI", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
            increment   : 1
        }
     *
     */
    timeResolution      : null,

    /**
     * @cfg {Object} headerConfig An object containing one or more {@link Sch.preset.ViewPresetHeaderRow} rows defining how your headers shall be composed.
     * Your 'main' unit should be the middle header unit. This object can contain "bottom", "middle" and "top" header definitions. The 'middle' header is mandatory.
     */
    headerConfig        : null,

    /**
     * @cfg {String} columnLinesFor Defines the header level that the column lines will be drawn for. See {@link Sch.mixin.AbstractTimelinePanel#columnLines}
     */
    columnLinesFor            : 'middle',

    // internal properties
    headers             : null,
    mainHeader          : 0,


    constructor : function (config) {
        Ext.apply(this, config);
    },

    getHeaders : function () {
        if (this.headers) return this.headers;

        var headerConfig        = this.headerConfig;

        this.mainHeader         = headerConfig.top ? 1 : 0;

        return this.headers     = [].concat(headerConfig.top || [], headerConfig.middle || [], headerConfig.bottom || []);
    },


    getMainHeader : function () {
        return this.getHeaders()[ this.mainHeader ];
    },


    getBottomHeader : function () {
        var headers     = this.getHeaders();

        return headers[ headers.length - 1 ];
    },


    clone : function () {
        var config      = {};
        var me          = this;

        Ext.each([
            'rowHeight',
            'timeColumnWidth',
            'timeRowHeight',
            'timeAxisColumnWidth',
            'displayDateFormat',
            'shiftUnit',
            'shiftIncrement',
            'defaultSpan',
            'timeResolution',
            'headerConfig'
        ], function (name) {
            config[ name ] = me[ name ];
        });

        return new this.self(Ext.clone(config));
    }
});

/**
@class Sch.preset.Manager
@singleton

Provides a registry of the possible view presets that any instance of a Panel with {@link Sch.mixin.SchedulerPanel} mixin can use.

See the {@link Sch.preset.ViewPreset} and {@link Sch.preset.ViewPresetHeaderRow} classes for a description of the view preset properties.

Available presets are:

- `minuteAndHour` - creates 2 level headers - hour and minutes within it
- `hourAndDay` - creates 2 level headers - day and hours within it: {@img scheduler/images/hourAndDay.png}
- `dayAndWeek` - creates 2 level headers - week and days within it: {@img scheduler/images/dayAndWeek.png}
- `weekAndDay` - just like `dayAndWeek` but with different formatting: {@img scheduler/images/weekAndDay.png}
- `weekAndMonth` - creates 2 level headers - month and weeks within it: {@img scheduler/images/weekAndMonth.png}

- `monthAndYear` - creates 2 level headers - year and months within it: {@img scheduler/images/monthAndYear.png}
- `year` - creates 2 level headers - year and quarters within it: {@img scheduler/images/year-preset.png}
- `weekAndDayLetter` - creates a 2 level header - with weeks and day letters within it.
- `weekDateAndMonth` - creates 2 level headers - month and weeks within it (weeks shown by first day only): {@img scheduler/images/weekDateAndMonth.png}

You can register your own preset with the {@link #registerPreset} call

*/
Ext.define('Sch.preset.Manager', {
    extend: 'Ext.util.MixedCollection',
    requires: [
        'Sch.util.Date',
        'Sch.preset.ViewPreset'
    ],
    mixins: ['Sch.mixin.Localizable'],

    singleton: true,

    defaultPresets : {
        secondAndMinute : {
            timeColumnWidth     : 30,   // Time column width (used for rowHeight in vertical mode)
            rowHeight           : 24,    // Only used in horizontal orientation
            resourceColumnWidth : 100,   // Only used in vertical orientation
            displayDateFormat   : 'G:i:s', // Controls how dates will be displayed in tooltips etc
            shiftIncrement      : 10,     // Controls how much time to skip when calling shiftNext and shiftPrevious.
            shiftUnit           : 'MINUTE',// Valid values are "MILLI", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
            defaultSpan         : 24,    // By default, if no end date is supplied to a view it will show 24 hours
            timeResolution      : {      // Dates will be snapped to this resolution
                unit        : 'SECOND',  // Valid values are "MILLI", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
                increment   : 5
            },
            headerConfig        : {      // This defines your header, you must include a "middle" object, top/bottom are optional. For each row you can define "unit", "increment", "dateFormat", "renderer", "align", and "scope"
                middle  : {
                    unit        : 'SECOND',
                    increment   : 10,
                    align       : 'center',
                    dateFormat  : 's'
                },
                top     : {
                    unit        : 'MINUTE',
                    align       : 'center',
                    dateFormat  : 'D, d g:iA'
                }
            }
        },
        minuteAndHour : {
            timeColumnWidth     : 100,   // Time column width (used for rowHeight in vertical mode)
            rowHeight           : 24,    // Only used in horizontal orientation
            resourceColumnWidth : 100,   // Only used in vertical orientation
            displayDateFormat   : 'G:i', // Controls how dates will be displayed in tooltips etc
            shiftIncrement      : 1,     // Controls how much time to skip when calling shiftNext and shiftPrevious.
            shiftUnit           : 'HOUR',// Valid values are "MILLI", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
            defaultSpan         : 24,    // By default, if no end date is supplied to a view it will show 24 hours
            timeResolution      : {      // Dates will be snapped to this resolution
                unit        : 'MINUTE',  // Valid values are "MILLI", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
                increment   : 30
            },
            headerConfig        : {      // This defines your header, you must include a "middle" object, top/bottom are optional. For each row you can define "unit", "increment", "dateFormat", "renderer", "align", and "scope"
                middle  : {
                    unit        : 'MINUTE',
                    increment   : '30',
                    align       : 'center',
                    dateFormat  : 'i'
                },
                top     : {
                    unit        : 'HOUR',
                    align       : 'center',
                    dateFormat  : 'D, gA/d'
                }
            }
        },
        hourAndDay : {
            timeColumnWidth     : 60,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'G:i',
            shiftIncrement      : 1,
            shiftUnit           : 'DAY',
            defaultSpan         : 24,
            timeResolution      : {
                unit        : 'MINUTE',
                increment   : 30
            },
            headerConfig        : {
                middle      : {
                    unit        : 'HOUR',
                    align       : 'center',
                    dateFormat  : 'G:i'
                },
                top         : {
                    unit        : 'DAY',
                    align       : 'center',
                    dateFormat  : 'D d/m'
                }
            }
        },
        dayAndWeek : {
            timeColumnWidth     : 100,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'Y-m-d G:i',
            shiftUnit           : 'DAY',
            shiftIncrement      : 1,
            defaultSpan         : 5,
            timeResolution      : {
                unit        : 'HOUR',
                increment   : 1
            },
            headerConfig        : {
                middle      : {
                    unit        : 'DAY',
                    align       : 'center',
                    dateFormat  : 'D d M'
                },
                top : {
                    unit        : 'WEEK',
                    align       : 'center',
                    renderer    : function(start, end, cfg) {
                        return Sch.util.Date.getShortNameOfUnit('WEEK') + '.' + Ext.Date.format(start, 'W M Y');
                    }
                }
            }
        },

        weekAndDay : {
            timeColumnWidth     : 100,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'Y-m-d',
            shiftUnit           : 'WEEK',
            shiftIncrement      : 1,
            defaultSpan         : 1,
            timeResolution      : {
                unit        : 'DAY',
                increment   : 1
            },
            headerConfig        : {
                bottom : {
                    unit        : 'DAY',
                    align       : 'center',
                    increment   : 1,
                    dateFormat  : 'd/m'
                },
                middle : {
                    unit        : 'WEEK',
                    dateFormat  : 'D d M'
                }
            }
        },

        weekAndMonth : {
            timeColumnWidth     : 100,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'Y-m-d',
            shiftUnit           : 'WEEK',
            shiftIncrement      : 5,
            defaultSpan         : 6,
            timeResolution      : {
                unit        : 'DAY',
                increment   : 1
            },
            headerConfig        : {
                middle      : {
                    unit    : 'WEEK',
                    renderer: function(start, end, cfg) {
                        return Ext.Date.format(start, 'd M');
                    }
                },
                top         : {
                    unit        : 'MONTH',
                    align       : 'center',
                    dateFormat  : 'M Y'
                }
            }
        },

        monthAndYear : {
            timeColumnWidth     : 110,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'Y-m-d',
            shiftIncrement      : 3,
            shiftUnit           : 'MONTH',
            defaultSpan         : 12,
            timeResolution      : {
                unit        : 'DAY',
                increment   : 1
            },
            headerConfig        : {
                middle      : {
                    unit        : 'MONTH',
                    align       : 'center',
                    dateFormat  : 'M Y'
                },
                top         : {
                    unit        : 'YEAR',
                    align       : 'center',
                    dateFormat  : 'Y'
                }
            }
        },
        year : {
            timeColumnWidth     : 100,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'Y-m-d',
            shiftUnit           : 'YEAR',
            shiftIncrement      : 1,
            defaultSpan         : 1,
            timeResolution      : {
                unit        : 'MONTH',
                increment   : 1
            },
            headerConfig        : {
                middle      : {
                    unit        : 'QUARTER',
                    align       : 'center',
                    renderer    : function(start, end, cfg) {
                        return Ext.String.format(Sch.util.Date.getShortNameOfUnit('QUARTER').toUpperCase() + '{0}', Math.floor(start.getMonth() / 3) + 1);
                    }
                },
                top         : {
                    unit        : 'YEAR',
                    align       : 'center',
                    dateFormat  : 'Y'
                }
            }
        },
        manyYears : {
            timeColumnWidth     : 50,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'Y-m-d',
            shiftUnit           : 'YEAR',
            shiftIncrement      : 1,
            defaultSpan         : 1,
            timeResolution      : {
                unit        : 'YEAR',
                increment   : 1
            },
            headerConfig        : {
                middle      : {
                    unit        : 'YEAR',
                    align       : 'center',
                    dateFormat  : 'Y',
                    increment   : 5
                },
                // smallest zoom level looked back
                // we have to specify increments here since 'increment' in zoomLevel affects only bottom header
                bottom      : {
                    unit        : 'YEAR',
                    align       : 'center',
                    dateFormat  : 'y',
                    increment   : 1
                }
            }
        },
        weekAndDayLetter : {
            timeColumnWidth     : 20,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'Y-m-d',
            shiftUnit           : 'WEEK',
            shiftIncrement      : 1,
            defaultSpan         : 10,
            timeResolution      : {
                unit        : 'DAY',
                increment   : 1
            },
            headerConfig        : {
                bottom  : {
                    unit        : 'DAY',
                    align       : 'center',
                    renderer    : function(start) {
                        return Ext.Date.dayNames[start.getDay()].substring(0, 1);
                    }
                },
                middle          : {
                    unit        : 'WEEK',
                    dateFormat  : 'D d M Y'
                }
            }
        },
        weekDateAndMonth : {
            timeColumnWidth     : 30,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'Y-m-d',
            shiftUnit           : 'WEEK',
            shiftIncrement      : 1,
            defaultSpan         : 10,
            timeResolution      : {
                unit        : 'DAY',
                increment   : 1
            },
            headerConfig : {
                middle      : {
                    unit        : 'WEEK',
                    align       : 'center',
                    dateFormat  : 'd'
                },
                top         : {
                    unit        : 'MONTH',
                    dateFormat  : 'Y F'
                }
            }
        },

        day : {
            timeRowHeight       : 40,
            calendarColumnWidth : 200,
            displayDateFormat   : 'G:i',
            shiftIncrement      : 1,
            shiftUnit           : 'DAY',
            defaultSpan         : 24,
            timeResolution      : {
                unit        : 'MINUTE',
                increment   : 30
            },
            headerConfig        : {
                bottom  : {
                    unit        : 'HOUR',
                    align       : 'center',
                    renderer    : function (value) {
                        return Ext.String.format(
                            '<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span>' +
                            '<span class="sch-calendarcolumn-minutes">{1}</span></div>',
                            Ext.Date.format(value, 'H'),
                            Ext.Date.format(value, 'i')
                        );
                    }
                },
                middle  : {
                    unit        : 'DAY',
                    align       : 'center',
                    dateFormat  : 'D d/m',
                    splitUnit   : 'DAY'
                }
            }
        },

        week : {
            timeRowHeight       : 40,
            calendarColumnWidth : 164,
            displayDateFormat   : 'G:i',
            shiftIncrement      : 1,
            shiftUnit           : 'WEEK',
            defaultSpan         : 24,
            timeResolution      : {
                unit        : 'MINUTE',
                increment   : 30
            },
            headerConfig        : {
                bottom  : {
                    unit        : 'HOUR',
                    align       : 'center',
                    dateFormat  : 'H:i',    // will be overridden by renderer
                    renderer    : function (value) {
                        return Ext.String.format(
                            '<div class="sch-calendarcolumn-ct">' +
                                '<span class="sch-calendarcolumn-hours">{0}</span>' +
                                '<span class="sch-calendarcolumn-minutes">{1}</span>' +
                            '</div>',

                            Ext.Date.format(value, 'H'),
                            Ext.Date.format(value, 'i')
                        );
                    }
                },
                middle  : {
                    unit        : 'WEEK',
                    align       : 'center',
                    dateFormat  : 'D d',
                    splitUnit   : 'DAY'
                }
            }
        },

        month : {
            timeColumnWidth     : 60,
            rowHeight           : 24,
            resourceColumnWidth : 100,
            displayDateFormat   : 'G:i',
            shiftIncrement      : 1,
            shiftUnit           : 'MONTH',
            defaultSpan         : 4,
            timeResolution      : {
                unit        : 'HOUR',
                increment   : 12
            },
            headerConfig        : {
                bottom  : {
                    unit        : 'DAY',
                    align       : 'center',
                    dateFormat  : 'D',
                    splitUnit   : 'WEEK'
                },
                middle  : {
                    unit        : 'WEEK',
                    align       : 'center',
                    dateFormat  : 'D d/m'
                },
                top     : {
                    unit        : 'MONTH',
                    align       : 'center',
                    renderer    : function(start, end, cfg) {
                        return Ext.Date.format(start, 'd/m') + ' - ' + Ext.Date.format(end, 'd/m, Y');
                    },
                    splitUnit   : 'WEEK'
                }
            }
        }
    },

    constructor : function() {
        this.callParent(arguments);
        this.registerDefaults();
    },

    onLocalized : function () {
        var me = this;

        this.eachKey(function (name, preset) {
            if (me.l10n[name]) {
                var locale  = me.L(name);

                locale.displayDateFormat && (preset.displayDateFormat = locale.displayDateFormat);
                locale.middleDateFormat && (preset.headerConfig.middle.dateFormat = locale.middleDateFormat);
                locale.topDateFormat && (preset.headerConfig.top.dateFormat = locale.topDateFormat);
                locale.bottomDateFormat && (preset.headerConfig.bottom.dateFormat = locale.bottomDateFormat);
            }
        });
    },

    /**
    * Registers a new view preset to be used by any scheduler grid or tree on the page.
    * @param {String} name The unique name identifying this preset
    * @param {Object} config The configuration properties of the view preset (see {@link Sch.preset.ViewPreset} for more information)
    */
    registerPreset : function(name, cfg) {
        if (cfg) {
            var headerConfig    = cfg.headerConfig;
            var DATE            = Sch.util.Date;

            // Make sure date "unit" constant specified in the preset are resolved
            for (var o in headerConfig) {
                if (headerConfig.hasOwnProperty(o)) {
                    if (DATE[headerConfig[o].unit]) {
                        headerConfig[o].unit = DATE[headerConfig[o].unit.toUpperCase()];
                    }

                    if (DATE[headerConfig[o].splitUnit]) {
                        headerConfig[o].splitUnit = DATE[headerConfig[o].splitUnit.toUpperCase()];
                    }
                }
            }

            if (!cfg.timeColumnWidth) cfg.timeColumnWidth = 50;
            if (!cfg.rowHeight) cfg.rowHeight = 24;

            var timeResolution  = cfg.timeResolution;

            // Resolve date units
            if (timeResolution && DATE[ timeResolution.unit ]) {
                timeResolution.unit = DATE[ timeResolution.unit.toUpperCase() ];
            }

            var shiftUnit       = cfg.shiftUnit;

            // Resolve date units
            if (shiftUnit && DATE[ shiftUnit ]) {
                cfg.shiftUnit = DATE[ shiftUnit.toUpperCase() ];
            }
        }

        if (this.isValidPreset(cfg)) {
            if (this.containsKey(name)) this.removeAtKey(name);

            cfg.name        = name;

            this.add(name, new Sch.preset.ViewPreset(cfg));
        } else {
            throw 'Invalid preset, please check your configuration';
        }
    },

    isValidPreset : function(cfg) {
        var D = Sch.util.Date,
            valid = true,
            validUnits = Sch.util.Date.units,
            ownKeys = {};

        // Make sure all date "unit" constants are valid
        for (var o in cfg.headerConfig) {
            if (cfg.headerConfig.hasOwnProperty(o)) {
                ownKeys[o] = true;
                valid = valid && Ext.Array.indexOf(validUnits, cfg.headerConfig[o].unit) >= 0;
            }
        }

        if (!(cfg.columnLinesFor in ownKeys)) {
            cfg.columnLinesFor = 'middle';
        }

        if (cfg.timeResolution) {
            valid = valid && Ext.Array.indexOf(validUnits, cfg.timeResolution.unit) >= 0;
        }

        if (cfg.shiftUnit) {
            valid = valid && Ext.Array.indexOf(validUnits, cfg.shiftUnit) >= 0;
        }

        return valid;
    },

    /**
    * Fetches a view preset from the global cache
    * @param {String} name The name of the preset
    * @return {Object} The view preset, see {@link Sch.preset.ViewPreset} for more information
    */
    getPreset : function(name) {
        return this.get(name);
    },

    /**
    * Deletes a view preset
    * @param {String} name The name of the preset
    */
    deletePreset : function(name) {
        this.removeAtKey(name);
    },

    registerDefaults : function() {
        var pm = this,
            vp = this.defaultPresets;

        for (var p in vp) {
            pm.registerPreset(p, vp[p]);
        }
    }
});
/**
@class Sch.feature.AbstractTimeSpan
@extends Ext.AbstractPlugin

Plugin for visualizing "global" time span in the scheduler grid, these can by styled easily using just CSS. This is an abstract class not intended for direct use.

*/

if (!Ext.ClassManager.get("Sch.feature.AbstractTimeSpan")) {

Ext.define("Sch.feature.AbstractTimeSpan", {
    extend              : 'Ext.AbstractPlugin',
    
    mixins              : {
        observable      : 'Ext.util.Observable'
    },
    
    lockableScope       : 'top',
    
    schedulerView       : null,
    timeAxis            : null,
    containerEl         : null,
    
    // If lines/zones should stretch to fill the whole view container element in case the table does not fill it
    expandToFitView     : false,
    
    disabled            : false,
    
    /**
     * @property {String} cls An internal css class which is added to each rendered timespan element
     * @private
     */
    cls                 : null,
    
    /**
     * @cfg {String} clsField Name of field  
     */
    clsField            : 'Cls',
    
    /**
     * @cfg {Ext.XTemplate} template Template to render the timespan elements  
     */
    template            : null,
    
    /**
     * @cfg {Ext.data.Store/String} store A store with timespan data, or a string identifying a store.
     */
    store               : null,
    
    renderElementsBuffered      : false,
    
    /**
     * @cfg {Number} renderDelay Delay the zones rendering by this amount (in ms) to speed up the default rendering of rows and events.
     */
    renderDelay                 : 15,

    // true to refresh the sizes of the rendered elements when an item in the bound view changes
    // false to do a full refresh instead
    refreshSizeOnItemUpdate     : true,

    _resizeTimer                : null,
    _renderTimer                : null,
    
    /**
     * @cfg {Boolean} showHeaderElements Set this to `true` to show indicators in the timeline header area.
     * 
     * Header indicators are placed right above the corresponding element of the scheduling view. You can customize the HTML markup
     * for these indicators with the {@link #headerTemplate} config. Note that the indicators are rendered as a regular div element,
     * which will be styled differently in modern vs legacy browsers.
     *
     */
    showHeaderElements          : false,
    
    /**
     * @private
     * @cfg {Ext.XTemplate} headerTemplate Template used to render the header elements
     */
    headerTemplate              : null,
    
    
    /**
     * @cfg {String/Ext.XTemplate} innerHeaderTpl A template providing additional markup to render into each timespan header element
     */
    innerHeaderTpl              : null,
    
    headerContainerCls          : 'sch-header-secondary-canvas',
    headerContainerEl           : null,
    
    // event to be fired, when rendering has completed (only fired when all elements are rendered, not single)
    renderingDoneEvent          : null,
    

    constructor : function(cfg) {
        // unique css class to be able to identify only the zones belonging to this plugin instance
        this.uniqueCls = this.uniqueCls || ('sch-timespangroup-' + Ext.id());
        
        Ext.apply(this, cfg);
        
        this.mixins.observable.constructor.call(this);

        this.callParent(arguments);
    },

    
    /**
     * @param {Boolean} disabled Pass `true` to disable the plugin and remove all rendered elements.
     */
    setDisabled : function(disabled) {
        if (disabled) {
            this.removeElements();
        }
        
        this.disabled = disabled;
    },

    
    removeElements : function () {
        this.removeBodyElements();
        
        if (this.showHeaderElements) {
            this.removeHeaderElements();
        }
    },
    
    //Returns the currently rendered DOM elements of this plugin (if any), as a {@link Ext.CompositeElementLite} collection.
    getBodyElements : function() {
        if (this.containerEl) {
            return this.containerEl.select('.' + this.uniqueCls);
        }

        return null;
    },
    
    /**
     * Returns container to render header elements.
     * 
     * @return {Ext.dom.Element}
     */
    getHeaderContainerEl : function() {
        var containerEl = this.headerContainerEl,
            prefix = Ext.baseCSSPrefix,
            parent;
            
        if (!containerEl || !containerEl.dom) {
            if (this.schedulerView.isHorizontal()) {
                parent = this.panel.getHorizontalTimeAxisColumn().headerView.containerEl;
            } else {
                parent = this.panel.el.down('.' + prefix + 'grid-inner-locked' +
                    ' .' + prefix + 'panel-body' +
                    ' .' + prefix + 'grid-view');
            }
            
            if (parent) {
                containerEl = parent.down('.' + this.headerContainerCls);
                
                if (!containerEl) {
                    containerEl = parent.appendChild({
                        cls : this.headerContainerCls
                    });
                }
                
                this.headerContainerEl = containerEl;
            }
        }

        return containerEl;
    },
    
    
    getHeaderElements : function() {
        var containerEl = this.getHeaderContainerEl();
        
        if (containerEl) {
            return containerEl.select('.' + this.uniqueCls);
        }

        return null;
    },
    
    
    // private
    removeBodyElements : function() {
        var els = this.getBodyElements();
        
        if (els) {
            els.each(function(el) { el.destroy(); });
        }
    },
    
    
    removeHeaderElements : function() {
        var els = this.getHeaderElements();
        
        if (els) {
            els.each(function(el) { el.destroy(); });
        }
    },
    
    /**
     * Returns id of element for data record.
     * 
     * @param {Ext.data.Model} record
     * 
     * @return {String}
     */
    getElementId : function(record) {
        return this.uniqueCls + '-' + record.internalId;
    },
    
    /**
     * Returns id of header element for data record.
     * 
     * @param {Ext.data.Model} record
     * 
     * @return {String}
     */
    getHeaderElementId : function(record) {
        return this.uniqueCls + '-header-' + record.internalId;
    },
    
    /**
     * Returns template data to render elements.
     * 
     * @param {Ext.data.Model} record
     * 
     * @return {Object}
     */
    getTemplateData : function(record) {
        return this.prepareTemplateData ? this.prepareTemplateData(record) : record.data;
    },
    
    
    /**
     * Return element class for a record.
     * 
     * @param {Ext.data.Model} record Data record
     * @param {Object} data Template data
     * 
     * @return {String}
     */
    getElementCls : function(record, data) {
        var clsField = record.clsField || this.clsField;
            
        if (!data) {
            data = this.getTemplateData(record);
        }
        
        return this.cls + ' ' + this.uniqueCls + ' ' + (data[clsField] || '');
    },
    
    
    /**
     * Return header element class for data record.
     * 
     * @param {Ext.data.Model} record Data record
     * @param {Object} data
     * 
     * @return {String}
     */
    getHeaderElementCls : function(record, data) {
        var clsField = record.clsField || this.clsField;
            
        if (!data) {
            data = this.getTemplateData(record);
        }

        return 'sch-header-indicator ' + this.uniqueCls + ' ' + (data[clsField] || '');
    },
    
    
    init:function(scheduler) {
        // TODO COMMENT
        if (Ext.versions.touch && !scheduler.isReady()) {
            scheduler.on('viewready', function() { this.init(scheduler); }, this);
            return;
        }
        
        if (Ext.isString(this.innerHeaderTpl)) {
            this.innerHeaderTpl = new Ext.XTemplate(this.innerHeaderTpl);
        }
        
        var innerHeaderTpl = this.innerHeaderTpl;
        
        if (!this.headerTemplate) {
            this.headerTemplate = new Ext.XTemplate(
                '<tpl for=".">',
                    '<div id="{id}" class="{cls}" style="{side}:{position}px;">' +
                    (innerHeaderTpl ? '{[this.renderInner(values)]}' : '') +
                    '</div>',
                '</tpl>',
                {
                    renderInner : function(values) {
                        return innerHeaderTpl.apply(values);
                    }
                }
            );
        }

        this.schedulerView = scheduler.getSchedulingView(); 
        this.panel = scheduler;
        this.timeAxis = scheduler.getTimeAxis();

        this.store = Ext.StoreManager.lookup(this.store);

        if (!this.store) {
            Ext.Error.raise("Error: You must define a store for this plugin");
        }

        if (!this.schedulerView.getEl()) {
            this.schedulerView.on({
                afterrender : this.onAfterRender, 
                scope       : this
            });
        } else {
            this.onAfterRender();
        }
    },
    
    
    onAfterRender : function (scheduler) {
        var view            = this.schedulerView;
        this.containerEl    = view.getSecondaryCanvasEl();

        this.storeListeners = {
            load            : this.renderElements,
            datachanged     : this.renderElements, 
            clear           : this.renderElements,
            
            // Ext JS
            add             : this.renderElements,
            remove          : this.renderElements, 
            update          : this.refreshSingle, 
            
            // Sencha Touch
            addrecords      : this.renderElements,
            removerecords   : this.renderElements,
            updaterecord    : this.refreshSingle,

            // Tree Store
            expand          : this.renderElements,
            collapse        : this.renderElements,

            scope           : this
        };

        this.store.on(this.storeListeners);

        view.on({
            bufferedrefresh     : this.renderElements,
            refresh             : this.renderElements,
            itemadd             : this.refreshSizeOnItemUpdate ? this.refreshSizes : this.renderElements,
            itemremove          : this.refreshSizeOnItemUpdate ? this.refreshSizes : this.renderElements,
            itemupdate          : this.refreshSizeOnItemUpdate ? this.refreshSizes : this.renderElements,

            // start grouping events
            groupexpand         : this.renderElements, 
            groupcollapse       : this.renderElements,
            
            columnwidthchange   : this.renderElements,
            resize              : this.renderElements,

            scope               : this
        });

        if (view.headerCt) {
            view.headerCt.on({
                add         : this.renderElements,
                remove      : this.renderElements,
                scope       : this
            });
        }

        this.panel.on({
            viewchange          : this.renderElements,
            show                : this.refreshSizes,
            modechange          : this.forceNewRenderingTimeout,
            
            scope               : this
        });
        
        var rowContainer = view.getRowContainerEl();

        if (rowContainer && rowContainer.down('.sch-timetd')) {
            this.renderElements();
        }
    },
    
    
    forceNewRenderingTimeout : function () {
        this.renderElementsBuffered = false;
        
        clearTimeout(this._renderTimer);
        clearTimeout(this._resizeTimer);

        this.renderElements();
    },

    
    refreshSizesInternal : function() {
        // This can only be called in Horizontal mode
        if (!this.schedulerView.isDestroyed && this.schedulerView.isHorizontal()) {
    
            // Date here is irrelevant, we just want a fresh height value
            var region = this.schedulerView.getTimeSpanRegion(new Date(), null, this.expandToFitView);
            this.getBodyElements().setHeight(region.bottom - region.top);
        }
    },
    
    refreshSizes : function() {
        clearTimeout(this._resizeTimer);

        this._resizeTimer = Ext.Function.defer(this.refreshSizesInternal, this.renderDelay, this);
    },

    
    renderElements : function() {
        if (this.renderElementsBuffered || this.disabled) return;

        this.renderElementsBuffered = true;

        clearTimeout(this._renderTimer);
        
        // Defer to make sure rendering is not delayed by this plugin
        // deferring on 15 because the cascade delay is 10 (cascading will trigger a view refresh)
        this._renderTimer = Ext.Function.defer(this.renderElementsInternal, this.renderDelay, this);
    },
    
    
    /**
     * Sets element X-coordinate relative direction (rtl or ltr).
     * 
     * @param {Ext.Element} el
     * @param {Number} x
     */
    setElementX : function(el, x) {
        if (this.panel.rtl) {
            el.setRight(x);
        } else {
            el.setLeft(x);
        }
    },

    /**
     * Returns position of header element by date.
     * 
     * @param {Date} date
     * 
     * @return {Number}
     */
    getHeaderElementPosition : function(date) {
        var viewModel = this.schedulerView.getTimeAxisViewModel();
        
        return Math.round(viewModel.getPositionFromDate(date));
    },
    
    
    renderBodyElementsInternal : function (records) {
        Ext.DomHelper.append(this.containerEl, this.generateMarkup(false, records));
    },
    
    
    getHeaderElementData : function(records, isPrint) {
        throw 'Abstract method call';
    },
    
    
    renderHeaderElementsInternal : function (records) {
        var containerEl = this.getHeaderContainerEl();
        
        if (containerEl) {
            Ext.DomHelper.append(containerEl, this.generateHeaderMarkup(false, records));
        }
    },
    
 
    renderElementsInternal : function() {
        this.renderElementsBuffered = false;

        // component could be destroyed during the buffering time frame
        if (this.disabled || this.schedulerView.isDestroyed) return;

        if (Ext.versions.extjs && !this.schedulerView.el.down('.' + Ext.baseCSSPrefix + 'grid-item-container')) return;

        this.removeElements();

        this.renderBodyElementsInternal();

        if (this.showHeaderElements) {
            this.headerContainerEl = null;
            this.renderHeaderElementsInternal();
        }
        
        if (this.renderingDoneEvent) this.fireEvent(this.renderingDoneEvent, this);
    },

    
    /**
     * Generates markup for elements.
     * 
     * @param {Boolean} isPrint
     * @param {Array} records
     *  
     * @return {String}
     */
    generateMarkup : function(isPrint, records) {
        var start       = this.timeAxis.getStart(),
            end         = this.timeAxis.getEnd(),
            data        = this.getElementData(start, end, records, isPrint);

        return this.template.apply(data);
    },
    
    
    /**
     * Generates markup for headers elements.
     * 
     * @param {Boolean} isPrint
     * @param {Array} records
     *  
     * @return {String}
     */
    generateHeaderMarkup : function (isPrint, records) {
        var data = this.getHeaderElementData(records, isPrint);

        return this.headerTemplate.apply(data);
    },


    getElementData : function (viewStart, viewEnd, records, isPrint) {
        throw 'Abstract method call';
    },
    
    
    updateBodyElement : function (record) {
        var el = Ext.get(this.getElementId(record));
        
        if (el) {
            var start       = this.timeAxis.getStart(), 
                end         = this.timeAxis.getEnd(),
                data        = this.getElementData(start, end, [record])[0];

            if (data) {
                // Reapply CSS classes
                el.dom.className = data.$cls;

                el.setTop(data.top);
                this.setElementX(el, data.left);
                
                el.setSize(data.width, data.height);
            } else {
                Ext.destroy(el);
            }
        } else {
            // if element is not found, then its probably a newly added record in the store
            // in this case `renderBodyElementsInternal` will only add markup for that record
            this.renderBodyElementsInternal([ record ]);
        }
    },
    
    
    updateHeaderElement : function (record) {
        var el = Ext.get(this.getHeaderElementId(record));
        
        if (el) {
            var data = this.getHeaderElementData([record])[0];

            if (data) {
                // Reapply CSS classes
                el.dom.className = data.cls;

                if (this.schedulerView.isHorizontal()) {
                    this.setElementX(el, data.position);
                    el.setWidth(data.size);
                } else {
                    el.setTop(data.position);
                    el.setHeight(data.size);
                }
            } else {
                Ext.destroy(el);
            }
        } else {
            // if element is not found, then its probably a newly added record in the store
            // in this case `renderHeaderElementsInternal` will only add markup for that record
            this.renderHeaderElementsInternal([record]);
        }
    },
    
    
    destroy : function() {
        clearTimeout(this._renderTimer);
        clearTimeout(this._resizeTimer);

        if (this.store.autoDestroy) {
            this.store.destroy();
        }

        this.store.un(this.storeListeners);
    },
    

    refreshSingle : function(store, records) {

        records = records instanceof Array ? records : [records];

        Ext.Array.forEach(records, function(record) {
            this.updateBodyElement(record);

            if (this.showHeaderElements) {
                this.updateHeaderElement(record);
            }
        }, this);
    }
}); 

}
/**
@class Sch.plugin.Lines
@extends Sch.feature.AbstractTimeSpan

Plugin (ptype = 'scheduler_lines') for showing "global" time lines in the scheduler grid. It uses a store to populate itself, records in this store should have the following fields:

- `Date` The date of the line. This date is formatted based on what's configured in the {@link Sch.preset.ViewPreset#displayDateFormat} option of the current "viewPreset".
- `Text` The Text to show when hovering over the line (optional)
- `Cls`  A CSS class to add to the line (optional)

To add this plugin to scheduler:

        var dayStore    = new Ext.data.Store({
            fields  : [ 'Date', 'Text', 'Cls' ],

            data    : [
                {
                    Date        : new Date(2011, 06, 19),
                    Text        : 'Some important day'
                }
            ]
        });


        var scheduler = Ext.create('Sch.panel.SchedulerGrid', {
            ...

            resourceStore   : resourceStore,
            eventStore      : eventStore,

            plugins         : [
                Ext.create('Sch.plugin.Lines', { store : dayStore })
            ]
        });


*/
Ext.define("Sch.plugin.Lines", {
    extend              : "Sch.feature.AbstractTimeSpan",
    alias               : 'plugin.scheduler_lines',

    cls                 : 'sch-timeline',

    /**
     * @cfg {Boolean} showTip 'true' to include a native browser tooltip when hovering over the line.
     */
    showTip             : true,

    /**
     * @cfg {String/Ext.XTemplate} innerTpl A template providing additional markup to render into each timespan element
     */
    innerTpl            : null,
    

    prepareTemplateData : null,
    side                : null,

    init : function(scheduler) {
        if (Ext.isString(this.innerTpl)) {
            this.innerTpl = new Ext.XTemplate(this.innerTpl);
        }

        this.side = scheduler.rtl ? 'right' : 'left';

        var innerTpl = this.innerTpl;

        if (!this.template) {
            this.template = new Ext.XTemplate(
                '<tpl for=".">',
                    '<div id="{id}" ' + (this.showTip ? 'title="{[this.getTipText(values)]}" ' : '') + 'class="{$cls}" style="' + this.side + ':{left}px;top:{top}px;height:{height}px;width:{width}px">' +
                    (innerTpl ? '{[this.renderInner(values)]}' : '') +
                    '</div>',
                '</tpl>',
                {
                    getTipText : function (values) {
                        return scheduler.getSchedulingView().getFormattedDate(values.Date) + ' ' + (values.Text || "");
                    },

                    renderInner : function(values) {
                        return innerTpl.apply(values);
                    }
                }
            );
        }
        
        this.callParent(arguments);
    },

    generateMarkup : function(isPrint, records) {
        return this.schedulerView.getMode() === 'calendar' ? '' : this.callParent(arguments);
    },

    generateHeaderMarkup : function (isPrint, records) {
        return this.schedulerView.getMode() === 'calendar' ? '' : this.callParent(arguments);
    },

    getElementData : function(viewStart, viewEnd, records) {
        var s = this.store,
            scheduler = this.schedulerView,
            isHorizontal = scheduler.isHorizontal(),
            rs = records || s.getRange(),
            data = [],
            height,
            width,
            region = scheduler.getTimeSpanRegion(viewStart, null, this.expandToFitView),
            record, date, templateData;

        if (Ext.versions.touch){
            height = '100%';
        } else {
            height = isHorizontal ? region.bottom - region.top : 1;
        }

        width = isHorizontal ? 1 : region.right - region.left;

        for (var i = 0, l = rs.length; i < l; i++) {
            record = rs[i];
            date = record.get('Date');

            if (date && Sch.util.Date.betweenLesser(date, viewStart, viewEnd)) {
                var pos = scheduler.getCoordinateFromDate(date);

                templateData = Ext.apply({}, this.getTemplateData(record));
                templateData.id = this.getElementId(record);
                // using $cls to avoid possible conflict with "Cls" field in the record
                // `getElementCls` will append the "Cls" field value to the class
                templateData.$cls = this.getElementCls(record, templateData);

                templateData.width = width;
                templateData.height = height;

                if (isHorizontal) {
                    templateData.left = pos;
                } else{
                    templateData.top = pos;
                }
                data.push(templateData);
            }
        }
        
        return data;
    },
    
    
    getHeaderElementData : function(records) {
        var startDate = this.timeAxis.getStart(),
            endDate = this.timeAxis.getEnd(),
            isHorizontal = this.schedulerView.isHorizontal(),
            data = [],
            record, date, position, templateData;

        records = records || this.store.getRange();

        for (var i = 0, l = records.length; i < l; i++) {
            record = records[i];
            date = record.get('Date');
            
            if (date && Sch.util.Date.betweenLesser(date, startDate, endDate)) {
                position = this.getHeaderElementPosition(date);
                templateData = this.getTemplateData(record);
                
                templateData = Ext.apply({
                    side     : isHorizontal ? this.side : 'top',
                    cls      : this.getHeaderElementCls(record, templateData),
                    position : position
                }, templateData);
                
                // Overwrite id manually as it might exist in the record raw data
                templateData.id = this.getHeaderElementId(record);

                data.push(templateData);
            }
        }
        
        return data;
    }
    
});

/**
@class Sch.plugin.Zones
@extends Sch.feature.AbstractTimeSpan

Plugin (ptype = 'scheduler_zones') for showing "global" zones in the scheduler grid, these can by styled easily using just CSS.
To populate this plugin you need to pass it a store having `Sch.model.Range` as the model.

{@img scheduler/images/scheduler-grid-horizontal.png}

To add this plugin to scheduler:

        var zonesStore = Ext.create('Ext.data.Store', {
            model   : 'Sch.model.Range',
            data    : [
                {
                    StartDate   : new Date(2011, 0, 6),
                    EndDate     : new Date(2011, 0, 7),
                    Cls         : 'myZoneStyle'
                }
            ]
        });

        var scheduler = Ext.create('Sch.panel.SchedulerGrid', {
            ...
    
            resourceStore   : resourceStore,
            eventStore      : eventStore,
            
            plugins         : [
                Ext.create('Sch.plugin.Zones', { store : zonesStore })
            ]
        });


*/
Ext.define("Sch.plugin.Zones", {
    extend      : "Sch.feature.AbstractTimeSpan",
    alias       : "plugin.scheduler_zones",

    requires    : [
        'Sch.model.Range'
    ],

    /**
     * @cfg {String/Ext.XTemplate} innerTpl A template providing additional markup to render into each timespan element
     */
    innerTpl            : null,

    cls                 : 'sch-zone',
    side                : null,

    
    init : function (scheduler) {
        if (Ext.isString(this.innerTpl)) {
            this.innerTpl = new Ext.XTemplate(this.innerTpl);
        }

        this.side = scheduler.rtl ? 'right' : 'left';

        var innerTpl = this.innerTpl;

        if (!this.template) {
            this.template = new Ext.XTemplate(
                '<tpl for=".">' +
                    '<div id="{id}" class="{$cls}" style="' + this.side + ':{left}px;top:{top}px;height:{height}px;width:{width}px;{style}">' +
                    (innerTpl ? '{[this.renderInner(values)]}' : '') + 
                    '</div>' +
                '</tpl>',
                {
                    renderInner : function(values) {
                        return innerTpl.apply(values);
                    }
                }
            );
        }
        
        
        if (Ext.isString(this.innerHeaderTpl)) {
            this.innerHeaderTpl = new Ext.XTemplate(this.innerHeaderTpl);
        }
        
        this.callParent(arguments);
    },

    
    getElementData : function(viewStart, viewEnd, records, isPrint) {
        var schedulerView   = this.schedulerView,
            data            = [];
        var region          = schedulerView.getTimeSpanRegion(viewStart, viewEnd, this.expandToFitView);
        var record, spanStart, spanEnd, zoneData, width, templateData;
        
        records             = records || this.store.getRange();
            
        for (var i = 0, l = records.length; i < l; i++) {
            record       = records[i];
            spanStart    = record.getStartDate();
            spanEnd      = record.getEndDate();
            templateData = this.getTemplateData(record);

            if (spanStart && spanEnd && Sch.util.Date.intersectSpans(spanStart, spanEnd, viewStart, viewEnd)) {
                zoneData = Ext.apply({}, templateData);

                zoneData.id = this.getElementId(record);
                // using $cls to avoid possible conflict with "Cls" field in the record
                // `getElementCls` will append the "Cls" field value to the class
                zoneData.$cls = this.getElementCls(record, templateData);

                var mode = schedulerView.getMode();

                if (mode === 'calendar') {
                    var timeSpanRegion = schedulerView.getTimeSpanRegion(spanStart, spanEnd);

                    zoneData.left = timeSpanRegion.left;
                    zoneData.top = timeSpanRegion.top;
                    zoneData.height = timeSpanRegion.bottom - timeSpanRegion.top;
                    zoneData.width = timeSpanRegion.right - timeSpanRegion.left;
                }
                else {
                    var startPos = schedulerView.getCoordinateFromDate(Sch.util.Date.max(spanStart, viewStart));
                    var endPos = schedulerView.getCoordinateFromDate(Sch.util.Date.min(spanEnd, viewEnd));

                    if (mode === 'horizontal') {
                        zoneData.left = startPos;
                        zoneData.top = region.top;

                        zoneData.width = isPrint ? 0 : endPos - startPos;
                        zoneData.height = region.bottom - region.top;

                        zoneData.style = isPrint ? ('border-left-width:' + (endPos - startPos) + 'px') : "";
                    } else {
                        zoneData.left = region.left;
                        zoneData.top = startPos;

                        zoneData.height = isPrint ? 0 : endPos - startPos;
                        zoneData.width = region.right - region.left;

                        zoneData.style = isPrint ? ('border-top-width:' + (endPos - startPos) + 'px') : "";
                    }
                }

                data.push(zoneData);
            }
        }
        return data;
    },
    
        
    getHeaderElementId : function(record, isStart) {
        return this.callParent([record]) + (isStart ? '-start' : '-end');
    },
    
    
    /**
     * Return header element class for data record.
     * 
     * @param {Sch.model.Range} record Data record
     * @param {Object} data
     * @param {Boolean} isStart
     * 
     * @return {String}
     */
    getHeaderElementCls : function(record, data, isStart) {
        var clsField = record.clsField || this.clsField;
            
        if (!data) {
            data = this.getTemplateData(record);
        }
        
        return 'sch-header-indicator sch-header-indicator-' + (isStart ? 'start ' : 'end ') +
            this.uniqueCls + ' ' + (data[clsField] || '');
    },
    
    
    getZoneHeaderElementData : function(startDate, endDate, record, isStart) {
        var date = isStart ? record.getStartDate() : record.getEndDate(),
            data = null,
            position, isHorizontal, templateData;
            
        if (date && Sch.util.Date.betweenLesser(date, startDate, endDate)) {
            position     = this.getHeaderElementPosition(date);
            isHorizontal = this.schedulerView.isHorizontal();
            templateData = this.getTemplateData(record);
            
            data = Ext.apply({
                id       : this.getHeaderElementId(record, isStart),
                cls      : this.getHeaderElementCls(record, templateData, isStart),
                isStart  : isStart,
                
                side     : isHorizontal ? this.side : 'top',
                position : position
            }, templateData);
        }
        
        return data;
    },
    
    
    getHeaderElementData : function(records) {
        var startDate = this.timeAxis.getStart(),
            endDate = this.timeAxis.getEnd(),
            data = [],
            record, startData, endData;
            
        records = records || this.store.getRange();
        
        for (var i = 0, l = records.length; i < l; i++) {
            record = records[i];
            
            startData = this.getZoneHeaderElementData(startDate, endDate, record, true);
            if (startData) {
                data.push(startData);
            }
            
            endData = this.getZoneHeaderElementData(startDate, endDate, record, false);
            if (endData) {
                data.push(endData);
            }
            
        }

        return data;
    },
    
    
    updateZoneHeaderElement : function(el, data) {
        // Reapply CSS classes
        el.dom.className = data.cls;

        if (this.schedulerView.isHorizontal()) {
            this.setElementX(el, data.position);
        } else {
            el.setTop(data.position);
        }
    },
    
    
    updateHeaderElement : function(record) {
        var startDate = this.timeAxis.getStart(),
            endDate = this.timeAxis.getEnd(),
            startEl = Ext.get(this.getHeaderElementId(record, true)),
            endEl   = Ext.get(this.getHeaderElementId(record, false)),
            startData = this.getZoneHeaderElementData(startDate, endDate, record, true),
            endData   = this.getZoneHeaderElementData(startDate, endDate, record, false);
            
        if (!(startEl && endData) || !(endEl && endData)) {
            Ext.destroy(startEl, endEl);
            this.renderHeaderElementsInternal([record]);
        } else {
            if (startEl) {
                if (!startData) {
                    Ext.destroy(startEl);
                } else {
                    this.updateZoneHeaderElement(startEl, startData);
                }
            }
            
            if (endEl) {
                if (!endData) {
                    Ext.destroy(endEl);
                } else {
                    this.updateZoneHeaderElement(endEl, endData);
                }
            }
        }
    }
    
}); 

/**
 @class Sch.plugin.Pan

 A plugin (ptype = 'scheduler_pan') enabling panning by clicking and dragging in a scheduling view.

 To add this plugin to your scheduler or gantt view:

         var scheduler = Ext.create('Sch.panel.SchedulerGrid', {
            ...

            resourceStore   : resourceStore,
            eventStore      : eventStore,

            plugins         : [
                Ext.create('Sch.plugin.Pan', { enableVerticalPan : true })
            ]
        });
 */
Ext.define("Sch.plugin.Pan", {
    extend        : 'Ext.AbstractPlugin',
    alias         : 'plugin.scheduler_pan',
    lockableScope : 'top',

    /**
     * @cfg {Boolean} enableVerticalPan
     * True to allow vertical panning
     */
    enableVerticalPan : true,

    statics : {
        /**
         * @cfg {Number} KEY_SHIFT Constant for shift key
         */
        KEY_SHIFT : 1,

        /**
         * @cfg {Number} KEY_CTRL Constant for ctrl / meta key
         */
        KEY_CTRL : 2,

        /**
         * @cfg {Number} KEY_ALT Constant for alt key
         */
        KEY_ALT : 4,

        /**
         * @cfg {Number} KEY_ALL Constant for all modifier keys (shift, ctrl / meta, alt)
         */
        KEY_ALL : 7
    },

    /**
     * @cfg {Number} disableOnKey Specifies which key should be pressed to disable panning.
     * See {@link #KEY_SHIFT}, {@link #KEY_CTRL}, {@link #KEY_ALT}, {@link #KEY_ALL}.
     * For example to disable panning when shift or ctrl is pressed:

     Ext.create('Sch.plugin.Pan', {
            disableOnKey : Sch.plugin.Pan.KEY_SHIFT + Sch.plugin.Pan.KEY_CTRL
        })

     */
    disableOnKey : 0,

    constructor : function (config) {
        Ext.apply(this, config);
    },

    init : function (pnl) {
        // No need for this plugin on a touch device, Ext JS handles scrolling by default
        if (Ext.supports.Touch) return;

        this.view = pnl.getSchedulingView();

        this.view.on('afterrender', this.onRender, this);
    },

    onRender : function (s) {
        this.view.el.on('mousedown', this.onMouseDown, this);
    },

    onMouseDown : function (e, t) {
        var self = this.self,
            disableOnKey = this.disableOnKey;

        // Ignore event if #disableOnKey is specified and at least one of the
        // functional keys is pressed
        if ((e.shiftKey && (disableOnKey & self.KEY_SHIFT)) ||
            (e.ctrlKey && (disableOnKey & self.KEY_CTRL)) ||
            (e.altKey && (disableOnKey & self.KEY_ALT))) {
            return;
        }

        // ignore clicks on tasks and events
        if (e.getTarget('.' + this.view.timeCellCls, 10) && !e.getTarget(this.view.eventSelector)) {
            this.mouseX = e.getX();
            this.mouseY = e.getY();
            Ext.getBody().on('mousemove', this.onMouseMove, this);
            Ext.getDoc().on('mouseup', this.onMouseUp, this);

            // For IE (and FF if using frames), if you move mouse onto the browser chrome and release mouse button
            // we won't know about it. Next time mouse enters the body, cancel any ongoing pan activity as a fallback.
            if (Ext.isIE || Ext.isGecko) {
                Ext.getBody().on('mouseenter', this.onMouseUp, this);
            }

            // required for some weird chrome bug/behavior, when whole panel was scrolled-out
            e.stopEvent();
        }
    },

    onMouseMove : function (e) {
        e.stopEvent();

        var x = e.getX();
        var y = e.getY();
        var yDelta = 0,
            xDelta = this.mouseX - x;

        if (this.enableVerticalPan) {
            yDelta = this.mouseY - y;
        }

        this.mouseX = x;
        this.mouseY = y;

        this.view.scrollBy(xDelta, yDelta, false);
    },

    onMouseUp : function (e) {
        Ext.getBody().un('mousemove', this.onMouseMove, this);
        Ext.getDoc().un('mouseup', this.onMouseUp, this);

        if (Ext.isIE || Ext.isGecko) {
            Ext.getBody().un('mouseenter', this.onMouseUp, this);
        }
    }
});

/**
 * @class Sch.tooltip.ClockTemplate
 * @extends Ext.XTemplate
 * @private
 * A template showing a clock. It accepts an object containing a 'date' and a 'text' property to its apply method.
 * @constructor
 * @param {Object} config The object containing the configuration of this model.
 **/
Ext.define("Sch.tooltip.ClockTemplate", {
    extend : 'Ext.XTemplate',

    minuteHeight : 8,
    minuteTop    : 2,
    hourHeight   : 8,
    hourTop      : 2,
    handLeft     : 10,

    getRotateStyle : function (degrees) {
        return "transform:rotate(Ddeg);-ms-transform:rotate(Ddeg);-moz-transform: rotate(Ddeg);-webkit-transform: rotate(Ddeg);-o-transform:rotate(Ddeg);".replace(/D/g, degrees);
    },

    getRotateStyleIE : (function () {
        var toRad = Math.PI / 180,
            cos = Math.cos,
            sin = Math.sin;

        return function (degrees, top, height) {
            var me = this,
                rad = degrees * toRad,
                cosV = cos(rad),
                sinV = sin(rad),
                y = height * sin((90 - degrees) * toRad),
                x = height * cos((90 - degrees) * toRad),
                topAdjust = Math.min(height, height - y),
                leftAdjust = degrees > 180 ? x : 0,
                matrixString = "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11 = " + cosV + ", M12 = " + (-sinV) + ", M21 = " + sinV + ", M22 = " + cosV + ")";

            return Ext.String.format("filter:{0};-ms-filter:{0};top:{1}px;left:{2}px;", matrixString, topAdjust + top, leftAdjust + me.handLeft);
        };
    })(),

    constructor : function () {
        var isLegacyIE = Ext.isIE && Ext.isIE8m;

        this.callParent([
            '<div class="sch-clockwrap ' + (isLegacyIE ? '' : 'sch-supports-border-radius') + ' {cls}">' +
                '<div class="sch-clock">' +
                    '<div class="sch-hourIndicator" style="{[this.getHourStyle((values.date.getHours() % 12) * 30,' + this.hourTop + ', + ' + this.hourHeight + ')]}">{[Ext.Date.monthNames[values.date.getMonth()].substr(0,3)]}</div>' +
                    '<div class="sch-minuteIndicator" style="{[this.getMinuteStyle(values.date.getMinutes() * 6,' + this.minuteTop + ', + ' + this.minuteHeight + ')]}">{[values.date.getDate()]}</div>' +
                    (isLegacyIE ? '' : '<div class="sch-clock-dot"></div>') +
                '</div>' +
                '<span class="sch-clock-text">{text}</span>' +
            '</div>',
            {
                disableFormats : true,

                getMinuteStyle : isLegacyIE ? this.getRotateStyleIE : this.getRotateStyle,
                getHourStyle   : isLegacyIE ? this.getRotateStyleIE : this.getRotateStyle
            }
        ]);
    }
})
;

/**
 @class Sch.tooltip.Tooltip
 @extends Ext.ToolTip
 @private

 Internal plugin showing a tooltip with event start/end information.
 */
Ext.define("Sch.tooltip.Tooltip", {
    extend : "Ext.tip.ToolTip",

    requires : [
        'Sch.tooltip.ClockTemplate'
    ],

    autoHide          : false,
    anchor            : 'b',
    padding           : '0 3 0 0',
    showDelay         : 0,
    hideDelay         : 0,
    quickShowInterval : 0,
    dismissDelay      : 0,
    trackMouse        : false,
    anchorOffset      : 5,
    shadow            : false,
    frame             : false,

    schedulerView     : null,
    message           : null,
    valid             : true,
    offsetAdjust      : [18, 5],

    constructor : function (config) {
        var clockTpl = new Sch.tooltip.ClockTemplate();

        this.startDate = this.endDate = new Date();

        if (!this.template) {
            this.template = Ext.create("Ext.XTemplate",
                '<div class="sch-tip-{[values.valid ? "ok" : "notok"]}">' +
                '{[this.renderClock(values.startDate, values.startText, "sch-tooltip-startdate")]}' +
                '{[this.renderClock(values.endDate, values.endText, "sch-tooltip-enddate")]}' +
                '<div class="sch-tip-message">{message}</div>' +
                '</div>',
                {
                    disableFormats : true,

                    renderClock : function (date, text, cls) {
                        return clockTpl.apply({
                            date : date,
                            text : text,
                            cls  : cls
                        });
                    }
                }
            );
        }

        this.callParent(arguments);
    },

    // set redraw to true if you want to force redraw of the tip
    // required to update drag tip after scroll
    update      : function (startDate, endDate, valid, message) {

        if (this.startDate - startDate !== 0 ||
            this.endDate - endDate !== 0 ||
            this.valid !== valid ||
            this.message !== message) {

            // Readjust position if message is removed or appears
            var realignNeeded = (this.message && !message) || (!this.message && message);

            // This will be called a lot so cache the values
            this.startDate = startDate;
            this.endDate = endDate;
            this.valid = valid;
            this.message = message;

            var startText = this.schedulerView.getFormattedDate(startDate),
                endText = this.schedulerView.getFormattedEndDate(endDate, startDate);

            // If resolution is day or greater, and end date is greater then start date
            if (this.mode === 'calendar' && endDate.getHours() === 0 && endDate.getMinutes() === 0 && !(endDate.getYear() === startDate.getYear() && endDate.getMonth() === startDate.getMonth() && endDate.getDate() === startDate.getDate())) {
                endDate = Sch.util.Date.add(endDate, Sch.util.Date.DAY, -1);
            }

            this.callParent([
                this.template.apply({
                    valid     : valid,
                    startDate : startDate,
                    endDate   : endDate,
                    startText : startText,
                    endText   : endText,
                    message   : message
                })
            ]);

            if (realignNeeded) {
                this.realign();
            }
        }
    },

    show : function (el, xOffset) {
        // Ext internal tooltip code may call this method with an Array, ignore it
        if (!el || Ext.isArray(el)) {
            return;
        }

        if (Sch.util.Date.compareUnits(this.schedulerView.getTimeResolution().unit, Sch.util.Date.DAY) >= 0) {
            this.mode = 'calendar';

            this.addCls('sch-day-resolution');
            this.removeCls('sch-hour-resolution');
        } else {
            this.mode = 'clock';

            this.removeCls('sch-day-resolution');
            this.addCls('sch-hour-resolution');
        }

        // xOffset has to have default value
        // when it's 18 tip is aligned to left border
        xOffset = arguments.length > 1 ? xOffset : this.offsetAdjust[0];

        this.mouseOffsets = [xOffset - this.offsetAdjust[0], -this.offsetAdjust[1]];

        this.setTarget(el);
        this.callParent();

        this.realign();
    },

    realign : function () {
        this.el.alignTo(this.target, 'bl-tl', this.mouseOffsets);
    },

    afterRender : function () {
        this.callParent(arguments);

        // In slower browsers, the mouse pointer may end up over the tooltip interfering with drag drop etc
        this.el.on('mouseenter', this.realign, this);
    }
});

/**
 * @class Sch.tooltip.HoverTip
 * HoverTip is a class that represents a tooltip with clock and time which updates as the mouse pointer moves over the schedule area.
 */
Ext.define('Sch.tooltip.HoverTip', {
    extend          : 'Ext.tip.ToolTip',
    
    alias           : 'widget.scheduler_hovertip',
    
    requires        : [
        'Sch.tooltip.ClockTemplate'
    ],
    
    trackMouse      : true,
    
    bodyCls         : 'sch-hovertip',
    
    messageTpl      : '<div class="sch-hovertip-msg">{message}</div>',
    
    autoHide        : false,
    
    dismissDelay    : 1000,
    
    showDelay       : 300,
    
    /**
     * @cfg {Sch.mixin.SchedulerView} schedulerView View instance to bind this tooltip to
     * @required
     */
    schedulerView   : null,
    
    initComponent   : function () {
        var me = this;
        
        var view = me.schedulerView;
        
        me.clockTpl = new Sch.tooltip.ClockTemplate();
        
        me.messageTpl = new Ext.XTemplate(me.messageTpl);
        
        me.lastTime = null;
        
        me.lastResource = null;
        
        me.callParent(arguments);
        
        me.on('beforeshow', me.tipOnBeforeShow, me);
        
        view.mon(view.el, {
            mouseleave : function () {
                me.hide();
            },
            mousemove  : me.handleMouseMove,
            scope      : me
        });
    },
    
    handleMouseMove       : function (e) {
        var me      = this;
        
        var view    = me.schedulerView;
        
        if (me.disabled) {
            return;
        }

        if (e.getTarget('.' + view.timeCellCls, 5) && !e.getTarget(view.eventSelector)) {
            var time = view.getDateFromDomEvent(e, 'floor');

            if (time) {
                var resourceRecord = view.resolveResource(e.getTarget());
                
                if (time - me.lastTime !== 0 || resourceRecord !== me.lastResource) {
                    me.lastResource = resourceRecord;
                    
                    me.updateHoverTip(time, e);

                    if (me.hidden) { // HACK, find better solution
                        if (Sch.util.Date.compareUnits(this.schedulerView.getTimeResolution().unit, Sch.util.Date.DAY) >= 0) {
                            me.addCls('sch-day-resolution');
                            me.removeCls('sch-hour-resolution');
                        } else {
                            me.removeCls('sch-day-resolution');
                            me.addCls('sch-hour-resolution');
                        }
                        me.show();
                    }
                }
            } else {
                me.hide();
                me.lastTime = null;
                me.lastResource = null;
            }
        } else {
            me.hide();
            me.lastTime = null;
            me.lastResource = null;
        }
    },
    
    /**
     * Override this to render custom text to default hover tip
     * @param {Date} date
     * @param {Ext.EventObject} e Browser event
     * @return {String}
     */
    getText : function () {},

    // private
    updateHoverTip    : function (date, e) {
        if (date) {
            var clockHtml = this.clockTpl.apply({ 
                date : date,
                text : this.schedulerView.getFormattedDate(date)
            });
            
            var messageHtml = this.messageTpl.apply({
                message : this.getText(date, e)
            });
            
            this.update(clockHtml + messageHtml);
            
            this.lastTime = date;
        }
    },
    
    tipOnBeforeShow : function (tip) {
        return !this.disabled && this.lastTime !== null;
    }
});

/**
@class Sch.view.model.TimeAxis
@extends Ext.util.Observable
@private

This class is an internal view model class, describing the visual representation of a {@link Sch.data.TimeAxis timeaxis}.
The config for the header rows is described in the {@link Sch.preset.ViewPreset#headerConfig headerConfig}.
To calculate the widths of each cell in the time axis, this class requires:

- availableWidth  - The total width available for the rendering
- tickWidth     - The fixed width of each cell in the lowest header row. This value is normally read from the 
{@link Sch.preset.ViewPreset viewPreset} but this can also be updated programmatically using {@link #setTickWidth}

Normally you should not interact with this class directly.

*/

if (!Ext.ClassManager.get("Sch.view.model.TimeAxis")) {

Ext.define("Sch.view.model.TimeAxis", {
    extend: 'Ext.util.Observable',

    requires: [
        'Ext.Date',
        'Sch.util.Date',
        'Sch.preset.Manager'
    ],

    /**
     * @cfg {Sch.data.TimeAxis} timeAxis
     * The time axis providing the underlying data to be visualized
     */
    timeAxis            : null,

    /**
     * @cfg {Number} availableWidth
     * The available width, this is normally not known by the consuming UI component using this model class until it has been fully rendered.
     * The consumer of this model should call {@link #setAvailableWidth} when its width has changed.
     */
    availableWidth      : 0,

    /**
     * @cfg {Number} tickWidth
     * The "tick width" to use for the cells in the bottom most header row.
     * This value is normally read from the {@link Sch.preset.ViewPreset viewPreset}
     */
    tickWidth           : 100,

    /**
     * @cfg {Boolean} snapToIncrement
     * true if there is a requirement to be able to snap events to a certain view resolution.
     * This has implications of the {@link #tickWidth} that can be used, since all widths must be in even pixels.
     */
    snapToIncrement     : false,
    
    /**
     * @cfg {Boolean} forceFit
     * true if cells in the bottom-most row should be fitted to the {@link #availableWidth available width}.
     */
    forceFit            : false,
    
    headerConfig        : null,

    // cached linear version of `headerConfig` - array of levels, starting from top 
    headers             : null,
    mainHeader          : 0,
    
    
    // the width of time axis column in vertical 
    timeAxisColumnWidth : null,
    // the width of resource column in vertical
    resourceColumnWidth : null,
    
    // width of the columns in calendar view
    calendarColumnWidth : null,
    
    // aka tickWidth in horizontal
    timeColumnWidth     : null,
    
    rowHeightHorizontal : null,
    rowHeightVertical   : null,
    
    mode                : 'horizontal', // or 'vertical'
    

    //used for Exporting. Make sure the tick columns are not recalculated when resizing.
    suppressFit         : false,

    // Since this model may be shared by multiple synced timelinePanels, we need to keep count of usage to know when we can destroy the view model.
    refCount            : 0,

    // cache of the config currently used.
    columnConfig        : {},
    
    // the view preset name to apply initially
    viewPreset          : null,
    
    // The default header level to draw column lines for
    columnLinesFor      : 'middle',

    eventStore          : null,

    originalTickWidth   : null,

    constructor: function (config) {
        var me = this;
        Ext.apply(this, config);

        if (this.viewPreset) {
            if (this.viewPreset instanceof Sch.preset.ViewPreset) {
                this.consumeViewPreset(this.viewPreset);
            } else {
                var preset      = Sch.preset.Manager.getPreset(this.viewPreset);
                
                preset && this.consumeViewPreset(preset);
            }
        }

        /**
        * @event update
        * Fires after the model has been updated.
        * @param {Sch.view.model.TimeAxis} model The model instance
        */

        // When time axis is changed, reconfigure the model
        me.timeAxis.on('reconfigure', me.onTimeAxisReconfigure, me);

        this.callParent(arguments);
    },

    destroy : function() {
        this.timeAxis.un('reconfigure', this.onTimeAxisReconfigure, this);
    },

    
    onTimeAxisReconfigure: function (timeAxis, suppressRefresh) {
        if (!suppressRefresh) {
            this.update();
        }
    },
    
    reconfigure : function (config) {
        // clear the cached headers
        this.headers        = null;

        Ext.apply(this, config);

        switch (this.mode) {
            case 'horizontal'   :
                this.setTickWidth(this.timeColumnWidth);
                break;
            case 'vertical'     : 
                this.setTickWidth(this.rowHeightVertical);
                break;
            case 'calendar'     :
                this.setTickWidth(this.rowHeightVertical);
                break;
        }
        
        this.fireEvent('reconfigure', this);
    },

    /**
    *  Returns a model object of the current timeAxis, containing an array representing the cells for each level in the header. 
    *  This object will always contain a 'middle' array, and depending on the {@link Sch.preset.ViewPreset#headerConfig} it can also contain a 'top' and 'bottom' property.
    *  @return {Object} The model representing each cell (with start date and end date) in the timeline representation.
    */
    getColumnConfig : function() {
        return this.columnConfig;
    },

    /**
    *  Updates the view model current timeAxis configuration and available width.
    *  @param {Number} availableWidth The available width for the rendering of the axis (used in forceFit mode)
    */
    update: function (availableWidth, suppressEvent) {
        var timeAxis        = this.timeAxis,
            headerConfig    = this.headerConfig;

        this.availableWidth = Math.max(availableWidth || this.availableWidth, 0);

        if (!Ext.isNumber(this.availableWidth)) {
            throw 'Invalid available width provided to Sch.view.model.TimeAxis';
        }
        
        if (this.forceFit && this.availableWidth <= 0) {
            // No point in continuing
            return;
        }

        this.columnConfig   = {};
        
        // Generate the underlying date ranges for each header row, which will provide input to the cell rendering
        for (var pos in headerConfig) {
            if (headerConfig[pos].cellGenerator) {
                this.columnConfig[pos] = headerConfig[pos].cellGenerator.call(this, timeAxis.getStart(), timeAxis.getEnd());
            } else {
                this.columnConfig[pos] = this.createHeaderRow(pos, headerConfig[pos]);
            }
        }
        
        // The "column width" is considered to be the width of each tick in the lowest header row and this width 
        // has to be same for all cells in the lowest row.
        var tickWidth       = this.calculateTickWidth(this.originalTickWidth);

        if (!Ext.isNumber(tickWidth) || tickWidth <= 0) {
            throw 'Invalid column width calculated in Sch.view.model.TimeAxis';
        }

        this.updateTickWidth(tickWidth);
        
        if (!suppressEvent) this.fireEvent('update', this);
    },

    // private
    createHeaderRow: function (position, headerConfig) {
        var cells   = [],
            me      = this,
            align   = headerConfig.align,
            today   = Ext.Date.clearTime(new Date());

        me.forEachInterval(position, function (start, end, i) {
            var colConfig   = {
                align       : align,
                start       : start,
                end         : end,
                headerCls   : ''
            };

            if (headerConfig.renderer) {
                colConfig.header = headerConfig.renderer.call(headerConfig.scope || me, start, end, colConfig, i, me.eventStore);
            } else {
                colConfig.header = Ext.Date.format(start, headerConfig.dateFormat);
            }

            // To be able to style individual day cells, weekends or other important days
            if (headerConfig.unit === Sch.util.Date.DAY && (!headerConfig.increment || headerConfig.increment === 1)) {
                colConfig.headerCls += ' sch-dayheadercell-' + start.getDay();

                if (Ext.Date.clearTime(start, true) - today === 0) {
                    colConfig.headerCls += ' sch-dayheadercell-today';
                }
            }

            cells.push(colConfig);
        });

        return cells;
    },

    /**
     *  Returns the distance for a timespan with the given start and end date.
     *  @return {Number} The width of the time span
     */
    getDistanceBetweenDates: function (start, end) {
        return Math.round(this.getPositionFromDate(end, true) - this.getPositionFromDate(start));
    },

    /**
     *  Gets the position of a date on the projected time axis or -1 if the date is not in the timeAxis.
     *  @param {Date} date, the date to query for.
     *  @param {Boolean} [isEnd] true to return bottom coordinate for calendar view 
     *  @returns {Number} the coordinate representing the date
     */
    getPositionFromDate: function (date, isEnd) {
        if (this.mode === 'calendar') {
            var rowHeight       = this.rowHeightCalendar || this.rowHeightVertical;
            var headers         = this.getHeaders();
            var startDate       = this.timeAxis.getStart();
            var UD              = Sch.util.Date;

            // calendar view inherits vertical view so this method should only return vertical coordinate
            var verticalDate    = UD.mergeDates(startDate, date, headers[1].unit);
            var verticalStart   = UD.getDurationInUnit(startDate, verticalDate, headers[1].unit, true) * rowHeight;
            var result          = Math.round(verticalStart);
            
            if (result === 0 && isEnd) {
                return this.calendarRowsAmount * rowHeight;
            }
            
            return result;
        } else {
            var pos     = -1,
                tick    = this.timeAxis.getTickFromDate(date);
    
            if (tick >= 0) {
                pos     = Math.round(this.tickWidth * (tick - this.timeAxis.visibleTickStart));
            }
    
            return pos;
        }
    },

    /**
     * Gets the date for a position on the time axis
     * @param {Number} position The page X or Y coordinate
     * @param {String} roundingMethod The rounding method to use
     * @returns {Date} the Date corresponding to the xy coordinate
     */
    getDateFromPosition: function (position, roundingMethod) {
        if (this.mode === 'calendar') {
            var rowHeight   = this.rowHeightCalendar || this.rowHeightVertical;
            var UD          = Sch.util.Date;
            var startDate   = this.timeAxis.getStart();
            var headers     = this.getHeaders();
            
            var horizontalDate  = UD.add(startDate, headers[0].splitUnit, Math.floor(position[0] / this.calendarColumnWidth));
            
            var first = this.timeAxis.first();
            var millisecondsPerPixel = (first.get('end') - first.get('start')) / rowHeight;

            var result      = UD.add(horizontalDate, UD.MILLI, Math.round(position[1] * millisecondsPerPixel));
            if (roundingMethod) {
                result  = this.timeAxis[roundingMethod + 'Date'](result);
            }
            
            return result;
            
        } else {
            var tick        = position / this.getTickWidth() + this.timeAxis.visibleTickStart,
                nbrTicks    = this.timeAxis.getCount();
    
            if (tick < 0 || tick > nbrTicks) {
                return null;
            }
    
            return this.timeAxis.getDateFromTick(tick, roundingMethod);
        }
    },

    /**
    * Returns the amount of pixels for a single unit
    * @private
    * @return {String} The unit in pixel
    */
    getSingleUnitInPixels: function (unit) {
        return Sch.util.Date.getUnitToBaseUnitRatio(this.timeAxis.getUnit(), unit) * this.tickWidth / this.timeAxis.increment;
    },

    /**
     * [Experimental] Returns the pixel increment for the current view resolution.
     * @return {Number} The width increment
     */
    getSnapPixelAmount: function () {
        if (this.snapToIncrement) {
            var resolution = this.timeAxis.getResolution();
            return (resolution.increment || 1) * this.getSingleUnitInPixels(resolution.unit);
        } else {
            return 1;
        }
    },

    /**
    * Returns the current time column width (the width of a cell in the lowest header row)
    * @return {Number} The width
    */
    getTickWidth: function () {
        return this.tickWidth;
    },

    /**
    * Sets a new tick width (the width of a time cell in the bottom-most time axis row)
    * @param {Number} width The width
    */
    setTickWidth: function (width, suppressEvent) {
        this.originalTickWidth = width;

        this.updateTickWidth(width);

        this.update(null, suppressEvent);
    },
    
    
    updateTickWidth : function (value) {
        this.tickWidth = value;
        
        switch (this.mode) {
            case 'horizontal'   : this.timeColumnWidth = value; break;
            case 'vertical'     : this.rowHeightVertical = value; break;
            case 'calendar'     : this.rowHeightVertical = value; break;
        }
    },
    

    /**
    * Returns the total width of the time axis representation.
    * @return {Number} The width
    */
    getTotalWidth: function () {
        return Math.round(this.tickWidth * this.timeAxis.getVisibleTickTimeSpan());
    },

    // Calculates the time column width based on the value defined viewPreset "timeColumnWidth". It also checks for the forceFit view option
    // and the snapToIncrement, both of which impose constraints on the time column width configuration.
    calculateTickWidth: function (proposedWidth) {
        var forceFit        = this.forceFit;
        var timeAxis        = this.timeAxis;
        
        var width           = 0,
            timelineUnit    = timeAxis.getUnit(),
            ratio           = Number.MAX_VALUE,
            DATE            = Sch.util.Date;

        if (this.snapToIncrement) {
            var resolution  = timeAxis.getResolution();

            ratio           = DATE.getUnitToBaseUnitRatio(timelineUnit, resolution.unit) * resolution.increment;
        } else {
            var measuringUnit = DATE.getMeasuringUnit(timelineUnit);
    
            ratio           = Math.min(ratio, DATE.getUnitToBaseUnitRatio(timelineUnit, measuringUnit));
        }
            
        if (!this.suppressFit){
            var fittingWidth    = Math[ forceFit ? 'floor' : 'round' ](this.getAvailableWidth() / timeAxis.getVisibleTickTimeSpan());

            width           = (forceFit || proposedWidth < fittingWidth) ? fittingWidth : proposedWidth;
            
            if (ratio > 0 && (!forceFit || ratio < 1)) {
                // For touch, make sure we always fill the available space with forceFit (to not show edges of side-time-pickers)
                var method  = Ext.versions.touch && forceFit? 'ceil' : (forceFit ? 'floor' : 'round');

                width       = Math.round(Math.max(1, Math[method](ratio * width)) / ratio);
            }
        } else {
            width           = proposedWidth;
        }

        return width;
    },

    /**
    * Returns the available width for the time axis representation.
    * @return {Number} The available width
    */
    getAvailableWidth: function () {
        return this.availableWidth;
    },

    /**
    * Sets the available width for the model, which (if changed) will cause it to update its contents and fire the {@link #event-update} event.
    * @param {Number} width The width
    */
    setAvailableWidth: function (width) {
//        if (width && width != this.availableWidth) this.update(width);

        // We should only need to repaint fully if the tick width has changed (which will happen if forceFit is set, or if the full size of the time axis doesn't
        // occupy the available space - and gets stretched
        this.availableWidth = Math.max(0, width);

        var newTickWidth = this.calculateTickWidth(this.originalTickWidth);

        if (newTickWidth !== this.tickWidth) {
            this.update();
        }
    },

    /**
     * This function fits the time columns into the available space in the time axis column.
     * @param {Boolean} suppressEvent `true` to skip firing the 'update' event.
     */
    fitToAvailableWidth: function (suppressEvent) {
        var proposedWidth   = Math.floor(this.availableWidth / this.timeAxis.getVisibleTickTimeSpan());

        this.setTickWidth(proposedWidth, suppressEvent);
    },

    /**
    * Sets the forceFit value for the model, which will cause it to update its contents and fire the {@link #event-update} event.
    * @param {Boolean} value 
    */
    setForceFit: function (value) {
        if (value !== this.forceFit) {
            this.forceFit = value;
            this.update();
        }
    },

    /**
    * Sets the snapToIncrement value for the model, which will cause it to update its contents and fire the {@link #event-update} event.
    * @param {Boolean} value 
    */
    setSnapToIncrement: function (value) {
        if (value !== this.snapToIncrement) {
            this.snapToIncrement = value;
            this.update();
        }
    },
    
    
    getViewRowHeight : function () {
        var val = this.mode == 'horizontal' ? this.rowHeightHorizontal : this.rowHeightVertical;

        // Sanity check
        if (!val) throw 'rowHeight info not available';

        return val;
    },
    
    
    setViewRowHeight : function (value, suppressEvent) {
        var isHorizontal    = this.mode === 'horizontal';

        var property        = 'rowHeight' + Ext.String.capitalize(this.mode);
        
        if (this[ property ] != value) {
            this[ property ]    = value;
            
            if (isHorizontal) {
                if (!suppressEvent) this.fireEvent('update', this);
            } else {
                this.setTickWidth(value, suppressEvent);
            }
        }
    },

    setViewColumnWidth : function (value, suppressEvent) {
        switch (this.mode) {
            case 'horizontal'   : this.setTickWidth(value, suppressEvent); break;
            case 'vertical'     : this.resourceColumnWidth = value; break;
            case 'calendar'     : this.calendarColumnWidth = value; break;
        }

        if (!suppressEvent) {
            this.fireEvent('columnwidthchange', this, value);
        }
    },
    

    getHeaders : function () {
        if (this.headers) return this.headers;
        
        var headerConfig        = this.headerConfig;
        
        // main header is always `middle` (which is always requires to present in `headerConfig`)
        // `top` may absent, in this case `middle` will be on 0-th index
        this.mainHeader         = headerConfig.top ? 1 : 0;
        
        return this.headers     = [].concat(headerConfig.top || [], headerConfig.middle || [], headerConfig.bottom || []);
    },
    
    
    getMainHeader : function () {
        return this.getHeaders()[ this.mainHeader ];
    },
    
    
    getBottomHeader : function () {
        var headers     = this.getHeaders();
        
        return headers[ headers.length - 1 ];
    },
    
    
    /**
    * Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.
    * Return false to break the iteration.
    * @param {String} position 'main' (middle), 'top' or 'bottom'
    * @param {Function} iteratorFn The function to call, will be called with start date, end date and "tick index"
    * @param {Object} scope (optional) The "this" object to use for the function call
    */
    forEachInterval : function (position, iteratorFn, scope) {
        scope               = scope || this;

        var headerConfig    = this.headerConfig;
        
        if (!headerConfig) return;     // Not initialized

        if (position === 'top' || (position === 'middle' && headerConfig.bottom)) {
            var header      = headerConfig[ position ];
            
            this.timeAxis.forEachAuxInterval(header.unit, header.increment, iteratorFn, scope);
        } else {
            // This is the lowest header row, which should be fed the data in the tickStore
            this.timeAxis.each(function(r, index) { 
                return iteratorFn.call(scope, r.data.start, r.data.end, index);
            });
        }
    },

    /**
    * Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.
    * Return false to break the iteration.
    * @protected
    * @param {Function} iteratorFn The function to call
    * @param {Object} scope (optional) The "this" object to use for the function call
    */
    forEachMainInterval : function (iteratorFn, scope) {
        this.forEachInterval('middle', iteratorFn, scope);
    },
    
    
    consumeViewPreset : function (preset) {
        // clear the cached headers
        this.headers        = null;
        
        var isHorizontal    = this.mode == 'horizontal';

        Ext.apply(this, {
            headerConfig        : preset.headerConfig,
            columnLinesFor      : preset.columnLinesFor || 'middle', 
            rowHeightHorizontal : preset.rowHeight,
            tickWidth           : isHorizontal ? preset.timeColumnWidth : preset.timeRowHeight || preset.timeColumnWidth || 60,
            timeColumnWidth     : preset.timeColumnWidth,
            
            // timeColumnWidth is also used for row height in vertical mode
            rowHeightVertical   : preset.timeRowHeight || preset.timeColumnWidth || 60,
            timeAxisColumnWidth : preset.timeAxisColumnWidth,
            resourceColumnWidth : preset.resourceColumnWidth || 100
        });

        this.originalTickWidth = this.tickWidth;
    }
});


}
/**
* @class Sch.view.HorizontalTimeAxis
* @extends Ext.util.Observable
* @private
*
* A visual representation of the time axis described in the {@link Sch.preset.ViewPreset#headerConfig headerConfig}. 
* Normally you should not interact with this class directly.
*/
Ext.define("Sch.view.HorizontalTimeAxis", {
    extend: 'Ext.util.Observable',

    requires: [
        'Ext.XTemplate'
    ],

    /**
    * @cfg {Boolean} trackHeaderOver `true` to highlight each header cell when the mouse is moved over it. 
    */
    trackHeaderOver: true,

    /**
    * @cfg {Number} compactCellWidthThreshold The minimum width for a bottom row header cell to be considered 'compact', which adds a special CSS class to the row (for special styling). 
    *            Defaults to 15px.
    */
    compactCellWidthThreshold: 15,

    baseCls : 'sch-column-header',
    tableCls : 'sch-header-row',

    // a 2nd template for the 2nd mode, w/o `containerEl`
    headerHtmlRowTpl:
        '<table border="0" cellspacing="0" cellpadding="0" style="width: {totalWidth}px; {tstyle}" class="{{tableCls}} sch-header-row-{position} {cls}">' +
            '<thead>' +
                '<tr>' +
                    '<tpl for="cells">' +
                        '<td class="{{baseCls}} {headerCls}" style="position : static; text-align: {align}; width: {width}px; {style}" tabIndex="0"' +
                            'headerPosition="{parent.position}" headerIndex="{[xindex-1]}">' +
                                '<div class="sch-simple-timeheader">{header}</div>' +
                        '</td>' +
                    '</tpl>' +
                '</tr>' +
            '</thead>' +
        '</table>',
        
    // TODO DOCS
    model           : null,

    // TODO DOCS
    hoverCls        : '',
    
    // optional
    // this view class will work in 2 modes - one with provided `containerEl` and one w/o it
    containerEl     : null,

    // Only used for IE10 in Touch Scheduler since display:box is too buggy in IE.
    height : null,

    /**
     * @event timeheaderclick
     * Fires after a click on a time header cell
     * @param {Sch.view.HorizontalTimeAxis} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The start date of the header cell
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event timeheaderdblclick
     * Fires after a double click on a time header cell
     * @param {Sch.view.HorizontalTimeAxis} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The end date of the header cell
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event timeheadercontextmenu
     * Fires after a right click on a time header cell
     * @param {Sch.view.HorizontalTimeAxis} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The start date of the header cell
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event refresh
     * Fires after the view has been updated, (after the time axis has been reconfigured,
     * or as a result of time column width change or available schedule width change).
     * @param {Sch.view.HorizontalTimeAxis} timeAxisView The time axis view
     */

    constructor: function (config) {
        var me = this;
        var isTouch = !!Ext.versions.touch;
        var clickEventName = isTouch ? 'tap' : 'click';

        Ext.apply(this, config);
        me.callParent(arguments);

        me.model.on('update', me.onModelUpdate, this, { priority : 5 });

        me.containerEl = Ext.get(me.containerEl);

        if (!(me.headerHtmlRowTpl instanceof Ext.Template)) {
            me.headerHtmlRowTpl = me.headerHtmlRowTpl.replace('{{baseCls}}', this.baseCls).replace('{{tableCls}}', this.tableCls);
            me.headerHtmlRowTpl = new Ext.XTemplate(me.headerHtmlRowTpl);
        }

        if (me.trackHeaderOver && me.hoverCls) {
            me.containerEl.on({
                mousemove   : me.highlightCell,
                delegate    : '.sch-column-header',
                scope       : me
            });

            me.containerEl.on({
                mouseleave  : me.clearHighlight,
                scope       : me
            });
        }

        var listenerCfg = {
            scope       : this, 
            delegate    : '.sch-column-header'
        };

        if (isTouch) {
            listenerCfg.tap = this.onElClick('tap');
            listenerCfg.doubletap = this.onElClick('doubletap');

        } else {
            listenerCfg.click = this.onElClick('click');
            listenerCfg.dblclick = this.onElClick('dblclick');
            listenerCfg.contextmenu = this.onElClick('contextmenu');
        }

        me._listenerCfg = listenerCfg;
        if (me.containerEl) me.containerEl.on(listenerCfg);
    },

    destroy : function() {
        var me = this;
        
        if (me.containerEl) { 
            me.containerEl.un(me._listenerCfg);
            
            me.containerEl.un({
                mousemove   : me.highlightCell,
                delegate    : '.sch-simple-timeheader',
                scope       : me
            });
    
            me.containerEl.un({
                mouseleave: me.clearHighlight,
                scope: me
            });
        }

        me.model.un({
            update  : me.onModelUpdate,
            scope   : me
        });
    },

    onModelUpdate: function () {
        this.render();
    },
    
    
    getHTML : function (header, meta, column) {
        var columnConfig        = this.model.getColumnConfig();
        var totalWidth          = this.model.getTotalWidth();
        var nbrRows             = Ext.Object.getKeys(columnConfig).length;
        var rowHeight           = this.height ? this.height / nbrRows : 0;
        var html                = '';
        
        var currentCellWidth;
        
        if (columnConfig.top) {
            this.embedCellWidths(columnConfig.top);
            
            html                += this.headerHtmlRowTpl.apply({
                totalWidth      : totalWidth,
                cells           : columnConfig.top,
                position        : 'top',
                tstyle          : 'border-top : 0;' + (rowHeight ?  'height:' + rowHeight + 'px' : '')
            });
        }
        
        if (columnConfig.middle) {
            this.embedCellWidths(columnConfig.middle);

            html                += this.headerHtmlRowTpl.apply({
                totalWidth      : totalWidth,
                cells           : columnConfig.middle,
                position        : 'middle',
                tstyle          : (columnConfig.top ? '' : 'border-top : 0;') + (rowHeight ?  'height:' + rowHeight + 'px' : ''),
                cls             : !columnConfig.bottom && this.model.getTickWidth() <= this.compactCellWidthThreshold ? 'sch-header-row-compact' : ''
            });
        }
        
        if (columnConfig.bottom) {
            this.embedCellWidths(columnConfig.bottom);
            
            html                += this.headerHtmlRowTpl.apply({
                totalWidth      : totalWidth,
                cells           : columnConfig.bottom,
                position        : 'bottom',
                tstyle          : (rowHeight ? 'height:' + rowHeight + 'px' : ''),
                cls             : this.model.getTickWidth() <= this.compactCellWidthThreshold ? 'sch-header-row-compact' : ''
            });
        }

        return html + '<div class="sch-header-secondary-canvas"></div>';
    },
    

    // Outputs the tables and cells based on the header row config in the active viewPreset
    render: function () {
        if (!this.containerEl) return;
        
        var innerCt     = this.containerEl,
            ctDom       = innerCt.dom,
            oldDisplay  = ctDom.style.display,
            columnConfig = this.model.getColumnConfig(),
            parent      = ctDom.parentNode;

        ctDom.style.display = 'none';
        parent.removeChild(ctDom);

        var renderData = this.getHTML();

        ctDom.innerHTML = renderData;

        if (!columnConfig.top && !columnConfig.middle) {
            this.containerEl.addCls('sch-header-single-row');
        } else {
            this.containerEl.removeCls('sch-header-single-row');
        }

        parent && parent.appendChild(ctDom);
        ctDom.style.display = oldDisplay;
        
        this.fireEvent('refresh', this);
    },

    embedCellWidths : function (cells) {
        // For desktop only, flags such as Ext.isSafari only exist in Ext JS (in touch it's set in Ext.os)
        var widthAdjust     = (Ext.isIE7 || (Ext.isSafari && !Ext.supports.Touch)) ? 1 : 0;

        for (var i = 0; i < cells.length; i++) {
            var cell        = cells[ i ];
            var width       = this.model.getDistanceBetweenDates(cell.start, cell.end);
            
            if (width) {
                cell.width  = width - (i ? widthAdjust : 0);
            } else {
                cell.width  = 0;
                cell.style  = 'display: none';
            }
        }
    },
    

    // private
    onElClick: function(eventName) {
        return function (event, target) { 
            // Normalize ST vs Ext JS (Ext passes the delegated target as the target argument, ST passes the clicked DOM node)
            target = event.delegatedTarget || target;
            
            var position        = Ext.fly(target).getAttribute('headerPosition'),
                index           = Ext.fly(target).getAttribute('headerIndex'),
                headerConfig    = this.model.getColumnConfig()[position][index];
        
            this.fireEvent('timeheader' + eventName, this, headerConfig.start, headerConfig.end, event);
        };
    },


    highlightCell: function (e, cell) {
        var me = this;

        if (cell !== me.highlightedCell) {
            me.clearHighlight();
            me.highlightedCell = cell;
            Ext.fly(cell).addCls(me.hoverCls);
        }
    },

    clearHighlight: function () {
        var me = this,
            highlighted = me.highlightedCell;

        if (highlighted) {
            Ext.fly(highlighted).removeCls(me.hoverCls);
            delete me.highlightedCell;
        }
    }
    /* EOF Proxied model methods */
});



/*
 * @class Sch.column.timeAxis.Horizontal
 * @extends Ext.grid.column.Column
 *
 *
 * A simple grid column providing a visual representation of the time axis. This class does not produce any real Ext JS grid columns, instead it just renders a Sch.view.HorizontalTimeAxis inside its element.
 * This class can represent up to three different axes, that are defined in the view preset config object.
 */
Ext.define("Sch.column.timeAxis.Horizontal", {
    extend : 'Ext.grid.column.Column',
    alias  : 'widget.timeaxiscolumn',

    draggable     : false,
    groupable     : false,
    hideable      : false,
    sortable      : false,
    fixed         : true,
    menuDisabled  : true,
    cls           : 'sch-simple-timeaxis',
    tdCls         : 'sch-timetd',
    enableLocking : false,

    requires : [
        'Sch.view.HorizontalTimeAxis'
    ],


    timeAxisViewModel         : null,
    headerView                : null,

    // Disable Ext JS default header hover highlight
    hoverCls                  : '',
    ownHoverCls               : 'sch-column-header-over',

    /*
     * @cfg {Boolean} trackHeaderOver `true` to highlight each header cell when the mouse is moved over it.
     */
    trackHeaderOver           : true,

    /*
     * @cfg {Number} compactCellWidthThreshold The minimum width for a bottom row header cell to be considered 'compact', which adds a special CSS class     *            to the row.
     * Defaults to 20px.
     */
    compactCellWidthThreshold : 20,

    afterRender : function () {
        var me = this;

        // HACK relying on private accessor 'titleEl'
        var ct = me.titleEl.createChild({
            cls : 'sch-horizontaltimeaxis-ct'
        });

        me.headerView = new Sch.view.HorizontalTimeAxis({
            model                     : me.timeAxisViewModel,
            containerEl               : ct,
            hoverCls                  : me.ownHoverCls,
            trackHeaderOver           : me.trackHeaderOver,
            compactCellWidthThreshold : me.compactCellWidthThreshold
        });

        me.headerView.on('refresh', me.onTimeAxisViewRefresh, me);

        me.ownerCt.on('afterlayout', function() {
            // column can be rendered after grid was reconfigured
            if (!me.ownerCt) {
                return;
            }
        // If the container of this column changes size, we need to re-evaluate the size for the
        // time axis view
        me.mon(me.ownerCt, "resize", me.onHeaderContainerResize, me);

        if (this.getWidth() > 0) {
            // In case the timeAxisViewModel is shared, no need to update it
            if (me.getAvailableWidthForSchedule() === me.timeAxisViewModel.getAvailableWidth()) {
                me.headerView.render();
            } else {
                me.timeAxisViewModel.update(me.getAvailableWidthForSchedule());
            }
            me.setWidth(me.timeAxisViewModel.getTotalWidth());
        }
        }, null, { single : true });

        this.enableBubble('timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu');

        me.relayEvents(me.headerView, [
            'timeheaderclick',
            'timeheaderdblclick',
            'timeheadercontextmenu'
        ]);

        me.callParent(arguments);
        
        // we don't need timeline to be focusble, it messes 'timeheader*' events and looses scroll in IE
        me.focusable = false;
    },

    initRenderData : function () {
        var me = this;

        me.renderData.headerCls = me.renderData.headerCls || me.headerCls;
        return me.callParent(arguments);
    },

    destroy : function () {
        if (this.headerView) {
            this.headerView.destroy();
        }
        this.callParent(arguments);
    },

    onTimeAxisViewRefresh : function () {
        // Make sure we don't create an infinite loop
        this.headerView.un('refresh', this.onTimeAxisViewRefresh, this);

        this.setWidth(this.timeAxisViewModel.getTotalWidth());

        this.headerView.on('refresh', this.onTimeAxisViewRefresh, this);
    },

    getAvailableWidthForSchedule : function () {
        // In case owner container is hidden then it and it's items will return zero width, if so we fallback to
        // lastBox private property of Ext.AbstractComponent
        var available = this.ownerCt.isVisible(true) ? this.ownerCt.getWidth() : (this.ownerCt.lastBox && this.ownerCt.lastBox.width || 0),
            items = this.ownerCt.items,
            item;

        // substracting the widths of all columns starting from 2nd ("right" columns)
        for (var i = 1; i < items.length; i++) {
            item = items.get(i);
            if (!item.hidden) {
                available -= item.isVisible(true) ? item.getWidth() : (item.lastBox && item.lastBox.width || 0);
            }
        }

        return available - Ext.getScrollbarSize().width - 1;
    },

    onResize : function () {
        this.callParent(arguments);
        this.timeAxisViewModel.setAvailableWidth(this.getAvailableWidthForSchedule());
    },

    onHeaderContainerResize : function () {
        this.timeAxisViewModel.setAvailableWidth(this.getAvailableWidthForSchedule());
        this.headerView.render();
    },

    /*
     * Refreshes the column header contents. Useful if you have some extra meta data in your timeline header that
     * depends on external data such as the EventStore or ResourceStore.
     */
    refresh                 : function () {
        // Update the model, but don't fire any events which will fully redraw view
        this.timeAxisViewModel.update(null, true);

        // Now the model state has been refreshed so headers can be rerendered
        this.headerView.render();
    }
});



/**
@class Sch.plugin.TreeCellEditing
@extends Ext.grid.plugin.CellEditing

A specialized "cell editing" plugin (ptype = 'scheduler_treecellediting'), purposed to correctly work with trees. Add it to your component (scheduler with tree view or gantt)
as usual grid plugin:

    var gantt = Ext.create('Gnt.panel.Gantt', {

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

This class allows us to do 'complex data editing', which is not supported by the regular CellEditing plugin or the Ext.grid.CellEditor which
 assumes a column is always tied to a single field existing on the grid store model (which is not the case for Gantt, dependencies, assignments etc).
*/
Ext.define('Sch.plugin.TreeCellEditing', {
    extend              : 'Ext.grid.plugin.CellEditing',
    alias               : 'plugin.scheduler_treecellediting',

    lockableScope       : 'locked',

    editorsStarted      : 0,

    init : function (pnl) {
        this._grid      = pnl;

        // This is used to prevent editing of readonly cells
        this.on('beforeedit', this.onMyBeforeEdit, this);

        this.callParent(arguments);
    },


    showEditor : function (ed) {
        var me      = this,
            field   = ed.field;

        if (!ed._cancelEdit) {
            ed._cancelEdit  = ed.cancelEdit;
            ed.cancelEdit   = me.myCancelEdit;
        }

        if (field.setSuppressTaskUpdate) field.setSuppressTaskUpdate(true);
        this.callParent(arguments);
        if (field.setSuppressTaskUpdate) field.setSuppressTaskUpdate(false);
    },

    /*
     * Checks if panel is not locked for editing, and prevents cell edits if needed
     */
    checkReadOnly : function() {
        var pnl = this._grid;

        if (!(pnl instanceof Sch.panel.TimelineTreePanel)) {
            pnl = pnl.up('tablepanel');
        }
        return !pnl.isReadOnly();
    },

    // @OVERRIDE - model set() method, since we need to do more than just a simple update of a Model field in certain editors
    // Check for 'applyChanges' method and call it if exists
    onEditComplete : function(ed, value, startValue) {
        var me = this;

        // if field instance contains applyChanges() method
        // then we delegate saving to it
        // TODO: though this is a dirty code and must be rethought
        if (ed.field.applyChanges) {
            ed.field.applyChanges(ed.field.task || me.context.record);
            // Calling parent with value === startValue makes it not to call record.set() method, we don't need it
            // to be called since changes are already applyed, but leaves all other functionality inplace.
            return me.callParent([ed, value, value]);
        }
        else {
            return me.callParent([ed, value, startValue]);
        }
    },


    myCancelEdit : function () {
        var me      = this,
            field   = me.field;

        if (field && field.applyChanges) {
            var instantUpdate = field.instantUpdate;

            // we force the field to persist "originalValue" back to the task
            field.instantUpdate = true;
            var result = me._cancelEdit.apply(this, arguments);
            field.instantUpdate = instantUpdate;

            return result;

        } else {
            return me._cancelEdit.apply(this, arguments);
        }
    },


    onMyBeforeEdit : function(sender, context) {

        var field               = context.column.getEditor();

        //When an editor is already active we should call completeEdit because else the new task
        //is set before completeEdit is called (in showEditor)
        if (this.editing) {
            this.completeEdit();
        }

        if (field) {
            // if it's a field mixed with TaskField mixin
            if (field.setTask) {
                // then after setTask calling field already has correct value
                field.setTask(context.record);
                context.value = context.originalValue = field.getValue();
            }
        }

        return this.checkReadOnly();
    }

});

/**
 * @class Sch.feature.ResizeZone
 * @extends Ext.util.Observable
 * @private
 * Internal classing enabling resizing of rendered events
 * @constructor
 * @param {Sch.panel.SchedulerGrid} scheduler The scheduler instance
 * @param {Object} config The object containing the configuration of this model.
 */

Ext.define("Sch.feature.ResizeZone" , {
    extend      : "Ext.util.Observable",
    requires    : [
        'Ext.resizer.Resizer',
        'Sch.tooltip.Tooltip',
        'Sch.util.ScrollManager'
    ],

    /**
      * @cfg {Boolean} showTooltip `false` to not show a tooltip while resizing
      */
    showTooltip         : true,

    /**
     * @type {Boolean} showExactResizePosition true to see exact event length during resizing
     */
    showExactResizePosition : false,

    /**
     * An empty function by default, but provided so that you can perform custom validation on
     * the item being resized. Return true if the new duration is valid, false to signal that it is not.
     * @param {Sch.model.Resource} resourceRecord the resource to which the event belongs
     * @param {Sch.model.Event} eventRecord the event being resized
     * @param {Date} startDate
     * @param {Date} endDate
     * @param {Ext.EventObject} e The event object
     * @return {Boolean}
     */
    validatorFn         : Ext.emptyFn,

    /**
     * @cfg {Object} validatorFnScope
     * The scope for the validatorFn
     */
    validatorFnScope    : null,

    schedulerView       : null,

    origEl              : null,
    handlePos           : null,
    eventRec            : null,

    /**
     * @cfg {Ext.tip.ToolTip/Object} tip
     *
     * The tooltip instance to show while resizing an event or a configuration object for the {@link Sch.tooltip.Tooltip}.
     */
    tip                 : null,
    // cached reference to the created tooltip instance
    tipInstance         : null,


    startScroll         : null,

    constructor : function(config) {
        Ext.apply(this, config);
        var s = this.schedulerView;

        s.on({
            destroy : this.cleanUp,
            scope   : this
        });

        s.mon(s.el, {
            mousedown       : this.onMouseDown,
            mouseup         : this.onMouseUp,
            scope           : this,
            delegate        : '.sch-resizable-handle'
        });
        this.callParent(arguments);
    },

    onMouseDown : function(e, t) {
        var s               = this.schedulerView;
        var eventRec        = this.eventRec = s.resolveEventRecord(t);
        var isResizable     = eventRec.isResizable();

        if (e.button !== 0 || (isResizable === false || typeof isResizable === 'string' && !t.className.match(isResizable))) {
            return;
        }

        this.eventRec       = eventRec;
        this.handlePos      = this.getHandlePosition(t);
        this.origEl         = Ext.get(e.getTarget('.sch-event'));

        s.el.on({
            mousemove   : this.onMouseMove,
            scope       : this,
            single      : true
        });
    },

    onMouseUp : function(e, t) {
        var s = this.schedulerView;

        s.el.un({
            mousemove   : this.onMouseMove,
            scope       : this,
            single      : true
        });
    },


    getTipInstance : function () {
        if (this.tipInstance) return this.tipInstance;

        var s               = this.schedulerView;
        var tip             = this.tip;
        var containerEl     = s.up('[lockable=true]').el;

        if (tip instanceof Ext.tip.ToolTip) {
            Ext.applyIf(tip, { schedulerView : s });
        } else {
            tip     = new Sch.tooltip.Tooltip(Ext.apply({
                rtl             : this.rtl,
                schedulerView   : s,
                constrainTo     : containerEl,
                cls             : 'sch-resize-tip',
                onMyMouseMove   : function (ev) {
                    this.el.alignTo(this.target, 'bl-tl', [ ev.getX() - this.target.getX(), -5 ]);
                }
            }, tip));
        }

        return this.tipInstance = tip;
    },


    onMouseMove : function(e, t) {
        var s           = this.schedulerView,
            eventRec    = this.eventRec,
            handlePos   = this.handlePos;

        if (!eventRec || s.fireEvent('beforeeventresize', s, eventRec, e) === false) {
            return;
        }

        delete this.eventRec;
        e.stopEvent();

        this.origEl.addCls('sch-event-resizing');

        this.resizer    = this.createResizer(this.origEl, eventRec, handlePos);

        var tracker     = this.resizer.resizeTracker;

        if (this.showTooltip) {
            var tip     = this.getTipInstance();

            // update requires target that was removed after previous resize
            tip.setTarget(this.origEl);
            tip.update(eventRec.getStartDate(), eventRec.getEndDate(), true);
            tip.show(this.origEl);
        }

        // HACK, fake the start of the resizing right away
        tracker.onMouseDown(e, this.resizer[ handlePos ].dom);
        tracker.onMouseMove(e, this.resizer[ handlePos ].dom);

        s.fireEvent('eventresizestart', s, eventRec);

        // Handle inifinite scroll case
        s.el.on('scroll', this.onViewElScroll, this);
    },

    getHandlePosition : function(node) {
        var isStart = node.className.match('start');

        if (this.schedulerView.getMode() === 'horizontal') {
            if (this.schedulerView.rtl) {
                return isStart ? 'east' : 'west';
            }
            return isStart ? 'west' : 'east';
        } else {
             return isStart ? 'north' : 'south';
        }
    },

    // private
    createResizer : function (eventEl, eventRecord, handlePos) {
        var s                   = this.schedulerView,
            me                  = this,
            resourceRecord      = s.resolveResource(eventEl),
            increment           = s.getSnapPixelAmount(),
            constrainRegion     = s.getScheduleRegion(resourceRecord, eventRecord),
            dateConstraints     = s.getDateConstraints(resourceRecord, eventRecord),
            height              = eventEl.getHeight(),
            isStart             = (s.rtl && handlePos[0] === 'e') || (!s.rtl && handlePos[0] === 'w') || handlePos[0] === 'n',
            isVertical          = s.getMode() !== 'horizontal',

            resizerCfg          = {
                otherEdgeX      : isStart ? eventEl.getRight() : eventEl.getLeft(),
                otherEdgeY      : isStart ? eventEl.getBottom() : eventEl.getTop(),
                target          : eventEl,
                isStart         : isStart,
                // calculate event's position relative to cell
                startYOffset    : eventEl.getY() - eventEl.parent().getY(),
                startXOffset    : eventEl.getX() - eventEl.parent().getX(),
                dateConstraints : dateConstraints,
                resourceRecord  : resourceRecord,
                eventRecord     : eventRecord,
                handles         : handlePos[0],
                minHeight       : height,
                constrainTo     : constrainRegion,

                listeners       : {
                    resizedrag  : this.partialResize,
                    resize      : this.afterResize,
                    scope       : this
                }
            };



        // HACK, make it unique to prevent Ext JS from getting the wrong one if multiple events with same Id exist.
        // Remove this when scheduler has assignment store awareness
        var prevId          = eventEl.id;
        var newId           = '_' + prevId;

        eventEl.id               = eventEl.dom.id = newId;

        // duplicate the cache entry for this element, so Ext.get(newId) or Ext.get(el) will reference the same entry
        Ext.cache[ newId ]  = Ext.cache[ prevId ];
        // EOF HACK

        // Apply orientation specific configs
        if (isVertical) {
            if (increment > 0) {
                var w = eventEl.getWidth();

                Ext.apply(resizerCfg, {
                    minHeight       : increment,
                    // To avoid SHIFT causing a ratio preserve
                    minWidth        : w,
                    maxWidth        : w,
                    heightIncrement : increment
                });
            }
        } else {
            if (increment > 0) {

                Ext.apply(resizerCfg, {
                    minWidth        : increment,
                    // To avoid SHIFT causing a ratio preserve
                    maxHeight       : height,
                    widthIncrement  : increment
                });
            }
        }

        var resizer = new Ext.resizer.Resizer(resizerCfg);

        resizer.prevId  = prevId;

        if (resizer.resizeTracker) {

            // Force tracker to start tracking even with just 1px movement, defaults to 3.
            resizer.resizeTracker.tolerance = -1;

            // Ignore resizing action if dragging outside the scheduler
            // Fixes WebKit issue https://www.assembla.com/spaces/bryntum/tickets/994#/activity/ticket:
            var old = resizer.resizeTracker.updateDimensions;

            resizer.resizeTracker.updateDimensions = function(e) {
                if (!Ext.isWebKit || e.getTarget('.sch-timelineview')) {
                    var scrollDelta;

                    // minWidth needs to be adjusted to take a new scroll position into account
                    if (isVertical) {
                        scrollDelta = s.el.getScroll().top - me.startScroll.top;
                        resizer.resizeTracker.minHeight = resizerCfg.minHeight - Math.abs(scrollDelta);
                    } else {
                        scrollDelta = s.el.getScroll().left - me.startScroll.left;
                        resizer.resizeTracker.minWidth = resizerCfg.minWidth - Math.abs(scrollDelta);
                    }

                    old.apply(this, arguments);
                }
            };

            // Patched to handle changes in containing scheduler view el scroll position
            resizer.resizeTracker.resize = function(box) {
                var scrollDelta;

                if (isVertical) {
                    scrollDelta = s.el.getScroll().top - me.startScroll.top;

                    if (handlePos[0] === 's') {
                        box.y -= scrollDelta;
                    }

                    box.height += Math.abs(scrollDelta);
                } else {
                    scrollDelta = s.el.getScroll().left - me.startScroll.left;

                    if (handlePos[0] === 'e') {
                        box.x -= scrollDelta;
                    }

                    box.width += Math.abs(scrollDelta);
                }

                Ext.resizer.ResizeTracker.prototype.resize.apply(this, arguments);
            };
        }

        // Make sure the resizing event is on top of other events
        eventEl.setStyle('z-index', parseInt(eventEl.getStyle('z-index'), 10)+1);

        Sch.util.ScrollManager.activate(s, s.getMode() === 'horizontal' ? 'horizontal' : 'vertical');

        this.startScroll = s.el.getScroll();

        return resizer;
    },

    getStartEndDates : function() {
        var r           = this.resizer,
            rEl         = r.el,
            s           = this.schedulerView,
            isStart     = r.isStart,
            start, end, xy;

        if (isStart) {
            if (s.getMode() === 'horizontal') {
                xy          = [s.rtl ? rEl.getRight() : rEl.getLeft() + 1, rEl.getTop()];
            } else {
                xy          = [(rEl.getRight() + rEl.getLeft()) / 2, rEl.getTop()];
            }
            end         = r.eventRecord.getEndDate();

            if (s.snapRelativeToEventStartDate) {
                start       = s.getDateFromXY(xy);
                start       = s.timeAxis.roundDate(start, r.eventRecord.getStartDate());
            } else {
                start       = s.getDateFromXY(xy, 'round');
            }
        } else {
            if (s.getMode() === 'horizontal') {
                xy          = [s.rtl ? rEl.getLeft() : rEl.getRight(), rEl.getBottom()];
            } else {
                xy          = [(rEl.getRight() + rEl.getLeft()) / 2, rEl.getBottom()];
            }

            start       = r.eventRecord.getStartDate();

            if (s.snapRelativeToEventStartDate) {
                end         = s.getDateFromXY(xy);
                end         = s.timeAxis.roundDate(end, r.eventRecord.getEndDate());
            } else {
                end         = s.getDateFromXY(xy, 'round');
            }
        }

        start   = start || r.start;
        end     = end   || r.end;

        if (r.dateConstraints) {
            start       = Sch.util.Date.constrain(start, r.dateConstraints.start, r.dateConstraints.end);
            end         = Sch.util.Date.constrain(end, r.dateConstraints.start, r.dateConstraints.end);
        }

        return {
            start   : start,
            end     : end
        };
    },

    // private
    partialResize : function (r, width, height, e) {
        var s               = this.schedulerView,
            xy              = e.type === 'scroll' ? this.resizer.resizeTracker.lastXY : e.getXY(),
            startEndDates   = this.getStartEndDates(xy),
            start           = startEndDates.start,
            end             = startEndDates.end,
            record          = r.eventRecord,
            mode            = s.getMode(),
            isHorizontal    = s.isHorizontal();


        if (isHorizontal) {
            r.target.el.setY(r.target.parent().getY() + r.startYOffset);
        } else {
            r.target.el.setX(r.target.parent().getX() + r.startXOffset);
        }

        if (this.showTooltip) {
            var valid = this.validatorFn.call(this.validatorFnScope || this, r.resourceRecord, record, start, end);
            var message = '';

            // Implementer could also return an object { valid : false, message : 'foo' }
            if (valid && typeof valid !== 'boolean') {
                message = valid.message;
                valid   = valid.valid;
            }

            this.getTipInstance().update(start, end, valid !== false, message);
        }

        if (this.showExactResizePosition) {
            var target          = r.target.el,
                exactWidth,
                cursorDate,
                offset;

            if (r.isStart) {
                if (s.getMode() === 'calendar') {
                    var column  = s.calendar.getEventColumns(record)[0];
                    exactWidth  = s.timeAxisViewModel.getDistanceBetweenDates(start, column.end);
                } else {
                    exactWidth  = s.timeAxisViewModel.getDistanceBetweenDates(start, record.getEndDate());
                }

                if (isHorizontal) {
                    cursorDate  = s.getDateFromCoordinate(r.otherEdgeX - Math.min(width, r.maxWidth)) || start;
                    offset      = s.timeAxisViewModel.getDistanceBetweenDates(cursorDate, start);
                    target.setWidth(exactWidth);
                    target.setX(target.getX() + offset);
                } else {
                    cursorDate  = s.getDateFromCoordinate(r.otherEdgeY - Math.min(width, r.maxHeight)) || start;
                    offset      = s.timeAxisViewModel.getDistanceBetweenDates(cursorDate, start);
                    target.setHeight(exactWidth);
                    target.setY(target.getY() + offset);
                }

            } else {
                exactWidth      = s.timeAxisViewModel.getDistanceBetweenDates(record.getStartDate(), end);
                if (isHorizontal) {
                    target.setWidth(exactWidth);
                } else {
                    target.setHeight(exactWidth);
                }
            }
        } else {
            if (!start || !end || ((r.start - start === 0) && (r.end - end === 0))) {
                return;
            }
        }

        r.end   = end;
        r.start = start;

        s.fireEvent('eventpartialresize', s, record, start, end, r.el);


    },

    onViewElScroll : function(e, t) {
        this.resizer.resizeTracker.onDrag.apply(this.resizer.resizeTracker, arguments);
        this.partialResize(this.resizer, 0, 0, e);
    },

    // private
    afterResize : function (r, w, h, e) {
        var me              = this,
            resourceRecord  = r.resourceRecord,
            eventRecord     = r.eventRecord,
            oldStart        = eventRecord.getStartDate(),
            oldEnd          = eventRecord.getEndDate(),
            start           = r.start || oldStart,
            end             = r.end || oldEnd,
            sv              = me.schedulerView,
            modified        = false,
            doFinalize      = true,
            valid           = me.validatorFn.call(me.validatorFnScope || me, resourceRecord, eventRecord, start, end, e);

        Sch.util.ScrollManager.deactivate();
        sv.el.un('scroll', this.onViewElScroll , this);

        if (this.showTooltip) {
            this.getTipInstance().hide();
        }

        sv.el.select('[id^=calendar-resizer-placeholder]').remove();

        // HACK, restore original id
        // removing extra cache entry for this element
        delete Ext.cache[ r.el.id ];

        r.el.id = r.el.dom.id = r.el.id.substr(1);
        // EOF HACK
        me.resizeContext    = {
            resourceRecord  : r.resourceRecord,
            eventRecord     : eventRecord,
            start           : start,
            end             : end,
            finalize        : function() { me.finalize.apply(me, arguments); }
        };

        // Implementer could also return an object { valid : false, message : 'foo' }
        if (valid && typeof valid !== 'boolean') {
            valid = valid.valid;
        }

        if (start && end && (end - start > 0) && // Input sanity check
            ((start - oldStart !== 0) || (end - oldEnd !== 0)) && // Make sure start OR end changed
            valid !== false) {

            // Seems to be a valid resize operation, ask outside world if anyone wants to take control over the finalizing,
            // to show a confirm dialog prior to applying the new values.
            doFinalize = sv.fireEvent('beforeeventresizefinalize', me, me.resizeContext, e) !== false;
            modified = true;
        } else {
            sv.repaintEventsForResource(resourceRecord);
        }

        if (doFinalize) {
            me.finalize(modified);
        }
    },

    finalize : function(updateRecord) {
        var sv = this.schedulerView;
        var context = this.resizeContext;
        var wasChanged = false;
        var checker = function () { wasChanged = true; };

        sv.eventStore.on('update', checker);

        // Without manually destroying the target, Ext Element cache gets confused
        this.resizer.target.destroy();

        if (updateRecord) {
            if (this.resizer.isStart) {
                context.eventRecord.setStartDate(context.start, false, sv.eventStore.skipWeekendsDuringDragDrop);
            } else {
                context.eventRecord.setEndDate(context.end, false, sv.eventStore.skipWeekendsDuringDragDrop);
            }
            if (!wasChanged) sv.repaintEventsForResource(context.resourceRecord);
        } else {
            sv.repaintEventsForResource(context.resourceRecord);
        }

        // Destroy resizer
        this.resizer.destroy();

        sv.eventStore.un('update', checker);
        sv.fireEvent('eventresizeend', sv, context.eventRecord);

        this.resizeContext = null;
    },

    cleanUp : function() {
        if (this.tipInstance) {
            this.tipInstance.destroy();
        }
    }
});

/**
@class Sch.feature.ColumnLines
@extends Sch.plugin.Lines

A simple feature adding column lines (to be used when using the SingleTimeAxis column).

*/
Ext.define("Sch.feature.ColumnLines", {
    extend : 'Sch.plugin.Lines',

    requires : [
        'Ext.data.JsonStore'
    ],
    
    
    cls                     : 'sch-column-line',
    
    showTip                 : false,
    
    timeAxisViewModel       : null,
    
    renderingDoneEvent      : 'columnlinessynced',

    
    init : function (panel) {
        this.timeAxis           = panel.getTimeAxis();
        this.timeAxisViewModel  = panel.timeAxisViewModel;
        this.panel              = panel;

        this.store = new Ext.data.JsonStore({
            fields   : [ 'Date' ]
        });

        this.callParent(arguments);

        panel.on({
            modechange          : this.populate,
            destroy             : this.onHostDestroy,
            scope               : this
        });

        this.timeAxisViewModel.on('update', this.populate, this);
        
        this.populate();
    },

    onHostDestroy : function() {
        this.timeAxisViewModel.un('update', this.populate, this);
    },

    populate: function() {
        this.store.setData(this.getData());
    },
    
    getElementData : function() {
        var sv = this.schedulerView;

        if (sv.isHorizontal() && sv.store.getCount() > 0) {
            return this.callParent(arguments);
        }

        return [];
    },

    getData : function() {
        var panel = this.panel,
            ticks = [];

        if (panel.isHorizontal()) {
            var timeAxisViewModel   = this.timeAxisViewModel;
            var linesForLevel       = timeAxisViewModel.columnLinesFor;
            var hasGenerator        = !!(timeAxisViewModel.headerConfig && timeAxisViewModel.headerConfig[linesForLevel].cellGenerator);

            if (hasGenerator) {
                var cells = timeAxisViewModel.getColumnConfig()[linesForLevel];

                for (var i = 1, l = cells.length; i < l; i++) {
                    ticks.push({ Date : cells[i].start });
                }
            } else {
                // Highlight column lines that match the next higher header row
                var nextLevelUp,
                    nextHigherLevelTicks,
                    colConfig = timeAxisViewModel.getColumnConfig(),
                    nextLevelCachedDates;

                if (linesForLevel === 'bottom')      nextLevelUp = "middle";
                else if (linesForLevel === 'middle') nextLevelUp = "top";

                nextHigherLevelTicks = colConfig[nextLevelUp];

                if (nextHigherLevelTicks) {
                    var headerConfig = timeAxisViewModel.headerConfig;

                    if (headerConfig[nextLevelUp].increment !== headerConfig[linesForLevel].increment ||
                        headerConfig[nextLevelUp].unit !== headerConfig[linesForLevel].unit) {
                        nextLevelCachedDates = {};

                        Ext.Array.forEach(nextHigherLevelTicks, function(tick) {
                            nextLevelCachedDates[tick.start.getTime()] = 1;
                        });
                    }
                }

                timeAxisViewModel.forEachInterval(linesForLevel, function(start, end, i) {

                    if (i > 0) {
                        ticks.push({
                            Date : start,
                            Cls  : nextLevelCachedDates && nextLevelCachedDates[start.getTime()] ? 'sch-column-line-solid' : ''
                        });
                    }

                });
            }
        }

        return ticks;
    }
});
/**
@class Sch.plugin.CurrentTimeLine
@extends Sch.plugin.Lines

Plugin (ptype = 'scheduler_currenttimeline') indicating the current date and time as a line in the schedule.

To add this plugin to scheduler:

    var scheduler = Ext.create('Sch.panel.SchedulerGrid', {
        ...

        resourceStore   : resourceStore,
        eventStore      : eventStore,

        plugins         : [
            Ext.create('Sch.plugin.CurrentTimeLine', { updateInterval : 30000 })
        ]
    });


*/
Ext.define("Sch.plugin.CurrentTimeLine", {
    extend              : "Sch.plugin.Lines",
    alias               : 'plugin.scheduler_currenttimeline',
    mixins              : ['Sch.mixin.Localizable'],

    requires            : [
        'Ext.data.JsonStore'
    ],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - tooltipText : 'Current time'
     */

    /**
     * @cfg {Number} updateInterval This value (in ms) defines how often the timeline shall be refreshed. Defaults to every once every minute.
     */
    updateInterval      : 60000,

    showHeaderElements  : true,

    /**
     * @cfg {Boolean} autoUpdate true to automatically update the line position over time. Default value is `true`
     */
    autoUpdate          : true,

    expandToFitView     : true,

    timer               : null,

    init                : function(cmp) {
        // touch scheduler does not support header elements
        if (Ext.getVersion('touch')) this.showHeaderElements = false;
        
        var store = new Ext.data.JsonStore({
            fields  : ['Date', 'Cls', 'Text'],
            data    : [
                { Date : new Date(), Cls : 'sch-todayLine', Text : this.L('tooltipText')}
            ]
        });

        var record = store.first();

        if (this.autoUpdate) {
            this.timer = setInterval(function() {
                record.set('Date', new Date());
            }, this.updateInterval);
        }

        this.store = store;
        this.callParent(arguments);
    },

    destroy       : function() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }

        if (this.store.autoDestroy) {
            this.store.destroy();
        }

        this.callParent(arguments);
    }
});

/**
 * @class Sch.view.Horizontal
 * @private
 *
 * An internal view mixin, purposed to be consumed along with {@link Sch.mixin.AbstractTimelineView}.
 * This class is consumed by the scheduling view and provides the horizontal implementation of certain methods.
 */
Ext.define("Sch.view.Horizontal", {
    requires : [
        'Ext.util.Region',
        'Ext.Element',
        'Sch.util.Date'
    ],
    // Provided by creator, in the config object
    view: null,

    constructor: function (config) {
        Ext.apply(this, config);
    },

    translateToScheduleCoordinate: function (x) {
        var view = this.view;

        if (view.rtl) {
            return view.getHorizontalTimeAxisColumn().getEl().getRight() - x;
        }
        return x - view.getEl().getX() + view.getScroll().left;
    },

    translateToPageCoordinate: function (x) {
        var view = this.view;
        return x + view.getEl().getX() - view.getScroll().left;
    },

    getDateFromXY   : function (xy, roundingMethod, local) {
        var coord   = xy[0];

        if (!local) {
            coord = this.translateToScheduleCoordinate(coord);
        }
        return this.view.timeAxisViewModel.getDateFromPosition(coord, roundingMethod);
    },

    getEventRenderData: function (event) {
        var eventStart  = event.getStartDate(),
            eventEnd    = event.getEndDate() || eventStart, // Allow events to be rendered even they are missing an end date
            view        = this.view,
            viewStart   = view.timeAxis.getStart(),
            viewEnd     = view.timeAxis.getEnd(),
            M           = Math,
            startX      = view.getXFromDate(Sch.util.Date.max(eventStart, viewStart)),
            endX        = view.getXFromDate(Sch.util.Date.min(eventEnd, viewEnd)),
            data        = {};

        if (this.view.rtl) {
            data.right = M.min(startX, endX);
        } else {
            data.left = M.min(startX, endX);
        }

        data.width = M.max(1, M.abs(endX - startX)) - view.eventBorderWidth;

        if (view.managedEventSizing) {
            data.top = M.max(0, (view.barMargin - ((Ext.isIE && !Ext.isStrict) ? 0 : view.eventBorderWidth - view.cellTopBorderWidth)));
            data.height = view.timeAxisViewModel.rowHeightHorizontal - (2 * view.barMargin) - view.eventBorderWidth;
        }

        data.start              = eventStart;
        data.end                = eventEnd;
        data.startsOutsideView  = eventStart < viewStart;
        data.endsOutsideView    = eventEnd > viewEnd;
        return data;
    },

    /**
    * Gets the Ext.util.Region, relative to the page, represented by the schedule and optionally only for a single resource. This method will call getDateConstraints to
    * allow for additional resource/event based constraints. By overriding that method you can constrain events differently for
    * different resources.
    * @param {Sch.model.Resource} resourceRecord (optional) The resource record
    * @param {Sch.model.Event} eventRecord (optional) The event record
    * @return {Ext.util.Region} The region of the schedule
    */
    getScheduleRegion: function (resourceRecord, eventRecord) {
        var getRegionFn     = Ext.Element.prototype.getRegion ? 'getRegion' : 'getPageBox',
            view            = this.view,
            region          = resourceRecord ? Ext.fly(view.getRowNode(resourceRecord))[getRegionFn]() : view.getTableRegion(),
            taStart         = view.timeAxis.getStart(),
            taEnd           = view.timeAxis.getEnd(),
            dateConstraints = view.getDateConstraints(resourceRecord, eventRecord) || { start: taStart, end: taEnd },
            startX          = this.translateToPageCoordinate(view.getXFromDate(Sch.util.Date.max(taStart, dateConstraints.start))),
            endX            = this.translateToPageCoordinate(view.getXFromDate(Sch.util.Date.min(taEnd, dateConstraints.end))),
            top             = region.top + view.barMargin,
            bottom          = region.bottom - view.barMargin - view.eventBorderWidth;

        return new Ext.util.Region(top, Math.max(startX, endX), bottom, Math.min(startX, endX));
    },


    /**
    * Gets the Ext.util.Region, relative to the scheduling view element, representing the passed resource and optionally just for a certain date interval.
    * @param {Sch.model.Resource} resourceRecord The resource record
    * @param {Date} startDate A start date constraining the region
    * @param {Date} endDate An end date constraining the region
    * @return {Ext.util.Region} The region of the resource
    */
    getResourceRegion: function (resourceRecord, startDate, endDate) {
        var view        = this.view,
            rowNode     = view.getRowNode(resourceRecord),
            offsets     = Ext.fly(rowNode).getOffsetsTo(view.getEl()),
            taStart     = view.timeAxis.getStart(),
            taEnd       = view.timeAxis.getEnd(),
            start       = startDate ? Sch.util.Date.max(taStart, startDate) : taStart,
            end         = endDate ? Sch.util.Date.min(taEnd, endDate) : taEnd,
            startX      = view.getXFromDate(start),
            endX        = view.getXFromDate(end),
            top         = offsets[1] + view.cellTopBorderWidth,
            bottom      = offsets[1] + Ext.fly(rowNode).getHeight() - view.cellBottomBorderWidth;

        if (!Ext.versions.touch) {
            var ctElScroll  = view.getScroll();
            top += ctElScroll.top;
            bottom += ctElScroll.top;
        }
        return new Ext.util.Region(top, Math.max(startX, endX), bottom, Math.min(startX, endX));
    },


    columnRenderer: function (val, meta, resourceRecord, rowIndex, colIndex) {
        var view            = this.view;
        var resourceEvents  = view.eventStore.filterEventsForResource(resourceRecord, function(event) {
            return view.timeAxis.isRangeInAxis(event);
        });

        if (resourceEvents.length === 0) {
            return;
        }

        // Iterate events belonging to current row
        var eventsTplData = Ext.Array.map(resourceEvents, function(event) {
            return view.generateTplData(event, resourceRecord, rowIndex);
        });

        // Event data is now gathered, calculate layout properties for each event (if dynamicRowHeight is used)
        if (view.dynamicRowHeight) {
            var layout              = view.eventLayout.horizontal;
            var nbrOfBandsRequired = layout.applyLayout(eventsTplData, resourceRecord, this.layoutEventVertically, this);

            var rowHeight = (nbrOfBandsRequired * view.timeAxisViewModel.rowHeightHorizontal) - ((nbrOfBandsRequired - 1) * view.barMargin);
                            view.cellTopBorderWidth - view.cellBottomBorderWidth;

            meta.rowHeight      = rowHeight;
        }

        return view.eventTpl.apply(eventsTplData);
    },

    layoutEventVertically : function(bandIndex, eventRecord) {
        var view     = this.view;
        var eventTop = bandIndex === 0 ? view.barMargin : (bandIndex * view.timeAxisViewModel.rowHeightHorizontal - (bandIndex - 1) * view.barMargin);

        if (eventTop >= view.cellBottomBorderWidth) {
            eventTop -= view.cellBottomBorderWidth;
        }

        return eventTop;
    },

    // private
    resolveResource: function (node) {
        var me = this,
            view = me.view,
            eventNode,
            result;

        eventNode = Ext.fly(node).is(view.eventSelector) && node || Ext.fly(node).up(view.eventSelector, null, true);

        if (eventNode) {
            // Fast case
            result = view.getResourceRecordFromDomId(eventNode.id);
        }
        else {
            // Not that fast case
            // I'm not sure if it's really needed, the method documentation doesn't state that node must be
            // within event node. If node might be outside of event node then yes, this branch is needed, otherwise
            // it is not.
            node = view.findRowByChild(node);
            result = node && view.getRecordForRowNode(node) || null;
        }

        return result;
    },

    /**
    *  Returns the region for a "global" time span in the view. Coordinates are relative to element containing the time columns
    *  @param {Date} startDate The start date of the span
    *  @param {Date} endDate The end date of the span
    *  @return {Ext.util.Region} The region for the time span
    */
    getTimeSpanRegion: function (startDate, endDate, useViewSize) {
        var view    = this.view,
            startX  = view.getXFromDate(startDate),
            endX    = endDate ? view.getXFromDate(endDate) : startX,
            height, region;

        region = view.getTableRegion();

        if (useViewSize) {
            height = Math.max(region ? region.bottom - region.top: 0, view.getEl().dom.clientHeight); // fallback in case grid is not rendered (no rows/table)
        } else {
            height = region ? region.bottom - region.top: 0;
        }
        return new Ext.util.Region(0, Math.max(startX, endX), height, Math.min(startX, endX));
    },

    /**
    * Gets the start and end dates for an element Region
    * @param {Ext.util.Region} region The region to map to start and end dates
    * @param {String} roundingMethod The rounding method to use
    * @returns {Object} an object containing start/end properties
    */
    getStartEndDatesFromRegion: function (region, roundingMethod, allowPartial) {
        var view        = this.view;
        var rtl         = view.rtl;

        var startDate   = view.getDateFromCoordinate(rtl ? region.right : region.left, roundingMethod),
            endDate     = view.getDateFromCoordinate(rtl ? region.left : region.right, roundingMethod);

        if (startDate && endDate || allowPartial && (startDate || endDate)) {
            return {
                start   : startDate,
                end     : endDate
            };
        }

        return null;
    },

    // private
    onEventAdd: function (s, events) {
        var view = this.view,
            affectedResources = {},
            event, startDate, endDate,
            resources, resource,
            i, l, j, k;

        for (i = 0, l = events.length; i < l; i++) {
            event       = events[i];
            startDate   = event.getStartDate();
            endDate     = event.getEndDate();

            if (startDate && endDate && view.timeAxis.timeSpanInAxis(startDate, endDate)) {
                // repaint row only if event is in time axis
                resources = events[i].getResources(view.eventStore);

                for (j = 0, k = resources.length; j < k; j++) {
                    resource = resources[j];

                    affectedResources[resource.getId()] = resource;
                }
            }
        }

        Ext.Object.each(affectedResources, function (id, resource) {
            view.repaintEventsForResource(resource);
        });
    },

    // private
    onEventRemove: function (s, eventRecords) {
        var me            = this,
            view          = me.view,
            resourceStore = me.resourceStore,
            eventStore    = view.eventStore,
            resources,
            nodes;

        resources = Ext.Array.unique(
                        Ext.Array.flatten(
                            Ext.Array.map(eventRecords, function(r) {
                                // It's important to use event store's method here, instead just
                                // r.getResources(). r.getResources() will always return empty array here
                                // since r is already removed from the event store.
                                return eventStore.getResourcesForEvent(r);
                            })
                        )
                    );

        function updateResource(resource) {
            view.store.indexOf(resource) >= 0 && view.repaintEventsForResource(resource);
        }

        // TODO:
        // I really don't know why this logic is important here
        // Why anyone need to distinguish between multiple resources case and single resource case here.
        // I've just left it as it were before.
        if (resources.length > 1) {
            Ext.Array.forEach(resources, updateResource);
        }
        else if (resources.length == 1) {
            nodes = Ext.Array.flatten(
                        Ext.Array.map(eventRecords, function(r) {
                            return view.getElementsFromEventRecord(r, null, null, true);
                        })
                    );
            nodes = new Ext.CompositeElementLite(nodes);

            nodes.fadeOut({
                callback: function() { updateResource(resources[0]); }
            });
        }
    },

    // private
    onEventUpdate: function (eventStore, model) {
        var previous = model.previous || {};
        var view = this.view;
        var timeAxis = view.timeAxis;

        var newStartDate  = model.getStartDate();
        var newEndDate    = model.getEndDate();

        var startDate       = previous.StartDate || newStartDate;
        var endDate         = previous.EndDate || newEndDate;

        // event was visible or visible now
        var eventWasInView  = startDate && endDate && timeAxis.timeSpanInAxis(startDate, endDate);

        var resource;

        // resource has to be repainted only if it was changed and event was rendered/is still rendered
        if (model.resourceIdField in previous && eventWasInView) {
            // If an event has been moved to a new row, refresh old row first
            resource = eventStore.getResourceStore().getById(previous[model.resourceIdField]);
            resource && view.repaintEventsForResource(resource, true);
        }

        // also resource has to be repainted if event was moved inside/outside of time axis
        if ((newStartDate && newEndDate && timeAxis.timeSpanInAxis(newStartDate, newEndDate)) || eventWasInView) {
            Ext.Array.forEach(model.getResources(), function(resource) {
                view.repaintEventsForResource(resource, true);
            });
        }
    },

    setColumnWidth: function (width, preventRefresh) {
        var view = this.view;

        view.getTimeAxisViewModel().setViewColumnWidth(width, preventRefresh);
    },

    /**
    * Method to get the currently visible date range in a scheduling view. Please note that it only works when the schedule is rendered.
    * @return {Object} object with `startDate` and `endDate` properties.
    */
    getVisibleDateRange: function () {
        var view = this.view;

        if (!view.getEl()) {
            return null;
        }

        var tableRegion = view.getTableRegion(),
            startDate   = view.timeAxis.getStart(),
            endDate     = view.timeAxis.getEnd(),
            width       = view.getWidth();

        if ((tableRegion.right - tableRegion.left) < width) {
            return { startDate: startDate, endDate: endDate };
        }

        var scroll      = view.getScroll();

        return {
            startDate   : view.getDateFromCoordinate(scroll.left, null, true),
            endDate     : view.getDateFromCoordinate(scroll.left + width, null, true)
        };
    }
});

/**
@class Sch.mixin.AbstractTimelineView
@private

A base mixin for giving to the consuming view "time line" functionality.
This means that the view will be capable to display a list of "events", ordered on the {@link Sch.data.TimeAxis time axis}.

This class should not be used directly.

*/
Ext.define("Sch.mixin.AbstractTimelineView", {
    requires: [
        'Sch.data.TimeAxis',
        'Sch.view.Horizontal'
    ],

    /**
    * @cfg {String} selectedEventCls
    * A CSS class to apply to an event in the view on mouseover (defaults to 'sch-event-selected').
    */
    selectedEventCls : 'sch-event-selected',

    // private
    readOnly            : false,
    horizontalViewClass : 'Sch.view.Horizontal',

    //    can not "declare" it here, because will conflict with the default value from  SchedulerView
    //    verticalViewClass   : null,

    timeCellCls         : 'sch-timetd',
    timeCellSelector    : '.sch-timetd',

    eventBorderWidth        : 1,

    timeAxis            : null,
    timeAxisViewModel   : null,

    eventPrefix         : null,

    rowHeight           : null,
//    can not "declare" it here, because will conflict with the default value from  SchedulerView
//    barMargin           : null,

    // deprecated
    orientation         : 'horizontal',
    mode                : 'horizontal',

    horizontal          : null,
    vertical            : null,

    secondaryCanvasEl   : null,

    panel               : null,

    displayDateFormat   : null,

    // Accessor to the Ext.Element for this view
    el                  : null,

    constructor : function (config) {
        if (config && config.orientation) {
            config.mode = this.mode = config.orientation;
        }
        this.callParent([config]);
    },

    _initializeTimelineView         : function() {
        if (this.horizontalViewClass) {
            this.horizontal = Ext.create(this.horizontalViewClass, { view : this });
        }

        if (this.verticalViewClass) {
            this.vertical = Ext.create(this.verticalViewClass, { view : this });
        }

        if (this.calendarViewClass) {
            this.calendar = Ext.create(this.calendarViewClass, { view : this });
        }

        this.eventPrefix = (this.eventPrefix || this.getId()) + '-';
    },

    getTimeAxisViewModel : function () {
        return this.timeAxisViewModel;
    },

    /**
    * Method to get a formatted display date
    * @private
    * @param {Date} date The date
    * @return {String} The formatted date
    */
    getFormattedDate: function (date) {
        return Ext.Date.format(date, this.getDisplayDateFormat());
    },

    /**
    * Method to get a formatted end date for a scheduled event, the grid uses the "displayDateFormat" property defined in the current view preset.
    * @private
    * @param {Date} endDate The date to format
    * @param {Date} startDate The start date
    * @return {String} The formatted date
    */
    getFormattedEndDate: function (endDate, startDate) {
        var format = this.getDisplayDateFormat();

        if (
            // If time is midnight,
            endDate.getHours() === 0 && endDate.getMinutes() === 0 &&

            // and end date is greater then start date
            !(endDate.getYear() === startDate.getYear() && endDate.getMonth() === startDate.getMonth() && endDate.getDate() === startDate.getDate()) &&

            // and UI display format doesn't contain hour info (in this case we'll just display the exact date)
            !Sch.util.Date.hourInfoRe.test(format.replace(Sch.util.Date.stripEscapeRe, ''))
        ) {
            // format the date inclusively as 'the whole previous day'.
            endDate = Sch.util.Date.add(endDate, Sch.util.Date.DAY, -1);
        }

        return Ext.Date.format(endDate, format);
    },

    // private
    getDisplayDateFormat: function () {
        return this.displayDateFormat;
    },

    // private
    setDisplayDateFormat: function (format) {
        this.displayDateFormat = format;
    },


    /**
    * This function fits the schedule area columns into the available space in the grid.
    * @param {Boolean} preventRefresh `true` to prevent a refresh of view
    */
    fitColumns: function (preventRefresh) { // TODO test
        if (this.mode === 'horizontal') {
            this.getTimeAxisViewModel().fitToAvailableWidth(preventRefresh);
        } else {
            var w = Math.floor((this.panel.getWidth() - Ext.getScrollbarSize().width - 1) / this.headerCt.getColumnCount());
            this.setColumnWidth(w, preventRefresh);
        }
    },

    /**
     * Returns the Ext.Element representing an event record.
     *
     * @param {Sch.model.Event} eventRecord An event record
     * @param {Sch.model.Resource} [resourceRecord] A resource record
     *
     * @return {Ext.Element|null} The Ext.Element representing the event record
     * @deprecated Please use {@link #getElementsFromEventRecord}.
     */
    getElementFromEventRecord: function(eventRecord, resourceRecord) {
        var me = this,
            result;

        result = me.getElementsFromEventRecord(eventRecord, resourceRecord);

        if (result.length === 0) {
            result = null;
        }
        else if (result.length == 1) {
            result = result[0]; // We return Ext.Element as given in the method documentation
        }
        // TODO: Get rid of this else if branch, backward compatible behaviour
        else if (me.mode == 'calendar') {
            result = result[0];
        }
        else {
            Ext.Error.raise("The method getElementFromEventRecord() is deprecated, it can't handle the situation when several DOM elements correspond to a single event record, please use getElementsFromEventRecord() method instead!");
        }

        return result;
    },

    /**
     * Returns all the Ext.Element(s) representing an event record.
     *
     * @param {Sch.model.Event} eventRecord An event record
     * @param {Sch.model.Resource} [resourceRecord] A resource record
     *
     * @privateparam {Number} [index] Index used to distinguish DOM nodes corresponding to same event/resource but rendered on different columns inside calendar view.
     * @privateparam {Boolean [raw=false] Whether to return HTMLElements instead of Ext.Element
     *
     * @return {[Ext.Element|HTMLElement]} The Ext.Element(s) representing the event record
     */
    getElementsFromEventRecord: function(eventRecord, resourceRecord, index, raw) {
        var me = this,
            query;

        raw = raw || false;

        if (resourceRecord && (index !== null && index !== undefined)) {
            query = '[id^=' + me.eventPrefix + eventRecord.internalId + '-' + resourceRecord.internalId + '-' + index +']';
        }
        else if (resourceRecord) {
            query = '[id^=' + me.eventPrefix + eventRecord.internalId + '-' + resourceRecord.internalId + '-]';
        }
        else {
            query = '[id^=' + me.eventPrefix + eventRecord.internalId + '-]';
        }

        return me.getEl().query(query, raw);
    },

    /**
    * Gets the start and end dates for an element Region
    * @param {Ext.util.Region} region The region to map to start and end dates
    * @param {String} roundingMethod The rounding method to use
    * @returns {Object} an object containing start/end properties
    */
    getStartEndDatesFromRegion: function (region, roundingMethod, allowPartial) {
        return this[this.mode].getStartEndDatesFromRegion(region, roundingMethod, allowPartial);
    },


    /**
    * Returns the current time resolution object, which contains a unit identifier and an increment count.
    * @return {Object} The time resolution object
    */
    getTimeResolution: function () {
        return this.timeAxis.getResolution();
    },

    /**
    * Sets the current time resolution, composed by a unit identifier and an increment count.
    * @return {Object} The time resolution object
    */
    setTimeResolution: function (unit, increment) {
        this.timeAxis.setResolution(unit, increment);

        // View will have to be updated to support snap to increment
        if (this.getTimeAxisViewModel().snapToIncrement) {
            this.refreshKeepingScroll();
        }
    },

    /**
    * <p>Returns the event id for a DOM id </p>
    * @private
    * @param {String} id The id of the DOM node
    * @return {String} An event record (internal) id
    */
    getEventIdFromDomNodeId: function (id) {
        // id format is "PREFIX"-eventid-resourceid[-part]
        return id.substring(this.eventPrefix.length).split('-')[0];
    },

    /**
     * Returns a resource id for a DOM id
     * @private
     * @param {String} id An id of an event DOM node
     * @return {String} A resource record (internal) id
     */
    getResourceIdFromDomNodeId : function(id) {
        // id format is "PREFIX"-eventid-resourceid[-part]
        return id.substring(this.eventPrefix.length).split('-')[1];
    },

    /**
    *  Gets the time for a DOM event such as 'mousemove' or 'click'
    *  @param {Ext.EventObject} e, the EventObject instance
    *  @param {String} roundingMethod (optional), 'floor' to floor the value or 'round' to round the value to nearest increment
    *  @returns {Date} The date corresponding to the EventObject x coordinate
    */
    getDateFromDomEvent : function(e, roundingMethod) {
        return this.getDateFromXY(e.getXY(), roundingMethod);
    },

    /**
    * [Experimental] Returns the pixel increment for the current view resolution.
    * @return {Number} The width increment
    */
    getSnapPixelAmount: function () {
        return this.getTimeAxisViewModel().getSnapPixelAmount();
    },

    /**
    * Controls whether the scheduler should snap to the resolution when interacting with it.
    * @param {Boolean} enabled true to enable snapping when interacting with events.
    */
    setSnapEnabled: function (enabled) {
        this.getTimeAxisViewModel().setSnapToIncrement(enabled);
    },

    /**
    * Sets the readonly state which limits the interactivity (resizing, drag and drop etc).
    * @param {Boolean} readOnly The new readOnly state
    */
    setReadOnly: function (readOnly) {
        this.readOnly = readOnly;
        this[readOnly ? 'addCls' : 'removeCls'](this._cmpCls + '-readonly');
    },

    /**
    * Returns true if the view is currently readOnly.
    * @return {Boolean} readOnly
    */
    isReadOnly: function () {
        return this.readOnly;
    },


    /**
    * Sets the current orientation.
    * @param {String} orientation Either 'horizontal' or 'vertical'
    * @deprecated
    */
    setOrientation  : function () {
        this.setMode.apply(this, arguments);
    },

    /**
    * Sets the current mode.
    * @param {String} mode Either 'horizontal', 'vertical' or 'calendar'
    */
    setMode : function (mode) {
        this.mode                   = mode;
        this.timeAxisViewModel.mode = mode;
    },

    /**
    * Returns the current view orientation
    * @return {String} The view orientation ('horizontal' or 'vertical')
    * @deprecated
    */
    getOrientation  : function () {
        return this.getMode.apply(this, arguments);
    },

    /**
    * Returns the current view mode
    * @return {String} The view mode ('horizontal', 'vertical' or 'calendar')
    */
    getMode: function () {
        return this.mode;
    },

    isHorizontal : function() {
        return this.getMode() === 'horizontal';
    },


    isVertical : function() {
        return !this.isHorizontal();
    },

    /**
    * Gets the date for an XY coordinate
    * @param {Array} xy The page X and Y coordinates
    * @param {String} roundingMethod The rounding method to use
    * @param {Boolean} local, true if the coordinate is local to the scheduler view element
    * @returns {Date} the Date corresponding to the xy coordinate
    */
    getDateFromXY: function (xy, roundingMethod, local) {
        return this[this.mode].getDateFromXY(xy, roundingMethod, local);
    },

    /**
    * Gets the date for an X or Y coordinate, either local to the view element or the page based on the 3rd argument.
    * @param {Number} coordinate The X or Y coordinate
    * @param {String} roundingMethod The rounding method to use
    * @param {Boolean} local, true if the coordinate is local to the scheduler view element
    * @returns {Date} the Date corresponding to the xy coordinate
    */
    getDateFromCoordinate: function (coord, roundingMethod, local) {
        if (!local) {
            coord = this[this.mode].translateToScheduleCoordinate(coord);
        }
        return this.timeAxisViewModel.getDateFromPosition(coord, roundingMethod);
    },

    /**
    * Gets the date for the passed X coordinate.
    * If the coordinate is not in the currently rendered view, -1 will be returned.
    * @param {Number} x The X coordinate
    * @param {String} roundingMethod The rounding method to use
    * @returns {Date} the Date corresponding to the x coordinate
    * @abstract
    */
    getDateFromX: function (x, roundingMethod) {
        return this.getDateFromCoordinate(x, roundingMethod);
    },

    /**
    * Gets the date for the passed Y coordinate
    * If the coordinate is not in the currently rendered view, -1 will be returned.
    * @param {Number} y The Y coordinate
    * @param {String} roundingMethod The rounding method to use
    * @returns {Date} the Date corresponding to the y coordinate
    * @abstract
    */
    getDateFromY: function (y, roundingMethod) {
        return this.getDateFromCoordinate(y, roundingMethod);
    },

    /**
    *  Gets the x or y coordinate relative to the scheduling view element, or page coordinate (based on the 'local' flag)
    *  If the coordinate is not in the currently rendered view, -1 will be returned.
    *  @param {Date} date the date to query for
    *  @param {Boolean} local true to return a coordinate local to the scheduler view element (defaults to true)
    *  @returns {Number} the x or y position representing the date on the time axis
    */
    getCoordinateFromDate: function (date, local) {
        var pos = this.timeAxisViewModel.getPositionFromDate(date);

        if (local === false) {
            pos = this[this.mode].translateToPageCoordinate(pos);
        }

        return Math.round(pos);
    },

    /**
    *  Gets the x coordinate relative to the scheduling view element, or page coordinate (based on the 'local' flag)
    *  @param {Date} date the date to query for
    *  @param {Boolean} local true to return a coordinate local to the scheduler view element (defaults to false)
    *  @returns {Array} the XY coordinates representing the date
    */
    getXFromDate: function (date, local) {
        return this.getCoordinateFromDate(date, local);
    },

    /**
    *  Gets xy coordinates relative to the scheduling view element, or page coordinates (based on the 'local' flag)
    *  @param {Date} xy the page X and Y coordinates
    *  @param {Boolean} local true to return a coordinate local to the scheduler view element
    *  @returns {Array} the XY coordinates representing the date
    */
    getYFromDate: function (date, local) {
        return this.getCoordinateFromDate(date, local);
    },

    /**
    *  Returns the distance in pixels the for time span in the view.
    *  @param {Date} startDate The start date of the span
    *  @param {Date} endDate The end date of the span
    *  @return {Number} The distance in pixels
    */
    getTimeSpanDistance: function (startDate, endDate) {
        return this.timeAxisViewModel.getDistanceBetweenDates(startDate, endDate);
    },

    /**
    *  Returns the region for a "global" time span in the view. Coordinates are relative to element containing the time columns
    *  @param {Date} startDate The start date of the span
    *  @param {Date} endDate The end date of the span
    *  @return {Ext.util.Region} The region for the time span
    */
    getTimeSpanRegion: function (startDate, endDate) {
        return this[this.mode].getTimeSpanRegion(startDate, endDate);
    },

    /**
    * Gets the Ext.util.Region represented by the schedule and optionally only for a single resource. The view will ask the scheduler for
    * the resource availability by calling getResourceAvailability. By overriding that method you can constrain events differently for
    * different resources.
    * @param {Sch.model.Resource} resourceRecord (optional) The resource record
    * @param {Sch.model.Event} eventRecord (optional) The event record
    * @return {Ext.util.Region} The region of the schedule
    */
    getScheduleRegion: function (resourceRecord, eventRecord) {
        return this[this.mode].getScheduleRegion(resourceRecord, eventRecord);
    },

    // Returns the region of the table element containing the rows of the schedule
    getTableRegion : function () {
        throw 'Abstract method call';
    },

    // Returns the table element containing the rows of the schedule
    getRowNode: function (resourceRecord) {
        throw 'Abstract method call';
    },

    getRecordForRowNode : function(node) {
        throw 'Abstract method call';
    },

    /**
    * Method to get the currently visible date range in a scheduling view. Please note that it only works when the schedule is rendered.
    * @return {Object} object with `startDate` and `endDate` properties.
    */
    getVisibleDateRange: function () {
        return this[this.mode].getVisibleDateRange();
    },

    /**
     * Method to set the new columnWidth. The new width is passed in the case of a horizontal mode as tickWidth, resourceColumnWidth in the case of a vertical mode
     * and as calendarColumnWidth in the case of a calendar mode.
     * @param {Number} width The new width value
     * @param {Boolean} preventRefresh true to skip refreshing the view
     */
    setColumnWidth: function (width, preventRefresh) {
        this[this.mode].setColumnWidth(width, preventRefresh);
    },

    findRowByChild : function(t) {
        throw 'Abstract method call';
    },

    /**
    * Sets the amount of margin to keep between bars and rows.
    * @param {Number} margin The new margin value
    * @param {Boolean} preventRefresh true to skip refreshing the view
    */
    setBarMargin: function (margin, preventRefresh) {
        this.barMargin = margin;

        if (!preventRefresh) {
            this.refreshKeepingScroll();
        }
    },

    /**
     * Returns the current row height used by the view (only applicable in a horizontal view)
     * @return {Number} The row height
     */
    getRowHeight: function () {
        return this.timeAxisViewModel.getViewRowHeight();
    },

    /**
    * Sets the row height of the timeline
    * @param {Number} height The height to set
    * @param {Boolean} preventRefresh `true` to prevent view refresh
    */
    setRowHeight: function (height, preventRefresh) {
        this.timeAxisViewModel.setViewRowHeight(height, preventRefresh);
    },

    /**
    * Refreshes the view and maintains the scroll position.
    */
    refreshKeepingScroll : function() {
        throw 'Abstract method call';
    },

    /**
     * Scrolls the view vertically
     * @param {Number} y The y-value to scroll to
     * @param {Boolean/Object} animate An animation config, or true/false
     */
    scrollVerticallyTo : function(y, animate) {
        throw 'Abstract method call';
    },

    /**
     * Scrolls the view horizontally
     * @param {Number} x The x-value to scroll to
     * @param {Boolean/Object} animate An animation config, or true/false
     */
    scrollHorizontallyTo : function(x, animate) {
        throw 'Abstract method call';
    },

    /**
     * Returns the current vertical scroll value
     */
    getVerticalScroll : function() {
        throw 'Abstract method call';
    },

    /**
     * Returns the current horizontal scroll value
     */
    getHorizontalScroll : function() {
        throw 'Abstract method call';
    },

    // This method should be implemented by the consuming class
    getEl : Ext.emptyFn,


    // returns a secondary canvas el - the el to be used for drawing column lines, zones etc
    getSecondaryCanvasEl : function () {
        if (!this.rendered) throw 'Calling this method too early';

        if (!this.secondaryCanvasEl) {
            this.secondaryCanvasEl = (this.scrollerEl || this.getEl()).createChild({ cls : 'sch-secondary-canvas' });
        }
        return this.secondaryCanvasEl;
    },

    /**
     * Returns the current viewport scroll position as an object with left/top properties.
     */
    getScroll : function() {
        throw 'Abstract method call';
    },

    getOuterEl : function() {
        return this.getEl();
    },

    getRowContainerEl : function() {
        return this.getEl();
    },

    getScheduleCell : function(row, col) {
        return this.getCellByPosition({ row : row, column : col});
    },


    getScrollEventSource : function () {
        return this.getEl();
    },

    getViewportHeight : function () {
        return this.getEl().getHeight();
    },

    getViewportWidth : function () {
        return this.getEl().getWidth();
    },

    /**
     * Returns the center date of the currently visible timespan of scheduler.
     *
     * @return {Date} date Center date for the viewport.
     */
    getViewportCenterDate: function(){
        var scroll     = this.getScroll(),
            xy;

        if (this.getMode() === 'vertical') {
            xy                 = [ 0, scroll.top + this.getViewportHeight() / 2 ];
        } else {
            xy                 = [ scroll.left + this.getViewportWidth() / 2, 0 ];
        }

        return this.getDateFromXY(xy, null, true);
    },

    getDateConstraints : Ext.emptyFn
});


Ext.apply(Sch, {
    /*PKGVERSION*/VERSION : '3.0.6'
});

/**
@class Sch.mixin.TimelineView

A base mixin for {@link Ext.view.View} classes, giving to the consuming view the "time line" functionality.
This means that the view will be capable to display a list of "events", ordered on the {@link Sch.data.TimeAxis time axis}.

By itself this mixin is not enough for correct rendering. The class, consuming this mixin, should also consume one of the
{@link Sch.view.Horizontal}, {@link Sch.view.Vertical} or {@link Sch.view.Calendar} mixins, which provides the implementation of some mode-specfic methods.

Generally, should not be used directly, if you need to subclass the view, subclass the {@link Sch.view.SchedulerGridView} instead.

*/
Ext.define("Sch.mixin.TimelineView", {
    extend : 'Sch.mixin.AbstractTimelineView',

    requires : [
        'Ext.tip.ToolTip',
        'Sch.patches.TouchScroll',
        'Sch.patches.PartnerScroll',
        'Sch.patches.View',
        'Sch.patches.TableView',
        'Sch.patches.Collection',
        'Sch.patches.ToolTip'
    ],

    tip : null,

    /**
    * @cfg {String} overScheduledEventClass
    * A CSS class to apply to each event in the view on mouseover (defaults to 'sch-event-hover').
    */
    overScheduledEventClass: 'sch-event-hover',

    ScheduleBarEvents    : [
        "mousedown",
        "mouseup",
        "click",
        "dblclick",
        "contextmenu"
    ],

    ResourceRowEvents      : [
        "keydown",
        "keyup"
    ],

    // allow the panel to prevent adding the hover CSS class in some cases - during drag drop operations
    preventOverCls      : false,

    /**
     * @event beforetooltipshow
     * Fires before the event tooltip is shown, return false to suppress it.
     * @param {Sch.mixin.SchedulerPanel} scheduler The scheduler object
     * @param {Sch.model.Event} eventRecord The event record corresponding to the rendered event
     */

    /**
     * @event columnwidthchange
     * @private
     * Fires after the column width has changed
     */

    _initializeTimelineView : function() {
        this.callParent(arguments);

        this.on('destroy', this._onDestroy, this);
        this.on('afterrender', this._onAfterRender, this);
        this.panel.on('viewready', this._onViewReady, this);

        this.setMode(this.mode);

        this.enableBubble('columnwidthchange');

        this.addCls("sch-timelineview");

        if (this.readOnly) {
            this.addCls(this._cmpCls + '-readonly');
        }

        this.addCls(this._cmpCls);

        if (this.eventAnimations) {
            this.addCls('sch-animations-enabled');
        }

    },

    handleScheduleBarEvent: function(e, eventBarNode){
        this.fireEvent(this.scheduledEventName + e.type, this, this.resolveEventRecord(eventBarNode), e);
    },

    handleResourceRowEvent: function (e, resourceRowNode) {
        this.fireEvent(this.scheduledEventName + e.type, this, this.resolveEventRecordFromResourceRow(resourceRowNode), e);
    },

    // private, clean up
    _onDestroy: function () {
        if (this.tip) {
            this.tip.destroy();
        }
    },

    _onViewReady : function () {
        // If device support touch events ext is going to wrap node container in a special scroller element.
        // That will place secondary canvas element on a second position in view.
        if (this.touchScroll) {
            this.getSecondaryCanvasEl().insertBefore(this.getNodeContainer());
        }
    },


    _onAfterRender : function () {
        if (this.overScheduledEventClass) {
            this.setMouseOverEnabled(true);
        }

        if (this.tooltipTpl) {
            if (typeof this.tooltipTpl === 'string') {
                this.tooltipTpl = new Ext.XTemplate(this.tooltipTpl);
            }
            this.el.on('mousemove', this.setupTooltip, this, { single : true });
        }

        var bufferedRenderer    = this.bufferedRenderer;

        if (bufferedRenderer) {
            this.patchBufferedRenderingPlugin(bufferedRenderer);
            this.patchBufferedRenderingPlugin(this.lockingPartner.bufferedRenderer);
        }

        this.on('bufferedrefresh', this.onBufferedRefresh, this, { buffer : 10 });

        this.setupTimeCellEvents();

        // The `secondaryCanvasEl` needs to be setup early, for the underlying gridview to know about it
        // and not remove it on later 'refresh' calls.
        var el = this.getSecondaryCanvasEl();

        // Simple smoke check to make sure CSS has been included correctly on the page
        if (el.getStyle('position').toLowerCase() !== 'absolute') {
            var context = Ext.Msg || window;

            context.alert('ERROR: The CSS file for the Bryntum component has not been loaded.');
        }

        var eventBarListeners = {
            delegate    : this.eventSelector,
            scope       : this
        };

        var resourceRowListeners = {
            delegate    : this.rowSelector,
            scope       : this
        };

        Ext.Array.forEach(this.ScheduleBarEvents, function(name) { eventBarListeners[name] = this.handleScheduleBarEvent; }, this);
        Ext.Array.forEach(this.ResourceRowEvents, function(name) { resourceRowListeners[name] = this.handleResourceRowEvent; }, this);

        this.el.on(eventBarListeners);
        this.el.on(resourceRowListeners);
    },


    patchBufferedRenderingPlugin : function (plugin) {
        var me                      = this;
        var oldSetBodyTop           = plugin.setBodyTop;

        // @OVERRIDE Overriding buffered renderer plugin
        plugin.setBodyTop           = function (bodyTop, calculatedTop) {
            var val                 = oldSetBodyTop.apply(this, arguments);

            me.fireEvent('bufferedrefresh', this);

            return val;
        };
    },


    onBufferedRefresh : function() {
        var el              = this.body.dom;
        if (!el) return;

        var style           = el.style;

        if (Ext.isIE9m) {
            this.getSecondaryCanvasEl().dom.style.top = this.body.dom.style.top;
        } else {
            var transform       = style.transform || style.msTransform || style.webkitTransform;

            var match;

            if (transform) {
                match           = /\(-?\d+px,\s*(-?\d+px),\s*(-?\d+)px\)/.exec(transform);
            }

            if (match) {
                this.getSecondaryCanvasEl().dom.style.top = transform ? match[ 1 ] : el.style.top;
            }
        }
    },

    setMouseOverEnabled : function(enabled) {
        this[enabled ? "mon" : "mun"](this.el, {
            mouseover : this.onEventMouseOver,
            mouseout  : this.onEventMouseOut,
            delegate  : this.eventSelector,
            scope     : this
        });
    },

    // private
    onEventMouseOver: function (e, t) {
        if (t !== this.lastItem && !this.preventOverCls) {
            this.lastItem = t;

            Ext.fly(t).addCls(this.overScheduledEventClass);

            var eventModel      = this.resolveEventRecord(t);

            // do not fire this event if model cannot be found
            // this can be the case for "sch-dragcreator-proxy" elements for example
            if (eventModel) this.fireEvent('eventmouseenter', this, eventModel, e);
        }
    },

    // private
    onEventMouseOut: function (e, t) {
        if (this.lastItem) {
            if (!e.within(this.lastItem, true, true)) {
                Ext.fly(this.lastItem).removeCls(this.overScheduledEventClass);

                this.fireEvent('eventmouseleave', this, this.resolveEventRecord(this.lastItem), e);
                delete this.lastItem;
            }
        }
    },

    // Overridden since locked grid can try to highlight items in the unlocked grid while it's loading/empty
    highlightItem: function(item) {
        if (item) {
            var me = this;
            me.clearHighlight();
            me.highlightedItem = item;
            Ext.fly(item).addCls(me.overItemCls);
        }
    },

    // private
    setupTooltip: function () {
        var me = this,
            tipCfg = Ext.apply({
                delegate    : me.eventSelector,
                target      : me.el,
                anchor      : 'b',
                rtl         : me.rtl,

                show : function() {
                    Ext.ToolTip.prototype.show.apply(this, arguments);

                    // Some extra help required to correct alignment (in cases where event is in part outside the scrollable area
                    // https://www.assembla.com/spaces/bryntum/tickets/626#/activity/ticket:
                    if (this.triggerElement && me.getMode() === 'horizontal') {
                        this.setX(this.targetXY[0] - 10);

                        var box = Ext.fly(this.triggerElement).getBox();
                        var newY = box.top - this.getHeight() - 10;

                        // if tip won't be fully visible, move it to bottom edge
                        this.setY(newY < 0 ? box.bottom + 10 : newY);
                    }
                }
            }, me.tipCfg);

        me.tip = new Ext.ToolTip(tipCfg);

        me.tip.on({
            beforeshow: function (tip) {
                if (!tip.triggerElement || !tip.triggerElement.id) {
                    return false;
                }

                var record = this.resolveEventRecord(tip.triggerElement);

                if (!record || this.fireEvent('beforetooltipshow', this, record) === false) {
                    return false;
                }

                var dataForTip = this.getDataForTooltipTpl(record, tip.triggerElement),
                    tooltipString;

                if (!dataForTip) return false;

                tooltipString = this.tooltipTpl.apply(dataForTip);

                if (!tooltipString) return false;

                tip.update(tooltipString);
            },

            scope: this
        });
        
        if (Ext.supports.Touch) {
            // https://www.sencha.com/forum/showthread.php?301307-single-event-listener-isn-t-unbound
            me.el.un({
                touchmove   : me.setupTooltip,
                mousemove   : me.setupTooltip,
                scope       : me
            });
        }
    },

    getHorizontalTimeAxisColumn : function () {
        if (!this.timeAxisColumn) {
            this.timeAxisColumn = this.headerCt.down('timeaxiscolumn');

            if (this.timeAxisColumn) {
                this.timeAxisColumn.on('destroy', function() {
                    this.timeAxisColumn = null;
                }, this);
            }
        }

        return this.timeAxisColumn;
    },

    /**
    * Template method to allow you to easily provide data for your {@link Sch.mixin.TimelinePanel#tooltipTpl} template.
     * @param {Sch.model.Range} event The event record corresponding to the HTML element that triggered the tooltip to show.
     * @param {HTMLElement} triggerElement The HTML element that triggered the tooltip.
     * @return {Object} The data to be applied to your template, typically any object or array.
    */
    getDataForTooltipTpl : function(record, triggerElement) {
        return Ext.apply({
            _record : record
        }, record.data);
    },

    /**
     * Refreshes the view and maintains the scroll position.
     */
    refreshKeepingScroll : function() {

        Ext.suspendLayouts();

        this.saveScrollState();

        this.refresh();

        // we have to resume layouts before scroll in order to let element receive its new width after refresh
        Ext.resumeLayouts(true);

        // If el is not scrolled, skip setting scroll state (can be a costly DOM operation)
        // This speeds up initial rendering
        // HACK: reading private scrollState property in Ext JS superclass
        // infinite scroll requires the restore scroll state always
        if (this.scrollState.left !== 0 || this.scrollState.top !== 0 || this.infiniteScroll) {
            this.restoreScrollState();
        }
    },

    setupTimeCellEvents: function () {
        this.mon(this.el, {
            // `handleScheduleEvent` is an abstract method, defined in "SchedulerView" and "GanttView"
            click       : this.handleScheduleEvent,
            dblclick    : this.handleScheduleEvent,
            contextmenu : this.handleScheduleEvent,

            pinch       : this.handleScheduleEvent,
            pinchstart  : this.handleScheduleEvent,
            pinchend    : this.handleScheduleEvent,
            scope       : this
        });
    },

    getTableRegion: function () {
        var tableEl = this.el.down('.' + Ext.baseCSSPrefix + 'grid-item-container');

        // Also handle odd timing cases where the table hasn't yet been inserted into the dom
        return (tableEl || this.el).getRegion();
    },

    // Returns the row element for a given row record
    getRowNode: function (resourceRecord) {
        return this.getNodeByRecord(resourceRecord);
    },

    findRowByChild : function(t) {
        return this.findItemByChild(t);
    },

    getRecordForRowNode : function(node) {
        return this.getRecord(node);
    },

    /**
    * Refreshes the view and maintains the resource axis scroll position.
    */
    refreshKeepingResourceScroll : function() {
        var scroll = this.getScroll();

        this.refresh();

        if (this.getMode() === 'horizontal') {
            this.scrollVerticallyTo(scroll.top);
        } else {
            this.scrollHorizontallyTo(scroll.left);
        }
    },

    scrollHorizontallyTo : function(x, animate) {
        var el = this.getEl();

        if (el && Ext.supports.Touch) {
            this.setScrollX(x);
        }
        else if (el) {
            el.scrollTo('left', Math.max(0, x), animate);
        }
    },

    scrollVerticallyTo : function(y, animate) {
        var el = this.getEl();

        if (el && Ext.supports.Touch) {
            this.setScrollY(y);
        }
        else if (el) {
           el.scrollTo('top', Math.max(0,  y), animate);
        }
    },

    getVerticalScroll : function() {
        var el = this.getEl();
        return el.getScroll().top;
    },

    getHorizontalScroll : function() {
        var el = this.getEl();
        return el.getScroll().left;
    },

    getScroll : function() {
        var me = this;

        return {
            top  : me.getScrollY(),
            left : me.getScrollX()
        };
    },

    handleScheduleEvent : function () {},

    // A slightly modified Ext.Element#scrollIntoView method using an offset for the edges
    scrollElementIntoView: function(el, hscroll, animate, highlight, edgeOffset, callback, scope) {

        var me              = this,
            dom             = el.dom,
            container       = Ext.getDom(me.getEl()),
            offsets         = el.getOffsetsTo(container),
            scroll          = me.getScroll(),
            left            = offsets[0] + scroll.left,
            top             = offsets[1] + scroll.top,
            bottom          = top + dom.offsetHeight,
            right           = left + dom.offsetWidth,

            ctClientHeight  = container.clientHeight,
            ctScrollTop     = parseInt(scroll.top, 10),
            ctScrollLeft    = parseInt(scroll.left, 10),
            ctBottom        = ctScrollTop + ctClientHeight,
            ctRight         = ctScrollLeft + container.clientWidth,

            newPosX,
            newPosY;

        edgeOffset = edgeOffset === null || edgeOffset === undefined ? 20 : edgeOffset;

        if (dom.offsetHeight > ctClientHeight || top < ctScrollTop) {
            newPosY = top - edgeOffset;
        }
        else if (bottom > ctBottom) {
            newPosY = bottom - ctClientHeight + edgeOffset;
        }

        if (hscroll !== false && dom.offsetWidth > container.clientWidth || left < ctScrollLeft) {
            newPosX = left - edgeOffset;
        }
        else if (hscroll !== false && right > ctRight) {
            newPosX = right - container.clientWidth + edgeOffset;
        }

        animate   = animate   === true && {} || animate;
        highlight = highlight === true && {} || highlight;
        scope     = scope || me;

        if (animate && highlight) {
            animate.listeners = Ext.apply(animate.listeners || {}, {
                'afteranimate' : function() {
                    highlight.listeners = Ext.apply(highlight.listeners || {}, {
                        'afteranimate' : function() {
                            callback && callback.call(scope);
                            callback = null;
                        }
                    });
                    Ext.fly(dom).highlight(null, highlight);
                }
            });
        }
        else if (animate) {
            animate.listeners = Ext.apply(animate.listeners, {
                'afteranimate' : function() {
                    callback && callback.call(scope);
                    callback = null;
                }
            });
        }
        else if (highlight) {
            highlight.listeners = Ext.apply(highlight.listeners || {}, {
                'afteranimate' : function() {
                    callback && callback.call(scope);
                    callback = null;
                }
            });
        }

        newPosY !== undefined && me.setScrollY(newPosY, animate);
        newPosX !== undefined && me.setScrollX(newPosX, animate);

        !animate && highlight && Ext.fly(dom).highlight(null, highlight);

        !animate && !highlight && callback && callback.call(scope);
    },

    disableViewScroller : function(disabled) {
        var scroller = this.getScrollable();

        if (scroller) {
            scroller.setDisabled(disabled);
        }
    }
});

/**

@class Sch.view.TimelineGridView
@extends Ext.grid.View
@mixin Sch.mixin.TimelineView

A grid view class, that consumes the {@link Sch.mixin.TimelineView} mixin. Used internally.

*/

Ext.define('Sch.view.TimelineGridView', {
    extend                  : 'Ext.grid.View',
    mixins                  : [ 'Sch.mixin.TimelineView' ],

    infiniteScroll          : false,

    bufferCoef              : 5,
    bufferThreshold         : 0.2,

    // the scrolLeft position, as Date (not as pixels offset)
    cachedScrollLeftDate    : null,
    boxIsReady              : false,

    ignoreNextHorizontalScroll      : false,


    constructor : function (config) {
        this.callParent(arguments);

        // setup has to happen in the "afterrender" event, because at that point, the view is not "ready" yet
        // so we can freely change the start/end dates of the timeaxis and no refreshes will happen
        if (this.infiniteScroll) {
            this.on('boxready', this.setupInfiniteScroll, this);
        }

        if(this.timeAxisViewModel) {
            this.relayEvents(this.timeAxisViewModel, ['columnwidthchange']);
        }
    },

    setupInfiniteScroll : function () {
        var planner                 = this.panel.ownerCt;
        this.cachedScrollLeftDate   = planner.startDate || this.timeAxis.getStart();

        // check if it's touch microsoft
        if (Ext.supports.Touch && Ext.os.is.Windows) {
            var headerScroll    = this.panel.headerCt.scrollable;
            var viewScroll      = this.scrollable;

            // When scroll is done, Ext throws special event called 'idle'
            // Touch scroller handles that event and performs scroll to [0, 0]
            // Our 'scroll' event handler remembers new view start date and keeps it in memory
            // Disabling this handler seemingly doesn't break anything in case of infinite scroll enabled

            // Try unsubscribing from event. If there's an exception, do nothing
            try {
                Ext.GlobalEvents.un('idle', headerScroll.onIdle, headerScroll);
                Ext.GlobalEvents.un('idle', viewScroll.onIdle, viewScroll);
            }
            catch (e) {
                Ext.log('Cannot unsubscribe required listener, zooming may be broken');
            }
        }

        var me                      = this;

        planner.calculateOptimalDateRange = function (centerDate, panelSize, nextZoomLevel, span) {
            if (span) {
                return span;
            }

            var preset      = Sch.preset.Manager.getPreset(nextZoomLevel.preset);

            return me.calculateInfiniteScrollingDateRange(
                // me.ol.dom.scrollLeft can differ for obvious reasons thus method can return different result for same arguments
                // better user centerDate
                //me.getDateFromCoordinate(me.el.dom.scrollLeft, null, true),
                centerDate,
                preset.getBottomHeader().unit,
                nextZoomLevel.increment,
                nextZoomLevel.width
            );
        };

        // setup scroll/resize listeners
        this.bindInfiniteScrollListeners();
    },


    bindInfiniteScrollListeners : function () {
        if (this.scrollManager) {
            this.scrollManager.scroller.on('scroll', this.onHorizontalScroll, this);
        } else {
            this.el.on('scroll', this.onHorizontalScroll, this);
        }

        // this event is fired immediately after `afterrender`
        this.on('resize', this.onSelfResize, this);
    },


    unbindInfiniteScrollListeners : function () {
        if (this.scrollManager) {
            this.scrollManager.scroller.un('scroll', this.onHorizontalScroll, this);
        } else {
            this.el.un('scroll', this.onHorizontalScroll, this);
        }

        this.un('resize', this.onSelfResize, this);
    },


    onHorizontalScroll : function () {
        if (this.ignoreNextHorizontalScroll || this.cachedScrollLeftDate) {
            this.ignoreNextHorizontalScroll = false;
            return;
        }

        var dom         = this.el.dom,
            width       = this.getWidth(),
            left        = this.getScroll().left,
            scrollWidth = this.scrollManager ? this.scrollManager.scroller.getMaxPosition().x : dom.scrollWidth,
            limit       = width * this.bufferThreshold * this.bufferCoef;

        // if scroll violates limits let's shift timespan
        if ((scrollWidth - left - width < limit) || left < limit) {
            this.shiftToDate(this.getDateFromCoordinate(left, null, true));

            // Make sure any scrolling which could have been triggered by the Bryntum ScrollManager (drag drop of task),
            // is cancelled
            this.el.stopAnimation();
        }
    },


    refresh : function () {
        this.callParent(arguments);

        // `scrollStateSaved` will mean that refresh happens as part of `refreshKeepingScroll`,
        // which already does `restoreScrollState`, which includes `restoreScrollLeftDate`
        if (this.infiniteScroll && !this.scrollStateSaved && this.boxIsReady) {
            this.restoreScrollLeftDate();
        }
    },


    onSelfResize : function (view, width, height, oldWidth, oldHeight) {
        this.boxIsReady = true;

        // TODO this should be optimized to not perform any operations as long as view size doesn't increase
        // enough to pass the buffer limits
        if (width !== oldWidth) {
            // When size increases - we should maintain the left visible date in the component to not confuse the user
            this.shiftToDate(this.cachedScrollLeftDate || this.getVisibleDateRange().startDate, this.cachedScrollCentered);
        }
    },


    restoreScrollLeftDate : function () {
        if (this.cachedScrollLeftDate && this.boxIsReady) {
            this.ignoreNextHorizontalScroll     = true;

            this.scrollToDate(this.cachedScrollLeftDate);

            this.cachedScrollLeftDate           = null;
        }
    },


    scrollToDate : function (toDate) {
        this.cachedScrollLeftDate           = toDate;

        if (this.cachedScrollCentered){
            this.panel.ownerCt.scrollToDateCentered(toDate);
        } else {
            this.panel.ownerCt.scrollToDate(toDate);
        }

        var scrollLeft                      = this.getScroll().left;

        // the `onRestoreHorzScroll` method in Ext.panel.Table is called during Ext.resumeLayouts(true) (in the `refreshKeepingScroll`)
        // and messes up the scrolling position (in the called `syncHorizontalScroll` method).
        // Overwrite the property `syncHorizontalScroll` is using to read the scroll position, so that no actual change will happen
        this.panel.scrollLeftPos            = scrollLeft;

        // the previous line however, breaks the header sync, doing that manually
        this.headerCt.el.dom.scrollLeft     = scrollLeft;
    },


    saveScrollState : function () {
        this.scrollStateSaved       = this.boxIsReady;

        this.callParent(arguments);
    },


    restoreScrollState : function () {
        this.scrollStateSaved       = false;

        // if we have scroll date then let's calculate left-coordinate by this date
        // and top-coordinate we'll get from the last saved scroll state
        if (this.infiniteScroll && this.cachedScrollLeftDate) {
            this.restoreScrollLeftDate();

            this.el.dom.scrollTop = this.scrollState.top;

            return;
        }

        this.callParent(arguments);
    },


    // `calculateOptimalDateRange` already exists in Zoomable plugin
    calculateInfiniteScrollingDateRange : function (srollLeftDate, unit, increment, tickWidth) {
        var timeAxis            = this.timeAxis;
        var viewWidth           = this.getWidth();

        tickWidth               = tickWidth || this.timeAxisViewModel.getTickWidth();
        increment               = increment || timeAxis.increment || 1;
        unit                    = unit || timeAxis.unit;

        var DATE                = Sch.util.Date;

        var bufferedTicks       = Math.ceil(viewWidth * this.bufferCoef / tickWidth);

        return {
            start   : timeAxis.floorDate(DATE.add(srollLeftDate, unit, -bufferedTicks * increment), false, unit, increment),
            end     : timeAxis.ceilDate(DATE.add(srollLeftDate, unit, Math.ceil((viewWidth / tickWidth + bufferedTicks) * increment)), false, unit, increment)
        };
    },


    shiftToDate : function (scrollLeftDate, scrollCentered) {
        var newRange            = this.calculateInfiniteScrollingDateRange(scrollLeftDate);

        // we set scroll date here since it will be required during timeAxis.setTimeSpan() call
        this.cachedScrollLeftDate   = scrollLeftDate;
        this.cachedScrollCentered   = scrollCentered;

        // this will trigger a refresh (`refreshKeepingScroll`) which will perform `restoreScrollState` and sync the scrolling position
        this.timeAxis.setTimeSpan(newRange.start, newRange.end);
    },


    destroy : function () {
        if (this.infiniteScroll && this.rendered) this.unbindInfiniteScrollListeners();

        this.callParent(arguments);
    }

});

// !XXX when adding new methods to this mixing need to also update the
// `setupLockableTree` method in the Sch.mixin.Lockable
Ext.define("Sch.mixin.FilterableTreeView", {

    prevBlockRefresh        : null,


    initTreeFiltering : function () {
        var doInit  = function () {
            var treeStore       = this.store;

            this.mon(treeStore, 'nodestore-datachange-start', this.onFilterChangeStart, this);
            this.mon(treeStore, 'nodestore-datachange-end', this.onFilterChangeEnd, this);

            if (!treeStore.allowExpandCollapseWhileFiltered) {
                this.mon(treeStore, 'filter-clear', this.onFilterCleared, this);
                this.mon(treeStore, 'filter-set', this.onFilterSet, this);
            }
        };

        if (this.rendered)
            doInit.call(this);
        else
            this.on('beforerender', doInit, this, { single : true });
    },


    onFilterChangeStart : function () {
        this.prevBlockRefresh   = this.blockRefresh;

        // block refresh in filterable tree view, for the cases when this mixin is consumed by non-tree views
        // "blockRefresh" is already true in all tree views, so in the Sch.data.mixin.FilterableTreeStore
        // we use "nodeStore.fireEvent('clear', nodeStore);" hack, which is directly tied to "refresh" method of the view
        // in case when non-tree view consumes this mixin, we need to temporarily block the refresh manually,
        // to avoid double refresh
        this.blockRefresh       = true;

        Ext.suspendLayouts();
    },


    onFilterChangeEnd : function () {
        Ext.resumeLayouts(true);

        this.blockRefresh       = this.prevBlockRefresh;
    },


    onFilterCleared : function () {
        delete this.toggle;

        var el          = this.getEl();

        if (el) el.removeCls('sch-tree-filtered');
    },


    onFilterSet : function () {
        this.toggle     = function () {};

        var el          = this.getEl();

        if (el) el.addCls('sch-tree-filtered');
    }
});

/**
@class Sch.mixin.Zoomable

A mixin for {@link Sch.mixin.TimelinePanel} class, providing "zooming" functionality to the consuming panel.

The zooming feature works by reconfiguring panel's time axis with the current zoom level values selected from the {@link #zoomLevels} array.
Zoom levels can be added and removed from the array to change the amount of available steps. Range of zooming in/out can be also
modified with {@link #maxZoomLevel} / {@link #minZoomLevel} properties.

This mixin adds additional methods to the timeline panel : {@link #setMaxZoomLevel}, {@link #setMinZoomLevel}, {@link #zoomToLevel}, {@link #zoomIn},
{@link #zoomOut}, {@link #zoomInFull}, {@link #zoomOutFull}.

* **Notice**: Zooming doesn't work properly when `forceFit` option is set to true for the panel or for filtered timeaxis.
*/

Ext.define('Sch.mixin.Zoomable', {

    /**
     * @cfg {Array} [zoomLevels=[]] Predefined map of zoom levels for each preset in the ascending order. Zoom level is basically a {@link Sch.preset.ViewPreset view preset},
     * which is based on another preset, with some values overriden.
     *
     * Each element is an {Object} with the following parameters :
     *
     * - `preset` (String)      - {@link Sch.preset.ViewPreset} to be used for this zoom level. This must be a valid preset name registered in {@link Sch.preset.Manager preset manager}.
     * - `width` (Int)          - {@link Sch.preset.ViewPreset#timeColumnWidth timeColumnWidth} time column width value from the preset
     * - `increment` (Int)      - {@link Sch.preset.ViewPresetHeaderRow#increment increment} value from the bottom header row of the preset
     * - `resolution` (Int)     - {@link Sch.preset.ViewPreset#timeResolution increment} part of the `timeResolution` object in the preset
     * - `resolutionUnit` (String) (Optional) - {@link Sch.preset.ViewPreset#timeResolution unit} part of the `timeResolution` object in the preset
     */
    zoomLevels: [
        //YEAR
        { width: 40,    increment: 1,   resolution: 1, preset: 'manyYears', resolutionUnit: 'YEAR' },
        { width: 80,    increment: 1,   resolution: 1, preset: 'manyYears', resolutionUnit: 'YEAR' },
        
        { width: 30,    increment: 1,   resolution: 1, preset: 'year', resolutionUnit: 'MONTH' },
        { width: 50,    increment: 1,   resolution: 1, preset: 'year', resolutionUnit: 'MONTH'},
        { width: 100,   increment: 1,   resolution: 1, preset: 'year', resolutionUnit: 'MONTH'},
        { width: 200,   increment: 1,   resolution: 1, preset: 'year', resolutionUnit: 'MONTH'},

        //MONTH
        { width: 100,   increment: 1,   resolution: 7, preset: 'monthAndYear', resolutionUnit: 'DAY'},
        { width: 30,    increment: 1,   resolution: 1, preset: 'weekDateAndMonth', resolutionUnit: 'DAY'},

        //WEEK
        { width: 35,    increment: 1,   resolution: 1, preset: 'weekAndMonth', resolutionUnit: 'DAY'},
        { width: 50,    increment: 1,   resolution: 1, preset: 'weekAndMonth', resolutionUnit: 'DAY'},
        { width: 20,    increment: 1,   resolution: 1, preset: 'weekAndDayLetter' },

        //DAY
        { width: 50,    increment: 1,   resolution: 1, preset: 'weekAndDay', resolutionUnit: 'HOUR'},
        { width: 100,   increment: 1,   resolution: 1, preset: 'weekAndDay', resolutionUnit: 'HOUR' },

        //HOUR
        { width: 50,    increment: 6,   resolution: 30, preset: 'hourAndDay', resolutionUnit: 'MINUTE' },
        { width: 100,   increment: 6,   resolution: 30, preset: 'hourAndDay', resolutionUnit: 'MINUTE' },
        { width: 60,    increment: 2,   resolution: 30, preset: 'hourAndDay', resolutionUnit: 'MINUTE' },
        { width: 60,    increment: 1,   resolution: 30, preset: 'hourAndDay', resolutionUnit: 'MINUTE' },

        //MINUTE
        { width: 30,    increment: 15,  resolution: 5, preset: 'minuteAndHour' },
        { width: 60,    increment: 15,  resolution: 5, preset: 'minuteAndHour' },
        { width: 130,   increment: 15,  resolution: 5, preset: 'minuteAndHour' },
        { width: 60,    increment: 5,   resolution: 5, preset: 'minuteAndHour' },
        { width: 100,   increment: 5,   resolution: 5, preset: 'minuteAndHour' },
        { width: 50,    increment: 2,   resolution: 1, preset: 'minuteAndHour' },

        //SECOND
        { width: 30,    increment: 10,  resolution: 5,  preset: 'secondAndMinute' },
        { width: 60,    increment: 10,  resolution: 5,  preset: 'secondAndMinute' },
        { width: 130,   increment: 5,   resolution: 5,  preset: 'secondAndMinute' }
    ],

    /**
     * @cfg {Number} minZoomLevel Minimal zoom level to which {@link #zoomOut} will work.
     */
    minZoomLevel        : null,

    /**
     * @cfg {Number} maxZoomLevel Maximal zoom level to which {@link #zoomIn} will work.
     */
    maxZoomLevel        : null,


    /**
     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make the scrolling area `visibleZoomFactor` times
     * wider than the timeline area itself. Used in {@link #zoomToSpan} and {@link #zoomToLevel} functions.
     */
    visibleZoomFactor   : 5,
    
    /**
     * @cfg {Boolean} zoomKeepsOriginalTimespan Whether the originally rendered timespan should be preserved while zooming. By default it is set to `false`,
     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to render. When setting this option
     * to `true`, be careful not to allow to zoom a big timespan in seconds resolution for example. That will cause **a lot** of HTML content
     * to be rendered and affect performance. You can use {@link #minZoomLevel} and {@link #maxZoomLevel} config options for that.
     */
    zoomKeepsOriginalTimespan    : false,


    cachedCenterDate    : null,
    isFirstZoom         : true,
    isZooming           : false,
    

    initializeZooming: function () {
        //create instance-specific copy of zoomLevels
        this.zoomLevels         = this.zoomLevels.slice();

        this.setMinZoomLevel(this.minZoomLevel || 0);
        this.setMaxZoomLevel(this.maxZoomLevel !== null ? this.maxZoomLevel : this.zoomLevels.length - 1);

        this.on('viewchange', this.clearCenterDateCache, this);
    },


    getZoomLevelUnit : function (zoomLevel) {
        return Sch.preset.Manager.getPreset(zoomLevel.preset).getBottomHeader().unit;
    },

    /*
     * @private
     * Returns number of milliseconds per pixel.
     * @param {Object} level Element from array of {@link #zoomLevels}.
     * @param {Boolean} ignoreActualWidth If true, then density will be calculated using default zoom level settings. 
     * Otherwise density will be calculated for actual tick width.
     * @return {Number} Return number of milliseconds per pixel.
     */
    getMilliSecondsPerPixelForZoomLevel : function (level, ignoreActualWidth) {
        var DATE    = Sch.util.Date;

        // trying to convert the unit + increment to a number of milliseconds
        // this number is not fixed (month can be 28, 30 or 31 day), but at least this convertion
        // will be consistent (should be no DST changes at year 1)
        return Math.round(
            (DATE.add(new Date(1, 0, 1), this.getZoomLevelUnit(level), level.increment) - new Date(1, 0, 1)) /
            // `actualWidth` is a column width after view adjustments applied to it (see `calculateTickWidth`)
            // we use it if available to return the precise index value from `getCurrentZoomLevelIndex` 
            (ignoreActualWidth ? level.width : level.actualWidth || level.width)
        );
    },


    presetToZoomLevel : function (presetName) {
        var preset              = Sch.preset.Manager.getPreset(presetName);

        return {
            preset          : presetName,
            increment       : preset.getBottomHeader().increment || 1,
            resolution      : preset.timeResolution.increment,
            resolutionUnit  : preset.timeResolution.unit,
            width           : preset.timeColumnWidth
        };
    },
    
    
    zoomLevelToPreset : function (zoomLevel) {
        var preset              = Sch.preset.Manager.getPreset(zoomLevel.preset).clone();
        
        var bottomHeader        = preset.getBottomHeader();
        
        bottomHeader.increment  = zoomLevel.increment;
        // TODO support vertical
        preset.timeColumnWidth  = zoomLevel.width;
        
        if (zoomLevel.resolutionUnit || zoomLevel.resolution) {
            preset.timeResolution   = {
                unit        : zoomLevel.resolutionUnit || preset.timeResolution.unit || bottomHeader.unit,
                increment   : zoomLevel.resolution || preset.timeResolution.increment || 1
            };
        }
        
        return preset;
    },


    calculateCurrentZoomLevel : function () {
        var zoomLevel       = this.presetToZoomLevel(this.viewPreset),
            min             = Number.MAX_VALUE,
            viewModel       = this.timeAxisViewModel,
            actualWidth     = viewModel.timeColumnWidth;

        zoomLevel.width     = actualWidth;
        zoomLevel.increment = viewModel.getBottomHeader().increment || 1;

        // when calculating current zoom level we should use tick width from defined zoomLevels
        // otherwise levels might be skipped
        for (var i = 0, l = this.zoomLevels.length; i < l; i++) {
            var curentLevel = this.zoomLevels[i];

            // search for a zoom level having the same preset...
            if (curentLevel.preset !== zoomLevel.preset) continue;

            // and the most close column width to the actual one
            var delta = Math.abs(curentLevel.width - actualWidth);
            if (delta < min) {
                min                     = delta;
                zoomLevel.actualWidth   = curentLevel.actualWidth;
                zoomLevel.width         = curentLevel.width;
            }
        }

        return zoomLevel;
    },


    getCurrentZoomLevelIndex : function () {
        var currentZoomLevel        = this.calculateCurrentZoomLevel();
        var currentFactor           = this.getMilliSecondsPerPixelForZoomLevel(currentZoomLevel);

        var zoomLevels              = this.zoomLevels;

        for (var i = 0; i < zoomLevels.length; i++) {
            var zoomLevelFactor     = this.getMilliSecondsPerPixelForZoomLevel(zoomLevels[ i ]);

            if (zoomLevelFactor == currentFactor) return i;

            // current zoom level is outside of pre-defined zoom levels
            if (i === 0 && currentFactor > zoomLevelFactor) return -0.5;
            if (i == zoomLevels.length - 1 && currentFactor < zoomLevelFactor) return zoomLevels.length - 1 + 0.5;

            var nextLevelFactor     = this.getMilliSecondsPerPixelForZoomLevel(zoomLevels[ i + 1 ]);
            
            if (zoomLevelFactor > currentFactor && currentFactor > nextLevelFactor) return i + 0.5;
        }

        throw "Can't find current zoom level index";
    },


    /**
    * Sets the {@link #maxZoomLevel} value.
    * @param {Number} level The level to limit zooming in to.
    */
    setMaxZoomLevel: function (level) {
        if (level < 0 || level >= this.zoomLevels.length) {
            throw new Error("Invalid range for `setMinZoomLevel`");
        }

        this.maxZoomLevel = level;
    },

    /**
    * Sets the {@link #minZoomLevel} value.
    * @param {Number} level The level to limit zooming out to.
    */
    setMinZoomLevel: function (level) {
        if (level < 0 || level >= this.zoomLevels.length) {
            throw new Error("Invalid range for `setMinZoomLevel`");
        }

        this.minZoomLevel = level;
    },


    // when zooming out, the precision for the center date becomes not so good (1px starts to contains too big time interval)
    // because of that zooming will be "floating"
    // to prevent that we cache the center date
    // cache will be cleared after any user scroll operation
    /** @ignore */
    getViewportCenterDateCached : function () {
        if (this.cachedCenterDate) return this.cachedCenterDate;

        return this.cachedCenterDate = this.getViewportCenterDate();
    },


    clearCenterDateCache : function () {
        this.cachedCenterDate = null;
    },


    /**
     * Allows zooming to certain level of {@link #zoomLevels} array. Automatically limits zooming between {@link #maxZoomLevel} 
     * and {@link #minZoomLevel}. Can also set time axis timespan to the supplied start and end dates.
     *
     * @param {Number} level Level to zoom to.
     * @param {Object} span The time frame. Used to set time axis timespan to the supplied start and end dates. If provided, the view
     * will be centered in this time interval
     * @param {Date} span.start The time frame start.
     * @param {Date} span.end The time frame end.
     *
     * @param {Object} [options] Object, containing options for this method
     * @param {Number} options.customWidth Lowest tick width. Might be increased automatically
     * @param {Date} options.scrollTo Date that should be scrolled to
     * @return {Number} level Current zoom level or null if it hasn't changed.
     */
    zoomToLevel: function (level, span, options) {
        level                       = Ext.Number.constrain(level, this.minZoomLevel, this.maxZoomLevel);
        options                     = options || {};

        var currentZoomLevel        = this.calculateCurrentZoomLevel();
        var currentFactor           = this.getMilliSecondsPerPixelForZoomLevel(currentZoomLevel);

        var nextZoomLevel           = this.zoomLevels[ level ];
        var nextFactor              = this.getMilliSecondsPerPixelForZoomLevel(nextZoomLevel);

        if (currentFactor == nextFactor && !span) {
            // already at requested zoom level
            return null;
        }

        var me                      = this;
        var view                    = this.getSchedulingView();
        var viewEl                  = view.getOuterEl();
        var scrollSource            = view.getScrollEventSource();


        var isVertical              = this.mode == 'vertical';

        var centerDate              = span ? new Date((span.start.getTime() + span.end.getTime()) / 2) : this.getViewportCenterDateCached();

        var panelSize               = isVertical ? viewEl.getHeight() : viewEl.getWidth();

        var presetCopy              = Sch.preset.Manager.getPreset(nextZoomLevel.preset).clone();
        var bottomHeader            = presetCopy.getBottomHeader();
        
        var hasSpanProvided         = Boolean(span);

        span                        = this.calculateOptimalDateRange(centerDate, panelSize, nextZoomLevel, span);
        
        presetCopy[ isVertical ? 'timeRowHeight' : 'timeColumnWidth' ] = options.customWidth || nextZoomLevel.width;

        bottomHeader.increment      = nextZoomLevel.increment;

        this.isZooming              = true;

        this.viewPreset             = nextZoomLevel.preset;
        
        var timeAxis                = this.timeAxis;
            
        presetCopy.increment        = nextZoomLevel.increment;
        presetCopy.timeResolution.unit   = Sch.util.Date.getUnitByName(nextZoomLevel.resolutionUnit || presetCopy.timeResolution.unit || bottomHeader.unit);
        presetCopy.timeResolution.increment  = nextZoomLevel.resolution;

        this.setViewPreset(presetCopy, span.start || this.getStart(), span.end || this.getEnd(), false, true);
        
        // after switching the view preset the `width` config of the zoom level may change, because of adjustments
        // we will save the real value in the `actualWidth` property, so that `getCurrentZoomLevelIndex` method
        // will return the exact level index after zooming
        nextZoomLevel.actualWidth   = this.timeAxisViewModel.getTickWidth();
        
        // re-calculate the center date after reconfiguring the timeaxis, 
        // because the actual start/end date may change because of time axis "autoAdjust" property
        if (hasSpanProvided) centerDate = options.centerDate || new Date((timeAxis.getStart().getTime() + timeAxis.getEnd().getTime()) / 2);

        var x = null, y = null;

        if (isVertical) {
            y = view.getYFromDate(centerDate, true) - panelSize / 2;

            me.cachedCenterDate = centerDate;
            
            // there's a missync between header scroll and view scroll which can corrupt view center date
            view.getScrollable().scrollTo(null, y);
            view.headerCt.getScrollable().scrollTo(null, y);
        } else {
            x = view.getXFromDate(centerDate, true) - panelSize / 2;
            me.cachedCenterDate = centerDate;
            
            // there's a missync between header scroll and view scroll which can corrupt view center date
            view.getScrollable().scrollTo(x);
            view.headerCt.getScrollable().scrollTo(x);
        }

        me.isZooming              = false;
        
        me.fireEvent('zoomchange', me, level, x, y);

        /**
         * @event zoomchange
         *
         * Fires after zoom level has been changed
         *
         * @param {Sch.mixin.TimelinePanel} timelinePanel The timeline object
         * @param {Number} level The index of the new zoom level
         */


        return level;
    },

    /*
     * Alias for {@link #zoomToLevel}
     */
    setZoomLevel : function() {
        this.zoomToLevel.apply(this, arguments);
    },

    /**
     * Sets time frame to specified range and applies zoom level which allows to fit all columns to this range.
     * 
     * The given time span will be centered in the scheduling view, in the same time, the start/end date of the whole time axis
     * will be extended in the same way as {@link #zoomToLevel} method does, to allow scrolling for user. 
     *
     * @param {Object} span The time frame.
     * @param {Date} span.start The time frame start.
     * @param {Date} span.end The time frame end.
     *
     * @return {Number} level Current zoom level or null if it hasn't changed.
     */
    zoomToSpan : function (span, config) {
        if (span.start && span.end && span.start < span.end) {
            config = config || {};
            
            if (config.leftMargin || config.rightMargin) {
                config.adjustStart = 0;
                config.adjustEnd = 0;
            }
            
            Ext.applyIf(config, {
                leftMargin  : 0,
                rightMargin : 0
            });
            
            var start       = span.start,
                end         = span.end,
                // this config enables old zoomToSpan behavior which we want o use for zoomToFit in Gantt 
                needToAdjust  = config.adjustStart >= 0 && config.adjustEnd >=0;
                
            if (needToAdjust) {
                start       = Sch.util.Date.add(start, this.timeAxis.mainUnit, - config.adjustStart);
                end         = Sch.util.Date.add(end, this.timeAxis.mainUnit, config.adjustEnd);    
            }

            // get scheduling view width
            var availableWidth  = this.getSchedulingView().getTimeAxisViewModel().getAvailableWidth();

            // if potential width of col is less than col width provided by zoom level
            //   - we'll zoom out panel until col width fit into width from zoom level
            // and if width of column is more than width from zoom level
            //   - we'll zoom in until col width fit won't fit into width from zoom level

            var currLevel       = Math.floor(this.getCurrentZoomLevelIndex());

            // if we zoomed out even more than the highest zoom level - limit it to the highest zoom level
            if (currLevel == -1) currLevel = 0;

            var zoomLevels      = this.zoomLevels;
            
            var diffMS          = end - start,
                msPerPixel      = this.getMilliSecondsPerPixelForZoomLevel(zoomLevels[ currLevel ], true),
                // increment to get next zoom level:
                // -1 means that given timespan won't fit the available width in the current zoom level, we need to zoom out,
                // so that more content will "fit" into 1 px
                //
                // +1 mean that given timespan will already fit into available width in the current zoom level, but,
                // perhaps if we'll zoom in a bit more, the fitting will be better 
                inc             = diffMS / msPerPixel + config.leftMargin + config.rightMargin > availableWidth ? -1 : 1,
                candidateLevel  = currLevel + inc;

            var zoomLevel, levelToZoom = null;

            // loop over zoom levels
            while (candidateLevel >= 0 && candidateLevel <= zoomLevels.length - 1) {

                // get zoom level
                zoomLevel   = zoomLevels[ candidateLevel ];

//                // get its preset copy
//                preset      = this.zoomLevelToPreset(zoomLevel);
//                
//                // apply zoom level params to timeAxis
//                timeAxis.consumeViewPreset(preset);
                
                msPerPixel = this.getMilliSecondsPerPixelForZoomLevel(zoomLevel, true);
                var spanWidth   = diffMS / msPerPixel + config.leftMargin + config.rightMargin;
                
                // if zooming out
                if (inc == -1) {
                    // if columns fit into available space, then all is fine, we've found appropriate zoom level
                    if (spanWidth <= availableWidth) {
                        levelToZoom     = candidateLevel;
                        // stop searching
                        break;
                    }
                // if zooming in
                } else {
                    // if columns still fits into available space, we need to remember the candidate zoom level as a potential
                    // resulting zoom level, the indication that we've found correct zoom level will be that timespan won't fit
                    // into available view
                    if (spanWidth <= availableWidth) {
                        // if it's not currently active level
                        if (currLevel !== candidateLevel - inc) {
                            // remember this level as applicable
                            levelToZoom     = candidateLevel;
                        }
                    } else {
                        // Sanity check to find the following case:
                        // If we're already zoomed in at the appropriate level, but the current zoomLevel is "too small" to fit and had to be expanded,
                        // there is an edge case where we should actually just stop and use the currently selected zoomLevel
                        break;
                    }
                }

                candidateLevel += inc;
            }

            // If we didn't find a large/small enough zoom level, use the lowest/highest level
            levelToZoom     = levelToZoom !== null ? levelToZoom : candidateLevel - inc;
            
            zoomLevel       = zoomLevels[ levelToZoom ];
            
            var unitToZoom  = Sch.preset.Manager.getPreset(zoomLevel.preset).getBottomHeader().unit;
            
            if (config.leftMargin || config.rightMargin) {
                // time axis doesn't yet know about new view preset (zoom level) so it cannot round/ceil date correctly
                start = new Date(start.getTime() - msPerPixel * config.leftMargin);
                end = new Date(end.getTime() + msPerPixel * config.rightMargin);
            }
            
            var columnCount = Sch.util.Date.getDurationInUnit(start, end, unitToZoom, true) / zoomLevel.increment;

            if (columnCount === 0) {
                return;
            }
            
            var customWidth = Math.floor(availableWidth / columnCount);
            
            var centerDate  = new Date((start.getTime() + end.getTime()) / 2);
            
            var range;
            
            if (needToAdjust) {
                range = {
                    start   : start,
                    end     : end
                };
            } else {
                range = this.calculateOptimalDateRange(centerDate, availableWidth, zoomLevel);
            }
            
            return this.zoomToLevel(levelToZoom, 
                range,
                { 
                    customWidth : customWidth, 
                    centerDate  : centerDate 
                }
            );
        }

        return null;
    },

    /**
    * Zooms in the timeline according to the array of zoom levels. If the amount of levels to zoom is given, the view will zoom in by this value.
    * Otherwise a value of `1` will be used.
    *
    * @param {Number} levels (optional) amount of levels to zoom in
    *
    * @return {Number} currentLevel New zoom level of the panel or null if level hasn't changed.
    */
    zoomIn: function (levels) {
        //if called without parameters or with 0, zoomIn by 1 level
        levels          = levels || 1;

        var currentZoomLevelIndex       = this.getCurrentZoomLevelIndex();

        if (currentZoomLevelIndex >= this.zoomLevels.length - 1) return null;

        return this.zoomToLevel(Math.floor(currentZoomLevelIndex) + levels);
    },

    /**
    * Zooms out the timeline according to the array of zoom levels. If the amount of levels to zoom is given, the view will zoom out by this value.
    * Otherwise a value of `1` will be used.
    *
    * @param {Number} levels (optional) amount of levels to zoom out
    *
    * @return {Number} currentLevel New zoom level of the panel or null if level hasn't changed.
    */
    zoomOut: function(levels){
        //if called without parameters or with 0, zoomIn by 1 level
        levels          = levels || 1;

        var currentZoomLevelIndex       = this.getCurrentZoomLevelIndex();

        if (currentZoomLevelIndex <= 0) return null;

        return this.zoomToLevel(Math.ceil(currentZoomLevelIndex) - levels);
    },

    /**
    * Zooms in the timeline to the {@link #maxZoomLevel} according to the array of zoom levels.
    *
    * @return {Number} currentLevel New zoom level of the panel or null if level hasn't changed.
    */
    zoomInFull: function () {
        return this.zoomToLevel(this.maxZoomLevel);
    },

    /**
    * Zooms out the timeline to the {@link #minZoomLevel} according to the array of zoom levels.
    *
    * @return {Number} currentLevel New zoom level of the panel or null if level hasn't changed.
    */
    zoomOutFull: function () {
        return this.zoomToLevel(this.minZoomLevel);
    },


    /*
    * Adjusts the timespan of the panel to the new zoom level. Used for performance reasons,
    * as rendering too many columns takes noticeable amount of time so their number is limited.
    */
    calculateOptimalDateRange: function (centerDate, panelSize, zoomLevel, userProvidedSpan) {
        // this line allows us to always use the `calculateOptimalDateRange` method when calculating date range for zooming
        // (even in case when user has provided own interval)
        // other methods may override/hook into `calculateOptimalDateRange` to insert own processing
        // (inifinte scrolling feature does)
        if (userProvidedSpan) return userProvidedSpan;
        
        var timeAxis            = this.timeAxis;
        
        if (this.zoomKeepsOriginalTimespan) {
            return {
                start           : timeAxis.getStart(),
                end             : timeAxis.getEnd()
            };
        }
        
        var schDate             = Sch.util.Date;


        var unit                = this.getZoomLevelUnit(zoomLevel);

        var difference          = Math.ceil(panelSize / zoomLevel.width * zoomLevel.increment * this.visibleZoomFactor / 2);

        var startDate           = schDate.add(centerDate, unit, -difference);
        var endDate             = schDate.add(centerDate, unit, difference);

        return {
            start   : timeAxis.floorDate(startDate, false, unit, zoomLevel.increment),
            end     : timeAxis.ceilDate(endDate, false, unit, zoomLevel.increment)
        };
    }
});

/**

@class Sch.mixin.AbstractTimelinePanel
@private

A base mixin giving the consuming panel "time line" functionality.
This means that the panel will be capable to display a list of "events", along a {@link Sch.data.TimeAxis time axis}.

This class should not be used directly.

*/

Ext.define('Sch.mixin.AbstractTimelinePanel', {
    requires: [
        'Sch.data.TimeAxis',
        'Sch.view.model.TimeAxis',
        'Sch.feature.ColumnLines',
        'Sch.preset.Manager'
    ],

    mixins: [
        'Sch.mixin.Zoomable'
    ],
    
    /**
     * @cfg {String} orientation An initial orientation of the view - can be either `horizontal` or `vertical`. Default value is `horizontal`.
     * Options: ['horizontal', 'vertical']
     * @deprecated Use {@link #mode} instead
     */
    orientation             : 'horizontal',
    
    /**
     * @cfg {String} mode An initial mode of the view - can be either `calendar`, `horizontal` or `vertical`. Default value is `horizontal`.
     * Please note, that view preset for vertical and horizontal mode is defined by {@link #viewPreset} and view preset for calendar is 
     * defined by {@link #calendarViewPreset}
     * 
     * 
     * Options: ['calendar', 'horizontal', 'vertical']
     */

    /**
     * @cfg {Number} weekStartDay A valid JS date index between 0-6. (0: Sunday, 1: Monday etc.).
     */
    weekStartDay            : 1,

    /**
     * @cfg {Boolean} snapToIncrement true to snap to resolution increment while interacting with scheduled events.
     */
    snapToIncrement         : false,

    /**
     * @cfg {Boolean} readOnly true to disable editing.
     */
    readOnly                : false,

    /**
     * @cfg {Boolean} forceFit Set to true to force the time columns to fit to the available horizontal space.
     */
    forceFit                : false,

    /**
     * @cfg {String} eventResizeHandles Defines which resize handles to use for resizing events. Possible values: 'none', 'start', 'end', 'both'. Defaults to 'both'
     */
    eventResizeHandles      : 'both',

    /**
     * @cfg {Number} rowHeight The row height (used in horizontal mode only)
     */

    /**
     * @cfg {Sch.data.TimeAxis} timeAxis The backing store providing the input date data for the timeline panel.
     */
    timeAxis                : null,

    /**
     * @cfg {Boolean} autoAdjustTimeAxis The value for the {@link Sch.data.TimeAxis#autoAdjust} config option, which will be used
     * when creating the time axis instance. You can set this option to `false` to make the timeline panel start and end on the exact provided
     * {@link #startDate}/{@link #endDate} w/o adjusting them.
     */
    autoAdjustTimeAxis      : true,

    /**
     * @private
     * @cfg {Sch.view.model.TimeAxis/Object} timeAxisViewModel The backing view model for the visual representation of the time axis.
     * Either a real instance or a simple config object.
     */
    timeAxisViewModel       : null,

    /**
     * @cfg {Object} validatorFnScope
     * The scope used for the different validator functions.
     */

    /**
     * @cfg {Sch.crud.AbstractManager} crudManager The CRUD manager holding all the project stores.
     */
    crudManager : null,

    /**
     * @cfg {String} viewPreset
     * @property {String} viewPreset
     * A key used to lookup a predefined {@link Sch.preset.ViewPreset} (e.g. 'weekAndDay', 'hourAndDay'), managed by {@link Sch.preset.Manager}. See {@link Sch.preset.Manager} for more information.
     * 
     * 
     * Options: ['secondAndMinute', 'minuteAndHour', 'hourAndDay', 'dayAndWeek', 'weekAndDay', 'weekAndMonth', 'monthAndYear', 'year', 'manyYears', 'weekAndDayLetter', 'weekDateAndMonth']
     */
    viewPreset              : 'weekAndDay',
    
    /**
     * @cfg {String} calendarViewPreset
     * @property {String} calendarViewPreset
     * A key used to lookup a predefined {@link Sch.preset.ViewPreset}, managed by {@link Sch.preset.Manager}. See {@link Sch.preset.Manager} for more information.
     * Default view preset for scheduler in calendar mode
     * 
     * 
     * Options: ['day', 'week']
     */
    calendarViewPreset      : 'week',

    /**
     * @cfg {Boolean} trackHeaderOver `true` to highlight each header cell when the mouse is moved over it.
     */
    trackHeaderOver         : true,

    /**
     * @cfg {Date} startDate The start date of the timeline. If omitted, and a TimeAxis has been set, the start date of the provided {@link Sch.data.TimeAxis} will be used.
     * If no TimeAxis has been configured, it'll use the start/end dates of the loaded event dataset. If no date information exists in the event data
     * set, it defaults to the current date and time.
     */
    startDate               : null,

    /**
     * @cfg {Date} endDate The end date of the timeline. If omitted, it will be calculated based on the {@link #startDate} setting and
     * the 'defaultSpan' property of the current {@link #viewPreset}.
     */
    endDate                 : null,
    
    /**
     * @cfg {Number} startTime Start time for calendar mode, used only with day/week presets.
     */
    startTime               : 0,
    
    /**
     * @cfg {Number} endTime End time for calendar mode, used only with day/week presets.
     */
    endTime                 : 24,

    columnLines             : true,

    /**
     * Returns dates that will constrain resize and drag operations. The method will be called with the Resource, and
     * for operations on existing events - the event. For drag create operation, the mousedown date will be passed as the second parameter
     * @return {Object} Constaining object
     * @return {Date} return.start Start date
     * @return {Date} return.end End date
     */
    getDateConstraints		: Ext.emptyFn,
    
    /**
     * @cfg {Boolean} snapRelativeToEventStartDate Affects drag drop and resizing of events when {@link #snapToIncrement} is enabled. If set to `true`, dates will be snapped relative to event start.
     * e.g. for a zoom level with timeResolution = { unit: "s", increment: "20" }, an event that starts at 10:00:03 and is dragged would snap its start date to 10:00:23, 10:00:43 etc.
     * When set to `false`, dates will be snapped relative to the timeAxis startDate (tick start) - 10:00:03, 10:00:20, 10:00:40 etc.
     */
    snapRelativeToEventStartDate    : false,
    
    trackMouseOver          : false,

    // If user supplied a 'rowHeight' config or a panel subclass with such a value - skip reading this setting
    // from the viewpreset
    readRowHeightFromPreset : true,

    /**
     * @cfg {Number} eventBorderWidth
     * The width of the border of your event, needed to calculate the correct start/end positions
     */
    eventBorderWidth        : 1,

    /**
    * Returns the orientation of this panel, "horizontal" or "vertical"
    * @return {String}
    * @deprecated
    */
    getOrientation  : function () {
        return this.getMode.apply(this, arguments);
    },
    
    /**
    * Returns the mode of this panel, "horizontal", "vertical" or "calendar"
    * @return {String}
    */
    getMode: function () {
        return this.mode;
    },


    isHorizontal : function() {
        return this.getMode() === 'horizontal';
    },


    isVertical : function() {
        return !this.isHorizontal();
    },

    /**
     * @event beforeviewchange
     * Fires before the current view changes to a new view type or a new time span. Return false to abort this action.
     * @param {Sch.mixin.TimelinePanel} timelinePanel The timeline panel instance
     * @param {Object} preset The new preset
     */

    /**
     * @event viewchange
     * Fires after current view preset or time span has changed
     * @param {Sch.mixin.TimelinePanel} timelinePanel The timeline panel instance
     */


    cellBorderWidth         : 1,
    cellTopBorderWidth      : 1,        // 0 since Ext JS 4.2.1
    cellBottomBorderWidth   : 1,

    renderers               : null,


    // Must be called during initialization by consuming class
    _initializeTimelinePanel : function() {
        // this is an entry point to this mixin, so we should wrap 'mode' here
        this.mode = this.mode || this.orientation || 'horizontal';

        if (this.mode === 'calendar') {
            this.oldViewPreset  = this.viewPreset;
            this.viewPreset     = this.calendarViewPreset;    
        }
        
        var preset      = this.viewPreset && Sch.preset.Manager.getPreset(this.viewPreset);

        if (!preset) {
            throw 'You must define a valid view preset object. See Sch.preset.Manager class for reference';
        }

        this.initializeZooming();

        this.renderers                  = [];

        // Setting a rowHeight config on the panel should override any rowHeight value in the view presets
        if (this.readRowHeightFromPreset) {
            this.readRowHeightFromPreset    = !this.rowHeight;
        }

        if (!this.timeAxis) {
            this.timeAxis = new Sch.data.TimeAxis({ 
                autoAdjust  : this.autoAdjustTimeAxis,
                mode        : this.mode === 'calendar' ? 'calendar' : 'plain'
            });
        }

        if (!this.timeAxisViewModel || !(this.timeAxisViewModel instanceof Sch.view.model.TimeAxis)) {
            var config                  = Ext.apply({
                mode            : this.mode,
                snapToIncrement : this.snapToIncrement,
                forceFit        : this.forceFit,
                timeAxis        : this.timeAxis,
                eventStore      : this.getEventStore(),
                viewPreset      : this.viewPreset
            }, this.timeAxisViewModel || {});

            this.timeAxisViewModel      = new Sch.view.model.TimeAxis(config);
        }
        
        this.timeAxisViewModel.on('update', this.onTimeAxisViewModelUpdate, this);
        
        this.timeAxisViewModel.refCount++;

        this.on('destroy', this.onPanelDestroyed, this);
        
        var orientationClasses;
        switch (this.mode) {
            case 'horizontal'   : orientationClasses = ['sch-horizontal']; break;
            case 'vertical'     : orientationClasses = ['sch-vertical', 'sch-vertical-resource']; break;
            case 'calendar'     : orientationClasses = ['sch-vertical', 'sch-calendar']; break;
        }
        
        this.addCls([].concat.apply(['sch-timelinepanel'], orientationClasses));
    },

    onTimeAxisViewModelUpdate : function() {
        var view = this.getSchedulingView();

        if (view && view.viewReady) {
            view.refreshKeepingScroll();

            this.fireEvent('viewchange', this);
        }
    },

    onPanelDestroyed : function() {
        var timeAxisViewModel   = this.timeAxisViewModel;

        timeAxisViewModel.un('update', this.onTimeAxisViewModelUpdate, this);
        timeAxisViewModel.refCount--;

        if (timeAxisViewModel.refCount <= 0) {
            timeAxisViewModel.destroy();
        }
    },

    /**
    * @abstract
    *
    * @return {Sch.mixin.AbstractSchedulerView} A view consuming the {@link Sch.mixin.AbstractSchedulerView} mixin
    */
    getSchedulingView: function () {
        throw 'Abstract method call';
    },

    /**
    * The {@link #readOnly} accessor. Use it to switch the `readonly` state.
    */
    setReadOnly: function (readOnly) {
        this.getSchedulingView().setReadOnly(readOnly);
    },

    /**
    * Returns true if the panel is currently read only.
    * @return {Boolean} readOnly
    */
    isReadOnly: function () {
        return this.getSchedulingView().isReadOnly();
    },

    /**
     * Alias for {@link setViewPreset}
     */
    switchViewPreset: function () {
        this.setViewPreset.apply(this, arguments);
    },

    /**
     * Sets the current view preset. See the {@link Sch.preset.Manager} class for details.
     * Calling it will first fire a {@link Sch.panel.SchedulerGrid#beforeviewchange SchedulerGrid} /
     * {@link Sch.panel.SchedulerTree#beforeviewchange SchedulerTree} beforeviewchange event,
     * followed by a {@link Sch.panel.SchedulerGrid#viewchange SchedulerGrid} /
     * {@link Sch.panel.SchedulerTree#viewchange SchedulerTree} viewchange event.
     * Returning `false` from any 'beforeviewchange' listener will cancel the operation.
     *
     * @param {String} preset The id of the new preset (see {@link Sch.preset.Manager} for details)
     * @param {Date} [startDate] A new start date for the time axis
     * @param {Date} [endDate] A new end date for the time axis
     */
    setViewPreset : function(preset, startDate, endDate, initial, noScroll) {
        var timeAxis        = this.timeAxis;

        if (this.fireEvent('beforeviewchange', this, preset, startDate, endDate) !== false) {

            var isHorizontal        = this.getMode() === 'horizontal';

            if (Ext.isString(preset)) {
                this.viewPreset     = preset;
                preset              = Sch.preset.Manager.getPreset(preset);
            }

            if (!preset) {
                throw 'View preset not found';
            }

            // Timeaxis may already be configured (in case of sharing with the timeline partner), no need to reconfigure it
            if (!(initial && timeAxis.isConfigured)) {
                var timeAxisCfg     = {
                    weekStartDay    : this.weekStartDay,
                    startTime       : this.startTime,
                    endTime         : this.endTime
                };

                if (initial) {
                    if (timeAxis.getCount() === 0 || startDate) {
                        timeAxisCfg.start = startDate || new Date();
                    }
                } else {
                    timeAxisCfg.start   = startDate || timeAxis.getStart();
                }

                timeAxisCfg.end     = endDate;

                timeAxis.consumeViewPreset(preset);
                timeAxis.reconfigure(timeAxisCfg, true);

                this.timeAxisViewModel.reconfigure({
                    headerConfig        : preset.headerConfig,
                    columnLinesFor      : preset.columnLinesFor || 'middle',
                    rowHeightHorizontal : this.readRowHeightFromPreset ? preset.rowHeight : (this.rowHeight || this.timeAxisViewModel.getViewRowHeight()),
                    tickWidth           : isHorizontal ? preset.timeColumnWidth : preset.timeRowHeight || preset.timeColumnWidth || 60,
                    timeColumnWidth     : preset.timeColumnWidth,

                    // timeColumnWidth is also used for row height in vertical mode
                    rowHeightVertical   : preset.timeRowHeight || preset.timeColumnWidth || 60,
                    timeAxisColumnWidth : preset.timeAxisColumnWidth,
                    resourceColumnWidth : this.resourceColumnWidth || preset.resourceColumnWidth || 100
                });
            }

            var view = this.getSchedulingView();

            view.setDisplayDateFormat(preset.displayDateFormat);

            if (this.getMode() === 'vertical') {
                view.setColumnWidth(this.resourceColumnWidth || preset.resourceColumnWidth || 100, true);
            }

            if (!noScroll) {
                if (isHorizontal) {
                    view.scrollHorizontallyTo(0);
                } else {
                    view.scrollVerticallyTo(0);
                }
            }
        }
    },

    /**
     * Method to get the current view preset of the timeline panel.
     * @return {String} The name of the currently active view preset
     */
    getViewPreset : function() {
        return this.viewPreset;
    },

    /**
     * Method to get the current start date of the scheduler
     * @return {Date} The start date
     */
    getStart: function () {
        return this.getStartDate();
    },

    /**
     * Method to get the current start date of the scheduler
     * @return {Date} The start date
     */
    getStartDate: function () {
        return this.timeAxis.getStart();
    },


    /**
     * Method to get the current end date of the scheduler
     * @return {Date} The end date
     */
    getEnd: function () {
        return this.getEndDate();
    },

    /**
     * Method to get the current end date of the scheduler
     * @return {Date} The end date
     */
    getEndDate: function () {
        return this.timeAxis.getEnd();
    },

    /**
     * Updates the widths of all the time columns to the supplied value. Only applicable when {@link #forceFit} is set to false.
     * @param {Number} width The new time column width
     */
    setTimeColumnWidth: function (width, preventRefresh) {
        this.timeAxisViewModel.setTickWidth(width, preventRefresh);
    },

    /**
     * @return {Number} width The time column width
     */
    getTimeColumnWidth: function () {
        return this.timeAxisViewModel.getTickWidth();
    },

    getRowHeight: function () {
        return this.timeAxisViewModel.getViewRowHeight();
    },

    /**
    * Moves the time axis forward in time in units specified by the view preset 'shiftUnit', and by the amount specified by the parameter or by the shiftIncrement config of the current view preset.
    * @param {Number} amount (optional) The number of units to jump forward
    */
    shiftNext: function (amount) {
        this.suspendLayouts && this.suspendLayouts();

        this.timeAxis.shiftNext(amount);

        this.suspendLayouts && this.resumeLayouts(true);
    },

    /**
    * Moves the time axis backward in time in units specified by the view preset 'shiftUnit', and by the amount specified by the parameter or by the shiftIncrement config of the current view preset.
    * @param {Number} amount (optional) The number of units to jump backward
    */
    shiftPrevious: function (amount) {
        this.suspendLayouts && this.suspendLayouts();

        this.timeAxis.shiftPrevious(amount);

        this.suspendLayouts && this.resumeLayouts(true);
    },

    /**
    * Convenience method to go to current date.
    */
    goToNow: function () {
        this.setTimeSpan(new Date());
    },

    /**
    * Changes the time axis timespan to the supplied start and end dates.
    * @param {Date} start The new start date
    * @param {Date} end (Optional) The new end date. If not supplied, the {@link Sch.preset.ViewPreset#defaultSpan} property of the current view preset will be used to calculate the new end date.
    */
    setTimeSpan: function (start, end) {
        if (this.timeAxis) {
            this.timeAxis.setTimeSpan(start, end);
        }
    },

    /**
    * Changes the time axis start date to the supplied date.
    * @param {Date} amount The new start date
    */
    setStart: function (date) {
        this.setTimeSpan(date);
    },

    /**
    * Changes the time end start date to the supplied date.
    * @param {Date} amount The new end date
    */
    setEnd: function (date) {
        this.setTimeSpan(null, date);
    },

    /**
    * Returns the {@link Sch.data.TimeAxis} instance in use.
    * @return {Sch.data.TimeAxis}
    */
    getTimeAxis: function () {
        return this.timeAxis;
    },


    /**
    * Scrolls the time line to the specified `date`.
    * @param {Date} date The date to which to scroll the time line
    */
    scrollToDate: function (date, animate) {
        var view = this.getSchedulingView();
        var coordinate = view.getCoordinateFromDate(date, true);

        this.scrollToCoordinate(coordinate, date, animate, false);
    },

    /**
    * Scrolls the time line so that specified `date` is in the center of the view.
    * @param {Date} date The date to which to scroll the time line
    * @param {Boolean} animate (optional) Whether or not scroll should be animated 
    */
    scrollToDateCentered: function (date, animate) {
        var view = this.getSchedulingView();
        var delta = 0;
        
        if (this.mode === 'horizontal') {
            delta = view.getBox().width / 2;
        } else {
            delta = view.getBox().height / 2;
        }

        var coordinate = Math.round(view.getCoordinateFromDate(date, true) - delta);
        this.scrollToCoordinate(coordinate, date, animate, true);
    },

    //private
    scrollToCoordinate: function (coordinate, date, animate, centered) {
        var view    = this.getSchedulingView();
        var me      = this;
        // Not currently have this date in a timeaxis
        if (coordinate < 0) {
            if (this.infiniteScroll) {
                // for infinite scroll we have a special formula to calculate adjustment borders
                // shiftToDate() will perform adjustment and then recall scrollToDate() again
                view.shiftToDate(date, centered);

            } else {
                // adjust the timeaxis first
                var halfVisibleSpan = (this.timeAxis.getEnd() - this.timeAxis.getStart()) / 2;

                this.setTimeSpan(new Date(date.getTime() - halfVisibleSpan), new Date(date.getTime() + halfVisibleSpan));

                if (centered) {
                    me.scrollToDateCentered(date, animate);
                } else {
                    me.scrollToDate(date, animate);
                }
            }

            return;
        }

        if (this.mode === 'horizontal') {
            view.scrollHorizontallyTo(coordinate, animate);
        } else {
            view.scrollVerticallyTo(coordinate, animate);
        }
        view.fireEvent('scroll', this, coordinate);
    },

    /**
     * Returns the center date of the currently visible timespan of scheduler.
     *
     * @return {Date} date Center date for the viewport.
     */
    getViewportCenterDate: function(){
        return this.getSchedulingView().getViewportCenterDate();
    },

    addCls : function() {
        throw 'Abstract method call';
    },

    removeCls : function() {
        throw 'Abstract method call';
    },

    registerRenderer : function(fn, scope) {
        this.renderers.push({
            fn      : fn,
            scope   : scope
        });
    },

    deregisterRenderer : function(fn, scope) {
        Ext.each(this.renderers, function(rend, i) {
            if (fn === rend) {
                Ext.Array.removeAt(this.renderers, i);
                return false;
            }
        });
    }

    /**
     * Returns the event store instance
     * @method getEventStore
     * @abstract
     * @return {Ext.data.AbstractStore}
     */
});

/**

 @class Sch.mixin.TimelinePanel
 @extends Sch.mixin.AbstractTimelinePanel
 A base mixing for {@link Ext.panel.Panel} classes, giving to the consuming panel the "time line" functionality.
 This means that the panel will be capabale to display a list of "events", ordered on the {@link Sch.data.TimeAxis time axis}.

 Generally, should not be used directly, if you need to subclass the scheduler panel, subclass the {@link Sch.panel.SchedulerGrid} or {@link Sch.panel.SchedulerTree}
 instead.

*/

if (!Ext.ClassManager.get("Sch.mixin.TimelinePanel")) {

Ext.define('Sch.mixin.TimelinePanel', {
    extend : 'Sch.mixin.AbstractTimelinePanel',

    requires : [
        'Sch.column.timeAxis.Horizontal',
        'Sch.preset.Manager',
        'Sch.patches.NodeCache',
        'Sch.patches.BufferedRenderer',
        'Sch.patches.RowSynchronizer',
        'Sch.patches.Chrome'
    ],

    mixins : [
        'Sch.mixin.Zoomable'
    ],

    /**
    * @cfg {Object} lockedGridConfig A custom config object used to initialize the left (locked) grid panel.
    */

    /**
    * @cfg {Object} schedulerConfig A custom config object used to initialize the right (schedule) grid panel.
    */

    /**
    * @cfg {String/Ext.Template} tooltipTpl
    * Template used to show a tooltip over a scheduled item, null by default (meaning no tooltip). The tooltip will be populated with the data in
    * record corresponding to the hovered element. See also {@link #tipCfg} and to provide your own custom data object for this
    * template, please see {@link Sch.mixin.TimelineView#getDataForTooltipTpl}.
    */

    /**
     * @cfg {Sch.mixin.TimelinePanel/String} partnerTimelinePanel A reference to another timeline panel (or a component id) that this panel should be 'partner' with.
     * If this config is supplied, this panel will:
     *
     * - Share and use the {@link Sch.data.TimeAxis} timeAxis from the partner panel.
     * - Synchronize the width of the two locked grid panels (after a drag of the splitter).
     * - Synchronize horizontal scrolling between two panels.
     */

    /**
     * @cfg {Number} bufferCoef
     *
     * This config defines the width of the left and right invisible parts of the timespan when {@link #infiniteScroll} set to `true`.
     *
     * It should be provided as a coefficient, which will be multiplied by the width of the scheduling area.
     *
     * For example, if `bufferCoef` is `5` and the panel view width is 200px then the timespan will be calculated to
     * have approximately 1000px (`5 * 200`) to the left and 1000px to the right of the visible area, resulting
     * in 2200px of totally rendered content.
     *
     * The timespan gets recalculated when the scroll position reaches the limits defined by the {@link #bufferThreshold} option.
     *
     */
    bufferCoef                  : 5,

    /**
     * @cfg {Number} bufferThreshold
     *
     * This config defines the horizontal scroll limit, which, when exceeded will cause a timespan shift.
     * The limit is calculated as the `panelWidth * {@link #bufferCoef} * bufferThreshold`. During scrolling, if the left or right side
     * has less than that of the rendered content - a shift is triggered.
     *
     * For example if `bufferCoef` is `5` and the panel view width is 200px and `bufferThreshold` is 0.2, then the timespan
     * will be shifted when the left or right side has less than 200px (5 * 200 * 0.2) of content.
     */
    bufferThreshold             : 0.2,

    /**
     * @cfg {Boolean} infiniteScroll
     *
     * True to automatically adjust the panel timespan during horizontal scrolling, when the scroller comes close to the left/right edges.
     *
     * The actually rendered timespan in this mode (and thus the amount of HTML in the DOM) is calculated based
     * on the {@link #bufferCoef} option. The moment when the timespan shift happens is determined by the {@link #bufferThreshold} value.
     */
    infiniteScroll              : false,

    /**
     * @cfg {Boolean} showCrudManagerMask set this to true to display a load mask during CRUD manager server requests. Note: works only if {@link #crudManager} is specified.
     */
    showCrudManagerMask         : true,

    waitingForAutoTimeSpan      : false,

    columnLinesFeature          : null,

    renderWaitListener          : null,

    schedulePinchThreshold      : 30,
    pinchStartDistanceX         : null,
    pinchStartDistanceY         : null,
    pinchDistanceX              : null,
    pinchDistanceY              : null,
    horizontalColumns           : null,
    verticalColumns             : null,
    calendarColumns             : null,
    forceDefineTimeSpanByStore  : false,

    /**
    * @cfg {Object} tipCfg
    * The {@link Ext.Tooltip} config object used to configure a tooltip (only applicable if tooltipTpl is set).
    */
    tipCfg : {
        cls         : 'sch-tip',

        showDelay   : 1000,
        hideDelay   : 0,

        autoHide    : true,
        anchor      : 'b'
    },

    /**
     * @event timeheaderclick
     * Fires after a click on a time header cell
     * @param {Sch.view.HorizontalTimeAxis} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The start date of the header cell
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event timeheaderdblclick
     * Fires after a double click on a time header cell
     * @param {Sch.view.HorizontalTimeAxis} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The end date of the header cell
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event timeheadercontextmenu
     * Fires after a right click on a time header cell
     * @param {Sch.view.HorizontalTimeAxis} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The start date of the header cell
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event scheduleclick
     * Fires after a click on the schedule area
     * @param {Sch.mixin.TimelinePanel} scheduler The scheduler object
     * @param {Date} clickedDate The clicked date
     * @param {Number} rowIndex The row index
     * @param {Sch.model.Resource} resource The resource, an event occured on
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event scheduledblclick
     * Fires after a doubleclick on the schedule area
     * @param {Sch.mixin.TimelinePanel} scheduler The scheduler object
     * @param {Date} clickedDate The clicked date
     * @param {Number} rowIndex The row index
     * @param {Sch.model.Resource} resource The resource, an event occured on
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event schedulecontextmenu
     * Fires after a context menu click on the schedule area
     * @param {Sch.mixin.TimelinePanel} scheduler The scheduler object
     * @param {Date} clickedDate The clicked date
     * @param {Number} rowIndex The row index
     * @param {Sch.model.Resource} resource The resource, an event occured on
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event schedulepinchstart
     * Fires after a click on the schedule area
     * @param {Sch.mixin.TimelinePanel} scheduler The scheduler object
     * @param {Date} clickedDate The clicked date
     * @param {Number} rowIndex The row index
     * @param {Sch.model.Resource} resource The resource, an event occured on
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event schedulepinch
     * Fires after a doubleclick on the schedule area
     * @param {Sch.mixin.TimelinePanel} scheduler The scheduler object
     * @param {Date} clickedDate The clicked date
     * @param {Number} rowIndex The row index
     * @param {Sch.model.Resource} resource The resource, an event occured on
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event schedulepinchend
     * Fires after a context menu click on the schedule area
     * @param {Sch.mixin.TimelinePanel} scheduler The scheduler object
     * @param {Date} clickedDate The pinched date
     * @param {Number} rowIndex The row index
     * @param {Sch.model.Resource} resource The resource, an event occured on
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - loadingText : 'Loading, please wait...'
     - savingText : 'Saving changes, please wait...'
     */

    inheritables : function () {

        return {
            // Configuring underlying table panel
            columnLines         : true,
            enableLocking       : true,
            lockable            : true,
            stateEvents         : ['viewchange'],
            syncRowHeight       : false,

            // EOF: Configuring underlying table panel
            cellTopBorderWidth  : 0,

            constructor : function (config) {
                config = config || {};

                if (this.layout === 'border') {
                    // HACK http://www.sencha.com/forum/showthread.php?287716-Ext.grid.locking.Lockable-GridPanel-layout-config&p=1051698#post1051698
                    config.layout = 'border';
                }

                this.callParent([config]);
            },

            // private
            initComponent : function () {

                if (this.partnerTimelinePanel) {

                    // Allow a cmp id to be passed in
                    if (typeof this.partnerTimelinePanel === 'string') {
                        this.partnerTimelinePanel = Ext.getCmp(this.partnerTimelinePanel);
                    }

                    this.timeAxisViewModel = this.partnerTimelinePanel.timeAxisViewModel;
                    this.timeAxis   = this.partnerTimelinePanel.getTimeAxis();
                    this.startDate  = this.timeAxis.getStart();
                    this.endDate    = this.timeAxis.getEnd();
                }


//                // for infinite scroll we turn timeaxis auto adjustment to get exact timeaxis.start date
//                // as a first left visible date tick
//                if (this.infiniteScroll) {
//                    this.autoAdjustTimeAxis     = false;
//                }

                this._initializeTimelinePanel();

                this.configureChildGrids();

                // Now the time axis view model is configured using the forceFit setting.
                // We never want the native Ext JS grid implementation of forceFit - disable it
                this.forceFit = false;

                this.configureColumns();

                var viewConfig      = this.normalViewConfig = this.normalViewConfig || {};
                var id              = this.getId();

                // Copy some properties to the view instance
                Ext.apply(this.normalViewConfig, {
                    id                      : id + '-timelineview',
                    eventPrefix             : this.autoGenId ? null : id,
                    timeAxisViewModel       : this.timeAxisViewModel,
                    eventBorderWidth        : this.eventBorderWidth,
                    timeAxis                : this.timeAxis,
                    readOnly                : this.readOnly,
                    mode                    : this.mode,
                    rtl                     : this.rtl,
                    cellBorderWidth         : this.cellBorderWidth,
                    cellTopBorderWidth      : this.cellTopBorderWidth,
                    cellBottomBorderWidth   : this.cellBottomBorderWidth,
                    infiniteScroll          : this.infiniteScroll,
                    bufferCoef              : this.bufferCoef,
                    bufferThreshold         : this.bufferThreshold
                });

                Ext.Array.forEach(
                    [
                        "eventRendererScope",
                        "eventRenderer",
                        "dndValidatorFn",
                        "resizeValidatorFn",
                        "createValidatorFn",
                        "tooltipTpl",
                        "validatorFnScope",
                        "eventResizeHandles",
                        "enableEventDragDrop",
                        "enableDragCreation",
                        "resizeConfig",
                        "createConfig",
                        "tipCfg",
                        "getDateConstraints"
                    ],
                    function (prop) {
                        if (prop in this) viewConfig[prop] = this[prop];
                    },
                    this
                );

                this.callParent(arguments);

                this.patchNavigationModel(this);

                this.setViewPreset(this.viewPreset, this.startDate || this.timeAxis.getStart(), this.endDate || this.timeAxis.getEnd(), true);

                // if no start/end dates specified let's get them from event store
                if (!this.startDate) {
                    var store       = this.getTimeSpanDefiningStore();

                    // if events already loaded
                    if (Ext.data.TreeStore && store instanceof Ext.data.TreeStore ? store.getRootNode().childNodes.length : store.getCount()) {
                        this.applyStartEndDatesFromStore();

                    // if timespan defining store is in state of loading
                    // or forceDefineTimeSpanByStore enabled
                    // we wait till the store gets loaded and only then refresh view
                    } else if (store.isLoading() || this.forceDefineTimeSpanByStore) {
                        this.bindAutoTimeSpanListeners();
                    }
                }

                var columnLines     = this.columnLines;

                if (columnLines) {
                    this.columnLinesFeature = new Sch.feature.ColumnLines(Ext.isObject(columnLines) ? columnLines : undefined);
                    this.columnLinesFeature.init(this);

                    this.columnLines    = true;
                }

                this.relayEvents(this.getSchedulingView(), [
                    /**
                    * @event beforetooltipshow
                    * Fires before the event tooltip is shown, return false to suppress it.
                    * @param {Sch.mixin.TimelinePanel} scheduler The scheduler object
                    * @param {Sch.model.Event} eventRecord The event record of the clicked record
                    */
                    'beforetooltipshow',

                    'scheduleclick',
                    'scheduledblclick',
                    'schedulecontextmenu',
                    'schedulepinch',
                    'schedulepinchstart',
                    'schedulepinchend'
                ]);

                this.on('boxready', this.__onBoxReady, this);

                // HACK, required since Ext has an async scroll sync mechanism setup which won't play nice with our "sync scroll" above.
                this.on('zoomchange', function () {
                    // After a zoom, the header is resized and Ext JS TablePanel reacts to the size change.
                    // Ext JS reacts after a short delay, so we cancel this task to prevent Ext from messing up the scroll sync
                    this.normalGrid.scrollTask.cancel();
                });

                // if we have CrudManager instance assigned, we should show and hide a load mask
                // But not with autoSync enabled, since that'll be a terrible user experience
                if (this.crudManager && !this.crudManager.autoSync && this.showCrudManagerMask) {
                    this.mon(this.crudManager, {
                        beforesend      : this.beforeCrudOperationStart,

                        synccanceled    : this.onCrudOperationComplete,
                        loadcanceled    : this.onCrudOperationComplete,
                        load            : this.onCrudOperationComplete,
                        sync            : this.onCrudOperationComplete,
                        loadfail        : this.onCrudOperationComplete,
                        syncfail        : this.onCrudOperationComplete,

                        scope           : this
                    });

                    // User might already have triggered a load operation
                    if (this.crudManager.isLoading()) {
                        this.beforeCrudOperationStart(this.crudManager, null, 'load');
                    }
                }

                this.afterInitComponent();
            },

            getState : function () {
                var me = this,
                    state = me.callParent(arguments);

                Ext.apply(state, {
                    viewPreset      : me.viewPreset,
                    startDate       : me.getStart(),
                    endDate         : me.getEnd(),
                    zoomMinLevel    : me.zoomMinLevel,
                    zoomMaxLevel    : me.zoomMaxLevel,
                    currentZoomLevel: me.currentZoomLevel
                });
                return state;
            },

            applyState : function (state) {
                var me = this;

                me.callParent(arguments);

                if (state && state.viewPreset) {
                    me.setViewPreset(state.viewPreset, state.startDate, state.endDate);
                }
                if (state && state.currentZoomLevel) {
                    me.zoomToLevel(state.currentZoomLevel);
                }
            },

            setTimeSpan : function () {
                if (this.waitingForAutoTimeSpan) {
                    this.unbindAutoTimeSpanListeners();
                }

                this.callParent(arguments);

                // if view was not initialized due to our refresh stopper the onTimeAxisViewModelUpdate method will not do a refresh
                // if that happened we do refresh manually
                if (!this.normalGrid.getView().viewReady) {
                    this.getView().refresh();
                }
            }
        };
    },


    bindAutoTimeSpanListeners : function () {
        var store                           = this.getTimeSpanDefiningStore();

        this.waitingForAutoTimeSpan         = true;

        // prevent panel refresh till eventStore gets loaded
        this.normalGrid.getView().on('beforerefresh', this.refreshStopper, this);
        this.lockedGrid.getView().on('beforerefresh', this.refreshStopper, this);

        this.mon(store, 'load', this.applyStartEndDatesFromStore, this);

        if (Ext.data.TreeStore && store instanceof Ext.data.TreeStore) {
            this.mon(store, 'rootchange', this.applyStartEndDatesFromStore, this);
            this.mon(store, 'nodeappend', this.applyStartEndDatesAfterTreeAppend, this);
        } else {
            this.mon(store, 'add', this.applyStartEndDatesFromStore, this);
        }
    },


    refreshStopper : function (view) {
        return view.store.getCount() === 0;
    },


    getTimeSpanDefiningStore : function () {
        throw "Abstract method called";
    },

    unbindAutoTimeSpanListeners : function () {
        this.waitingForAutoTimeSpan = false;

        var store   = this.getTimeSpanDefiningStore();

        // allow panel refresh back
        this.normalGrid.getView().un('beforerefresh', this.refreshStopper, this);
        this.lockedGrid.getView().un('beforerefresh', this.refreshStopper, this);

        // unbind listener
        store.un('load', this.applyStartEndDatesFromStore, this);

        if (Ext.data.TreeStore && store instanceof Ext.data.TreeStore) {
            store.un('rootchange', this.applyStartEndDatesFromStore, this);
            store.un('nodeappend', this.applyStartEndDatesAfterTreeAppend, this);
        } else {
            store.un('add', this.applyStartEndDatesFromStore, this);
        }
    },


    applyStartEndDatesAfterTreeAppend : function () {
        var store   = this.getTimeSpanDefiningStore();

        // Need to block the reading of the total store timespan until the store is done loading
        // With CRUD manager, we need the __loading flag since multiple append events are fired during load
        if (!store.isSettingRoot && !store.__loading) {
            this.applyStartEndDatesFromStore();
        }
    },


    applyStartEndDatesFromStore : function () {
        var store   = this.getTimeSpanDefiningStore();
        var span    = store.getTotalTimeSpan();

        // If event store contains events without duration, add a 1 mainUnit buffer to each side
        if (span.end && span.start && span.end - span.start === 0) {
            span.start = Sch.util.Date.add(span.start, this.timeAxis.mainUnit, -1);
            span.end   = Sch.util.Date.add(span.end, this.timeAxis.mainUnit, 1);
        }

        this.setTimeSpan(span.start || new Date(), span.end);
    },


    onLockedGridItemDblClick : function (grid, record, el, rowIndex, event) {
        if (this.mode === 'vertical' && record) {
            this.fireEvent('timeheaderdblclick', this, record.get('start'), record.get('end'), rowIndex, event);
        }
    },

    /**
    * Returns the view which renders the schedule and time columns. This method should be used instead of the usual `getView`,
    * since `getView` will return an instance of a special "locking" grid view, which has no scheduler-specific features.
    *
    * @return {Sch.mixin.SchedulerView} view A view implementing the {@link Sch.mixin.SchedulerView} mixin
    */
    getSchedulingView : function () {
        return this.normalGrid.getView();
    },

    getHorizontalTimeAxisColumn : function () {
        return this.getSchedulingView().getHorizontalTimeAxisColumn();
    },

    configureColumns : function () {

        var columns         = this.columns || [];

        // The 'columns' config can also be a config object for Ext.grid.header.Container
        if (columns.items) {
            columns = columns.items;
        } else {
            // Clone it to make sure we handle the case of a column array object put on the class prototype
            columns = this.columns = columns.slice();
        }

        var lockedColumns   = [];
        var normalColumns   = [];

        // Split locked and normal columns first
        Ext.Array.forEach(columns, function (column) {
            if (column.position === 'right') {
                if (!Ext.isNumber(column.width)) {
                    Ext.Error.raise('"Right" columns must have a fixed width');
                }
                column.locked = false;

                normalColumns.push(column);
            } else {
                column.locked = true;
                lockedColumns.push(column);
            }
            column.lockable = false;
        });

        Ext.Array.erase(columns, 0, columns.length);
        Ext.Array.insert(columns, 0, lockedColumns.concat(
            {
                xtype                   : 'timeaxiscolumn',
                timeAxisViewModel       : this.timeAxisViewModel,
                trackHeaderOver         : this.trackHeaderOver,
                renderer                : this.mainRenderer,
                scope                   : this
            }
        ).concat(normalColumns));

        // Save reference to original set of columns
        this.horizontalColumns = Ext.Array.clone(columns);

        this.verticalColumns = [
            Ext.apply({
                xtype                   : 'verticaltimeaxis',
                width                   : 100,
                timeAxis                : this.timeAxis,
                timeAxisViewModel       : this.timeAxisViewModel,
                cellTopBorderWidth      : this.cellTopBorderWidth,
                cellBottomBorderWidth   : this.cellBottomBorderWidth
            }, this.timeAxisColumnCfg || {})
        ];

        this.calendarColumns = [
            Ext.apply({
                xtype                   : 'verticaltimeaxis',
                width                   : 60,
                timeAxis                : this.timeAxis,
                timeAxisViewModel       : this.timeAxisViewModel,
                cellTopBorderWidth      : this.cellTopBorderWidth,
                cellBottomBorderWidth   : this.cellBottomBorderWidth
            }, this.calendarTimeAxisCfg || {})
        ];

        if (this.mode === 'vertical') {
            this.columns    = this.verticalColumns.concat(this.createResourceColumns(this.resourceColumnWidth || this.timeAxisViewModel.resourceColumnWidth));
            this.store      = this.timeAxis;
        } else if (this.mode === 'calendar') {
            // in order to build columns/rows for calendar view we need time axis with view preset consumed
            // but axis is filled only after columns are initialized thus can be changed only via 'reconfigure' method
            // than requires grid to be rendered.
            // We provide empty configs for columns and rows in order to make this procedure slightly faster
            // There is almost no other way untill timeaxis is filled before 'callParent' call.
            this.columns = [];
            this.store = null;
            this.on('afterrender', this.refreshCalendarColumns, this);
        }
    },


    mainRenderer : function (val, meta, rowRecord, rowIndex, colIndex) {
        var renderers       = this.renderers,
            resource        = this.mode === 'horizontal' || this.mode === 'calendar' ? rowRecord : this.resourceStore.getAt(colIndex),
            retVal          = '&nbsp;'; // To ensure cells always consume correct height

        // Ext doesn't clear the meta object between cells
        meta.rowHeight      = null;

        for (var i = 0; i < renderers.length; i++) {
            retVal          += renderers[i].fn.call(renderers[i].scope || this, val, meta, resource, rowIndex, colIndex) || '';
        }

        if (this.variableRowHeight) {
            // Set row height
            var view                = this.getSchedulingView();
            var defaultRowHeight    = this.getRowHeight();

            meta.style              = 'height:' + ((meta.rowHeight || defaultRowHeight) - view.cellTopBorderWidth - view.cellBottomBorderWidth) + 'px';
        }

        return retVal;
    },

    // Child grids sync code
    // ---------------------------------
    __onBoxReady : function () {
        var me = this;

        me.normalGrid.on({
            collapse    : me.onNormalGridCollapse,
            expand      : me.onNormalGridExpand,
            scope       : me
        });

        me.lockedGrid.on({
            collapse    : me.onLockedGridCollapse,
            itemdblclick: me.onLockedGridItemDblClick,
            scope       : me
        });

        if (this.partnerTimelinePanel) {
            if (this.partnerTimelinePanel.rendered) {
                this.setupPartnerTimelinePanel();
            } else {
                this.partnerTimelinePanel.on('boxready', this.setupPartnerTimelinePanel, this);
            }
        }

        if (Ext.supports.Touch) {
            this.getSchedulingView().on({
                schedulepinchstart : this.onSchedulePinchStart,
                schedulepinch      : this.onSchedulePinch,
                schedulepinchend   : this.onSchedulePinchEnd,
                scope              : this
            });
        }
    },


    onLockedGridCollapse : function () {
        if (this.normalGrid.collapsed) {
            this.normalGrid.expand();
        }
    },

    onNormalGridCollapse : function () {
        var me = this;

        //Hack for Gantt to prevent creating second expander when normal grid initially collapsed
        if (!me.normalGrid.reExpander) {
            me.normalGrid.reExpander = me.normalGrid.placeholder;
        }

        if (!me.lockedGrid.rendered) {
            me.lockedGrid.on('render', me.onNormalGridCollapse, me, { delay: 1 });
        } else {
            me.lockedGrid.flex = 1;
            me.lockedGrid.updateLayout();

            if (me.lockedGrid.collapsed) {
                me.lockedGrid.expand();
            }

            // Show a vertical scrollbar in locked grid if normal grid is collapsed
            me.addCls('sch-normalgrid-collapsed');
        }
    },

    onNormalGridExpand : function () {
        this.removeCls('sch-normalgrid-collapsed');

        delete this.lockedGrid.flex;
        this.lockedGrid.updateLayout();
    },

    onPartnerCollapseExpand : function (panel) {
        if (panel.getCollapsed()) {
            this.lockedGrid.collapse();
        } else {
            this.lockedGrid.expand();
        }
    },

    setupPartnerTimelinePanel : function () {

        // Sync locked grids by listening for splitter resize events of both locked grids.
        var otherPanel = this.partnerTimelinePanel;
        var externalSplitter = otherPanel.down('splitter');
        var ownSplitter = this.down('splitter');

        if (externalSplitter) {
            externalSplitter.on('dragend', function () {
                this.lockedGrid.setWidth(otherPanel.lockedGrid.getWidth());
            }, this);
        }

        if (ownSplitter) {
            ownSplitter.on('dragend', function () {
                otherPanel.lockedGrid.setWidth(this.lockedGrid.getWidth());
            }, this);
        }

        var lockedWidth = otherPanel.isVisible() ? otherPanel.lockedGrid.getWidth() : otherPanel.lockedGrid.width;

        // Ext 5.1.0 don't support initially collapsed locked grid, exception will be raised.
        // Ext 4.2.1 is outdated and have a bug that prevents this code from working.
        // It means that in 4.2.1 if locked grid is initially collapsed, width won't be synced until splitter is dragged
        if (otherPanel.lockedGrid.getCollapsed()) {
            // after locked grid is initially expanded we can sync width
            otherPanel.lockedGrid.on('viewready', function (panel) {
                this.lockedGrid.setWidth(panel.getWidth());
            }, this);
        } else {
            this.lockedGrid.setWidth(lockedWidth);
        }

        // if we change collapse state in process of layout update
        // component won't be collapsible/expandable anymore
        this.on('afterlayout', function () {
            if (otherPanel.lockedGrid.getCollapsed()) {
                this.lockedGrid.collapse();
            } else {
                this.lockedGrid.expand();
                this.lockedGrid.setWidth(lockedWidth);
            }
        }, this, { single : true });

        otherPanel.lockedGrid.on({
            collapse    : this.onPartnerCollapseExpand,
            expand      : this.onPartnerCollapseExpand,
            scope       : this
        });

        this.lockedGrid.on({
            collapse    : this.onPartnerCollapseExpand,
            expand      : this.onPartnerCollapseExpand,
            scope       : otherPanel
        });

        // sync scrolling with external timeline panel
        var otherView = otherPanel.getSchedulingView(),
            otherScrollSource = otherView.scrollManager ? otherView.scrollManager.scroller : otherView.getEl(),
            ownView = this.getSchedulingView(),
            ownScrollSource = ownView.scrollManager ? ownView.scrollManager.scroller : ownView.getEl(),
            activeScrollSource,
            resetFn = Ext.Function.createBuffered(function() {
                activeScrollSource = null;
            }, 300);

        // Need to prevent the view being scrolled by user from updating itself based on its partner also firing 'scroll' events
        var syncScroll = function (e, el) {
            var sourceView = el.id === ownView.id ? ownView : otherView;
            var targetView = el.id === ownView.id ? otherView : ownView;

            if (!activeScrollSource) {
                activeScrollSource = sourceView;
            }

            resetFn();

            if (targetView !== activeScrollSource) {
                targetView.setScrollX(sourceView.getScroll().left);
            }
        };

        otherView.mon(ownScrollSource, 'scroll', syncScroll);
        ownView.mon(otherScrollSource, 'scroll', syncScroll);

        // Update the 'viewPreset' property manually since it's a public property of the TimelinePanel.
        this.on('viewchange', function () {
            otherPanel.viewPreset = this.viewPreset;
        }, this);

        otherPanel.on('viewchange', function () {
            this.viewPreset = otherPanel.viewPreset;
        }, this);
    },
    // EOF child grids sync code --------------------------

    beforeCrudOperationStart : function (manager, params, type) {
        if (this.rendered) {
            this.setLoading({
                msg : type === 'load' ? this.L('loadingText') : this.L('savingText')
            });
        } else {
            Ext.destroy(this.renderWaitListener);
            this.renderWaitListener = this.on('render', Ext.Function.bind(this.beforeCrudOperationStart, this, Array.prototype.slice.apply(arguments)), this, {
                delay       : 1,
                destroyable : true
            });
        }
    },

    onCrudOperationComplete : function () {
        Ext.destroy(this.renderWaitListener);

        this.setLoading(false);
    },

    onSchedulePinchStart : function (view, e) {
        this.pinchStartDistanceX = Math.abs(e.touches[0].pageX - e.touches[1].pageX);
        this.pinchStartDistanceY = Math.abs(e.touches[0].pageY - e.touches[1].pageY);
    },

    onSchedulePinch : function (view, e) {
        this.pinchDistanceX = Math.abs(e.touches[0].pageX - e.touches[1].pageX);
        this.pinchDistanceY = Math.abs(e.touches[0].pageY - e.touches[1].pageY);
    },

    onSchedulePinchEnd   : function (view, e) {
        var xDistance = this.pinchDistanceX;
        var yDistance = this.pinchDistanceY;
        var isHorizontal = this.getMode()[0] === 'h';

        if (Math.abs(xDistance - this.pinchStartDistanceX) > this.schedulePinchThreshold) {
            var scaleX = Math.abs(xDistance / this.pinchStartDistanceX);

            if (isHorizontal) {
                scaleX > 1 ? this.zoomIn() : this.zoomOut();
            } else {
                this.timeAxisViewModel.setViewColumnWidth(scaleX * this.timeAxisViewModel.resourceColumnWidth);
            }
        }

        if (Math.abs(yDistance - this.pinchStartDistanceY) > this.schedulePinchThreshold) {
            var scaleY = Math.abs(yDistance / this.pinchStartDistanceY);

            view.setRowHeight(view.getRowHeight() * scaleY);
        }

        this.pinchStartDistanceX = this.pinchStartDistanceY = this.pinchDistanceX = this.pinchDistanceY = null;
    },

    // Patches navigation model to skip undesired programmatic row focusing if timeline row is about to be focused.
    // This prevents timeline view scrolling to the top/left when clicking a non-focused timeline view row.
    // https://www.assembla.com/spaces/bryntum/tickets/1795
    patchNavigationModel : function (me) {
        me.getView().getNavigationModel().focusItem = function (item) {
            item.addCls(this.focusCls);

            if ((Ext.isIE && !item.hasCls('sch-timetd')) ||          // For IE, avoid focus when clicking on any schedule cell
                (!Ext.isIE && me.getOrientation() === 'horizontal')) // For non-IE: in vertical or calendar view, skip scroll to top
            {
                item.focus();
            }
        };

        // https://www.sencha.com/forum/showthread.php?301110-Last-focused-item-is-not-synced-which-causes-scroll-jump
        var lockedView = me.lockedGrid.getView();
        var normalView = me.normalGrid.getView();

        lockedView.on('rowclick', function (view, record, tr, rowIndex) {
            if (normalView.lastFocused) {
                normalView.lastFocused.rowIdx = rowIndex;
                normalView.lastFocused.record = record;
            }
        });

        normalView.on('rowclick', function (view, record, tr, rowIndex) {
            if (lockedView.lastFocused) {
                lockedView.lastFocused.rowIdx = rowIndex;
                lockedView.lastFocused.record = record;
            }
        });
    },

    configureChildGrids : function () {
        var me = this;

        // Make local copies of these configs in case someone puts them on the prototype of a subclass.
        me.lockedGridConfig = Ext.apply({}, me.lockedGridConfig || {});
        me.normalGridConfig = Ext.apply({}, me.schedulerConfig || me.normalGridConfig || {});

        var lockedGrid = me.lockedGridConfig,
            normalGrid = me.normalGridConfig;

        if (me.lockedXType) {
            lockedGrid.xtype = me.lockedXType;
        }

        if (me.normalXType) {
            normalGrid.xtype = me.normalXType;
        }

        // Configure the child grids
        Ext.applyIf(lockedGrid, {
            useArrows         : true,
            split             : true,
            animCollapse      : false,
            collapseDirection : 'left',
            trackMouseOver    : false,
            region            : 'west'
        });

        Ext.applyIf(normalGrid, {
            viewType : me.viewType,
            layout   : 'fit',

            enableColumnMove   : false,
            enableColumnResize : false,
            enableColumnHide   : false,
            trackMouseOver     : false,

            collapseDirection : 'right',
            collapseMode      : 'placeholder',

            animCollapse : false,
            region       : 'center'
        });

        if (me.mode === 'vertical') {
            lockedGrid.store = normalGrid.store = me.timeAxis;
        }

        if (lockedGrid.width) {
            // User has specified a fixed width for the locked section, disable the syncLockedWidth method
            me.syncLockedWidth = Ext.emptyFn;
            // Enable scrollbars for locked section
            lockedGrid.scroll = Ext.supports.Touch ? 'both' : 'horizontal';
            lockedGrid.scrollerOwner = true;
        }
    },

    afterInitComponent : function () {
        var me = this;

        var lockedView = me.lockedGrid.getView();
        var normalView = me.normalGrid.getView();
        var isTree = Ext.data.TreeStore && me.store instanceof Ext.data.TreeStore;

        if (me.normalGrid.collapsed) {
            // Need to workaround this, child grids cannot be collapsed initially
            me.normalGrid.collapsed = false;

            // Note, for the case of buffered view/store we need to wait for the view box to be ready before collapsing
            // since the paging scrollbar reads the view height during setup. When collapsing too soon, its viewSize will be 0.
            normalView.on('boxready', function () {
                me.normalGrid.collapse();
            }, me, { delay : 10 });
        }

        if (me.lockedGrid.collapsed) {
            if (lockedView.bufferedRenderer) lockedView.bufferedRenderer.disabled = true;
        }

        // Without this fix, scrolling on Mac Chrome does not work in locked grid
        if (Ext.getScrollbarSize().width === 0) {
            // https://www.assembla.com/spaces/bryntum/support/tickets/252
            lockedView.addCls('sch-ganttpanel-force-locked-scroll');
        }

        if (isTree) {
            this.setupLockableFilterableTree();
        }

        // HACK, no sane way of getting rid of grid column menu items (as of 4.2.1).
        // Grouping view overwrites showMenuBy property
        // http://www.sencha.com/forum/showthread.php?269612-Config-to-get-rid-of-Lock-Unlock-column-options&p=987653#post987653
        this.on('afterrender', function() {

            var showMenuBy = this.lockedGrid.headerCt.showMenuBy;

            this.lockedGrid.headerCt.showMenuBy = function () {
                showMenuBy.apply(this, arguments);

                me.showMenuBy.apply(this, arguments);
            };
        });
    },

    setupLockableFilterableTree : function () {
        var me = this;
        var lockedView = me.lockedGrid.getView();

        // enable filtering support for trees
        var filterableProto = Sch.mixin.FilterableTreeView.prototype;

        lockedView.initTreeFiltering = filterableProto.initTreeFiltering;
        lockedView.onFilterChangeStart = filterableProto.onFilterChangeStart;
        lockedView.onFilterChangeEnd = filterableProto.onFilterChangeEnd;
        lockedView.onFilterCleared = filterableProto.onFilterCleared;
        lockedView.onFilterSet = filterableProto.onFilterSet;

        lockedView.initTreeFiltering();
    },

    showMenuBy : function (t, header) {
        var menu = this.getMenu(),
            unlockItem = menu.down('#unlockItem'),
            lockItem = menu.down('#lockItem'),
            sep = unlockItem.prev();

        sep.hide();
        unlockItem.hide();
        lockItem.hide();
    },

    /**
     * Changes the timeframe of the scheduling chart to fit all the events in it.
     * @param {Object} [options] Options object for the zooming operation.
     * @param {Integer} [options.leftMargin] Defines margin in pixel between the first event start date and first visible date
     * @param {Integer} [options.rightMargin] Defines margin in pixel between the last event end date and last visible date
     */
    zoomToFit : function (options) {
        options = Ext.apply({
            adjustStart : 1,
            adjustEnd   : 1
        }, options);

        var eventStore = this.getEventStore();
        var span = eventStore.getTotalTimeSpan();

        if (this.zoomToSpan(span, options) === null) {
            // if no zooming was performed - fit columns to view space
            this.getSchedulingView().fitColumns();
        }
    }
}, function () {
    var MIN_EXT_VERSION = '5.1.0';

    Ext.apply(Sch, {
        /*PKGVERSION*/VERSION : '3.0.6'
    });

    // DELETE THIS CHECK IF YOU WANT TO RUN AGAINST AN OLDER UNSUPPORTED EXT JS VERSION
    if (Ext.versions.extjs.isLessThan(MIN_EXT_VERSION)) {
        var c = console;
        c && c.log('The Ext JS version you are using needs to be updated to at least ' + MIN_EXT_VERSION);
    }
});

}

/**

@class Sch.panel.TimelineGridPanel
@extends Ext.grid.Panel
@mixin Sch.mixin.TimelinePanel

Internal class. 

*/
Ext.define("Sch.panel.TimelineGridPanel", {
    extend  : "Ext.grid.Panel",
    mixins  : [
        'Sch.mixin.Localizable',
        'Sch.mixin.TimelinePanel'
    ],
    subGridXType            : 'gridpanel',

    initComponent : function() {
        this.callParent(arguments);
        this.getSchedulingView()._initializeTimelineView();
    }
}, function() {
    this.override(Sch.mixin.TimelinePanel.prototype.inheritables() || {});
});
/**

 @class Sch.panel.TimelineTreePanel
 @extends Ext.tree.Panel
 @mixin Sch.mixin.TimelinePanel

 Internal class.

 */
if (!Ext.ClassManager.get("Sch.panel.TimelineTreePanel")) {

Ext.define("Sch.panel.TimelineTreePanel", {
    extend   : "Ext.tree.Panel",
    requires : [
        // need to require grid panel too here, because one of the sub-grids will be a normal grid
        'Ext.grid.Panel',
        'Ext.data.TreeStore',
        // will be used in the `setupLockableTree` of lockable mixin
        'Sch.mixin.FilterableTreeView',

        'Sch.patches.ColumnResizeTree'
    ],
    mixins   : [
        'Sch.mixin.Localizable',
        'Sch.mixin.TimelinePanel'
    ],

    useArrows   : true,
    rootVisible : false,
    lockedXType : 'treepanel',

    initComponent : function () {
        this.callParent(arguments);
        this.getSchedulingView()._initializeTimelineView();
    }
}, function () {
    this.override(Sch.mixin.TimelinePanel.prototype.inheritables() || {});
});

}

/**
@class Sch.plugin.Printable

Plugin (ptype = 'scheduler_printable') for printing an Ext Scheduler instance. Please note that this will not generate a picture perfect
 printed version, due to various limitations in the browser print implementations. If you require a high quality print, you should use the Export plugin instead and first export to PDF.

 To use this plugin, add it to scheduler as usual. The plugin will add an additional `print` method to the scheduler:

        var scheduler = Ext.create('Sch.panel.SchedulerGrid', {
            ...

            resourceStore   : resourceStore,
            eventStore      : eventStore,

            plugins         : [
                Ext.create('Sch.plugin.Printable', {
                    // default values
                    docType             : '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">',
                    autoPrintAndClose   : true
                })
            ]
        });

        ...

        scheduler.print();

In the opened print window, a special 'sch-print-body' CSS class will be added to the BODY element. You can use this to
 further customize the printed contents.

*/
Ext.define("Sch.plugin.Printable", {
    extend          : 'Ext.AbstractPlugin',

    alias           : 'plugin.scheduler_printable',

    requires        : [
        'Ext.XTemplate'
    ],

    lockableScope   : 'top',

    /**
     * @cfg {String} docType This is the DOCTYPE to use for the print window. It should be the same DOCTYPE as on your application page.
     */
    docType             : '<!DOCTYPE HTML>',

    /**
     * An empty function by default, but provided so that you can perform a custom action
     * before the print plugin extracts data from the scheduler.
     * @param {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} scheduler The scheduler instance
     * @method beforePrint
     */
    beforePrint         : Ext.emptyFn,

    /**
     * An empty function by default, but provided so that you can perform a custom action
     * after the print plugin has extracted the data from the scheduler.
     * @param {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} scheduler The scheduler instance
     * @method afterPrint
     */
    afterPrint          : Ext.emptyFn,

    /**
     * @cfg {Boolean} autoPrintAndClose True to automatically call print and close the new window after printing. Default value is `true`
     */
    autoPrintAndClose   : true,

     /**
     * @cfg {Boolean} fakeBackgroundColor True to reset background-color of events and enable use of border-width to fake background color (borders print by default in every browser). Default value is `true`
     */
    fakeBackgroundColor : true,

    scheduler           : null,

    // private, the template for the new window
    mainTpl        : null,

    constructor : function(config) {
        Ext.apply(this, config);

        if (!this.mainTpl) {

            this.mainTpl = new Ext.XTemplate('{docType}' +
                '<html class="' + Ext.baseCSSPrefix + 'border-box {htmlClasses}">' +
                '<head>' +
                '<meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />' +
                '<title>{title}</title>' +
                '{styles}' +
                '</head>' +
                '<body class="sch-print-body {bodyClasses}">' +
                '<div class="sch-print-ct {componentClasses}" style="width:{totalWidth}px">' +
                '<div class="sch-print-headerbg" style="border-left-width:{totalWidth}px;height:{headerHeight}px;"></div>' +
                '<div class="sch-print-header-wrap">' +
                '{[this.printLockedHeader(values)]}' +
                '{[this.printNormalHeader(values)]}' +
                '</div>' +
                '{[this.printLockedGrid(values)]}' +
                '{[this.printNormalGrid(values)]}' +
                '</div>' +
                '<script type="text/javascript">' +
                '{setupScript}' +
                '</script>' +
                '</body>' +
                '</html>',
            {
                printLockedHeader : function (values) {
                    var str = '';

                    if (values.lockedGrid) {
                        str += '<div style="left:-' + values.lockedScroll + 'px;margin-right:-' + values.lockedScroll + 'px;width:' + (values.lockedWidth + values.lockedScroll) + 'px"';
                        str += 'class="sch-print-lockedheader ' + values.lockedGrid.headerCt.el.dom.className + '">';
                        str += values.lockedHeader;
                        str += '</div>';
                    }
                    return str;
                },
                printNormalHeader : function (values) {
                    var str = '';

                    if (values.normalGrid) {
                        str += '<div style="left:' + (values.lockedGrid ? values.lockedWidth : '0') + 'px;width:' + values.normalWidth + 'px;" class="sch-print-normalheader ' + values.normalGrid.headerCt.el.dom.className + '">';
                        str += '<div style="margin-left:-' + values.normalScroll + 'px">' + values.normalHeader + '</div>';
                        str += '</div>';
                    }
                    return str;
                },
                printLockedGrid   : function (values) {
                    var str = '';

                    if (values.lockedGrid) {
                        str += '<div id="lockedRowsCt" style="left:-' + values.lockedScroll + 'px;margin-right:-' + values.lockedScroll + 'px;width:' + (values.lockedWidth + values.lockedScroll) + 'px;top:' + values.headerHeight + 'px;" class="sch-print-locked-rows-ct ' + values.innerLockedClasses + ' ' + Ext.baseCSSPrefix + 'grid-inner-locked">';
                        str += values.lockedRows;
                        str += '</div>';
                    }
                    return str;
                },
                printNormalGrid   : function (values) {
                    var str = '';

                    if (values.normalGrid) {
                        str += '<div id="normalRowsCt" style="left:' + (values.lockedGrid ? values.lockedWidth : '0') + 'px;top:' + values.headerHeight + 'px;width:' + values.normalWidth + 'px" class="sch-print-normal-rows-ct ' + values.innerNormalClasses + '">';
                        str += '<div style="position:relative;overflow:visible;margin-left:-' + values.normalScroll + 'px">' + values.normalRows + '</div>';
                        str += '</div>';
                    }
                    return str;
                }
            });
        }
    },

    init : function(scheduler) {
        this.scheduler = scheduler;

        scheduler.print = Ext.Function.bind(this.print, this);
    },

    // private
    getGridContent : function(component) {
        var normalGrid = component.normalGrid,
            lockedGrid = component.lockedGrid,
            lockedView = lockedGrid.getView(),
            normalView = normalGrid.getView(),
            header, lockedRows, normalRows, lockedScroll, normalScroll,
            normalWidth, lockedWidth;

        this.beforePrint(component);

        if (lockedGrid.collapsed && !normalGrid.collapsed){
            normalWidth = lockedGrid.getWidth() + normalGrid.getWidth();
        } else {
            normalWidth = normalGrid.getWidth();
            lockedWidth = lockedGrid.getWidth();
        }

        // Render rows
        var records  = lockedView.store.getRange();
        lockedRows   = lockedView.tpl.apply(lockedView.collectData(records, 0));
        normalRows   = normalView.tpl.apply(normalView.collectData(records, 0));
        lockedScroll = lockedView.el.getScroll().left;
        normalScroll = normalView.el.getScroll().left;

        var div = document.createElement('div');
        div.innerHTML = lockedRows;
        // Need to manually set a width on the table el
        div.firstChild.style.width = lockedView.el.dom.style.width;

        lockedRows = div.innerHTML;

        // Print additional markup produced by lines plugins, zones plugins etc
        if (Sch.feature && Sch.feature.AbstractTimeSpan) {
            var toIterate = (component.plugins || []).concat(component.normalGrid.plugins || []).concat(component.columnLinesFeature || []);
            Ext.each(toIterate, function(plug) {
                if (plug instanceof Sch.feature.AbstractTimeSpan && plug.generateMarkup) {
                    normalRows = plug.generateMarkup(true) + normalRows;
                }
            });
        }

        this.afterPrint(component);

        return {
            normalHeader       : normalGrid.headerCt.el.dom.innerHTML,
            lockedHeader       : lockedGrid.headerCt.el.dom.innerHTML,
            lockedGrid         : lockedGrid.collapsed ? false : lockedGrid,
            normalGrid         : normalGrid.collapsed ? false : normalGrid,
            lockedRows         : lockedRows,
            normalRows         : normalRows,
            lockedScroll       : lockedScroll,
            normalScroll       : normalScroll,
            lockedWidth        : lockedWidth - (Ext.isWebKit ? 1 : 0),
            normalWidth        : normalWidth,
            headerHeight       : normalGrid.headerCt.getHeight(),
            innerLockedClasses : lockedGrid.view.el.dom.className,
            innerNormalClasses : normalGrid.view.el.dom.className + (this.fakeBackgroundColor ? ' sch-print-fake-background' : ''),
            width              : component.getWidth()
        };
    },

    getStylesheets : function() {
        return Ext.getDoc().select('link[rel="stylesheet"]');
    },

    /**
     * Prints a scheduler panel. This method will be aliased to the main scheduler instance, so you can call it directly:
     *
     *      scheduler.print()
     */
    print : function() {
        var component = this.scheduler;

        if (!(this.mainTpl instanceof Ext.Template)) {
            // Compile the tpl upon first call
            var headerRowHeight = 22;

            this.mainTpl = new Ext.XTemplate(this.mainTpl, {
                compiled : true,
                disableFormats : true
            });
        }

        var v = component.getView(),
            styles = this.getStylesheets(),
            ctTmp = Ext.get(Ext.core.DomHelper.createDom({
                tag : 'div'
            })),
            styleFragment;

        styles.each(function(s) {
            ctTmp.appendChild(s.dom.cloneNode(true));
        });

        styleFragment = ctTmp.dom.innerHTML + '';

        var gridContent = this.getGridContent(component),
            html = this.mainTpl.apply(Ext.apply({
                waitText            : this.waitText,
                docType             : this.docType,
                htmlClasses         : Ext.getBody().parent().dom.className,
                bodyClasses         : Ext.getBody().dom.className,
                componentClasses    : component.el.dom.className,
                title               : (component.title || ''),
                styles              : styleFragment,
                totalWidth          : component.getWidth(),
                setupScript         : ("window.onload = function(){ (" + this.setupScript.toString() + ")(" +
                    component.syncRowHeight + ", " + this.autoPrintAndClose + ", " + Ext.isChrome + ", " + Ext.isIE +
                "); };")
            }, gridContent));

        var win             = window.open('', 'printgrid');

        // this crazy case (there's a window but win.document is null) happens sometimes in IE10 during testing in automation mode
        if (!win || !win.document) return false;

        // Assign to this for testability, need a reference to the opened window
        this.printWindow    = win;

        win.document.write(html);
        win.document.close();
    },

    // Script executed in the newly open window, to sync row heights
    setupScript : function (syncRowHeight, autoPrintAndClose, isChrome, isIE) {
        var syncHeightAndPrint  = function () {
            if (syncRowHeight) {
                var lockedTableCt = document.getElementById('lockedRowsCt'),
                    normalTableCt = document.getElementById('normalRowsCt'),

                    //checks added in case of hidden/collapsed grids
                    lockedRows = lockedTableCt && lockedTableCt.getElementsByTagName('tr'),
                    normalRows = normalTableCt && normalTableCt.getElementsByTagName('tr'),
                    count      = normalRows && lockedRows ? normalRows.length : 0;

                for (var i = 0; i < count; i++) {
                    var normalHeight    = normalRows[ i ].clientHeight;
                    var lockedHeight    = lockedRows[ i ].clientHeight;

                    var max             = Math.max(normalHeight, lockedHeight) + 'px';

                    lockedRows[ i ].style.height = normalRows[ i ].style.height = max;
                }
            }

            // Let's make special mark saying that document is loaded. This is needed for test purposes.
            document._loaded  = true;

            if (autoPrintAndClose) {
                window.print();
                // Chrome cannot print the page if you close the window being printed
                if (!isChrome) {
                    window.close();
                }
            }
        };

        if (isIE)
            // TODO: probably we don't need this anymore, as we now use window.onload to call setupScript
            setTimeout(syncHeightAndPrint, 0);
        else
            syncHeightAndPrint();
    }
});

/**
 @class Sch.plugin.exporter.AbstractExporter
 @extends Ext.util.Observable

 This class represents the base implementation of an exporter.
 An exporter extracts the provided component content and packs it into array of pages (based on provided export settings and implemented algorithm).
 The main entry point for an exporter that launches the extraction process is {@link #extractPages} method:

             exporter.extractPages(component, config, function (pages) {

                alert(pages.length + " extracted");

                ...

             }, me);


*/
Ext.define('Sch.plugin.exporter.AbstractExporter', {

    extend                  : 'Ext.util.Observable',

    requires                : [
        'Ext.dom.Element',
        'Ext.core.DomHelper'
    ],

    mixins                  : ['Sch.mixin.Localizable'],

    /**
     * @cfg {Number} pageHeaderHeight
     * Header height. Amount of space for {@link #headerTpl the page header}.
     */
    pageHeaderHeight        : 41,

    /**
     * @cfg {Number} pageFooterHeight
     * Footer height. Amount of space for {@link #footerTpl the page footer}.
     */
    pageFooterHeight        : 0,

    bufferedHeightMargin    : 25,

    /**
     * @property {Number} paperWidth
     * Paper width. Calculated based on provided page format and DPI resolution.
     */
    paperWidth              : 0,

    /**
     * @property {Number} paperHeight
     * Paper height. Calculated based on provided page format and DPI resolution.
     */
    paperHeight             : 0,

    /**
     * @property {Number} printHeight
     * Paper height that can be used for printing rows. Calculated as {@link #paperHeight} minus header heights.
     */
    printHeight             : 0,

    lockedRowsHeight        : 0,

    normalRowsHeight        : 0,

    iterateTimeout          : 10,

    /**
     * @cfg {String} tableSelector
     * The selector for the row container used for both normalGrid and lockedGrid.
     */
    tableSelector           : undefined,

    /**
     * @property {Ext.dom.Element} currentPage
     * Current page being extracted.
     */
    currentPage             : undefined,

    /**
     * @cfg {Function} headerTplDataFn
     * If specified the function result will be applied to {@link #getHeaderTplData} result.
     * To define the scope please use {@link #headerTplDataFnScope}.
     */
    headerTplDataFn        : null,

    /**
     * @cfg {Function} footerTplDataFn
     * If specified the function result will be applied to {@link #getFooterTplData} result.
     * To define the scope please use {@link #footerTplDataFnScope}.
     */
    footerTplDataFn        : null,

    /**
     * @cfg {Object} headerTplDataFnScope The scope for {@link #footerTplDataFn} template method.
     */
    headerTplDataFnScope   : null,

    /**
     * @cfg {Object} footerTplDataFnScope The scope for {@link #footerTplDataFn} template method.
     */
    footerTplDataFnScope   : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - name    : 'Exporter'
     */

    config                      : {
        /**
         * @cfg {String} exporterId
         * Exporter identifier. Has to be unique among other exporters when you register in in {@link Sch.plugin.Export} instance.
         */
        exporterId              : 'abstractexporter',
        /**
         * Exporter name. By default will be taken from the class {@link #l10n locale}.
         * @cfg {String}
         */
        name                    : '',

        translateURLsToAbsolute : true,

        expandAllBeforeExport   : false,

        /**
         * @cfg {String} headerTpl
         * Template of an extracted page header.
         */
        headerTpl               : '<div class="sch-export-header" style="height:{height}px; width:{width}px"><h2>{pageNo}/{totalPages}</h2></div>',

        /**
         * @cfg {String/Ext.XTemplate} tpl
         * Template of an extracted page.
         */
        tpl                     : '<!DOCTYPE html>' +
            '<html class="' + Ext.baseCSSPrefix + 'border-box {htmlClasses}">' +
            '<head>' +
            '<meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />' +
            '<title>{title}</title>' +
            '{styles}' +
            '</head>' +
            '<body class="' + Ext.baseCSSPrefix + 'webkit sch-export {bodyClasses}">' +
            '{header}' +
            '<div class="{componentClasses}" style="height:{bodyHeight}px; width:{totalWidth}px; position: relative !important">' +
            '{HTML}' +
            '</div>' +
            '{footer}' +
            '</body>' +
            '</html>',

        /**
         * @cfg {String} footerTpl
         * Template of an extracted page footer.
         */
        footerTpl               : ''

    },

    //private placeholder for provided callback functions passed in extractPages
    callbacks               : undefined,

    //private String errorMessage, when internally set this message will be displayed in a pop-up message.
    error                   : undefined,

    /**
     * @property {Array[Object]} extractedPages Collection of extracted pages.
     */
    extractedPages          : undefined,

    /**
     * @property {Number} numberOfPages Total number of pages extracted.
     */
    numberOfPages           : 0,

    constructor : function (config) {
        var me  = this;

        config  = config || {};

        me.callParent(arguments);

        // initConfig thinks that we're trying to override methods so we have to delete following
        delete config.getUserHeaderTplData;
        delete config.getUserFooterTplData;

        me.initConfig(config);

        if (!config.tableSelector) {
            me.tableSelector    = '.' + Ext.baseCSSPrefix + 'grid-item-container';
        }

        // get the exporter name from locale (if not provided explicitly)
        if (!config.name) me.setName(me.L('name'));
    },

    setHeaderTpl : function (tpl) {
        this.headerTpl = this.getTplInstance(tpl);
    },

    getHeaderTpl : function () {
       return this.headerTpl;
    },

    setTpl : function (tpl) {
        this.tpl = this.getTplInstance(tpl);
    },

    getTpl : function () {
        return this.tpl;
    },

    setFooterTpl : function (tpl) {
        this.footerTpl = this.getTplInstance(tpl);
    },

    getFooterTpl : function () {
        return this.footerTpl;
    },

    getTplInstance : function (tpl) {
        return (tpl && !tpl.isTemplate) ? new Ext.XTemplate(tpl, { disableFormats : true }) : tpl;
    },

    /**
     * @protected
     * Returns the CSS classes for BODY element of extracted page. Override this if you need to customize exported pages CSS classes.
     * @return {String} CSS classes.
     */
    getBodyClasses : function () {
        var re      = new RegExp(Ext.baseCSSPrefix + 'ie\\d?|' + Ext.baseCSSPrefix + 'gecko', 'g'),
            result  = Ext.getBody().dom.className.replace(re, '');

        if (Ext.isIE) {
            result  += ' sch-ie-export';
        }

        return result;
    },

    /**
     * @protected
     * Returns the CSS classes for element containing exported component. Override this if you need to customize exported pages CSS classes.
     * @return {String} CSS classes.
     */
    getComponentClasses : function () {
        return this.getComponent().el.dom.className;
    },

    /**
     * Sets the component being exported.
     * @param {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} component The component being exported.
     */
    setComponent : function (component) {
        var me                  = this;

        me.component            = component;
        me.view                 = component.getSchedulingView();
        me.normalGrid           = component.normalGrid;
        me.lockedGrid           = component.lockedGrid;
        me.normalView           = component.normalGrid.view;
        me.lockedView           = component.lockedGrid.view;
        me.lockedBodySelector   = '#' + me.lockedView.getId();
        me.normalBodySelector   = '#' + me.normalView.getId();
        me.lockedHeader         = me.lockedGrid.headerCt;
        me.normalHeader         = me.normalGrid.headerCt;
        me.headerHeight         = me.normalHeader.getHeight();

        // page height w/o component headers
        me.printHeight = Math.floor(me.paperHeight) - me.headerHeight - (me.exportConfig.showHeader ? me.pageHeaderHeight : 0) - (me.exportConfig.showFooter ? me.pageFooterHeight : 0);

        me.saveComponentState(component);
    },

    /**
     * Returns the component being exported.
     * @return {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} The component being exported.
     */
    getComponent : function () {
        return this.component;
    },


    /**
     * @private
     * Applies the selected paper size based on export configuration and {@link #paperSizes} config. Calculates {@link #paperWidth} and {@link #paperHeight} properties.
     */
    setPaperSize : function (pageSize, orientation) {
        var me          = this;

        //size of paper we will be printing on. take orientation into account
        if (orientation === 'landscape') {
            me.paperWidth   = pageSize.height;
            me.paperHeight  = pageSize.width;
        } else {
            me.paperWidth   = pageSize.width;
            me.paperHeight  = pageSize.height;
        }
    },

    /**
     * @return {String} returns the format of the current export operation.
     */
    getPaperFormat : function () {
        return this.exportConfig.format;
    },


    /**
     * @private
     * Returns whether the component uses buffered rendering.
     * @return {boolean} `true` if the underlying component uses buffered rendering.
     */
    isBuffered : function () {
        return !!this.getBufferedRenderer();
    },

    /**
     * @private
     * Returns the normal grid buffered renderer instance (if the component uses buffered rendering).
     * @return {Ext.grid.plugin.BufferedRendererView} The normal grid buffered renderer instance.
     */
    getBufferedRenderer : function () {
        return this.view.bufferedRenderer;
    },

    /**
     * @protected
     * Applies the passed date range to the component.
     * @param {Object} config Export configuration.
     */
    setComponentRange : function (config) {
        var me          = this,
            component   = me.getComponent(),
            view        = me.view,
            newStart,
            newEnd;

        // if we export a part of scheduler
        if (config.range !== 'complete') {

            switch (config.range) {
                case 'date' :
                    newStart    = new Date(config.dateFrom);
                    newEnd      = new Date(config.dateTo);

                    // ensure that specified period has at least a day
                    if (Sch.util.Date.getDurationInDays(newStart, newEnd) < 1) {
                        newEnd  = Sch.util.Date.add(newEnd, Sch.util.Date.DAY, 1);
                    }

                    newStart    = Sch.util.Date.constrain(newStart, component.getStart(), component.getEnd());
                    newEnd      = Sch.util.Date.constrain(newEnd, component.getStart(), component.getEnd());
                    break;

                case 'current' :
                    var visibleSpan = view.getVisibleDateRange();
                    newStart        = visibleSpan.startDate;
                    newEnd          = visibleSpan.endDate || view.timeAxis.getEnd();

                    if (config.cellSize) {
                        // will change columns width to provided value
                        var cellSize = config.cellSize;

                        me.timeColumnWidth = cellSize[0];

                        if (me.timeColumnWidth) {
                            component.setTimeColumnWidth(me.timeColumnWidth);
                        }

                        // change the row height only if value is provided
                        if (cellSize.length > 1) {
                            me.view.setRowHeight(cellSize[1]);
                        }
                    }

                    break;
            }

            // set specified time frame
            component.setTimeSpan(newStart, newEnd);
        }

        me.ticks  = component.timeAxis.getTicks();

    },

    /**
     * @protected
     * Get links to the stylesheets of current page.
     */
    getStylesheets : function() {
        var translate   = this.translateURLsToAbsolute,
            styleSheets = Ext.getDoc().select('link[rel="stylesheet"]'),
            ctTmp       = Ext.get(Ext.core.DomHelper.createDom({
                tag : 'div'
            })),
            stylesString;

        styleSheets.each(function(s) {
            var node    = s.dom.cloneNode(true);
            // put absolute URL to node `href` attribute
            translate && node.setAttribute('href', s.dom.href);
            ctTmp.appendChild(node);
        });

        stylesString = ctTmp.dom.innerHTML + '';

        return stylesString;
    },


    // Since export is a sync operation for now, all plugins drawing lines & zones need to be temporarily adjusted
    // to draw their content synchronously.
    forEachTimeSpanPlugin : function (component, fn, scope) {
        if (Sch.feature && Sch.feature.AbstractTimeSpan) {

            var me = this;
            var plugins = (component.plugins || []).concat(component.normalGrid.plugins || []).concat(component.columnLinesFeature || []);

            for (var i = 0, l = plugins.length; i < l; i++) {
                var plugin  = plugins[i];

                if (plugin instanceof Sch.feature.AbstractTimeSpan) {
                    fn.call(scope || me, plugin);
                }
            }
        }
    },


    /**
     * @protected
     * Prepares the component to export. This includes setting requested time span, time column width etc.
     * @param {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} component The component being exported.
     * @param {Object} config    Export configuration.
     */
    prepareComponent : function (component, config) {
        var me      = this;

        component   = component || me.getComponent();

        me.suspendInfiniteScroll(component);

        me.forEachTimeSpanPlugin(component, function (plugin) {
            plugin._renderDelay = plugin.renderDelay;
            plugin.renderDelay  = 0;
        });

        component.getSchedulingView().timeAxisViewModel.suppressFit = true;
        component.timeAxis.autoAdjust                               = false;
        //expand grids in case they're collapsed
        component.normalGrid.expand();
        component.lockedGrid.expand();

        // change timespan/tick width according to provided settings
        me.setComponentRange(config);

        // For Tree grid, optionally expand all nodes
        if (me.expandAllBeforeExport && component.expandAll) {
            component.expandAll();
        }

        // resizes the component to fit it into specified paper size (depending on pagination rules)
        me.fitComponentIntoPage();

        //IE8 bug
        if (me.isBuffered() && Ext.isIE8) {
            me.normalView.bufferedRenderer.variableRowHeight = false;
            me.lockedView.bufferedRenderer.variableRowHeight = false;
        }

    },


    restoreComponent : function (component) {
        var me      = this;

        component   = component || me.getComponent();

        me.forEachTimeSpanPlugin(component, function (plugin) {
            plugin.renderDelay  = plugin._renderDelay;
            delete plugin._renderDelay;
        });

        // restore scheduler state
        me.restoreComponentState(component);

        me.restoreInfiniteScroll(component);

        //We need to update TimeAxisModel for layout fix #1334
        // component.getSchedulingView().timeAxisViewModel.update();

        // call template method
        me.exportConfig.afterExport && me.exportConfig.afterExport(component);
    },


    saveComponentState : function (component) {
        component           = component || this.getComponent();

        var me              = this,
            view            = component.getSchedulingView(),
            normalGrid      = component.normalGrid,
            lockedGrid      = component.lockedGrid;

        //values needed to restore original size/dates of component
        me.restoreSettings    = {
            width               : component.getWidth(),
            height              : component.getHeight(),
            rowHeight           : view.timeAxisViewModel.getViewRowHeight(),
            columnWidth         : view.timeAxisViewModel.getTickWidth(),
            startDate           : component.getStart(),
            endDate             : component.getEnd(),
            normalWidth         : normalGrid.getWidth(),
            normalLeft          : normalGrid.getEl().getStyle('left'),
            lockedWidth         : lockedGrid.getWidth(),
            lockedCollapse      : lockedGrid.collapsed,
            normalCollapse      : normalGrid.collapsed,
            autoAdjust          : component.timeAxis.autoAdjust,
            suppressFit         : view.timeAxisViewModel.suppressFit,
            restoreColumnWidth  : false,
            startIndex          : view.all ? view.all.startIndex : 0
        };

    },


    restoreComponentState : function (component) {
        var me      = this;

        component   = component || me.getComponent();

        var config  = me.restoreSettings,
            view    = component.getSchedulingView();

        component.timeAxis.autoAdjust = config.autoAdjust;

        component.normalGrid.show();

        component.setWidth(config.width);
        component.setHeight(config.height);
        component.setTimeSpan(config.startDate, config.endDate);
        component.setTimeColumnWidth(config.columnWidth, true);

        view.setRowHeight(config.rowHeight);
        component.lockedGrid.show();

        component.normalGrid.setWidth(config.normalWidth);
        component.normalGrid.getEl().setStyle('left', config.normalLeft);
        component.lockedGrid.setWidth(config.lockedWidth);
        view.timeAxisViewModel.suppressFit = config.suppressFit;
        view.timeAxisViewModel.setTickWidth(config.columnWidth);

        if (config.lockedCollapse) {
            component.lockedGrid.collapse();
        }

        if (config.normalCollapse) {
            component.normalGrid.collapse();
        }

        if (me.getBufferedRenderer()) {

            me.scrollTo(config.startIndex);

            if (Ext.isIE8) {
                me.normalView.bufferedRenderer.variableRowHeight = true;
                me.lockedView.bufferedRenderer.variableRowHeight = true;
            }
        }
    },

    /**
     * Extracts the component content. On completion calls specified callback function providing an array of extracted pages as an argument.
     * @param {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} component Component content of which to be extracted
     * @param {Object} config Configuration object. May contain the following properties:
     * @param {String} config.format Page format
     * @param {String} config.orientation Page orientation (either `portrait` or `landscape`)
     * @param {String} config.range Range of the panel to be exported. Options are `complete`, `current`, `date`. When `date` is specified there also has to be specified next two configs.
     * @param {Date} config.dateFrom Range start date. Used only when `config.range` is `date`
     * @param {Date} config.dateTo Range end date. Used only when `config.range` is `date`
     * @param {Boolean} config.showHeader Flag saying that page numbers header has to be shown
     * @param {Function} callback Function which is called after extraction of pages has completed. The callback will have the following arguments:
     * @param {Function} callback.pages An array with extracted pages
     * @param {Object} scope Scope for the callback function
     */
    extractPages : function (component, config, callback, scope) {
        var me          = this;

        // keep provided export config
        me.exportConfig = config;

        me.normalRows       = [];
        me.lockedRows       = [];
        me.extractedPages   = [];
        me.numberOfPages    = 0;
        me.lockedRowsHeight = 0;
        me.normalRowsHeight = 0;

        // calculates paper sizes based on provided parameters and DPI
        me.setPaperSize(config.pageSize, config.orientation);

        // stores references to the component, its elements and makes a backup of its pre-export state
        me.setComponent(component, config);

        // prepares component to exporting (applies provided timespan etc.)
        me.prepareComponent(component, config);

        // launch template method
        config.beforeExport && config.beforeExport(component, me.ticks);

        me.callbacks        = {
            success : callback || Ext.emptyFn,
            scope   : scope || me
        };

        // fetch all component rows into temporary arrays
        // and call 'onRowsCollected' to collect them into pages and call 'onPagesExtracted' on completion
        setTimeout(function () {
            me.collectRows(me.onRowsCollected, me);
        }, 1);
    },

    /**
     * @protected
     * Finishes exporting process. Restores the component to its initial state and returns extracted pages by calling a provided callback.
     * @param  {Array[Object]} [pages] Extracted pages. If omitted then will take collected pages from {@link #extractedPages} array.
     */
    onPagesExtracted : function (pages) {
        var me  = this;

        // restore panel to initial state
        me.restoreComponent();
        // and return results
        me.submitPages(pages);
    },


    submitPages : function (pages) {
        var me          = this,
            callbacks   = me.callbacks;

        callbacks.success.call(callbacks.scope, me.renderPages(pages));
    },


    getCurrentPage : function () {
        return this.currentPage;
    },


    setCurrentPage : function (page) {
        this.currentPage = page;
    },


    getExpectedNumberOfPages : Ext.emptyFn,


    /**
     * Commits a filled page. Pushes the page into {@link #extractedPages resulted set of pages}.
     * Calls {@link #preparePageToCommit} for the final page DOM tweaking.
     * @param [config] An optional configuration object. Will also be passed to {@link #preparePageToCommit} method.
     */
    commitPage : function (config) {

        var me      = this;

        me.numberOfPages++;

        var pageBody = me.preparePageToCommit(config);

        var page    = Ext.apply({
            html    : pageBody.dom.innerHTML,
            number  : me.numberOfPages
        }, config);

        me.extractedPages.push(page);

        me.fireEvent('commitpage', me, page, me.numberOfPages, me.getExpectedNumberOfPages());
    },

    /**
     * @protected
     * Collects the locked grid row.
     * @param  {Element} item The locked grid row
     * @param  {Ext.data.Model} recordIndex Index of the record corresponding to the row.
     * @return {Object} Object keeping reference to the cloned row element and its height.
     */
    collectLockedRow : function (item, recordIndex) {
        var height  = Ext.fly(item).getHeight();

        this.lockedRowsHeight   += height;

        var result  = {
            height : height,
            row    : item.cloneNode(true),
            record : this.lockedView.getRecord(recordIndex)
        };

        this.lockedRows.push(result);

        return result;
    },

    /**
     * @protected
     * Collects the normal grid row.
     * @param  {Element} item The normal grid row
     * @param  {Ext.data.Model} recordIndex Index of the record corresponding to the row.
     * @return {Object} Object keeping reference to the cloned row element and its height.
     */
    collectNormalRow : function (item, recordIndex) {
        var height  = Ext.fly(item).getHeight();

        this.normalRowsHeight   += height;

        var result  = {
            height : Ext.fly(item).getHeight(),
            row    : item.cloneNode(true),
            record : this.normalView.getRecord(recordIndex)
        };

        this.normalRows.push(result);

        return result;
    },


    onRowsCollected : function () {
        throw 'Sch.plugin.exporter.AbstractExporter: [onRowsCollected] Abstract method called.';
    },


    /**
     * @private
     * Iterates by calling provided function asynchronously with a delay.
     * The delay duration is specified by {@link #iterateTimeout} config.
     * @param  {Function} fn    Function implementing a single iteration step.
     * @param  {Function} fn.next Callback function to be called to run the next iteration step.
     * This will cause `fn` function launch. All arguments passed to {@link #fn.next} will be transfered to {@link #fn}.
     * @param  {[type]}   [scope] Scope for the callback function
     */
    iterateAsync : function (fn, scope) {
        var me      = this;

        scope       = scope || me;

        var next    = function () {
            var args    = arguments;

            // run iteration step asynchronously w/ delay
            var interval = setInterval(function() {
                clearInterval(interval);
                fn.apply(scope, [].concat.apply([ next ], args));
            }, me.iterateTimeout);

        };

        next.apply(me, Ext.Array.slice(arguments, 2));
    },


    callAsync : function (fn, scope) {
        scope = scope || this;

        var interval = setInterval(function() {
            clearInterval(interval);
            fn.apply(scope, Ext.Array.slice(arguments, 2));
        }, this.iterateTimeout);
    },


    /**
     * @protected
     * Collects rows from the component. Launches the provided callback and passes collected rows as its arguments.
     * @param callback {Function} The callback function when extraction of rows has finished.
     */
    collectRows : function (callback, scope) {

        var me = this;

        if (me.isBuffered()) {
            // scroll to start index before rows collecting
            setTimeout(function () {
                me.scrollTo(0, function () {
                    me.iterateAsync(me.collectRowsStep, me, 0, callback, scope);
                });
            }, 1);

        } else {
            setTimeout(function () {
                me.collectRowsStep(null, 0, callback, scope);
            }, 1);
        }
    },


    collectRowsStep : function (next, startIndex, callback, scope) {
        var me          = this,
            endIndex    = me.normalView.all.endIndex,
            count       = me.component.store.getCount(),
            normalRows  = me.normalView.all.slice(startIndex),
            lockedRows  = me.lockedView.all.slice(startIndex);

        for (var i = 0; i < lockedRows.length; i++) {
            me.collectLockedRow(lockedRows[i], startIndex + i);
        }

        for (i = 0; i < normalRows.length; i++) {
            me.collectNormalRow(normalRows[i], startIndex + i);
        }

        me.fireEvent('collectrows', me, startIndex, endIndex, count);

        if (me.isBuffered()) {

            if (endIndex + 1 < count) {
                me.callAsync(function () {
                    me.scrollTo(endIndex + 1, function () {
                        next(endIndex + 1, callback, scope);
                    });
                });

            } else {
                me.callAsync(function () {
                    me.scrollTo(0, function () {
                        callback.call(scope || me, me.lockedRows, me.normalRows);
                    });
                });
            }

        } else {
            callback.call(scope || me, me.lockedRows, me.normalRows);
        }
    },

    /**
     * @private
     * Fills extracted pages `html` property before submitting them.
     * @param  {Array} [pages] Array of pages. By default {@link #extractedPages} is used.
     * @return {Array} Array of pages.
     */
    renderPages : function (pages) {
        var me  = this;

        pages   = pages || me.extractedPages;

        for (var i = 0, l = pages.length; i < l; i++) {
            var page    = pages[i];
            page.html   = me.applyPageTpl(page);
        }

        return pages;
    },

    /**
     * @protected
     * Builds HTML content of the page by applying provided page data to the {@link #tpl page template}.
     * @param  {Object} pageInfo Page data:
     * @param  {Object} pageInfo.html HTML code of the page
     * @param  {Object} pageInfo.number page number
     * @return {String}          HTML content of the page.
     */
    applyPageTpl : function (pageInfo) {
        var me  = this;
        return me.getTpl().apply(me.getPageTplData(pageInfo));
    },

    /**
     * @protected
     * Builds HTML content of the page header by applying provided page data to the {@link #headerTpl header template}.
     * @param  {Object} pageInfo Page data:
     * @param  {Object} pageInfo.html HTML code of the page
     * @param  {Object} pageInfo.number page number
     * @return {String}          HTML content of the header.
     */
    applyHeaderTpl : function (pageInfo) {
        var me          = this,
            headerTpl   = me.getHeaderTpl();

        if (me.exportConfig.showHeader && headerTpl) {
            // if function was provided to alter tpl data
            var fn          = me.headerTplDataFn;
            var alterData   = fn && fn.call(me.headerTplDataFnScope || me, pageInfo);

            return headerTpl.apply(Ext.apply(me.getHeaderTplData(pageInfo), alterData));
        }

        return '';
    },

    /**
     * @protected
     * Builds HTML content of the page footer by applying provided page data to the {@link #footerTpl footer template}.
     * @param  {Object} pageInfo Page data:
     * @param  {Object} pageInfo.html HTML code of the page
     * @param  {Object} pageInfo.number page number
     * @return {String}          HTML content of the footer.
     */
    applyFooterTpl : function (pageInfo) {
        var me          = this,
            footerTpl   = me.getFooterTpl();

        if (me.exportConfig.showFooter && footerTpl) {
            // if function was provided to alter tpl data
            var fn          = me.footerTplDataFn;
            var alterData   = fn && fn.call(me.footerTplDataFnScope || me, pageInfo);

            return footerTpl.apply(Ext.apply(me.getFooterTplData(pageInfo), alterData));
        }

        return '';
    },

    /**
     * @protected
     * Function to provide data for the {@link #headerTpl} template.
     * @param  {Object} pageInfo Page data:
     * @param  {Object} pageInfo.html HTML code of the page
     * @param  {Object} pageInfo.number page number
     * @return {Object} The template data:
     * @return {Number} return.width width of the page header (page width)
     * @return {Number} return.height height of the page header
     * @return {Number} return.totalPages total number of pages
     * @return {Number} return.pageNo the page number
     */
    getHeaderTplData : function (pageInfo) {
        var me  = this;

        return {
            width       : me.paperWidth,
            height      : me.pageHeaderHeight,
            totalPages  : me.numberOfPages,
            pageNo      : pageInfo.number
        };
    },

    /**
     * @protected
     * Function to provide data for the {@link #footerTpl} template.
     * @param  {Object} pageInfo Page data:
     * @param  {Object} pageInfo.html HTML code of the page
     * @param  {Object} pageInfo.number page number
     * @return {Object} The template data:
     * @return {Number} return.width width of the page footer (page width)
     * @return {Number} return.height height of the page footer
     * @return {Number} return.totalPages total number of pages
     * @return {Number} return.pageNo the page number
     */
    getFooterTplData : function (pageInfo) {
        var me  = this;

        return {
            width       : me.paperWidth,
            height      : me.pageFooterHeight,
            totalPages  : me.numberOfPages,
            pageNo      : pageInfo.number
        };
    },

    /**
     * @protected
     * Provides data to be applied to the {@link #tpl page template}.
     * @param  {Object} pageInfo Page data:
     * @param  {Object} pageInfo.html HTML code of the page
     * @param  {Object} pageInfo.number page number
     * @return {Object}      Data to be applied to the {@link #tpl page template}.
     */
    getPageTplData : function (pageInfo) {
        var me  = this;

        return {
            bodyClasses         : me.getBodyClasses(),
            bodyHeight          : me.printHeight + me.headerHeight,
            componentClasses    : me.getComponentClasses(),
            styles              : me.getStylesheets(),
            showHeader          : me.exportConfig.showHeader,
            showFooter          : me.exportConfig.showFooter,
            header              : me.applyHeaderTpl(pageInfo),
            HTML                : pageInfo.html,
            footer              : me.applyFooterTpl(pageInfo),
            totalWidth          : me.paperWidth,
            title               : pageInfo.number + ' of ' + me.numberOfPages
        };
    },

    /**
     * @protected
     * Resizes the component to fit it into specified paper size, export settings etc. (depending on implemented pagination rules).
     */
    fitComponentIntoPage : Ext.emptyFn,

    /**
     * @private
     * Function that retrieves the table body of the locked grid.
     * @param {Ext.dom.Element} [element] The fragment root for the selector. Defaults to current page.
     * @return {Ext.dom.Element} Table body of the locked grid.
     */
    getLockedGridBody : function (element) {
        element    = element || this.getCurrentPage();

        return element.select(this.lockedBodySelector + ' > ' + this.tableSelector).first();
    },

    /**
     * @private
     * Retrieves the table body of the normal grid.
     * @param {Ext.dom.Element} [element] The root element to retrieve from. Defaults to current page.
     * @return {Ext.dom.Element} Table body of the normal grid.
     */
    getNormalGridBody : function (element) {
        element = element || this.getCurrentPage();

        return element.select(this.normalBodySelector + ' > ' + this.tableSelector).first();
    },


    emptyLockedGrid : function (element) {
        this.getLockedGridBody(element).select(this.lockedView.getItemSelector()).remove();
    },


    fillGrids : function (lockedRows, normalRows, clone, append) {
        var me  = this;

        me.fillLockedGrid(lockedRows, clone, append);
        me.fillNormalGrid(normalRows, clone, append);
    },


    fillLockedGrid : function (rows, clone, append) {
        var me  = this;
        if (!append) me.emptyLockedGrid();

        me.appendRows(me.getLockedGridBody(), rows || me.lockedRows, clone);
    },


    fillNormalGrid : function (rows, clone, append) {
        var me  = this;
        if (!append) me.emptyNormalGrid();

        me.appendRows(me.getNormalGridBody(), rows || me.normalRows, clone);
    },


    appendRows : function (node, children, clone) {
        var dom     = node.dom;
        for (var i = 0, l = children.length; i < l; i++) {
            dom.appendChild(clone ? children[i].row.cloneNode(true) : children[i].row);
        }
    },


    emptyNormalGrid : function (element) {
        this.getNormalGridBody(element).select(this.normalView.getItemSelector()).remove();
    },


    getRowHeight : function () {
        return this.view.timeAxisViewModel.getViewRowHeight();
    },


    /**
     * @private
     * Returns full width and height of both grids.
     * @return {Object} Object containing `width` and `height` properties.
     */
    getTotalSize : function() {
        return {
            width   : this.getTotalWidth(),
            height  : this.getTotalHeight()
        };
    },

    /**
     * @private
     * Returns full height of the component.
     * @return {Number} Full height of the component.
     */
    getTotalHeight : function () {
        var me  = this,
            viewHeight;

        if (me.isBuffered()) {
            viewHeight  = me.bufferedHeightMargin + me.normalRowsHeight;
        } else {
            viewHeight  = me.lockedView.getEl().down(me.tableSelector).getHeight();
        }

        return me.headerHeight + viewHeight;
    },

    /**
     * @private
     * Returns full width of the component.
     * @return {Number} Full width of both grids.
     */
    getTotalWidth : function () {
        return this.getLockedGridWidth() + this.normalGrid.body.down(this.tableSelector).getWidth();
    },


    getLockedGridWidth : function () {
        return this.lockedHeader.getEl().first().getWidth();
    },


    getNormalGridWidth : function () {
        return this.normalHeader.getEl().first().getWidth();
    },


    /**
     * @protected
     * Performs last changes to {@link #getCurrentPage the current page} being extracted before it's pushed into {@link #extractedPages} array.
     * @param {Object} [config] Optional configuration object.
     * @return {Ext.dom.Element} element Element holding the page.
     */
    preparePageToCommit : function () {
        //create empty div that will temporarily hold our panel current HTML
        var frag        = this.getCurrentPage(),
            component   = this.component,
            lockedGrid  = component.lockedGrid,
            normalGrid  = component.normalGrid;

        frag.el.select('.sch-remove').remove();

        var get             = function (s) { var el = frag.select('#' + s).first(); return el && el.dom; },
            elapseWidth     = function (el) { if (el) el.style.width  = '100%'; },
            elapseHeight    = function (el) { if (el) el.style.height = '100%'; };

        var normalBody      = frag.select(this.normalBodySelector).first();
        normalBody.dom.style.top    = '0px';

        var lockedBody      = frag.select(this.lockedBodySelector).first();
        lockedBody.dom.style.top    = '0px';

        // we elapse some elements width and/or height

        var lockedElements  = [
            get(component.id + '-targetEl'),
            get(component.id + '-innerCt'),
            get(lockedGrid.id),
            get(lockedGrid.body.id),
            get(lockedGrid.view.el.id)
        ];

        Ext.Array.forEach(lockedElements, elapseHeight);

        elapseWidth(lockedElements[0]);
        elapseWidth(lockedElements[1]);

        elapseWidth(get(normalGrid.headerCt.id));

        Ext.Array.forEach([
            get(normalGrid.id),
            get(normalGrid.body.id),
            get(normalGrid.getView().id)
        ], function(el) {
            if (el) {
                el.style.height = el.style.width = '100%';
            }
        });

        return frag;
    },


    cloneElement : function (el) {
        return new Ext.dom.Element(Ext.core.DomHelper.createDom({
            tag     : 'div',
            html    : el.dom.innerHTML
        }));
    },


    /**
     * Starts a new page. Initializes {@link #currentPage} with a copy of the component that will
     * be filled with collected rows based on implemented pagination rules.
     * @param  {Ext.dom.Element} [pattern] Element to make a copy of. This is optional by default will make a copy of {@link #getComponent the component}.
     */
    startPage : function (pattern) {
        var me      = this;

        // make a detached copy of the component body
        var copy    = me.cloneElement(pattern || me.getComponent().body);

        // and put it into storedFragment
        me.setCurrentPage(copy);
    },

    scrollTo : function (position, callback) {
        var me = this;

        if (me.component.ensureVisible) {

            var record = me.component.store.getAt(position);

            me.component.ensureVisible(record, {
                callback : function () {
                   if (callback && this.isLocked === false) {
                       callback.apply(me);
                   }
                },
                select  : false,
                focus   : false,
                animate : false
            });

        }
        else {
            me.lockedView.bufferedRenderer.scrollTo(position, false, function () {
                me.normalView.bufferedRenderer.scrollTo(position, false, callback);
            });
        }
    },

    removeNode : function (el) {
        if (el && el.parentNode) {
            el.parentNode.removeChild(el);
        }
        else {
            if (el.elements) {

                for (var i = 0; i < el.elements.length; i++) {
                    var elem = el.elements[i];
                    elem.parentNode.removeChild(elem);
                }

            }
        }
    },

    //private
    restoreInfiniteScroll : function (panel) {

        var view = panel.getSchedulingView();

        if (panel.infiniteScroll && view.rendered) {

            // restore saved time span and scroll position
            panel.timeAxis.setTimeSpan(this._oldStart, this._oldEnd);
            view.setScrollX(this._oldScrollX);

            // enable back infiniteScroll mode event listeners
            view.bindInfiniteScrollListeners();
        }
    },

    //private
    suspendInfiniteScroll : function (panel) {

        var view = panel.getSchedulingView();

        // unbind events reacting on scroll specific to infiniteScroll mode
        if (panel.infiniteScroll && view.rendered) {

            view.unbindInfiniteScrollListeners();

            // remember current time span and scroll position
            this._oldStart      = panel.timeAxis.getStart();
            this._oldEnd        = panel.timeAxis.getEnd();
            this._oldScrollX    = view.getScrollX();

            var span = panel.getEventStore().getTotalTimeSpan();
            panel.setTimeSpan(span.start, span.end);
        }
    }

});
/**
 @class Sch.plugin.exporter.SinglePage
 @extends Sch.plugin.exporter.AbstractExporter

 This class extracts all scheduler data to fit in a single page.

 The exporterId of this exporter is `singlepage`
 */


Ext.define('Sch.plugin.exporter.SinglePage', {

    extend  : 'Sch.plugin.exporter.AbstractExporter',

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - name    : 'Single page'
     */

    config  : {
        exporterId : 'singlepage',

        headerTpl   : '<div class="sch-export-header" style="height:{height}px; width:{width}px"></div>'
    },

    getExpectedNumberOfPages : function () {
        return 1;
    },

    getPaperFormat : function () {
        var me          = this,
            realSize    = me.getTotalSize(),
            dpi         = me.exportConfig.DPI,
            width       = Ext.Number.toFixed(realSize.width / dpi, 1),
            height      = Ext.Number.toFixed(realSize.height / dpi, 1);

        return width+'in*'+height+'in';
    },


    onRowsCollected : function () {
        var me = this;

        me.startPage();
        me.fillGrids();
        me.commitPage();

        me.onPagesExtracted();
    },


    getPageTplData : function () {
        var me          = this,
            realSize    = me.getTotalSize();

        return Ext.apply(me.callParent(arguments), {
            bodyHeight  : realSize.height,
            showHeader  : false,
            totalWidth  : realSize.width
        });
    },

    getHeaderTplData : function (pageInfo) {
        var me  = this;

        return {
            width       : me.getTotalWidth(),
            height      : me.pageHeaderHeight
        };
    },


    fitComponentIntoPage : function () {
        var me          = this,
            lockedGrid  = me.lockedGrid;

        lockedGrid.setWidth(lockedGrid.headerCt.getEl().first().getWidth());
    },

    preparePageToCommit : function () {
        var me          = this,
            frag        = me.callParent(arguments),
            secondaryCanvas = frag.select('.sch-secondary-canvas').first(),
            zones = secondaryCanvas.select('.sch-zone'),
            lines = secondaryCanvas.select('.sch-column-line');

        var height = me.getTotalHeight();

        secondaryCanvas.setTop(0);
        zones.setHeight(height);
        lines.setHeight(height);

        return frag;
    }

});
/**
 @class Sch.plugin.exporter.MultiPage
 @extends Sch.plugin.exporter.AbstractExporter

 This class extracts pages in a vertical and horizontal order.

 The exporterId of this exporter is `multipage`
 */

Ext.define('Sch.plugin.exporter.MultiPage', {

    extend          : 'Sch.plugin.exporter.AbstractExporter',


    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - name    : 'Multi pages'
     */

    config          : {
        exporterId  : 'multipage'
    },

    rowPageIndex    : 0,

    columnPageIndex : 0,

    pagesPerColumn  : 0,


    extractPages : function () {
        // stop garbage collecting
        this.enableGarbageCollector = Ext.enableGarbageCollector;
        Ext.enableGarbageCollector  = false;
        Ext.dom.GarbageCollector.pause();

        return this.callParent(arguments);
    },


    onRowsCollected : function (lockedRows, normalRows) {
        var me  = this;

        // reset row/column page counters
        me.rowPageIndex     = 0;
        me.columnPageIndex  = 0;
        me.pagesPerColumn   = 0;

        // - build page frame (skeleton) for each page column,
        me.buildPageFrames(function () {
            // - build pages by filling grids w/ collected rows
            me.buildPages(function () {
                // - finish exporting by launching `onPagesExtracted`
                me.onPagesExtracted.apply(me, arguments);
                // resume garbage collecting
                Ext.enableGarbageCollector = me.enableGarbageCollector;
                Ext.dom.GarbageCollector.resume();
            }, me, lockedRows, normalRows);
        });
    },

    /**
     * Builds pages using collected rows. Uses {@link #pagesFrames page frames} built by {@link #buildPageFrames} method.
     * Calls provided function on pages building completion.
     * @param  {Function} callback Function to be called on building completion.
     * @param  {Object}   [scope] Scope for the specified function. By default set to this exporter instance.
     */
    buildPages : function (callback, scope, lockedRows, normalRows) {
        var me      = this,
            frame   = me.pageFrames[0];

        // start new column page based on specified frame
        me.startPage(frame, true);

        // handle each collected row w/ `rowIteratorStep` method
        this.iterateAsync(me.rowIteratorStep, me, {
            rowIndex    : 0,
            pageFrame   : frame,
            rowsHeight  : 0,
            leftHeight  : this.printHeight,
            lockeds     : [],
            normals     : [],
            lockedRows  : lockedRows,
            normalRows  : normalRows,
            callback    : callback,
            scope       : scope || me
        });
    },

    /**
     * Processes a collected row and decides on its distribution between pages.
     * @param  {Function} next    A callback function to call to proceed w/ a next row.
     * @param  {Object}   context Processing context:
     * @param  {Object}   context.rowIndex Zero based index of the row.
     */
    rowIteratorStep : function (next, context) {

        var me          = this,
            rowIndex    = context.rowIndex,
            lockedRows  = context.lockedRows,
            normalRows  = context.normalRows,
            leftHeight  = context.leftHeight,
            lockeds     = context.lockeds,
            normals     = context.normals,
            async       = true;

        // if we have rows to handle
        if (rowIndex < lockedRows.length) {

            var lockedRow   = lockedRows[rowIndex],
                normalRow   = normalRows[rowIndex];

            // if row fits into current page
            if (lockedRow.height <= leftHeight) {
                // gather rows into temp arrays
                lockeds.push(lockedRow);
                normals.push(normalRow);

                context.leftHeight -= lockedRow.height;
                context.rowsHeight += lockedRow.height;

                async = false;

            // ..if doesn't fit
            } else {
                // flush temp arrays to fill page with gathered rows
                me.fillGrids(lockeds, normals, context.pageFrame);
                // and start a new page
                me.commitPage({ rowsHeight : context.rowsHeight });
                me.startPage( context.pageFrame );

                context.lockeds     = [ lockedRow ];
                context.normals     = [ normalRow ];
                context.leftHeight  = me.printHeight - lockedRow.height;
                context.rowsHeight  = lockedRow.height;
            }

            context.rowIndex++;

        // if we have more column pages to build
        } else if (me.columnPageIndex < me.pageFrames.length) {

            // flush temp arrays to fill page with gathered rows
            me.fillGrids(lockeds, normals, context.pageFrame);
            me.commitPage({ rowsHeight : context.rowsHeight });
            // me.columnPageIndex is 1-based so it points to the neaxt frame in me.pageFrames array
            context.pageFrame   = me.pageFrames[me.columnPageIndex];

            // start new column page based on specified frame
            me.startPage(context.pageFrame, true);

            context.leftHeight  = me.printHeight;
            context.rowsHeight  = 0;
            context.lockeds = [];
            context.normals = [];
            context.rowIndex = 0;

        // if we ran out of rows & columns then we finished
        } else {

            // flush temp arrays to fill page with gathered rows
            me.fillGrids(lockeds, normals, context.pageFrame);
            me.commitPage({ rowsHeight : context.rowsHeight });

            // run specified callback on completion
            context.callback.call(context.scope);
            return;
        }

        // handle next row
        if (async) {
            next(context);
        }
        else {
            me.rowIteratorStep(next, context);
        }
    },


    fillGrids : function (lockeds, normals, frame) {
        var me              = this,
            hasLockedGrid   = me.lockedColumnPages[me.columnPageIndex - 1],
            hasNormalGrid   = !hasLockedGrid || (hasLockedGrid && hasLockedGrid.leftWidth);

        if (hasLockedGrid) {
            me.fillLockedGrid(lockeds, true);
            me.removeHiddenLockedColumns(hasLockedGrid);
        }

        if (hasNormalGrid) {
            me.fillNormalGrid(normals, true);
            me.removeInvisibleEvents(-frame.normalGridOffset, -frame.normalGridOffset + frame.normalGridWidth);
        }
    },


    /**
     * @protected
     * Builds a page frame, a DOM-"skeleton" for a future pages.
     * @param  {Number} colIndex Zero based index of page column to build frame for.
     * @param  {Number} offset   Proper normal grid offset for the page column.
     * @return {Ext.dom.Element} Column page frame.
     */
    buildPageFrame : function (colIndex, offset) {
        var me          = this,
            lockedCols  = me.lockedColumnPages[ colIndex ];

        // if this page column has locked grid
        if (lockedCols) {
            me.lockedGrid.setWidth( me.showLockedColumns(lockedCols.start, lockedCols.end) + (lockedCols.startOffset || 0) );

            // if there is some room after locked grid let's show normal grid
            if (lockedCols.leftWidth) {
                me.normalGrid.show();
            // otherwise we hide normal grid
            } else {
                me.normalGrid.hide();
            }

        // if no locked grid on the page
        } else {
            me.lockedGrid.setWidth(0);
            me.lockedGrid.hide();
            me.normalGrid.show();
        }

        // now after we set locked columns/grid and normal grid visibility
        // we clone the content of the component
        var copy    = me.cloneElement(me.getComponent().body);

        copy.normalGridOffset   = offset;
        copy.lockedGridOffset   = lockedCols && lockedCols.startOffset || 0;
        copy.normalGridWidth    = me.normalGrid.getWidth();
        copy.lockedGridWidth    = me.lockedGrid.getWidth();

        // do some CSS-tweaks to shift locked grid
        copy.select(me.lockedBodySelector).first().dom.style.position   = '';
        copy.select('#' + me.lockedView.id).first().dom.style.overflow  = 'visible';

        // if normal grid is visible on this column page
        // do some CSS-tweaks to place normal grid to show only this page content
        if (!me.normalGrid.hidden) {
            var table   = copy.select(me.normalBodySelector).first();
            table.dom.style.position    = '';
            table.dom.style.top         = '0px';

            var body            = me.getNormalGridBody(copy);
            var header          = copy.select('#' + me.normalView.headerCt.id).first();
            var secondaryCanvas = copy.select('.sch-secondary-canvas').first();
            var view            = copy.select('#' + me.normalView.id).first();

            body.dom.style.left             = offset + 'px';
            header.dom.style.left           = offset + 'px';
            header.dom.style.overflow       = 'visible';
            secondaryCanvas.dom.style.left  = offset + 'px';
            view.dom.style.overflow         = 'visible';
        }

        return copy;
    },

    /**
     * @protected
     * Builds column page frames.
     * @param  {Function} callback A callback function to call on completion
     * @param  {Array[Ext.dom.Element]} callback.pageFrames An array of page frames built
     * @param  {[type]}   scope    A scope for the specified callback function
     */
    buildPageFrames : function (callback, scope) {
        var me                  = this;

        scope                   = scope || me;

        // markup locked columns ranges for page columns
        me.lockedColumnPages    = me.calculateLockedColumnPages();

        var columnPagesNum      = Math.ceil(me.getTotalWidth() / me.paperWidth),
            pageFrames          = me.pageFrames = [];

        me.iterateAsync(function (next, colIndex, offset) {
            // on build completion we call provided function
            if (colIndex >= columnPagesNum) {
                callback.call(scope, pageFrames);
                return;
            }

            pageFrames.push( me.buildPageFrame(colIndex, offset) );

            var lockedCols  = me.lockedColumnPages[ colIndex ];

            // adjust normal grid offset for the next page column
            if (lockedCols) {
                offset -= lockedCols.leftWidth || 0;
            } else {
                offset -= me.paperWidth;
            }

            // let's build frame for next page column
            next(colIndex + 1, offset);

        }, me, 0, 0);
    },


    startPage : function (pattern, newColumnPage) {
        var me  = this;

        if (newColumnPage) {
            // on the very first page commit step we know the exact number of row pages
            // let's keep that value
            if (me.columnPageIndex == 1) {
                me.pagesPerColumn = me.extractedPages.length;
            }
            me.rowPageIndex   = 0;
            me.columnPageIndex++;
        }

        me.rowPageIndex++;

        me.callParent(arguments);

        me.emptyNormalGrid();
        me.emptyLockedGrid();
    },


    commitPage : function (cfg) {
        var me  = this;
        me.callParent([ Ext.apply({ row : me.rowPageIndex, column : me.columnPageIndex }, cfg) ]);
    },


    getExpectedPagesPerColumn : function () {
        return this.pagesPerColumn || Math.ceil((this.lockedRowsHeight || this.component.store.count() * this.component.getRowHeight()) / this.printHeight);
    },


    getExpectedColumnsNumber : function () {
        return this.pageFrames ? this.pageFrames.length : Math.ceil((this.lockedGrid.getWidth() + this.ticks.length * this.view.timeAxisViewModel.getTickWidth()) / this.paperWidth);
    },


    getExpectedNumberOfPages : function () {
        return this.getExpectedColumnsNumber() * this.getExpectedPagesPerColumn();
    },


    /**
     * @protected
     * Calculates which locked columns belong to which page.
     * @return {Array[Object]} Array of object
     */
    calculateLockedColumnPages : function () {
        var me          = this,
            result      = [],
            columns     = me.lockedColumns,
            leftWidth   = me.paperWidth,
            page;

        for (var i = 0, l = columns.length; i < l; i++) {
            var column  = columns[i],
                width   = column.width;

            page        = page || { start : i, end : i };
            leftWidth   -= width;

            // if column violated page width
            if (leftWidth < 0) {
                // push page
                result.push(page);

                if (leftWidth) {
                    page    = { start : i, end : i };
                }

                leftWidth   = me.paperWidth - width + leftWidth;
            } else {
                page.end = i;
            }

/*
            // support for columns sharing between pages

            page        = page || { start : i };
            page.end    = i;
            leftWidth   -= width;

            // if column violated page width
            if (leftWidth <= 0) {
                // push page
                result.push(page);
                // if the column was split next page will start from it w/ corresponding offset
                if (leftWidth) {
                    page    = {
                        start       : i,
                        end         : i,
                        startOffset : leftWidth
                    };
                } else {
                    page    = null;
                }

                leftWidth   = me.paperWidth - width + leftWidth;
            }
*/
        }

        // if we have unpushed column page
        if (page) {
            page.leftWidth  = leftWidth;
            result.push(page);
        }

        return result;
    },


    getPageTplData : function (data) {
        return Ext.apply(this.callParent(arguments), {
            title : data.number + ' of ' + this.numberOfPages + ' (column: ' + data.column + ', row: ' + data.row + ')'
        });
    },


    showLockedColumns : function (startColumn, endColumn) {
        var me      = this,
            columns = me.lockedColumns,
            width   = 0;

        startColumn = startColumn || 0;
        endColumn   = endColumn || columns.length - 1;

        for (var i = 0; i < columns.length; i++) {

            var column = columns[i];

            if (i >= startColumn && i <= endColumn) {
                column.column.show();
                width += column.width;
            } else {
                column.column.hide();
            }
        }

        return width;
    },


    removeInvisibleEvents : function (leftBorder, rightBorder) {
        var me          = this,
            normalBody  = me.getNormalGridBody(),
            eventCls    = me.normalView.eventCls;

        var elements = normalBody.select('.' + eventCls).elements;

        for (var i = 0; i < elements.length; i++) {

            var start   = parseInt(elements[i].style.left, 10),
                end     = start + parseInt(elements[i].style.width, 10);

            if (end < leftBorder || start > rightBorder) {
                me.removeNode(elements[i]);
            }
        }
    },

    removeHiddenLockedColumns : function (lockedGrid) {
        var me = this,
            page = me.getCurrentPage(),
            tableBody = me.getLockedGridBody();

        for (var i = 0; i < me.lockedColumns.length; i++ ) {
            var column = me.lockedColumns[i].column;

            if ( i < lockedGrid.start || i > lockedGrid.end) {
                var headerSelector = '#' + column.getId();
                var header = page.select(headerSelector);
                me.removeNode(header);

                var cellSelector = column.getCellSelector();
                var cells = tableBody.select(cellSelector);
                me.removeNode(cells);
            }
        }
    },


    fitComponentIntoPage : function () {
        var me  = this;

        me.getComponent().setWidth(me.paperWidth);
    },


    restoreComponentState : function () {
        this.callParent(arguments);
        // restore locked columns visibility
        this.showLockedColumns();
    },


    setComponent : function () {
        var me      = this,
            columns = me.lockedColumns = [];

        me.callParent(arguments);

        // keep visible locked columns data
        me.lockedGrid.headerCt.items.each(function (column) {
            if (!column.hidden) {
                columns.push({
                    column  : column,
                    width   : column.getWidth()
                });
            }
        });
    }

});
/**
 @class Sch.plugin.exporter.MultiPageVertical
 @extends Sch.plugin.exporter.AbstractExporter

  This class extracts pages in a vertical order. It fits all locked columns and the timeaxis on a single page and will generate
  new pages vertically down for the rows.

  The exporterId of this exporter is `multipagevertical`

  To adjust column widths for specific export cases the function {@link #fitLockedColumnWidth} can be overridden.

*/

Ext.define('Sch.plugin.exporter.MultiPageVertical', {

    extend              : 'Sch.plugin.exporter.AbstractExporter',

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - name    : 'Multi pages (vertically)'
     */

    config              : {
        exporterId  : 'multipagevertical'
    },


    minRowHeight        : 20,

    visibleColumns      : null,

    visibleColumnsWidth : 0,

    onRowsCollected : function (lockedRows, normalRows) {
        var me          = this;

        me.iterateAsync(function (next, rowIndex) {

            if (rowIndex === lockedRows.length) {
                me.onPagesExtracted();
                return;
            }

            var index       = rowIndex,
                spaceLeft   = me.printHeight,
                rowsHeight  = 0,
                lockeds     = [],
                normals     = [],
                normal,
                newPage     = false;

            me.startPage();

            while (!newPage && index < lockedRows.length) {

                normal      = normalRows[index];
                spaceLeft   -= normal.height;

                if (spaceLeft > 0) {
                    rowsHeight  += normal.height;
                    lockeds.push(lockedRows[index]);
                    normals.push(normal);
                    index++;
                }
                else {
                    newPage = true;
                }
            }

            me.fillGrids(lockeds, normals);
            me.commitPage({ rowIndex : index, rowsHeight : rowsHeight });

            next( index );

        }, me, 0);
    },


    startPage : function () {
        var me      = this;
        me.callParent(arguments);

        var view    = me.getCurrentPage().select('#' + me.lockedView.id).first();
        view.dom.style.overflow = 'visible';
    },


    getExpectedNumberOfPages : function () {
        return Math.ceil(this.lockedRowsHeight / this.printHeight);
    },


    setComponent : function () {
        var me                  = this,
            visibleColumns      = me.visibleColumns = [];

        me.callParent(arguments);

        me.visibleColumnsWidth  = 0;

        me.lockedGrid.headerCt.items.each(function (column) {
            if (!column.hidden) {
                visibleColumns.push({
                    column  : column,
                    width   : column.getWidth()
                });

                me.visibleColumnsWidth += column.getWidth();
            }
        });

    },


    fitComponentIntoPage : function () {
        var me              = this,
            component       = me.getComponent(),
            normalGrid      = component.normalGrid,
            lockedGrid      = component.lockedGrid,
            totalWidth      = me.getTotalWidth(),
            ticks           = me.ticks,
            timeColumnWidth = me.timeColumnWidth || me.restoreSettings.columnWidth;

        var lockedWidth = Math.floor((me.visibleColumnsWidth / totalWidth) * me.paperWidth);
        var normalWidth = Math.floor((ticks.length * timeColumnWidth / totalWidth) * me.paperWidth);
        var tickWidth   = Math.floor(normalWidth / ticks.length);
        var rowHeight   = (tickWidth / timeColumnWidth) * me.getRowHeight();

        me.view.setRowHeight( rowHeight < me.minRowHeight ? me.minRowHeight : rowHeight );

        component.setWidth(me.paperWidth);
        normalGrid.setWidth(normalWidth);
        lockedGrid.setWidth(lockedWidth);

        me.fitLockedColumnWidth(lockedWidth);

        component.setTimeColumnWidth(tickWidth);
    },


    /**
     * Function that fits locked columns based on the available width.
     *
     * @param {String} totalWidth int indicating the totalWidth available for the locked columns.
     */

    fitLockedColumnWidth : function (totalWidth) {
        var visibleColumns = this.visibleColumns;

        if (visibleColumns.length) {

            var width = totalWidth / visibleColumns.length;

            for (var i = 0; i < visibleColumns.length; i++) {
                visibleColumns[i].column.setWidth(width);
            }

            this._restoreColumnWidth = true;
        }
    },


    restoreComponentState : function () {

        this.callParent(arguments);

        if (this._restoreColumnWidth) {

            var visibleColumns = this.visibleColumns;

            for (var i = 0; i < visibleColumns.length; i++) {
                var cWrap = visibleColumns[i];
                cWrap.column.setWidth(cWrap.width);
                cWrap.column.show();
            }
        }
    }

});
/**
 @class Sch.plugin.Export
 @extends Ext.util.Observable

 A plugin (ptype = 'scheduler_export') for generating PDF/PNG out of a scheduler panel. NOTE: This plugin will make an AJAX request to the server, POSTing
 the HTML to be exported. The {@link #printServer} URL must therefore be on the same domain as your application.

 ##Configuring/usage

 To use this plugin, add it to your scheduler as any other plugin. It is also required to have [PhantomJS][1] and [Imagemagick][2]
 installed on the server. The complete process of setting up a backend for this plugin can be found in the readme file inside export examples
 as well as on our [blog][3]. Note that export is currently not supported if your view (or store) is buffered.

        var scheduler = Ext.create('Sch.panel.SchedulerGrid', {
            ...

            resourceStore   : resourceStore,
            eventStore      : eventStore,

            plugins         : [
                Ext.create('Sch.plugin.Export', {
                    // default values
                    printServer: 'server.php'
                })
            ]
        });

 The Scheduler instance will be extended with two new methods:

* {@link #showExportDialog}, which shows export settings dialog

        scheduler.showExportDialog();

* {@link #doExport} which actually performs the export operation using {@link #exportConfig} or provided config object :

        scheduler.doExport({
            format      : "A5",
            orientation : "landscape",
            range       : "complete",
            showHeader  : true,
            exporterId  : "singlepage"
        });


##Export options

 In the current state, plugin gives few options to modify the look and feel of the generated PDF document throught a dialog window :

 {@img scheduler/images/export_dialog.png}

If no changes are made to the form, the {@link #exportConfig} will be used.

###Export Range

 This setting controls the timespan visible on the exported document. Three options are available here :

 {@img scheduler/images/export_dialog_ranges.png}

####Complete schedule

 Whole current timespan will be visible on the exported document.

####Date range

 User can select the start and end dates (from the total timespan of the panel) visible on the exported document.

 {@img scheduler/images/export_dialog_ranges_date.png}

####Current view

 Timespan of the exported document/image will be set to the currently visible part of the time axis. User can control
 the width of the time column and height of row.

 {@img scheduler/images/export_dialog_ranges_current.png}

##Page number

 To add a page number is the header

 {@img scheduler/images/export_page_number.png}


##Export mode

 Choose an exporter. The default exporter is `Multi pages`.

 {@img scheduler/images/export_modes.png}

 Options:

-  `Single page`. Creates an export that fits one single page.

-  `Multi pages`. Creates an export that creates pages in both vertical and horizontal direction.

-  `Multi pages (vertical)`. Creates an export that creates pages in vertical direction.


##Paper Format

 This combo gives control of the size of the generated document/image by choosing one from a list of supported ISO paper sizes : (`A5`, `A4`, `A3`, `Letter`).
 Generated PDF has a fixed DPI value of 72. Dafault format is `A4`.

 {@img scheduler/images/export_dialog_format.png}

###Orientation

 This setting defines the orientation of the generated document/image.

 {@img scheduler/images/export_dialog_orientation.png}

 Default option is the `portrait` (horizontal) orientation :

 {@img scheduler/images/export_dialog_portrait.png}

 Second option is the `landscape` (vertical) orientation :

 {@img scheduler/images/export_dialog_landscape.png}

 ##Custom export styling
 A special "sch-export" CSS class is added to the body of the exported pages so that you can have special
 styles in your exported chart.

 [1]: http://www.phantomjs.org
 [2]: http://www.imagemagick.org
 [3]: http://bryntum.com/blog

 */
Ext.define('Sch.plugin.Export', {
    extend                  : 'Ext.util.Observable',

    alternateClassName      : 'Sch.plugin.PdfExport',

    alias                   : 'plugin.scheduler_export',

    mixins                  : ['Ext.AbstractPlugin', 'Sch.mixin.Localizable'],

    requires        : [
        'Ext.XTemplate',
        'Sch.plugin.exporter.SinglePage',
        'Sch.plugin.exporter.MultiPage',
        'Sch.plugin.exporter.MultiPageVertical'
    ],

    lockableScope           : 'top',

    /**
     * @cfg {Object} pageSizes
     * Definition of all available paper sizes.
     */
    pageSizes               : {
        A5      : {
            width   : 5.8,
            height  : 8.3
        },
        A4      : {
            width   : 8.3,
            height  : 11.7
        },
        A3      : {
            width   : 11.7,
            height  : 16.5
        },
        Letter  : {
            width   : 8.5,
            height  : 11
        },
        Legal   : {
            width   : 8.5,
            height  : 14
        }
    },


    /**
     * @cfg {Number} DPI
     * DPI (Dots per inch) resolution.
     */
    DPI                     : 72,

    /**
     * @cfg {String}
     * URL of the server responsible for running the export steps.
     */
    printServer             : undefined,


    /**
     * @cfg {Number}
     * The timeout in milliseconds to be used for print requests to server.
     */
    timeout                 : 60000,


    /**
     * @cfg {String} headerTpl
     * Template of extracted page header.
     */
    headerTpl               : null,

    /**
     * @cfg {Function} headerTplDataFn
     * If defined provides data for the {@link #headerTpl}.
     * To define the scope please use {@link #headerTplDataFnScope}.
     * @return {Object} Header template data.
     */
    headerTplDataFn        : null,

    /**
     * @cfg {Object} headerTplDataFnScope Scope for the {@link #headerTplDataFn} function.
     */
    headerTplDataFnScope   : null,

    /**
     * @cfg {String} tpl
     * Template of extracted page.
     */
    tpl                     : null,

    /**
     * @cfg {String} footerTpl
     * Template of extracted page footer.
     */
    footerTpl               : null,

    /**
     * @cfg {Function} footerTplDataFn
     * If defined provides data for the {@link #footerTpl}.
     * To define the scope please use {@link #footerTplDataFnScope}.
     * @return {Object} Footer template data.
     */
    footerTplDataFn        : null,

    /**
     * @cfg {Object} footerTplDataFnScope Scope for the {@link #footerTplDataFn} function.
     */
    footerTplDataFnScope   : null,

    /**
     * @cfg {String}
     * Class name of the dialog used to change export settings.
     */
    exportDialogClassName   : 'Sch.widget.ExportDialog',

    /**
     * @cfg {Object}
     * Config object for the {@link #exportDialogClassName}. Use this to override default values for the export dialog.
     */
    exportDialogConfig      : {},

    /**
     * @cfg {Object}
     * Config object to apply to each {@link Sch.plugin.exporter.AbstractExporter exporter} being registered.
     */
    exporterConfig          : null,

    /**
     * @cfg {Object}
     * Default export configuration.
     */
    exportConfig           : {
        format              : "A4",
        orientation         : "portrait",
        range               : "complete",
        showHeader          : true,
        showFooter          : false
    },

    /**
     * @cfg {Boolean} expandAllBeforeExport Only applicable for tree views, set to true to do a full expand prior to the export. Defaults to false.
     */
    expandAllBeforeExport   : false,

    /**
     * @cfg {Boolean} translateURLsToAbsolute `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.
     */
    translateURLsToAbsolute : true,

    /**
     * @cfg {Boolean}
     * If set to true, open new window with the generated document after the operation has finished.
     */
    openAfterExport         : true,

    /**
     * An empty function by default, but provided so that you can perform a custom action
     * before the export plugin extracts data from the scheduler.
     * @param {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} scheduler The scheduler instance
     * @param {Object[]} ticks The ticks gathered by plugin to export.
     * @template
     * @method beforeExport
     */
    beforeExport            : Ext.emptyFn,

    /**
     * An empty function by default, but provided so that you can perform a custom action
     * after the export plugin has extracted the data from the scheduler.
     * @param {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} scheduler The scheduler instance
     * @template
     * @method afterExport
     */
    afterExport             : Ext.emptyFn,



    /**
     * @cfg {String}
     * Format of the exported file, selectable from `pdf` or `png`. By default plugin exports panel contents to PDF
     * but PNG file format is also available.
     */
    fileFormat              : 'pdf',

    /**
     * @cfg {String}
     * The exporterId of the default exporter to be used.
     * The corresponding export mode will be selected in {@link Sch.widget.ExportDialog export dialog} by default.
     */
    defaultExporter         : 'multipage',

    /**
     * @cfg {Array[Sch.plugin.exporter.AbstractExporter/Object]}
     * The list of available exporters.
     * If no value is provided the list will be filled automatically (see {@link #buildExporters}).
     */
    exporters               : undefined,

    callbacks               : undefined,

    /**
     * @event hidedialogwindow
     * Fires to hide the dialog window.
     * @param {Object} response Full server response.
     */

    /**
     * @event showdialogerror
     * Fires to show error in the dialog window.
     * @param {Ext.window.Window} dialog The dialog used to change export settings.
     * @param {String} message Error message to show in the dialog window.
     * @param {Object} response Full server response.
     */

    /**
     * @event updateprogressbar
     * Fires when a progressbar of the {@link #exportDialogClassName dialog} should update it's value.
     * @param {Number} value Value (between 0 and 1) to set on the progressbar.
     * @param {Object} [response] Full server response. This argument is specified only when `value` equals to `1`.
     */

    /**
     * @event beforeexport
     * Fires before the exporting is started. Return `false` to cancel exporting.
     * @param {Sch.panel.SchedulerGrid/Sch.panel.SchedulerTree} component A scheduler panel to be exported.
     * @param {Object} config Export configuration.
     */

    constructor : function (config) {
        var me              = this;

        config              = config || {};

        me.exportersIndex   = {};

        if (config.exportDialogConfig) {
            Ext.Object.each(this.exportConfig, function (k, v, o) {
                var configK = config.exportDialogConfig[k];
                if (configK) {
                    o[k] = configK;
                }
            });
        }

        me.callParent([ config ]);

        me.setFileFormat(me.fileFormat);

        // if no exporters specified let's set the list of available by default
        if (!me.exporters) {
            me.exporters    = me.buildExporters();
        }

        // instantiate exporters instances in case there were provided just objects w/ xclass
        me.initExporters();

        // listen to exporters events
        me.bindExporters();
    },

    init : function (scheduler) {
        var me                      = this;

        scheduler.showExportDialog  = Ext.Function.bind(me.showExportDialog, me);
        scheduler.doExport          = Ext.Function.bind(me.doExport, me);

        me.scheduler                = scheduler;
    },


    initExporters : function () {
        var me          = this,
            exporters   = me.exporters;

        for (var i = 0; i < exporters.length; i++) {
            if (!(exporters[i] instanceof Sch.plugin.exporter.AbstractExporter)) {
                exporters[i]    = me.createExporter(exporters[i]);
            }
        }
    },


    bindExporters : function () {
        var exporters   = this.exporters;

        for (var i = 0; i < exporters.length; i++) {
            this.bindExporter(exporters[i]);
        }
    },


    bindExporter : function (exporter) {
        var me  = this;

        me.mon(exporter, {
            commitpage  : me.onPageCommit,
            collectrows : me.onRowCollected,
            scope       : me
        });

    },


    unbindExporter : function (exporter) {
        var me  = this;

        me.mun(exporter, {
            commitpage  : me.onPageCommit,
            collectrows : me.onRowCollected,
            scope       : me
        });

    },


    /**
     * @protected
     * Provides the list of available exporter instances.
     * This method is used to build the default state of the list when no {@link #exporters} provided.
     * @returns {Array[Sch.plugin.exporter.AbstractExporter]} List of exporters.
     */
    buildExporters : function () {
        return [ 'Sch.plugin.exporter.SinglePage', 'Sch.plugin.exporter.MultiPage', 'Sch.plugin.exporter.MultiPageVertical' ];
    },

    /**
     * @protected
     * Returns config for an exporter being initialized.
     * Override this to provide custom options for exporters being created.
     */
    getExporterConfig : function (className, config) {
        var me      = this;

        var result  = Ext.apply({
            translateURLsToAbsolute : me.translateURLsToAbsolute,
            expandAllBeforeExport   : me.expandAllBeforeExport,
            DPI                     : me.DPI
        }, me.exporterConfig);

        if (me.headerTpl) result.headerTpl  = me.headerTpl;

        if (me.headerTplDataFn) {
            result.headerTplDataFn          = me.headerTplDataFn;
            result.headerTplDataFnScope     = me.headerTplDataFnScope;
        }

        if (me.tpl) result.tpl              = me.tpl;
        if (me.footerTpl) result.footerTpl  = me.footerTpl;

        if (me.footerTplDataFn) {
            result.footerTplDataFn          = me.footerTplDataFn;
            result.footerTplDataFnScope     = me.footerTplDataFnScope;
        }

        return result;
    },


    // @protected
    createExporter : function (className, config) {
        var me              = this,
            exporterConfig  = me.getExporterConfig(className, config);

        if (Ext.isObject(className)) {
            return Ext.create(Ext.apply(exporterConfig, className));
        } else {
            return Ext.create(className, Ext.apply(exporterConfig, config));
        }
    },


    /**
     * Adds an exporter.
     * @param  {Sch.plugin.exporter.AbstractExporter/String} [exporter] An exporter to add.
     * Might be provided as {@link Sch.plugin.exporter.AbstractExporter} instance or as a class name string plus a configuration object:
     *
     *   plugin.registerExporter('MyExporter', { foo : 'bar' });
     *
     * Can be ommited to use configuration object only:
     *
     *   plugin.registerExporter({ xclass : 'MyExporter', foo : 'bar' });
     *
     * @param  {Object} [config]    A configuration object
     */
    registerExporter : function (exporter, config) {
        if (!(exporter instanceof Sch.plugin.exporter.AbstractExporter)) {
            exporter    = this.createExporter.apply(this, arguments);
        }

        this.exporters.push(exporter);

        this.bindExporter(exporter);
    },


    /**
     * Function that returns an exporter instance based on provided exporterId.
     *
     * @param {String} exporterId string indicating the registered exporter.
     *
     * @return {Sch.plugin.exporter.AbstractExporter} an instance of the exporter.
     */
    getExporter : function (exporterId) {
        if (!exporterId) return;

        var result  = this.exportersIndex[exporterId];
        if (result) return result;

        result      = this.exportersIndex[exporterId] = Ext.Array.findBy(this.exporters, function (i) {
            return i.getExporterId() == exporterId;
        });

        return result;
    },

    /**
     * Function that returns all registered exporters.
     *
     * @return {Object} an Object containing registered exporters.
     */
    getExporters : function () {
        return this.exporters;
    },

    /**
     * Function for setting the {@link #fileFormat} of exporting panel. Can be either `pdf` or `png`.
     *
     * @param {String} format format of the file to set. Can take either `pdf` or `png`.
     */
    setFileFormat : function (format) {
        if (typeof format !== 'string') {
            this.fileFormat = 'pdf';
        } else {
            format = format.toLowerCase();

            if (format === 'png') {
                this.fileFormat = format;
            } else {
                this.fileFormat = 'pdf';
            }
        }
    },

    /**
     * Instantiates and shows a new {@link #exportDialogClassName} class using {@link #exportDialogConfig} config.
     * This popup should give user possibility to change export settings.
     */
    showExportDialog : function() {
        var me   = this,
            view = me.scheduler.getSchedulingView();

        //dialog window is always removed to avoid resetting its layout after hiding
        if (me.win) {
            me.win.destroy();
            me.win = null;
        }

        me.win  = Ext.create(me.exportDialogClassName, {
            plugin                  : me,
            exportDialogConfig      : Ext.apply({
                startDate       : me.scheduler.getStart(),
                endDate         : me.scheduler.getEnd(),
                rowHeight       : view.timeAxisViewModel.getViewRowHeight(),
                columnWidth     : view.timeAxisViewModel.getTickWidth(),
                defaultExporter : me.defaultExporter,
                exporters       : me.exporters,
                exportConfig    : me.exportConfig
            }, me.exportDialogConfig)
        });

        me.win.show();
    },


    getExportConfig : function (config) {
        var me      = this;

        var result      = Ext.apply({
            fileFormat      : me.fileFormat,
            exporterId      : me.defaultExporter,
            beforeExport    : Ext.Function.bind(me.beforeExport, me),
            afterExport     : Ext.Function.bind(me.afterExport, me)
        }, config, me.exportConfig);

        // get effective DPI
        result.DPI              = result.DPI || me.DPI;
        // get page size for provided paper format
        result.pageSize         = Ext.apply({}, me.pageSizes[result.format]);
        // covert page size to pixels
        result.pageSize.width   *= result.DPI;
        result.pageSize.height  *= result.DPI;

        return result;
    },


    /**
     * Function performing the export operation using provided config. After getting data
     * from the scheduler an XHR request to {@link #printServer} will be made with the following JSON encoded data :
     *
     * * `html`        - array of HTML strings containing data of each page
     * * `format`      - paper size of the exported file
     * * `orientation` - orientation of the exported file
     * * `range`       - range of the exported file
     * * `fileFormat`  - file format of the exported file
     *
     * @param {Object} [conf] Config options for exporting. If not provided, {@link #exportConfig} is used. Possible parameters are :
     * @param {String} [conf.format]            - format of the exported document/image, selectable from the {@link #pageSizes} list.
     * @param {String} [conf.orientation]       - orientation of the exported document/image. Either `portrait` or `landscape`.
     * @param {String} [conf.range]             - range of the panel to be exported. Selectable from `complete`, `current`, `date`.
     * @param {Boolean} [conf.showHeader]       - boolean value defining if exported pages should have row/column numbers added in the headers.
     * @param {String} [conf.exporterId]        - string value defining which exporter to use.
     *
     * @param {Function} [callback] Optional function that will be called after successful response from export backend script.
     * @param {Function} [errback] Optional function that will be called if export backend script returns error.
     */
    doExport : function (conf, callback, errback, scope) {

        var me          = this,
            component   = me.scheduler,
            config      = me.getExportConfig(conf);

        me.callbacks     = {
            success     : callback || Ext.emptyFn,
            failure     : errback || Ext.emptyFn,
            scope       : scope || me
        };

        var exporter    = me.exporter = me.getExporter(config.exporterId);

        // if we have exporter
        if (exporter && me.fireEvent('beforeexport', component, exporter, config) !== false) {

            me.mask();

            me.exporter.extractPages(component, config, function (pages) {

                me.fireEvent('updateprogressbar', 0.8, this.L('requestingPrintServer'));

                me.doRequest(pages, config);

            }, me);
        }
    },


    onRowCollected : function (exporter, startIndex, endIndex, total) {
        this.fireEvent('updateprogressbar', 0.2 * (endIndex + 1) / total, Ext.String.format(this.L('fetchingRows'), endIndex + 1, total));
    },


    onPageCommit : function (exporter, page, pageNum, total) {
        total   = Math.max(pageNum, total);
        this.fireEvent('updateprogressbar', 0.2 + 0.6 * pageNum / total, Ext.String.format(this.L('builtPage'), pageNum, total));
    },


    /**
     * @private
     * Function that is called when the exportserver returned success. This function will fire the events updateprogressbar and hidedialogwindow.
     * When provided in doExport the callback success function is called.
     * The exported file will be dialogged when the @openAfterExport property is set to true (default).
     */

    onExportSuccess : function (result) {
        var me          = this,
            win         = me.getWin(),
            callbacks   = me.callbacks,
            fn          = callbacks && callbacks.success,
            scope       = callbacks && callbacks.scope || me;

        //set progress to 100%
        me.fireEvent('updateprogressbar', 1);

        me.unmask();

        fn && fn.apply(scope, arguments);

        setTimeout(function() {
            me.fireEvent('hidedialogwindow', result);

            if (me.openAfterExport) {
                window.open(result.url, 'ExportedPanel');
            }

        }, win ? win.hideTime : 3000);
    },

    /**
     * @private
     * Function that is called when the exportserver returned failure. This function will fire the event showdialogerror.
     * When provided in doExport the callback failure is called.
     *
     * @param {String} message Error message provided with the failure.
     * @param {Object} Response object when the failure is a serverside failure.
     */

    onExportFailure : function (message, result) {
        var me          = this,
            win         = this.getWin(),
            callbacks   = me.callbacks,
            fn          = callbacks && callbacks.failure,
            scope       = callbacks && callbacks.scope || me;

        fn && fn.call(scope, message);

        me.fireEvent('showdialogerror', win, message, result);

        me.unmask();
    },


    /**
     * @protected
     * Launches a request to the {@link #printServer print server}.
     * On return {@link #onRequestSuccess} or {@link #onRequestFailure} will be called with the returned response.
     * @param {Array} exportedPages An array of paginated component content.
     * @param {Object} config Export configuratin.
     */
    doRequest : function (exportedPages, config) {

        var me          = this,
            component   = me.scheduler;

        if (!me.test && !me.debug) {

            if (me.printServer) {

                var ajaxConfig = {
                    type        : 'POST',
                    url         : me.printServer,
                    timeout     : me.timeout,
                    params      : Ext.apply({
                        html        : {
                            array : Ext.JSON.encode(exportedPages)
                        },
                        startDate   : component.getStartDate(),
                        endDate     : component.getEndDate(),
                        format      : me.exporter.getPaperFormat(),
                        orientation : config.orientation,
                        range       : config.range,
                        fileFormat  : me.fileFormat
                    }, this.getParameters()),
                    success     : me.onRequestSuccess,
                    failure     : me.onRequestFailure,
                    scope       : me
                };

                Ext.apply(ajaxConfig, this.getAjaxConfig(ajaxConfig));

                Ext.Ajax.request(ajaxConfig);

            } else {
                me.onExportFailure('Print server URL is not defined, please specify printServer config');
            }

        } else {

            if (me.debug) {
                var pages   = exportedPages || [];

                for (var i = 0, l = pages.length; i < l; i++) {
                    var w = window.open();

                    w.document.write(pages[i].html);
                    w.document.close();
                }
            }

            me.onExportSuccess(me.testResponse || { success : true, url : 'foo', htmlArray : exportedPages });
        }
    },

    /**
     * @protected
     * Runs on request succesful completion.
     * @param  {Object} response Server response.
     */
    onRequestSuccess : function (response) {
        var me  = this,
            result;

        try {
            result = Ext.JSON.decode(response.responseText);
        } catch (e) {
            me.onExportFailure('Wrong server response received');
            return;
        }

        if (result.success) {
            me.onExportSuccess(result);

        } else {
            me.onExportFailure(result.msg, result);
        }
    },

    /**
     * @protected
     * Runs on request failure.
     * @param  {Object} response Server response.
     */
    onRequestFailure : function (response) {
        var me  = this,
            msg = response.status === 200 ? response.responseText : response.statusText;

        me.onExportFailure(msg, response);
    },

    /**
     * @template
     * This method can be used to apply additional parameters to the 'params' property of the export {@link Ext.Ajax XHR} request.
     * By default this method returns an empty object.
     * @return {Object}
     */
    getParameters : function () {
        return {};
    },

    /**
     * This method can be used to return any extra configuration properties applied to the {@link Ext.Ajax#request} call.
     * @template
     * @param {Object} config The proposed Ajax configuration settings. You may read any properties from this object, but modify it at your own risk.
     * @return {Object}
     */
    getAjaxConfig : function (config) {
        return {};
    },

    //Private used to prevent using old reference in the response callbacks
    getWin : function () {
        return this.win || null;
    },

    /*
     * @private
     * Mask the body, hiding panel to allow changing it's parameters in the background.
     */
    mask : function () {
        var mask = Ext.getBody().mask();
        mask.addCls('sch-export-mask');
    },

    //Private.
    unmask : function () {
        Ext.getBody().unmask();
    },

    destroy : function () {
        this.callParent(arguments);

        if (this.win) {
            this.win.destroy();
        }
    }
});
/**
@class Sch.plugin.HeaderZoom
@extends Sch.util.DragTracker

This plugin (ptype = 'scheduler_headerzoom') enables zooming to a timespan selected using drag drop in the header area of the scheduler panel.

Zooming will be performed to the nearest zooming level that will make all columns to fit in the scheduling view width,
additionally a column width of that zooming level will be slightly adjusted to improve the fit.

After zooming, the selected time span will appear centered in the scheduling view.

**NOTE*: This plugin only supports panels in horizontal orientation.

To add this plugin to scheduler:

        var s1  = new Sch.panel.SchedulerGrid({
            ...
                
            plugins     : [
                new Sch.plugin.HeaderZoom(),

                // or lazy style definition
                'scheduler_headerzoom'
            ]
        })
    
*/
Ext.define("Sch.plugin.HeaderZoom", {
    extend        : "Sch.util.DragTracker",
    mixins        : [ 'Ext.AbstractPlugin' ],
    alias         : 'plugin.scheduler_headerzoom',
    lockableScope : 'top',

    scheduler      : null,
    proxy          : null,
    headerRegion   : null,

    init : function (scheduler) {

        this.scheduler      = scheduler;

        this.onModeChange();

        scheduler.on('modechange', this.onModeChange, this);
    },
    
    onOrientationChange : function () {
        return this.onModeChange.apply(this, arguments);
    },
    
    onModeChange   : function () {
        var timeAxisColumn = this.scheduler.down('timeaxiscolumn');
        
        if (timeAxisColumn) {
            
            if (timeAxisColumn.rendered) {
                this.onTimeAxisColumnRender(timeAxisColumn);
            } else {
                timeAxisColumn.on({
                    afterrender : this.onTimeAxisColumnRender,
                    scope       : this
                });
            }
        }
    },

    onTimeAxisColumnRender : function (column) {
        this.proxy = column.el.createChild({ cls : 'sch-drag-selector' });

        this.initEl(column.el);
    },

    
    onStart : function (e) {
        this.proxy.show();

        this.headerRegion   = this.scheduler.normalGrid.headerCt.getRegion();
    },

    
    onDrag : function (e) {
        var headerRegion    = this.headerRegion;
        var dragRegion      = this.getRegion().constrainTo(headerRegion);
        
        dragRegion.top      = headerRegion.top;
        dragRegion.bottom   = headerRegion.bottom;

        this.proxy.setBox(dragRegion);
    },

    
    onEnd : function (e) {
        if (this.proxy) {
            this.proxy.setDisplayed(false);

            var scheduler   = this.scheduler;
            var timeAxis    = scheduler.timeAxis;
            var region      = this.getRegion();
            var unit        = scheduler.getSchedulingView().timeAxisViewModel.getBottomHeader().unit;
            var range       = scheduler.getSchedulingView().getStartEndDatesFromRegion(region);
            
            scheduler.zoomToSpan({
                start   : timeAxis.floorDate(range.start, false, unit, 1),
                end     : timeAxis.ceilDate(range.end, false, unit, 1)
            });
        }
    },

    
    destroy : function () {
        if (this.proxy) {
            Ext.destroy(this.proxy);

            this.proxy = null;
        }

        this.callParent(arguments);
    }
});
/**
@class Sch.widget.ResizePicker
@private
@extends Ext.Panel

Size picker widget for changing column width/rows height.

*/
Ext.define('Sch.widget.ResizePicker', {
    extend          : 'Ext.Panel',
    alias           : 'widget.dualrangepicker',
    width           : 200,
    height          : 200,
    border          : true,
    collapsible     : false,
    bodyStyle       : 'position:absolute; margin:5px',

    verticalCfg     : {
        height      : 120,
        value       : 24,
        increment   : 2,
        minValue    : 20,
        maxValue    : 80,
        reverse     : true,
        disabled    : true
    },

    horizontalCfg   : {
        width       : 120,
        value       : 100,
        minValue    : 25,
        increment   : 5,
        maxValue    : 200,
        disable     : true
    },

    initComponent : function () {
        var me = this;

        //me.addEvents('change', 'changecomplete', 'select');

        me.horizontalCfg.value  = me.dialogConfig.columnWidth;
        me.verticalCfg.value    = me.dialogConfig.rowHeight;
        me.verticalCfg.disabled = me.dialogConfig.scrollerDisabled || false;

        me.dockedItems = [
            me.vertical     = new Ext.slider.Single(Ext.apply({
                dock        : 'left',
                style       : 'margin-top:10px',
                vertical    : true,
                listeners   : {
                    change          : me.onSliderChange,
                    changecomplete  : me.onSliderChangeComplete,
                    scope           : me
                }
            }, me.verticalCfg)),

            me.horizontal   = new Ext.slider.Single(Ext.apply({
                dock        : 'top',
                style       : 'margin-left:28px',
                listeners   : {
                    change          : me.onSliderChange,
                    changecomplete  : me.onSliderChangeComplete,
                    scope           : me
                }
            }, me.horizontalCfg))
        ];

        me.callParent(arguments);
    },

    afterRender : function () {
        var me = this;

        me.addCls('sch-ux-range-picker');
        me.valueHandle = this.body.createChild({
            cls : 'sch-ux-range-value',
            cn  : {
                tag: 'span'
            }
        });
        me.valueSpan = this.valueHandle.down('span');

        var dd = new Ext.dd.DD(this.valueHandle);

        Ext.apply(dd, {
            startDrag   : function () {
                me.dragging = true;
                this.constrainTo(me.body);
            },
            onDrag      : function () {
                me.onHandleDrag.apply(me, arguments);
            },
            endDrag     : function () {
                me.onHandleEndDrag.apply(me, arguments);
                me.dragging = false;
            },
            scope       : this
        });

        this.setValues(this.getValues());
        this.callParent(arguments);

        this.body.on('click', this.onBodyClick, this);
    },

    onBodyClick: function (e, t) {
        var xy = [e.getXY()[0] - 8 - this.body.getX(), e.getXY()[1] - 8 - this.body.getY()];

        this.valueHandle.setLeft(Ext.Number.constrain(xy[0], 0, this.getAvailableWidth()));
        this.valueHandle.setTop(Ext.Number.constrain(xy[1], 0, this.getAvailableHeight()));

        this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
        this.onSliderChangeComplete();
    },

    getAvailableWidth: function () {
        return this.body.getWidth() - 18;
    },

    getAvailableHeight: function () {
        return this.body.getHeight() - 18;
    },

    onHandleDrag: function () {
        this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
    },

    onHandleEndDrag: function () {
        this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
    },

    getValuesFromXY: function (xy) {
        var xFraction = xy[0] / this.getAvailableWidth();
        var yFraction = xy[1] / this.getAvailableHeight();

        var horizontalVal = Math.round((this.horizontalCfg.maxValue - this.horizontalCfg.minValue) * xFraction);
        var verticalVal = Math.round((this.verticalCfg.maxValue - this.verticalCfg.minValue) * yFraction) + this.verticalCfg.minValue;

        return [horizontalVal + this.horizontalCfg.minValue, verticalVal];
    },

    getXYFromValues: function (values) {
        var xRange = this.horizontalCfg.maxValue - this.horizontalCfg.minValue;
        var yRange = this.verticalCfg.maxValue - this.verticalCfg.minValue;

        var x = Math.round((values[0] - this.horizontalCfg.minValue) * this.getAvailableWidth() / xRange);

        var verticalVal = values[1] - this.verticalCfg.minValue;
        var y = Math.round(verticalVal * this.getAvailableHeight() / yRange);

        return [x, y];
    },

    updatePosition: function () {
        var values = this.getValues();
        var xy = this.getXYFromValues(values);

        this.valueHandle.setLeft(Ext.Number.constrain(xy[0], 0, this.getAvailableWidth()));
        if (this.verticalCfg.disabled){
            this.valueHandle.setTop(this.dialogConfig.rowHeight);
        } else {
            this.valueHandle.setTop(Ext.Number.constrain(xy[1], 0, this.getAvailableHeight()));
        }

        this.positionValueText();
        this.setValueText(values);
    },

    positionValueText: function () {
        var handleTop = this.valueHandle.getTop(true);
        var handleLeft = this.valueHandle.getLeft(true);

        this.valueSpan.setLeft(handleLeft > 30 ? -30 : 10);
        this.valueSpan.setTop(handleTop > 10 ? -20 : 20);
    },

    setValueText: function(values){
        if (this.verticalCfg.disabled) values[1] = this.dialogConfig.rowHeight;
        this.valueSpan.update('[' + values.toString() + ']');
    },

    setValues: function (values) {
        this.horizontal.setValue(values[0]);

        if (this.verticalCfg.reverse) {
            if (!this.verticalCfg.disabled) this.vertical.setValue(this.verticalCfg.maxValue + this.verticalCfg.minValue - values[1]);
        } else {
            if (!this.verticalCfg.disabled) this.vertical.setValue(values[1]);
        }

        if (!this.dragging) {
            this.updatePosition();
        }
        this.positionValueText();

        this.setValueText(values);
    },

    getValues: function () {
        if (!this.verticalCfg.disabled) {
            var verticalVal = this.vertical.getValue();

            if (this.verticalCfg.reverse) {
                verticalVal = this.verticalCfg.maxValue - verticalVal + this.verticalCfg.minValue;
            }

            return [this.horizontal.getValue(), verticalVal];

        }

        return [this.horizontal.getValue()];
    },

    onSliderChange: function () {
        this.fireEvent('change', this, this.getValues());

        if (!this.dragging) {
            this.updatePosition();
        }
    },

    onSliderChangeComplete: function () {
        this.fireEvent('changecomplete', this, this.getValues());
    },

    afterLayout: function () {
        this.callParent(arguments);
        this.updatePosition();
    }
});

/**
 @class Sch.widget.ExportDialogForm
 @private
 @extends Ext.form.Panel

 Form for {@link Sch.widget.ExportDialog}. This is a private class and can be overriden by providing `formPanel` option to
 {@link Sch.plugin.Export#cfg-exportDialogConfig exportDialogConfig}.
 */
Ext.define('Sch.widget.ExportDialogForm', {
    extend      : 'Ext.form.Panel',
    requires    : [
        'Ext.data.Store',
        'Ext.XTemplate',
        'Ext.ProgressBar',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Date',
        'Ext.form.FieldContainer',
        'Ext.form.field.Checkbox',
        'Sch.widget.ResizePicker'
    ],

    border      : false,
    bodyPadding : '10 10 0 10',
    autoHeight  : true,

    initComponent : function () {
        var me = this;

        me.fieldDefaults    = Ext.applyIf(me.fieldDefaults || {}, {
            labelAlign      : 'left',
            labelWidth      : 120,
            anchor          : '99%'
        });

        me.items            = me.createFields();

        me.items.push(me.progressBar || me.createProgressBar());

        me.callParent(arguments);

        // trigger fields `change` listeners to enable/disable related fields
        me.onRangeChange(null, me.dialogConfig.exportConfig.range);
        me.onExporterChange(me.exportersField, me.exportersField.getValue());

        me.on({
            hideprogressbar     : me.hideProgressBar,
            showprogressbar     : me.showProgressBar,
            updateprogressbar   : me.updateProgressBar,
            scope               : me
        });
    },

    isValid : function () {
        var me  = this;
        if (me.rangeField.getValue() === 'date') return me.dateFromField.isValid() && me.dateToField.isValid();

        return true;
    },

    getValues : function (asString, dirtyOnly, includeEmptyText, useDataValues) {
        var result      = this.callParent(arguments);

        result.showHeader = !!result.showHeader;
        result.showFooter = !!result.showFooter;

        var cellSize    = this.resizePicker.getValues();
        if (!asString) {
            result.cellSize = cellSize;
        } else {
            result += '&cellSize[0]='+cellSize[0]+'&cellSize[1]='+cellSize[1];
        }

        return result;
    },

    createFields : function () {
        var me                  = this,
            cfg                 = me.dialogConfig,
            beforeLabelTextTpl  = '<table class="sch-fieldcontainer-label-wrap"><td width="1" class="sch-fieldcontainer-label">',
            afterLabelTextTpl   = '<td><div class="sch-fieldcontainer-separator"></div></table>',
            items = [];

        me.rangeField       = new Ext.form.field.ComboBox({
            value           : cfg.exportConfig.range,
            triggerAction   : 'all',
            cls             : 'sch-export-dialog-range',
            forceSelection  : true,
            editable        : false,
            fieldLabel      : cfg.rangeFieldLabel,
            name            : 'range',
            queryMode       : 'local',
            displayField    : 'name',
            valueField      : 'value',
            store           : new Ext.data.Store({
                fields  : ['name', 'value'],
                data    : [
                    { name : cfg.completeViewText,  value : 'complete' },
                    { name : cfg.dateRangeText,     value : 'date' },
                    { name : cfg.currentViewText,   value : 'current' }
                ]
            }),
            listeners      : {
                change  : me.onRangeChange,
                scope   : me
            }
        });

        // col/row resizer
        me.resizePicker     = new Sch.widget.ResizePicker({
            dialogConfig    : cfg,
            margin          : '10 20'
        });

        me.resizerHolder    = new Ext.form.FieldContainer({
            fieldLabel          : cfg.scrollerDisabled ? cfg.adjustCols : cfg.adjustColsAndRows,
            labelAlign          : 'top',
            hidden              : true,
            labelSeparator      : '',
            beforeLabelTextTpl  : beforeLabelTextTpl,
            afterLabelTextTpl   : afterLabelTextTpl,
            layout              : 'vbox',
            defaults            : {
                flex        : 1,
                allowBlank  : false
            },
            items               : [me.resizePicker]
        });

        // from date
        me.dateFromField = new Ext.form.field.Date({
            fieldLabel  : cfg.dateRangeFromText,
            baseBodyCls : 'sch-exportdialogform-date',
            name        : 'dateFrom',
            format      : cfg.dateRangeFormat || Ext.Date.defaultFormat,
            allowBlank  : false,
            maxValue    : cfg.endDate,
            minValue    : cfg.startDate,
            value       : cfg.startDate
        });

        // till date
        me.dateToField = new Ext.form.field.Date({
            fieldLabel  : cfg.dateRangeToText,
            name        : 'dateTo',
            format      : cfg.dateRangeFormat || Ext.Date.defaultFormat,
            baseBodyCls : 'sch-exportdialogform-date',
            allowBlank  : false,
            maxValue    : cfg.endDate,
            minValue    : cfg.startDate,
            value       : cfg.endDate
        });

        // date fields holder
        me.datesHolder  = new Ext.form.FieldContainer({
            fieldLabel          : cfg.specifyDateRange,
            labelAlign          : 'top',
            hidden              : true,
            labelSeparator      : '',
            beforeLabelTextTpl  : beforeLabelTextTpl,
            afterLabelTextTpl   : afterLabelTextTpl,
            layout              : 'vbox',
            defaults            : {
                flex        : 1,
                allowBlank  : false
            },
            items               : [me.dateFromField, me.dateToField]
        });

        if (cfg.showHeaderField) {
            me.showHeaderField  = new Ext.form.field.Checkbox({
                fieldLabel      : me.dialogConfig.showHeaderLabel,
                cls             : 'sch-export-dialog-header',
                name            : 'showHeader',
                checked         : !!cfg.exportConfig.showHeader,
                checkedValue    : true,
                uncheckedValue  : false
            });
        }

        if (cfg.showFooterField) {
            me.showFooterField  = new Ext.form.field.Checkbox({
                fieldLabel      : me.dialogConfig.showFooterLabel,
                cls             : 'sch-export-dialog-footer',
                name            : 'showFooter',
                checked         : !!cfg.exportConfig.showFooter,
                checkedValue    : true,
                uncheckedValue  : false
            });
        }

        me.exportersField = new Ext.form.field.ComboBox({
            value           : cfg.defaultExporter,
            triggerAction   : 'all',
            cls             : 'sch-export-dialog-exporter',
            forceSelection  : true,
            editable        : false,
            fieldLabel      : cfg.exportersFieldLabel,
            name            : 'exporterId',
            queryMode       : 'local',
            displayField    : 'name',
            valueField      : 'value',
            store           : me.buildExporterStore(cfg.exporters),
            listeners      : {
                change  : me.onExporterChange,
                scope   : me
            }
        });

        me.formatField = new Ext.form.field.ComboBox({
            value          : cfg.exportConfig.format,
            triggerAction  : 'all',
            forceSelection : true,
            editable       : false,
            fieldLabel     : cfg.formatFieldLabel,
            name           : 'format',
            queryMode      : 'local',
            store          : cfg.pageFormats || ["A5", "A4", "A3", "Letter", "Legal"]
        });

        var orientationLandscapeCls = cfg.exportConfig.orientation === "portrait" ? 'class="sch-none"' : '',
            orientationPortraitCls = cfg.exportConfig.orientation === "landscape" ? 'class="sch-none"' : '';

        me.orientationField = new Ext.form.field.ComboBox({
            value          : cfg.exportConfig.orientation,
            triggerAction  : 'all',
            componentCls   : 'sch-exportdialogform-orientation',
            forceSelection : true,
            editable       : false,
            fieldLabel     : me.dialogConfig.orientationFieldLabel,
            afterSubTpl    : new Ext.XTemplate('<span id="sch-exportdialog-imagePortrait" ' + orientationPortraitCls +
                '></span><span id="sch-exportdialog-imageLandscape" ' + orientationLandscapeCls + '></span>'),
            name           : 'orientation',
            displayField   : 'name',
            valueField     : 'value',
            queryMode      : 'local',
            store          : new Ext.data.Store({
                fields : ['name', 'value'],
                data   : [
                    { name : cfg.orientationPortraitText, value : 'portrait' },
                    { name : cfg.orientationLandscapeText, value : 'landscape' }
                ]
            }),
            listeners      : {
                change : function (field, newValue) {
                    switch (newValue) {
                        case 'landscape':
                            Ext.fly('sch-exportdialog-imagePortrait').toggleCls('sch-none');
                            Ext.fly('sch-exportdialog-imageLandscape').toggleCls('sch-none');
                            break;
                        case 'portrait':
                            Ext.fly('sch-exportdialog-imagePortrait').toggleCls('sch-none');
                            Ext.fly('sch-exportdialog-imageLandscape').toggleCls('sch-none');
                            break;
                    }
                }
            }
        });

        items.push(me.rangeField);
        items.push(me.resizerHolder);
        items.push(me.datesHolder);
        items.push(me.exportersField);
        items.push(me.formatField);
        items.push(me.orientationField);

        if (cfg.showHeaderField) {
            items.push(me.showHeaderField);
        }

        if (cfg.showFooterField) {
            items.push(me.showFooterField);
        }

        return items;
    },

    // Builds a store to be used for the `Export mode` combobox
    // @param {Object}
    // @return {Ext.data.Store}
    buildExporterStore : function (exporters) {

        var data    = [];

        for (var i = 0, l = exporters.length; i < l; i++) {
            var exporter    = exporters[i];

            data.push({
                name        : exporter.getName(),
                value       : exporter.getExporterId()
            });
        }

        return Ext.create('Ext.data.Store', {
            fields  : ['name' , 'value'],
            data    : data
        });
    },

    createProgressBar : function () {
        return this.progressBar = new Ext.ProgressBar({
            text    : this.config.progressBarText,
            animate : true,
            hidden  : true,
            margin  : '4px 0 10px 0'
        });
    },

    onRangeChange : function (field, newValue) {
        switch (newValue) {
            case 'complete':
                this.datesHolder.hide();
                this.resizerHolder.hide();
                break;
            case 'date':
                this.datesHolder.show();
                this.resizerHolder.hide();
                break;
            case 'current':
                this.datesHolder.hide();
                this.resizerHolder.show();
                this.resizePicker.expand(true);
                break;
        }
    },

    /**
     * @protected
     * This method is called after user selects an export mode in the corresponding field.
     * @param  {Ext.form.field.Field} field Reference to the form field
     * @param  {String} exporterId Selected exporter identifier
     */
    onExporterChange : function (field, exporterId) {

        switch (exporterId) {
            case  'singlepage':
                this.disableFields(true);
                break;
            default :
                this.disableFields(false);
        }

    },

    disableFields : function (value) {
        var me = this;

        if (me.showHeaderField) {
            me.showHeaderField.setDisabled(value);
        }

        me.formatField.setDisabled(value);
        me.orientationField.setDisabled(value);
    },


    showProgressBar : function () {
        if (this.progressBar) this.progressBar.show();
    },

    hideProgressBar : function () {
        if (this.progressBar) this.progressBar.hide();
    },

    updateProgressBar : function (value, text) {

        if (this.progressBar) {

            this.progressBar.updateProgress(value);

            if (text) {
                this.progressBar.updateText(text);
            }

        }
    }
});

/**
 @class Sch.widget.ExportDialog
 @private
 @extends Ext.window.Window

 Widget for export options.

 */
Ext.define('Sch.widget.ExportDialog', {
    alternateClassName  : 'Sch.widget.PdfExportDialog',
    extend              : 'Ext.window.Window',
    requires            : ['Sch.widget.ExportDialogForm'],
    mixins              : ['Sch.mixin.Localizable'],
    alias               : "widget.exportdialog",

    //Panel settings. Overridable with {@link Sch.plugin.Export#cfg-exportDialogConfig}
    modal               : false,
    width               : 350,
    cls                 : 'sch-exportdialog',
    frame               : false,
    layout              : 'fit',
    draggable           : true,
    padding             : 0,
    myConfig            : null,

    //Private
    plugin              : null,

    /**
     * @cfg {Ext.Component} buttonsPanel Component with buttons controlling export.
     */
    buttonsPanel        : null,

    /**
     * @cfg {Object} buttonsPanelScope
     * The scope for the {@link #buttonsPanel}
     */
    buttonsPanelScope   : null,

    /**
     * @cfg {Ext.Component} progressBar Progress bar component.
     */
    progressBar         : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - generalError                : 'An error occured, try again.',
            - title                       : 'Export Settings',
            - formatFieldLabel            : 'Paper format',
            - orientationFieldLabel       : 'Orientation',
            - rangeFieldLabel             : 'Export range',
            - showHeaderLabel             : 'Add page number',
            - showFooterLabel             : 'Add footer',
            - orientationPortraitText     : 'Portrait',
            - orientationLandscapeText    : 'Landscape',
            - completeViewText            : 'Complete schedule',
            - currentViewText             : 'Current view',
            - dateRangeText               : 'Date range',
            - dateRangeFromText           : 'Export from',
            - pickerText                  : 'Resize column/rows to desired value',
            - dateRangeToText             : 'Export to',
            - exportButtonText            : 'Export',
            - cancelButtonText            : 'Cancel',
            - progressBarText             : 'Exporting...',
            - exportToSingleLabel         : 'Export as single page'
     */

    /**
     * @cfg {String} dateRangeFormat Valid date format to be used by the date ranges fields.
     */
    dateRangeFormat : '',

    /**
     * @cfg {Boolean} showHeaderField Indicates if showHeaderField is visible in the exportdialog.
     */
    showHeaderField : true,

    /**
     * @cfg {Boolean} showFooterField Indicates if showFooterField is visible in the exportdialog.
     */
    showFooterField : false,

    constructor : function (config) {
        Ext.apply(this, config.exportDialogConfig);

        this.plugin = config.plugin;

        this.title = this.L('title');

        //store fields texts in the config object for further use by form
        this.myConfig = Ext.apply({
            progressBarText             : this.L('progressBarText'),
            dateRangeToText             : this.L('dateRangeToText'),
            pickerText                  : this.L('pickerText'),
            dateRangeFromText           : this.L('dateRangeFromText'),
            dateRangeText               : this.L('dateRangeText'),
            currentViewText             : this.L('currentViewText'),
            formatFieldLabel            : this.L('formatFieldLabel'),
            orientationFieldLabel       : this.L('orientationFieldLabel'),
            rangeFieldLabel             : this.L('rangeFieldLabel'),
            showHeaderLabel             : this.L('showHeaderLabel'),
            showFooterLabel             : this.L('showFooterLabel'),
            exportersFieldLabel         : this.L('exportersFieldLabel'),
            orientationPortraitText     : this.L('orientationPortraitText'),
            orientationLandscapeText    : this.L('orientationLandscapeText'),
            completeViewText            : this.L('completeViewText'),
            adjustCols                  : this.L('adjustCols'),
            adjustColsAndRows           : this.L('adjustColsAndRows'),
            specifyDateRange            : this.L('specifyDateRange'),
            dateRangeFormat             : this.dateRangeFormat,
            exportConfig                : this.exportConfig,
            showHeaderField             : this.showHeaderField,
            showFooterField             : this.showFooterField,
            pageFormats                 : this.getPageFormats()
        }, config.exportDialogConfig);

        this.callParent(arguments);
    },

    getPageFormats : function () {
        var pageSizes   = this.plugin.pageSizes,
            sizes       = [];

        Ext.Object.each(pageSizes, function (key, value) {
            sizes.push({
                width   : value.width,
                height  : value.height,
                name    : key
            });
        });

        // let's sort page sizes by width
        sizes.sort(function (a, b) { return a.width - b.width; });

        var result = [];

        for (var i = 0; i < sizes.length; i++) {
            result.push(sizes[i].name);
        }

        return result;
    },

    initComponent : function () {
        var me          = this,
            listeners   = {
                hidedialogwindow    : me.destroy,
                showdialogerror     : me.showError,
                updateprogressbar   : function (value, text) {

                    if (arguments.length == 2) {
                        me.fireEvent('updateprogressbar', value, undefined);
                    }
                    else {
                        me.fireEvent('updateprogressbar', value, text);
                    }

                },
                scope               : this
            };

        me.form         = me.buildForm(me.myConfig);

        Ext.apply(this, {
            items : me.form,
            fbar  : me.buildButtons(me.buttonsPanelScope || me)
        });

        me.callParent(arguments);

        me.plugin.on(listeners);
    },

    afterRender : function () {
        var me = this;

        me.relayEvents(me.form.resizePicker, ['change', 'changecomplete', 'select']);

        me.form.relayEvents(me, ['updateprogressbar', 'hideprogressbar', 'showprogressbar']);

        me.callParent(arguments);
    },

    /**
     * Create Dialog's buttons.
     *
     * @param {Object} buttonsScope Scope for the buttons.
     * @return {Object} buttons Object containing buttons for Exporting/Cancelling export.
     */
    buildButtons : function (buttonsScope) {
        return [
            {
                xtype   : 'button',
                scale   : 'medium',
                text    : this.L('exportButtonText'),
                handler : function () {
                    if (this.form.isValid()) {
                        this.fireEvent('showprogressbar');

                        var config          = this.form.getValues();
                        //exporter combo returns a exporterId
                        config.exporterId   = config.exporterId;

                        // convert strings to dates before passing date range to doExport method
                        var dateFormat      = this.dateRangeFormat || Ext.Date.defaultFormat;

                        if (config.dateFrom && !Ext.isDate(config.dateFrom)) {
                            config.dateFrom = Ext.Date.parse(config.dateFrom, dateFormat);
                        }

                        if (config.dateTo && !Ext.isDate(config.dateTo)) {
                            config.dateTo   = Ext.Date.parse(config.dateTo, dateFormat);
                        }

                        this.plugin.doExport(config);
                    }
                },
                scope   : buttonsScope
            },
            {
                xtype   : 'button',
                scale   : 'medium',
                text    : this.L('cancelButtonText'),
                handler : function () {
                    this.destroy();
                },
                scope   : buttonsScope
            }
        ];
    },

    /**
     * Build the {@link Sch.widget.ExportDialogForm} for the dialog window.
     *
     * @param {Object} config Config object for the form, containing field names and values.
     * @return {Sch.widget.ExportDialogForm} form
     */
    buildForm : function (config) {
        return new Sch.widget.ExportDialogForm({
            progressBar  : this.progressBar,
            dialogConfig : config
        });
    },

    /**
     * @private
     * Displays error message in the dialog. When it's called, both form and buttons are hidden.
     * @param {Sch.widget.ExportDialog} dialog Dialog window or null
     * @param {String} error (optional) Text of the message that will be displayed in the dialog. If not provided, {@link #generalError}
     * will be used.
     */
    showError : function (dialog, error) {
        var me = dialog,
            text = error || me.L('generalError');

        me.fireEvent('hideprogressbar');
        Ext.Msg.alert('', text);
    }
});


// https://www.sencha.com/forum/showthread.php?301532-Renderer-scope-is-lost-in-Ext.tree.Column-mixin
Ext.define('Gnt.patches.TreeColumn', {
    extend  : 'Sch.util.Patch',

    requires : 'Ext.tree.Column',
    target : 'Ext.tree.Column',

    minVersion  : '5.1.1',

    overrides    : {
        initComponent: function() {
            var me = this;
            me._rendererScope = me.scope || me;
            // tree column wraps renderer into it's own, but looses provided scope
            me.callParent(arguments);
            me.rendererScope = me._rendererScope;
        }
    }
});
// https://www.sencha.com/forum/showthread.php?301768-Tree-view-is-rendered-before-load-event-is-thrown
// In Ext 5.1.1 tree view is refreshed before its store throw 'load' event.
// Only reliable way to process loaded data before that refresh is to listen 'refresh' event after store.load method in called
// This patch requires to be a mixin, to be required correctly in the task store
Ext.define('Gnt.patches.TaskStore', {
    extend    : 'Ext.Mixin',

    onClassMixedIn    : function (targetClass) {
        if (Ext.getVersion().isGreaterThan('5.1.1')) {
            Ext.override(targetClass, {
                // This is new handler for 'load' event that will check if caching procedures were performed before
                // and also it will remove extra listener
                onTasksLoad : function () {
                    if (!this._refreshCalled) {
                        this.onTasksLoaded();
                    }
                    this.un('refresh', this.onTaskStoreRefresh, this);
                },

                onTasksBeforeLoad : function () {
                    // if this is a reload operation, view will be refreshed before 'load' event is fired
                    // we need to recalculate cache on 'refresh' event then
                    this._refreshCalled = false;
                    this.on('refresh', this.onTaskStoreRefresh, this, { priority : 100 });
                },

                // Fill cache, rise a flag about this
                onTaskStoreRefresh : function () {
                    this._refreshCalled = true;
                    this.onTasksLoaded();
                },

                setupListeners    : function () {
                    this.callParent(arguments);

                    this.on('beforeload', this.onTasksBeforeLoad, this, { priority : 100 });

                    // these events need advanced listener that will check if cache has to be recalculated
                    this.un({
                        load        : this.onTasksLoaded,
                        rootchanged : this.onTasksLoaded,
                        scope       : this
                    });

                    this.on({
                        load        : this.onTasksLoad,
                        rootchanged : this.onTasksLoad,
                        scope       : this
                    });
                }
            });
        }
    }
});
Ext.define('Gnt.locale.En', {
    extend    : 'Sch.locale.Locale',
    requires  : 'Sch.locale.En',
    singleton : true,

    constructor : function (config) {

        Ext.apply(this, {
            l10n : {
                'Gnt.util.DurationParser' : {
                    unitsRegex : {
                        MILLI   : /^ms$|^mil/i,
                        SECOND  : /^s$|^sec/i,
                        MINUTE  : /^m$|^min/i,
                        HOUR    : /^h$|^hr$|^hour/i,
                        DAY     : /^d$|^day/i,
                        WEEK    : /^w$|^wk|^week/i,
                        MONTH   : /^mo|^mnt/i,
                        QUARTER : /^q$|^quar|^qrt/i,
                        YEAR    : /^y$|^yr|^year/i
                    }
                },

                'Gnt.util.DependencyParser' : {
                    typeText : {
                        SS : 'SS',
                        SF : 'SF',
                        FS : 'FS',
                        FF : 'FF'
                    }
                },

                'Gnt.field.ConstraintType' : {
                    none : 'None'
                },

                'Gnt.field.Duration' : {
                    invalidText : 'Invalid value'
                },

                'Gnt.field.Effort' : {
                    invalidText : 'Invalid value'
                },

                'Gnt.field.Percent' : {
                    invalidText : 'Invalid value'
                },

                'Gnt.field.SchedulingMode' : {
                    Normal              : 'Normal',
                    FixedDuration       : 'Fixed duration',
                    EffortDriven        : 'Effort driven',
                    DynamicAssignment   : 'Dynamic assignment'
                },

                'Gnt.feature.DependencyDragDrop' : {
                    fromText  : 'From',
                    toText    : 'To',
                    startText : 'Start',
                    endText   : 'End'
                },

                'Gnt.Tooltip' : {
                    startText    : 'Starts: ',
                    endText      : 'Ends: ',
                    durationText : 'Duration: '
                },

                'Gnt.plugin.TaskContextMenu' : {
                    taskInformation    : 'Task information...',
                    projectInformation : 'Project information...',
                    newTaskText        : 'New task',
                    deleteTask         : 'Delete task(s)',
                    editLeftLabel      : 'Edit left label',
                    editRightLabel     : 'Edit right label',
                    add                : 'Add...',
                    deleteDependency   : 'Delete dependency...',
                    addTaskAbove       : 'Task above',
                    addTaskBelow       : 'Task below',
                    addMilestone       : 'Milestone',
                    addSubtask         : 'Sub-task',
                    addSuccessor       : 'Successor',
                    addPredecessor     : 'Predecessor',
                    convertToMilestone : 'Convert to milestone',
                    convertToRegular   : 'Convert to regular task',
                    splitTask          : 'Split task'
                },

                'Gnt.plugin.DependencyEditor' : {
                    fromText         : 'From',
                    toText           : 'To',
                    typeText         : 'Type',
                    lagText          : 'Lag',
                    endToStartText   : 'Finish-To-Start',
                    startToStartText : 'Start-To-Start',
                    endToEndText     : 'Finish-To-Finish',
                    startToEndText   : 'Start-To-Finish'
                },

                'Gnt.widget.calendar.Calendar' : {
                    dayOverrideNameHeaderText : 'Name',
                    overrideName              : 'Name',
                    startDate                 : 'Start Date',
                    endDate                   : 'End Date',
                    error                     : 'Error',
                    dateText                  : 'Date',
                    addText                   : 'Add',
                    editText                  : 'Edit',
                    removeText                : 'Remove',
                    workingDayText            : 'Working day',
                    weekendsText              : 'Weekends',
                    overriddenDayText         : 'Overridden day',
                    overriddenWeekText        : 'Overridden week',
                    workingTimeText           : 'Working time',
                    nonworkingTimeText        : 'Non-working time',
                    dayOverridesText          : 'Day overrides',
                    weekOverridesText         : 'Week overrides',
                    okText                    : 'OK',
                    cancelText                : 'Cancel',
                    parentCalendarText        : 'Parent calendar',
                    noParentText              : 'No parent',
                    selectParentText          : 'Select parent',
                    newDayName                : '[Without name]',
                    calendarNameText          : 'Calendar name',
                    tplTexts                  : {
                        tplWorkingHours  : 'Working hours for',
                        tplIsNonWorking  : 'is non-working',
                        tplOverride      : 'override',
                        tplInCalendar    : 'in calendar',
                        tplDayInCalendar : 'standard day in calendar',
                        tplBasedOn       : 'Based on'
                    },
                    overrideErrorText         : 'There is already an override for this day',
                    overrideDateError         : 'There is already a week override on this date: {0}',
                    startAfterEndError        : 'Start date should be less than end date',
                    weeksIntersectError       : 'Week overrides should not intersect'
                },

                'Gnt.widget.calendar.AvailabilityGrid' : {
                    startText  : 'Start',
                    endText    : 'End',
                    addText    : 'Add',
                    removeText : 'Remove',
                    error      : 'Error'
                },

                'Gnt.widget.calendar.DayEditor' : {
                    workingTimeText    : 'Working time',
                    nonworkingTimeText : 'Non-working time'
                },

                'Gnt.widget.calendar.WeekEditor' : {
                    defaultTimeText    : 'Default time',
                    workingTimeText    : 'Working time',
                    nonworkingTimeText : 'Non-working time',
                    error              : 'Error',
                    noOverrideError    : "Week override contains only 'default' days - can't save it"
                },

                'Gnt.widget.calendar.ResourceCalendarGrid' : {
                    name     : 'Name',
                    calendar : 'Calendar'
                },

                'Gnt.widget.calendar.CalendarWindow' : {
                    ok     : 'Ok',
                    cancel : 'Cancel'
                },

                'Gnt.widget.calendar.CalendarManager' : {
                    addText         : 'Add',
                    removeText      : 'Remove',
                    add_child       : 'Add child',
                    add_node        : 'Add calendar',
                    add_sibling     : 'Add sibling',
                    remove          : 'Remove',
                    calendarName    : 'Calendar',
                    confirm_action  : 'Confirm action',
                    confirm_message : 'Calendar has unsaved changes. Would you like to save your changes?'
                },

                'Gnt.widget.calendar.CalendarManagerWindow' : {
                    title           : 'Calendar manager',
                    ok              : 'Apply changes',
                    cancel          : 'Close',
                    confirm_action  : 'Confirm action',
                    confirm_message : 'Calendar has unsaved changes. Would you like to save your changes?'
                },

                'Gnt.field.Assignment' : {
                    cancelText : 'Cancel',
                    closeText  : 'Save and Close'
                },

                'Gnt.column.AssignmentUnits' : {
                    text : 'Units'
                },

                'Gnt.column.Duration' : {
                    text : 'Duration'
                },

                'Gnt.column.Effort' : {
                    text : 'Effort'
                },

                'Gnt.column.EndDate' : {
                    text : 'Finish'
                },

                'Gnt.column.PercentDone' : {
                    text : '% Done'
                },

                'Gnt.column.ResourceAssignment' : {
                    text : 'Assigned Resources'
                },

                'Gnt.column.ResourceName' : {
                    text : 'Resource Name'
                },

                'Gnt.column.Rollup' : {
                    text : 'Rollup task',
                    no   : 'No',
                    yes  : 'Yes'
                },

                'Gnt.field.ManuallyScheduled' : {
                    yes : 'Yes',
                    no  : 'No'
                },

                'Gnt.field.ReadOnly' : {
                    yes : 'Yes',
                    no  : 'No'
                },

                'Gnt.column.ManuallyScheduled' : {
                    text : 'Manual mode'
                },

                'Gnt.column.SchedulingMode' : {
                    text : 'Mode'
                },

                'Gnt.column.Predecessor' : {
                    text : 'Predecessors'
                },

                'Gnt.column.Successor' : {
                    text : 'Successors'
                },

                'Gnt.column.StartDate' : {
                    text : 'Start'
                },

                'Gnt.column.WBS' : {
                    text : 'WBS'
                },

                'Gnt.column.Sequence' : {
                    text : '#'
                },

                'Gnt.column.Calendar' : {
                    text : 'Calendar'
                },

                'Gnt.widget.taskeditor.ProjectForm' : {
                    projectText             : 'Project',
                    nameText                : 'Name',
                    datesText               : 'Dates',
                    startText               : 'Start',
                    finishText              : 'Finish',
                    calendarText            : 'Calendar',
                    readOnlyText            : 'Readonly',
                    allowDependenciesText   : 'Allow cross-project dependencies'
                },

                'Gnt.widget.taskeditor.TaskForm' : {
                    taskNameText            : 'Name',
                    durationText            : 'Duration',
                    datesText               : 'Dates',
                    baselineText            : 'Baseline',
                    startText               : 'Start',
                    finishText              : 'Finish',
                    percentDoneText         : 'Percent Complete',
                    baselineStartText       : 'Start',
                    baselineFinishText      : 'Finish',
                    baselinePercentDoneText : 'Percent Complete',
                    effortText              : 'Effort',
                    invalidEffortText       : 'Invalid effort value',
                    calendarText            : 'Calendar',
                    manuallyScheduledText   : 'Manually Scheduled',
                    schedulingModeText      : 'Scheduling Mode',
                    rollupText              : 'Rollup',
                    wbsCodeText             : 'WBS code',
                    "Constraint Type"       : "Constraint Type",
                    "Constraint Date"       : "Constraint Date"
                },

                'Gnt.widget.DependencyGrid' : {
                    idText                    : 'ID',
                    snText                    : 'SN',
                    taskText                  : 'Task Name',
                    blankTaskText             : 'Please select task',
                    invalidDependencyText     : 'Invalid dependency',
                    parentChildDependencyText : 'Dependency between child and parent found',
                    duplicatingDependencyText : 'Duplicate dependency found',
                    transitiveDependencyText  : 'Transitive dependency',
                    cyclicDependencyText      : 'Cyclic dependency',
                    typeText                  : 'Type',
                    lagText                   : 'Lag',
                    clsText                   : 'CSS class',
                    endToStartText            : 'Finish-To-Start',
                    startToStartText          : 'Start-To-Start',
                    endToEndText              : 'Finish-To-Finish',
                    startToEndText            : 'Start-To-Finish'
                },

                'Gnt.widget.AssignmentEditGrid' : {
                    confirmAddResourceTitle : 'Confirm',
                    confirmAddResourceText  : 'Resource &quot;{0}&quot; not found in list. Would you like to add it?',
                    noValueText             : 'Please select resource to assign',
                    noResourceText          : 'No resource &quot;{0}&quot; found in the list'
                },

                'Gnt.widget.taskeditor.ProjectEditor' : {
                    generalText        : 'General',
                    descriptionText    : 'Description'
                },

                'Gnt.widget.taskeditor.TaskEditor' : {
                    generalText        : 'General',
                    resourcesText      : 'Resources',
                    dependencyText     : 'Predecessors',
                    addDependencyText  : 'Add new',
                    dropDependencyText : 'Remove',
                    notesText          : 'Notes',
                    advancedText       : 'Advanced',
                    addAssignmentText  : 'Add new',
                    dropAssignmentText : 'Remove'
                },

                'Gnt.plugin.taskeditor.BaseEditor' : {
                    title        : 'Task Information',
                    alertCaption : 'Information',
                    alertText    : 'Please correct marked errors to save changes',
                    okText       : 'Ok',
                    cancelText   : 'Cancel'
                },

                'Gnt.plugin.taskeditor.ProjectEditor' : {
                    title        : 'Project Information'
                },

                'Gnt.field.EndDate' : {
                    endBeforeStartText : 'End date is before start date'
                },

                'Gnt.column.Note' : {
                    text : 'Note'
                },

                'Gnt.column.AddNew' : {
                    text : 'Add new column...'
                },

                'Gnt.column.EarlyStartDate' : {
                    text : 'Early Start'
                },

                'Gnt.column.EarlyEndDate' : {
                    text : 'Early Finish'
                },

                'Gnt.column.LateStartDate' : {
                    text : 'Late Start'
                },

                'Gnt.column.LateEndDate' : {
                    text : 'Late Finish'
                },

                'Gnt.field.Calendar' : {
                    calendarNotApplicable : 'Task calendar has no overlapping with assigned resources calendars'
                },

                'Gnt.column.Slack' : {
                    text : 'Slack'
                },

                'Gnt.column.Name' : {
                    text : 'Task Name'
                },

                'Gnt.column.BaselineStartDate' : {
                    text : 'Baseline Start Date'
                },

                'Gnt.column.BaselineEndDate' : {
                    text : 'Baseline End Date'
                },

                'Gnt.column.Milestone' : {
                    text : 'Milestone'
                },

                'Gnt.field.Milestone' : {
                    yes : 'Yes',
                    no  : 'No'
                },

                'Gnt.field.Dependency' : {
                    invalidFormatText     : 'Invalid dependency format',
                    invalidDependencyText : 'Invalid dependency found, please make sure you have no cyclic paths between your tasks',
                    invalidDependencyType : 'Invalid dependency type {0}. Allowed values are: {1}.'
                },

                'Gnt.constraint.Base' : {
                    name                               : "A constraint",
                    "Remove the constraint"            : "Remove the constraint",
                    "Cancel the change and do nothing" : "Cancel the change and do nothing"
                },

                'Gnt.constraint.FinishNoEarlierThan' : {
                    name                             : "Finish no earlier than",
                    // {0} constraint date
                    "Move the task to finish on {0}" : "Move the task to finish on {0}"
                },

                "Gnt.constraint.FinishNoLaterThan" : {
                    name                             : "Finish no later than",
                    // {0} constraint date
                    "Move the task to finish on {0}" : "Move the task to finish on {0}"
                },

                "Gnt.constraint.MustFinishOn" : {
                    name                             : "Must finish on",
                    // {0} constraint date
                    "Move the task to finish on {0}" : "Move the task to finish on {0}"
                },

                "Gnt.constraint.MustStartOn" : {
                    name                            : "Must start on",
                    // {0} constraint date
                    "Move the task to start at {0}" : "Move the task to start at {0}"
                },

                "Gnt.constraint.StartNoEarlierThan" : {
                    name                            : "Start no earlier than",
                    // {0} constraint date
                    "Move the task to start at {0}" : "Move the task to start at {0}"
                },

                "Gnt.constraint.StartNoLaterThan" : {
                    name                            : "Start no later than",
                    // {0} constraint date
                    "Move the task to start at {0}" : "Move the task to start at {0}"
                },

                "Gnt.column.ConstraintDate" : {
                    text : "Constraint date"
                },

                "Gnt.column.ConstraintType" : {
                    text : "Constraint"
                },

                "Gnt.widget.ConstraintResolutionForm" : {
                    dateFormat                             : "m/d/Y",
                    "OK"                                   : 'OK',
                    "Cancel"                               : 'Cancel',
                    "Resolution options"                   : "Resolution options",
                    "Don't ask again"                      : "Don't ask again",
                    // {0} task name, {1} constraint name
                    "Task {0} violates constraint {1}"     : "Task \"{0}\" violates constraint {1}",
                    // {0} task name, {1} constraint name, {2} constraint date
                    "Task {0} violates constraint {1} {2}" : "Task \"{0}\" violates constraint {1} {2}"
                },

                "Gnt.widget.ConstraintResolutionWindow" : {
                    "Constraint violation" : "Constraint violation"
                },

                "Gnt.panel.ResourceHistogram" : {
                    resourceText : 'Resource'
                }
            }
        });

        this.callParent(arguments);
    }
});

/**
@class Gnt.mixin.Localizable

A mixin providing localization functionality to the consuming class.
*/
Ext.define('Gnt.mixin.Localizable', {
    extend      : 'Sch.mixin.Localizable',
    
    // This line used to be like this:
    //      if Sch.config.locale is specified then we'll require corresponding class
    //      by default we require Gnt.locale.En class
    //      requires    : [ typeof Sch != 'undefined' && Sch.config && Sch.config.locale || 'Gnt.locale.En' ]
    //
    // But, SenchaCMD does not support dynamic expressions for `requires`
    // Falling back to requiring English locale - that will cause English locale to always be included in the build
    // (even if user has specified another locale in other `requires`), but thats better than requiring users
    // to always specify and load the locale they need explicitly
    requires    : [ 'Gnt.locale.En' ]
});

Ext.define('Gnt.constraint.Base', {

    mixins : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Object} l10n
     * An object, purposed for the class localization. Contains the following keys/values:
     *
     *      - "name" : "A constraint",
     *      - "Remove the constraint" : "Remove the constraint",
     *      - "Cancel the change and do nothing" : "Cancel the change and do nothing"
     */

    isSatisfied : function (task, date, precision) {
        throw "Abstract method";
    },


    getResolution : function (callback, task, date) {
        var me = this,
            called = false;

        date = date || task.getConstraintDate();

        var next = function () {
            if (!called) {
                called  = true;
                callback.apply(this, arguments);
            }
        };

        return {
            title       : me.L("name"),
            task        : task,
            date        : date,

            resolutions : this.getResolutionOptions(next, task, date),

            getCancelActionOption : function () {
                return this.resolutions[ 0 ];
            },

            cancelAction : function () {
                return this.getCancelActionOption().resolve();
            },

            proceedAction : function () {
                next();
            },

            getResolution : function (id) {
                return Ext.Array.findBy(this.resolutions, function(item) {
                    return item.id == id;
                });
            }
        };
    },


    getResolutionOptions : function (callback, task, date, precision) {
        return [{
            id          : 'cancel',
            title       : this.L("Cancel the change and do nothing"),
            resolve     : function () {
                callback(true);
            }
        }];
    },


    hasThisConstraintApplied : function (task) {
        return task.getConstraintClass() === this;
    },


    getInitialConstraintDate : function(task) {
        return task.getConstraintDate();
    },


    getDisplayableConstraintDateForFormat : function(date, format, task) {
        return date;
    },


    adjustConstraintDateFromDisplayableWithFormat : function(date, format, task) {
        return date;
    },


    shiftToNearestValidConstraintDate : function(date, format, task) {
        return date;
    },


    statics : {
        /**
         * Returns constraint instance by its type, if type is null or empty string returns null
         *
         * @param {String} type Constraint type to return instance for.
         * @return {Gnt.constraint.Base|null} Constraint class singleton
         */
        getConstraintClass : function (type) {
            var result = !Ext.isEmpty(type) && Ext.ClassManager.getByAlias('gntconstraint.' + type);
            return result || null;
        }
    }
});

Ext.define('Gnt.constraint.StartNoEarlierThan', {
    extend      : 'Gnt.constraint.Base',

    alias       : 'gntconstraint.startnoearlierthan',

    singleton   : true,

    requires    : ['Sch.util.Date'],

    /**
     * @cfg {Object} l10n
     * An object, purposed for the class localization. Contains the following keys/values:
     *
     *      - "name" : "Start no earlier than",
     *      - "Move the task to start at {0}" : "Move the task to start at {0}"
     */

    isSatisfied : function (task, date, precision) {
        var startDate = task.getStartDate();

        date = date || task.getConstraintDate();

        // read the followinig as: !date || !startDate || (startDate >= date)
        return !date || !startDate || (Sch.util.Date.compareWithPrecision(startDate, date, precision) !== -1);
    },


    getResolutionOptions : function (callback, task, date, precision) {
        var me          = this,
            resolutions = me.callParent(arguments);

        date = date || task.getConstraintDate();

        me.hasThisConstraintApplied(task) && resolutions.push({
            id      : 'remove-constraint',
            title   : me.L("Remove the constraint"),
            resolve : function () {
                task.setConstraintType('');
                callback();
            }
        });

        resolutions.push({
            id      : 'move-task',
            title   : me.L("Move the task to start at {0}"),
            resolve : function () {
                task.setStartDateWithoutPropagation(date, true);
                callback();
            }
        });

        return resolutions;
    },


    getInitialConstraintDate : function(task) {
        return task.getStartDate();
    }
});

Ext.define('Gnt.constraint.StartNoLaterThan', {
    extend      : 'Gnt.constraint.Base',

    alias       : 'gntconstraint.startnolaterthan',

    singleton   : true,

    requires    : ['Sch.util.Date'],

    /**
     * @cfg {Object} l10n
     * An object, purposed for the class localization. Contains the following keys/values:
     *
     *     - "name" : "Start no later than",
     *     - "Move the task to start at {0}" : "Move the task to start at {0}"
     */


    isSatisfied : function (task, date, precision) {
        var startDate = task.getStartDate();

        date = date || task.getConstraintDate();

        // read the following as: !date || !startDate || (startDate <= date)
        return !date || !startDate || (Sch.util.Date.compareWithPrecision(startDate, date, precision) !== 1);
    },


    getResolutionOptions : function (callback, task, date, precision) {
        var me          = this,
            resolutions = me.callParent(arguments);

        date = date || task.getConstraintDate();

        me.hasThisConstraintApplied(task) && resolutions.push({
            id      : 'remove-constraint',
            title   : me.L("Remove the constraint"),
            resolve : function () {
                task.setConstraintType('');
                callback();
            }
        });

        resolutions.push({
            id      : 'move-task',
            title   : me.L("Move the task to start at {0}"),
            resolve : function () {
                task.setStartDateWithoutPropagation(date, true);
                callback();
            }
        });

        return resolutions;
    },


    getInitialConstraintDate : function(task) {
        return task.getStartDate();
    }
});

Ext.define('Gnt.constraint.FinishNoEarlierThan', {
    extend      : 'Gnt.constraint.Base',

    alias       : 'gntconstraint.finishnoearlierthan',

    singleton   : true,

    requires    : ['Sch.util.Date'],

    /**
     * @cfg {Object} l10n
     * An object, purposed for the class localization. Contains the following keys/values:
     *
     *      - "name" : "Finish no earlier then",
     *      - "Move the task to finish on {0}" : "Move the task to finish on {0}"
     */


    isSatisfied : function (task, date) {
        var endDate = task.getEndDate();

        date = date || task.getConstraintDate();

        return !date || !endDate || endDate >= date;
    },


    getResolutionOptions : function (callback, task, date, precision) {
        var me          = this,
            resolutions = me.callParent(arguments);

        date = date || task.getConstraintDate();

        me.hasThisConstraintApplied(task) && resolutions.push({
            id      : 'remove-constraint',
            title   : me.L("Remove the constraint"),
            resolve : function () {
                task.setConstraintType('');
                callback();
            }
        });

        resolutions.push({
            id      : 'move-task',
            title   : me.L("Move the task to finish on {0}"),
            resolve : function () {
                task.setEndDateWithoutPropagation(date, true);
                callback();
            }
        });

        return resolutions;
    },


    getInitialConstraintDate : function(task) {
        return task.getEndDate();
    },


    getDisplayableConstraintDateForFormat : function(date, format, task) {
        if (date && !Ext.Date.formatContainsHourInfo(format) && (date - Ext.Date.clearTime(date, true) === 0)) {
            date = Sch.util.Date.add(date, Sch.util.Date.DAY, -1);
        }
        return date;
    },


    adjustConstraintDateFromDisplayableWithFormat : function(date, format, task) {
        if (date && !Ext.Date.formatContainsHourInfo(format) && (date - Ext.Date.clearTime(date, true) === 0)) {
            date = Sch.util.Date.add(date, Sch.util.Date.DAY, 1);
        }
        return date;
    }
});

Ext.define('Gnt.constraint.FinishNoLaterThan', {
    extend      : 'Gnt.constraint.Base',

    alias       : 'gntconstraint.finishnolaterthan',

    singleton   : true,

    requires    : ['Sch.util.Date'],

    /**
     * @cfg {Object} l10n
     * An object, purposed for the class localization. Contains the following keys/values:
     *
     *       - "name" : "Finish no later than",
     *       - "Move the task to finish on {0}" : "Move the task to finish on {0}"
     */

    isSatisfied : function (task, date, precision) {
        var endDate = task.getEndDate();

        date = date || task.getConstraintDate();

        // read the following as: !date || !endDate || endDate <= date
        return !date || !endDate || (Sch.util.Date.compareWithPrecision(endDate, date, precision) !== 1);
    },


    getResolutionOptions : function (callback, task, date, precision) {
        var me          = this,
            resolutions = me.callParent(arguments);

        date = date || task.getConstraintDate();

        me.hasThisConstraintApplied(task) && resolutions.push({
            id      : 'remove-constraint',
            title   : me.L("Remove the constraint"),
            resolve : function () {
                task.setConstraintType('');
                callback();
            }
        });

        resolutions.push({
            id      : 'move-task',
            title   : me.L("Move the task to finish on {0}"),
            resolve : function () {
                task.setEndDateWithoutPropagation(date, true);
                callback();
            }
        });

        return resolutions;
    },


    getInitialConstraintDate : function(task) {
        return task.getEndDate();
    },


    getDisplayableConstraintDateForFormat : function(date, format, task) {
        if (date && !Ext.Date.formatContainsHourInfo(format) && (date - Ext.Date.clearTime(date, true) === 0)) {
            date = Sch.util.Date.add(date, Sch.util.Date.DAY, -1);
        }
        return date;
    },


    adjustConstraintDateFromDisplayableWithFormat : function(date, format, task) {
        if (date && !Ext.Date.formatContainsHourInfo(format) && (date - Ext.Date.clearTime(date, true) === 0)) {
            date = Sch.util.Date.add(date, Sch.util.Date.DAY, 1);
        }
        return date;
    }
});

Ext.define('Gnt.constraint.MustStartOn', {
    extend  : 'Gnt.constraint.Base',

    alias       : 'gntconstraint.muststarton',

    singleton   : true,

    requires    : ['Sch.util.Date'],

    /**
     * @cfg {Object} l10n
     * An object, purposed for the class localization. Contains the following keys/values:
     *
     *      - "name" : "Must start on",
     *      - "Move the task to start at {0}" : "Move the task to start at {0}"
     */

    isSatisfied : function (task, date, precision) {
        var startDate = task.getStartDate();

        date = date || task.getConstraintDate();

        // read the following as: !date || !startDate || (startDate.valueOf() == date.valueOf())
        return !date || !startDate || (Sch.util.Date.compareWithPrecision(startDate, date, precision) === 0);
    },


    getResolutionOptions : function (callback, task, date, precision) {
        var me          = this,
            resolutions = me.callParent(arguments);

        date = date || task.getConstraintDate();

        this.hasThisConstraintApplied(task) && resolutions.push({
            id      : 'remove-constraint',
            title   : me.L("Remove the constraint"),
            resolve : function () {
                task.setConstraintType('');
                callback();
            }
        });

        resolutions.push({
            id      : 'move-task',
            title   : me.L("Move the task to start at {0}"),
            resolve : function () {
                task.setStartDateWithoutPropagation(date, true);
                callback();
            }
        });

        return resolutions;
    },


    getInitialConstraintDate : function(task) {
        return task.getStartDate();
    }
});

Ext.define('Gnt.constraint.MustFinishOn', {
    extend      : 'Gnt.constraint.Base',

    alias       : 'gntconstraint.mustfinishon',

    singleton   : true,

    requires    : ['Sch.util.Date'],

    /**
     * @cfg {Object} l10n
     * An object, purposed for the class localization. Contains the following keys/values:
     *
     *      - "name" : "Must finish on",
     *      - "Move the task to finish on {0}" : "Move the task to finish on {0}"
     */

    isSatisfied : function (task, date, precision) {
        var endDate = task.getEndDate();

        date = date || task.getConstraintDate();

        // read the following as: !date || !endDate || (endDate.valueOf() == date.valueOf())
        return !date || !endDate || (Sch.util.Date.compareWithPrecision(endDate, date, precision) === 0);
    },


    getResolutionOptions : function (callback, task, date, precision) {
        var me          = this,
            resolutions = me.callParent(arguments);

        date = date || task.getConstraintDate();

        me.hasThisConstraintApplied(task) && resolutions.push({
            id      : 'remove-constraint',
            title   : me.L("Remove the constraint"),
            resolve : function () {
                task.setConstraintType('');
                callback();
            }
        });

        resolutions.push({
            id      : 'move-task',
            title   : me.L("Move the task to finish on {0}"),
            resolve : function () {
                task.setEndDateWithoutPropagation(date, true);
                callback();
            }
        });

        return resolutions;
    },


    getInitialConstraintDate : function(task) {
        return task.getEndDate();
    },


    getDisplayableConstraintDateForFormat : function(date, format, task) {
        if (date && !Ext.Date.formatContainsHourInfo(format) && (date - Ext.Date.clearTime(date, true) === 0)) {
            date = Sch.util.Date.add(date, Sch.util.Date.DAY, -1);
        }
        return date;
    },


    adjustConstraintDateFromDisplayableWithFormat : function(date, format, task) {
        if (date && !Ext.Date.formatContainsHourInfo(format) && (date - Ext.Date.clearTime(date, true) === 0)) {
            date = Sch.util.Date.add(date, Sch.util.Date.DAY, 1);
        }
        return date;
    }
});

/**
 * This mixin adds transaction alike functionality into a model and works in pair with {@link Gnt.data.mixin.ProjectableStore}.
 * If you mix-in this class into a model, make sure you also mix-in {@link Gnt.model.mixin.ProjectableStore} into the store(s)
 * which will work with this model class.
 *
 * Make sure you call the {@link #initProjection} method in your model class constructor, otherwise mixing in this mixin
 * won't have any effect.
 */
Ext.define('Gnt.model.mixin.ProjectableModel', function() {

    var overridables = {};

    /**
     * Initializes record's projectable mechanics.
     * @protected
     * @method initProjectable
     * @member Gnt.model.mixin.ProjectableModel
     */
    function initProjectable() {
        Ext.override(this, overridables);
    }

    
    // Private
    function getUnprojected(fieldName) {
        return this.data[fieldName];
    }


    /**
     * Checks whether the record is projected, i.e. a projection has changed values for this record.
     *
     * @return {Boolean}
     */
    function isProjected() {
        var me         = this,
            store      = me.getTreeStore && me.getTreeStore() || me.store,
            projection = store && store.getProjection && store.getProjection();

        return projection && projection.hasOwnProperty(me.internalId) ? true : false;
    }


    overridables.get = function get(fieldName) {
        var me         = this,
            store      = me.getTreeStore && me.getTreeStore() || me.store,
            projection = store && store.getProjection && store.getProjection(),
            internalId = me.internalId,
            data, value;

        if (projection && projection.hasOwnProperty(internalId)) {
            data  = projection[ internalId ];
            if (fieldName in data) {
                value = data[ fieldName ];
            }
            else {
                value = me.callParent([ fieldName ]);
            }
        }
        else {
            value = me.callParent([ fieldName ]);
        }

        return value;
    };


    overridables.set = function set(fieldName, value) {
        var me         = this,
            store      = me.getTreeStore && me.getTreeStore() || me.store,
            projection = store && store.getProjection && store.getProjection(),
            internalId = me.internalId,
            data, prop, result, currentValue,
            currentValueAdopted, valueAdopted;

        if (projection) {

            result = [];

            if (arguments.length == 1) {
                for (prop in fieldName) {
                    if (fieldName.hasOwnProperty(prop)) {
                        value        = fieldName[ prop ];
                        currentValue = me.get(prop); //me.getUnprojected(prop);

                        valueAdopted        = (value !== undefined && value !== null) ? (value).valueOf() : value;
                        currentValueAdopted = (currentValue !== undefined && currentValue !== null) ? (currentValue).valueOf() : currentValue;

                        if (
                            ((valueAdopted === undefined || valueAdopted === null) && valueAdopted !== currentValueAdopted) ||
                            valueAdopted != currentValueAdopted
                        ) {
                            data = projection[ internalId ] = projection.hasOwnProperty( internalId ) && projection[ internalId ] || {};
                            data[ prop ] = value;
                            result.push(prop);
                        }
                    }
                }
            }
            // there can be 3 arguments to 'set' method call
            else if (arguments.length > 1) {
                currentValue = me.get(fieldName); //me.getUnprojected(fieldName);

                valueAdopted        = (value !== undefined && value !== null) ? (value).valueOf() : value;
                currentValueAdopted = (currentValue !== undefined && currentValue !== null) ? (currentValue).valueOf() : currentValue;

                if (
                    ((valueAdopted === undefined || valueAdopted === null) && valueAdopted !== currentValueAdopted) ||
                    valueAdopted != currentValueAdopted
                ) {
                    data = projection[ internalId ] = projection.hasOwnProperty( internalId ) && projection[ internalId ] || {};
                    data[ fieldName ] = value;
                    result.push(fieldName);
                }
            }
        }
        else {
            result = me.callParent(arguments);
        }

        return result;
    };


    return {
        initProjectable : initProjectable,
        getUnprojected  : getUnprojected,
        isProjected     : isProjected
    };
});

/**
 * The mixin adds transaction alike functionality into a store, works in pair with {@link Gnt.model.mixin.ProjectableModel}
 * if you mix-in this one into a store make sure you mixin in {@link Gnt.model.mixin.ProjectableModel} into store's
 * model class as well.
 *
 * NOTE: only model updates are included into a transaction, record adding/removing are not taken into account,
 * that's why it's called "projection".
 */
Ext.define('Gnt.data.mixin.ProjectableStore', function() {

    function getByInternalId(store, id) {
        return store.byInternalIdMap && store.byInternalIdMap[id] || store.getByInternalId(id);
    }

    /**
     * @private
     * @method getProjection
     * @member Gnt.data.mixin.ProjectableStore
     */
    function getProjection() {
        var me              = this,
            projectionStack = me.projectionStack;

        return projectionStack && projectionStack[ projectionStack.length - 1 ];
    }


    /**
     * @private
     * @method getProjectionLevel
     * @member Gnt.data.mixin.ProjectableStore
     */
    function getProjectionLevel() {
        var me              = this,
            projectionStack = me.projectionStack;

        return projectionStack && projectionStack.length || 0;
    }


    /**
     * Checks whether any of given records are projected currently, i.e. any of given records has changes in current
     * projection.
     *
     * @param {Ext.data.Model/[Ext.data.Model]} records
     * @return boolean
     */
    function areProjected(records) {
        var i, len, are;

        records = [].concat(records);

        for (are = false, i = 0, len = records.length; !are && i < len; i++) {
            are = records[i].isProjected();
        }

        return are;
    }


    /**
      * Starts store's projection, any updates to any records during projection period will be put into a projection
      * storage and might be committed into record's data by calling {@link Gnt.data.mixin.ProjectableStore#commitProjection} or
      * canceled by calling {@link Gnt.data.mixin.ProjectableStore#rejectProjection}. The primary condition for this
      * to work is that store's records must use {#link Gnt.model.mixin.ProjectableModel} mixin. Projections
      * might be nested.
      *
      * @method startProjection
      * @member Gnt.data.mixin.ProjectableStore
      */
    function startProjection() {
        var me = this,
            projectionStack = me.projectionStack,
            newProjection, prevProjection;

        if (!projectionStack) {
            me.projectionStack = [{}];
        }
        else {
            prevProjection = projectionStack[ projectionStack.length - 1 ];
            newProjection  = {};

            Ext.Object.each(prevProjection, function(id, data) {
                var dataConstructor = function() {};

                dataConstructor.prototype = data;
                newProjection[id] = new dataConstructor();
            });

            projectionStack.push(newProjection);
        }

    }


    /**
     * Commits all the changes recorded since last call to {@link #startProjection}..
     *
     * @method commitProjection
     * @member Gnt.data.mixin.ProjectableStore
     */
    function commitProjection() {
        var me = this,
            projectionStack = me.projectionStack,
            projectionData, committingData,
            prop, data,
            hasUpdates,
            internalId,
            record;


        // If projection level is 0 then committing recorded updates into corresponding store's records.
        if (projectionStack.length === 1) {
            committingData     = projectionStack[0];
            me.projectionStack = null;

            for (internalId in committingData) {
                if (committingData.hasOwnProperty(internalId)) {

                    record              = getByInternalId(me, internalId);

                    // Record might have been deleted from the store during projection time
                    if (record) {
                        data                = committingData[ internalId ];
                        hasUpdates          = false;

                        for (prop in data) {
                            if (data.hasOwnProperty(prop)) {
                                hasUpdates = true;
                                break;
                            }
                        }

                        hasUpdates && record.set(data);
                    }
                }
            }
        }
        // If projection level is higher then copying current projection into lower level (previous) projection
        else {
            committingData = projectionStack.pop();
            projectionData = projectionStack[ projectionStack.length - 1 ];

            for (internalId in committingData) {
                if (committingData.hasOwnProperty(internalId)) {
                    if (!projectionData.hasOwnProperty(internalId)) {
                        projectionData[ internalId ] = committingData[ internalId ];
                    }
                    else {
                        projectionData[ internalId ] = Ext.apply(projectionData[ internalId ], committingData[ internalId ]);
                    }
                }
            }
        }

        this.fireEvent('projectioncommit', this, projectionStack && projectionStack[projectionStack.length - 1], committingData);
    }


    /**
     * Rejects all the changes to store's records recorded since projection last call to {@link #startProjection}.
     *
     * @method rejectProjection
     * @member Gnt.data.mixin.ProjectableStore
     */
    function rejectProjection() {
        var me              = this,
            projectionStack = me.projectionStack,
            projectionData  = projectionStack.pop();

        // If projection level was 1 (and now 0) then simply getting rid of projection stack
        if (projectionStack.length === 0) {
            me.projectionStack = null;
        }
        // If projection level is higher then we've got rid of changes recorded since last startProjection() call
        // by simply popping the last projection state from the projection stack.

        this.fireEvent('projectionreject', this, projectionStack && projectionStack[projectionStack.length - 1], projectionData);
    }

    return {
        projectionStack  : null,

        getProjection      : getProjection,
        areProjected       : areProjected,
        getProjectionLevel : getProjectionLevel,
        startProjection    : startProjection,
        commitProjection   : commitProjection,
        rejectProjection   : rejectProjection
    };
});

/**
@class Gnt.model.Calendar
@extends Sch.model.Customizable

A model representing a single calendar.
Every model instance will be also decorated with the {@link Gnt.data.Calendar} instance, created based on the model field values.
The fields of the model correspond to the properties of {@link Gnt.data.Calendar} class.

Fields
------

- `Id` - record identifier (corresponds to {@link Gnt.data.Calendar#calendarId})
- `Name` - corresponds to {@link Gnt.data.Calendar#name}
- `DaysPerMonth` - corresponds to {@link Gnt.data.Calendar#daysPerMonth}
- `DaysPerWeek` - corresponds to {@link Gnt.data.Calendar#daysPerWeek}
- `HoursPerDay` - corresponds to {@link Gnt.data.Calendar#hoursPerDay}
- `WeekendsAreWorkdays` - corresponds to {@link Gnt.data.Calendar#weekendsAreWorkdays}
- `WeekendFirstDay` - corresponds to {@link Gnt.data.Calendar#weekendFirstDay}
- `WeekendSecondDay` - corresponds to {@link Gnt.data.Calendar#weekendSecondDay}
- `DefaultAvailability` - corresponds to {@link Gnt.data.Calendar#defaultAvailability}
- `Days` - stores reference to the {@link Gnt.data.Calendar} instance
- `CalendarClass` - calendar class that should be used to create {@link Gnt.data.Calendar} instance
- `PhantomId` - phantom record identifier
- `PhantomParentId` - phantom parent record identifier

A collection of this models is supposed to be provided for the {@link Gnt.data.CalendarManager calendar manager}.
*/
Ext.define('Gnt.model.Calendar', {
    extend                      : 'Sch.model.Customizable',

    requires                    : ['Ext.data.NodeInterface'],

    idProperty                  : 'Id',

    calendar                    : null,

    /**
     * @cfg {String} nameField The name of the field specifying the calendar name.
     */
    nameField                   : 'Name',

    /**
     * @cfg {String} daysPerMonthField The name of the field specifying the number of days per month
     * (used when converting the big duration units like month/year to days).
     */
    daysPerMonthField           : 'DaysPerMonth',

    /**
     * @cfg {String} daysPerWeekField The name of the field specifying the number of days per week
     * (used when converting the duration only).
     */
    daysPerWeekField            : 'DaysPerWeek',

    /**
     * @cfg {String} hoursPerDayField The name of the field specifying the number of hours per day
     * (used when converting the duration only).
     */
    hoursPerDayField            : 'HoursPerDay',

    /**
     * @cfg {String} weekendsAreWorkdaysField The name of the field specifying if all weekdays are working.
     */
    weekendsAreWorkdaysField    : 'WeekendsAreWorkdays',

    /**
     * @cfg {String} weekendFirstDayField The name of the field specifying the index of the first day in weekend.
     */
    weekendFirstDayField        : 'WeekendFirstDay',

    /**
     * @cfg {String} weekendSecondDayField The name of the field specifying the index of the second day in weekend.
     */
    weekendSecondDayField       : 'WeekendSecondDay',

    /**
     * @cfg {String} defaultAvailabilityField The name of the fields specifying the calendar default availability
     */
    defaultAvailabilityField    : 'DefaultAvailability',

    /**
     * @cfg {String} daysField The name of the fields specifying the calendar content ({@link Gnt.data.Calendar} instance)
     */
    daysField                   : 'Days',

    /**
     * @cfg {String} calendarClassField The name of the fields specifying the class that should be used to
     * to create {@link Gnt.data.Calendar the calendar} instance
     */
    calendarClassField          : 'CalendarClass',

    /**
     * @cfg {String} phantomIdField The name of the field specifying the phantom id when this record is being 'realized' by the server.
     */
    phantomIdField              : 'PhantomId',

    /**
     * @cfg {String} phantomParentIdField The name of the field specifying the parent calendar phantom id when this record is being 'realized' by the server.
     */
    phantomParentIdField        : 'PhantomParentId',

    customizableFields      : [
        { name : 'Name' },
        {name : 'DaysPerMonth', type : 'integer'},
        {name : 'DaysPerWeek', type : 'integer'},
        {name : 'HoursPerDay', type : 'integer'},
        {name : 'WeekendsAreWorkdays', type : 'boolean'},
        {name : 'WeekendFirstDay', type : 'integer'},
        {name : 'WeekendSecondDay', type : 'integer'},
        { name : 'DefaultAvailability' },
        { name : 'Days' },
        {name : 'CalendarClass', defaultValue : 'Gnt.data.Calendar'},
        {name : 'PhantomId'},
        {name : 'PhantomParentId'}
    ],

    constructor : function (config, id, node) {
        var cfg         = config || node || {};

        var days        = cfg.calendar || cfg.Days;

        config && delete config.calendar;
        node && delete node.calendar;

        this.callParent(arguments);

        this.setDays(days);

        this.data[this.phantomIdField]  = this.getId();
    },

    get : function (field) {
        if (field === 'Days') {
            return this.getCalendar() || this.data[this.daysField];
        } else {
            return this.callParent(arguments);
        }
    },

    set : function (field, value) {
        if (field === 'Days') {
            if (value instanceof Gnt.data.Calendar) {
                this.setCalendar(value);
            } else {
                this.data[this.daysField]   = value;
            }
        } else {
            return this.callParent(arguments);
        }
    },

    /**
     * Gets a calendar assigned to the record.
     */
    getCalendar : function () {
        return this.calendar;
    },

    /**
     * @private
     * Assign a calendar to the record.
     * @param {Gnt.data.Calendar} calendar The calendar to assign.
     */
    setCalendar : function (calendar) {
        this.calendar   = calendar;
    },

    getCalendarConfig : function () {
        return {
            calendarId          : this.getId(),
            daysPerMonth        : this.getDaysPerMonth(),
            daysPerWeek         : this.getDaysPerWeek(),
            defaultAvailability : this.getDefaultAvailability(),
            hoursPerDay         : this.getHoursPerDay(),
            name                : this.getName(),
            parent              : this.parentNode && this.parentNode.getCalendar(),
            weekendFirstDay     : this.getWeekendFirstDay(),
            weekendSecondDay    : this.getWeekendSecondDay(),
            weekendsAreWorkdays : this.getWeekendsAreWorkdays()
        };
    },

    getModelConfig : function (calendar, isPrototype) {
        var result = {};

        // if we retrieve data from class prototype we should not
        // set reference to "calendar" instance ..since "calendar" is not an instance really
        if (!isPrototype) {
            result.parentId = calendar.parent && calendar.parent.calendarId;
            result.calendar = calendar;
        }

        result[this.daysPerMonthField]          = calendar.daysPerMonth;
        result[this.daysPerWeekField]           = calendar.daysPerWeek;
        result[this.defaultAvailabilityField]   = calendar.defaultAvailability;
        result[this.hoursPerDayField]           = calendar.hoursPerDay;
        result[this.nameField]                  = calendar.name;
        result[this.weekendFirstDayField]       = calendar.weekendFirstDay;
        result[this.weekendSecondDayField]      = calendar.weekendSecondDay;
        result[this.weekendsAreWorkdaysField]   = calendar.weekendsAreWorkdays;
        result[this.calendarClassField] = Ext.getClassName(calendar);

        return result;
    },

    setCalendarManager : function (calendarManager) {
        this.calendarManager    = calendarManager;
    },

    getCalendarManager : function () {
        return this.calendarManager;
    },

    getParentCalendarClass : function () {
        var parent = this.parentNode,
            result;

        while (parent && !result) {
            result = parent.getCalendarClass();
            parent = parent.parentNode;
        }

        return result;
    },

    fillNodeFromPrototype : function (node) {
        // try to get proper calendar class:
        //  1. from the "node" itself
        var cls     = node[this.calendarClassField] ||
            //  2. from this.treeStore if presented
            this.treeStore && this.treeStore.getCalendarClass() ||
            //  2. from "this" or its parents ("this" is supposed to become the "node" parent)
            this.getCalendarClass() || this.getParentCalendarClass() ||
            this.getField(this.calendarClassField).getDefaultValue();

        if (cls) {
            Ext.applyIf(node, this.getModelConfig(Ext.ClassManager.get(cls).prototype, true));

            var children = node.children;

            if (children && children.length) {
                for (var i = 0; i < children.length; i++) {
                    this.fillNodeFromPrototype(children[i]);
                }
            }
        }
    },

    prepareCalendarNode  : function (node) {
        // fill model fields with data retrieved from the calendar
        if (node instanceof Gnt.data.Calendar) {
            node = this.getModelConfig(node);
        // .. or from associated CalendarClass prototype
        } else if (Ext.isObject(node)) {
            this.fillNodeFromPrototype(node);
        }

        node = this.createNode(node);

        if (this.phantom) {
            if (this.getId() !== node.data[this.phantomParentIdField]) {
                node.modified                               = node.modified || {};
                node.modified[this.phantomParentIdField]    = node.data[this.phantomParentIdField];
                node.data[this.phantomParentIdField]        = this.getId();
            }
        }

        return node;
    }

}, function () {
    // Do this first to be able to override NodeInterface methods
    Ext.data.NodeInterface.decorate(this);

    this.override({
        // @OVERRIDE
        insertBefore : function (node) {
            node = this.prepareCalendarNode(node);

            return this.callParent(arguments);
        },

        // @OVERRIDE
        appendChild : function (node) {
            if (node instanceof Array) {
                for (var i = 0; i < node.length; i++) {
                    node[i] = this.prepareCalendarNode(node[i]);
                }
            } else {
                node = this.prepareCalendarNode(node);
            }

            return this.callParent(arguments);
        }
    });
});

/**

@class Gnt.model.CalendarDay
@extends Sch.model.Customizable

A model representing a single day in the calendar. Depending from the `Type` field, day may be a concrete day per se (2012/01/01),
a certain weekday (all Thursdays), or an override for all certain weekdays in the timeframe
(all Fridays between 2012/01/01 - 2012/01/15, inclusive).

A collection CalendarDay instances is supposed to be provided for the {@link Gnt.data.Calendar calendar}

Fields
------

- `Id`   - The id of the date. Can be an arbitrary unique value, assigned by the server. For backward compatibility, if this field has one of the special formats
then some data will be extracted from it. This behavior will be kept for several coming releases, but you should not rely on it anymore.
- `Type` - The type of this calendar day. Can be one of the following `DAY`, `WEEKDAY`, `WEEKDAYOVERRIDE`:
    - Default value is `DAY` meaning this day represents a "real" day in the calendar (2012/01/01 for example) and contains availability information for that particular day only.
    The date is stored in the `Date` field.
    - The `WEEKDAY` value means calendar day contains information about all weekdays with the index, given in the `Weekday` field (0 - Sunday, 1 - Monday and so on).
    For example - all Fridays. `Date` field is ignored.
    - <p>The `WEEKDAYOVERRIDE` value means calendar day contains information about all weekdays within certain timespan. For example - all Fridays between 2012/01/01 - 2012/01/15.
    Week day index should be stored in the `Weekday` field again, beginning of the timespan - in the `OverrideStartDate` field and the end of timespan - in the `OverrideEndDate`.
    </p>
    <p>
    A single day instance contains the override for a single week day. So, to define overrides for several days (Monday and Tuesday for example) - add an additional instance
    to the calendar with the same `Name/OverrideStartDate/OverrideEndDate` values. There's no need to define an override for every weekday - if some day is not defined - the
    default availability will be used.
    </p>
    <p>
    * **Note** Every week override should also have a "main" calendar day instance, representing the override itself. It should have the same
    values for `Name/OverrideStartDate/OverrideEndDate` fields and -1 for `Weekday`. Also, the timespans of all week overrides should not intersect.
    </p>
    <p>
    To avoid manual creation of week overrides you can use the calendar API (for example, {@link Gnt.data.Calendar#addNonStandardWeek addNonStandardWeek},
    {@link Gnt.data.Calendar#removeNonStandardWeek removeNonStandardWeek} methods), or use a special widget: {@link Gnt.widget.calendar.Calendar}
    </p>

- `Date` - the date for this day in the ISO 8601 format. Any time information in this field will be cleared. If this instance
  represents a weekday or week override, this field will be ignored.
- `Weekday` - the index of the week day (0 - Sunday, 1 - Monday and so on) if this instance contains information about the week day (applicable for `WEEKDAY` and `WEEKDAYOVERRIDE`).
Should be set to -1 for the "main" instance of the week overrides.
- `OverrideStartDate` - The start date of the timespan for week day override.
- `OverrideEndDate` - The end date of the timespan for week day override.
- `Name` - optional name of the day (holiday name for example)
- `Cls` - optional name of the CSS class, which can be used by various plugins working with weekends and holidays. Default value is `gnt-holiday`
If a holiday lasts for several days, then all days should have the same `Cls` value.
- `IsWorkingDay` - optional boolean flag, allowing you to specify exceptions - working days which falls on weekends. Default value is `false`. **Please note**, that simply setting this
field to "true" is not enough - you also need to specify the exact hours that are available for work with the `Availability` field (see below).
- `Availability` - should be an array of strings, containing the hourly availability for this day. Strings should have the following format:

        // two working intervals
        [ '08:00-12:00', '13:00-17:00' ]

        // whole 24 hours are available
        [ '00:00-24:00' ]
* **Please note**, that this field overrides the `IsWorkingDay` - for example, a day with "IsWorkingDay : false" and "Availability : [ '08:00-12:00' ]" - will be considered as
working day.

The name of any field can be customized in the subclass. Please refer to {@link Sch.model.Customizable} for details.

*/
Ext.define('Gnt.model.CalendarDay', {

    requires    : [ 'Ext.data.Types' ],

    extend      : 'Sch.model.Customizable',

    idProperty  : 'Id',

    customizableFields      : [
        /**
         * @method getDate
         *
         * Returns the value of the `Date` field
         *
         * @return {Date} The date of this calendar day
         */
        {
            name        : 'Date',
            type        : 'date',
            dateFormat  : 'c',
            persist     : true,
            convert     : function (value, record) {
                if (!value) return;

                var converted   = Ext.data.Types.DATE.convert.call(this, value);

                if (converted) {
                    Ext.Date.clearTime(converted);
                }

                return converted;
            }
        },
        /**
         * @method getWeekday
         *
         * Returns the value of the `Weekday` field
         *
         * @return {Number} The index of the week day (0 - Sunday, 1 - Monday, etc).
         */
        /**
         * @method setWeekday
         *
         * Sets value of the `Weekday` field
         *
         * @param {Number} weekday The index of the week day (0 - Sunday, 1 - Monday, etc).
         */
        {
            name            : 'Weekday',
            type            : 'int'
        },
        /**
         * @method getOverrideStartDate
         *
         * Returns the start date of the timespan for the week day override.
         *
         * @return {Date} The start date
         */
        /**
         * @method setOverrideStartDate
         *
         * Sets the start date of the timespan for the week day override
         *
         * @param {Date} startDate The new start date
         */
        {
            name            : 'OverrideStartDate',
            type            : 'date',
            dateFormat      : 'c'
        },
        /**
         * @method getOverrideEndDate
         *
         * Returns the end date of the timespan for the week day override.
         *
         * @return {Date} The end date
         */
        /**
         * @method setOverrideEndDate
         *
         * Sets the end date of the timespan for the week day override
         *
         * @param {Date} endDate The new end date
         */
        {
            name            : 'OverrideEndDate',
            type            : 'date',
            dateFormat      : 'c'
        },
        {
            name            : 'Type',
            defaultValue    : 'DAY' // 'DAY', 'WEEKDAY', 'WEEKDAYOVERRIDE'
        },
        { name: 'IsWorkingDay', type: 'boolean', defaultValue : false },

        /**
         * @method getCls
         *
         * Gets the "class" of the day
         *
         * @return {String} cls The "class" of the day
         */
        /**
         * @method setCls
         *
         * Sets the "class" of the day
         *
         * @param {String} cls The new class of the day
         */
        {
            name            : 'Cls',
            defaultValue    : 'gnt-holiday'
        },

        /**
         * @method getName
         *
         * Gets the "name" of the day
         *
         * @return {String} name The "name" of the day
         */
        /**
         * @method setName
         *
         * Sets the "name" of the day
         *
         * @param {String} name The new name of the day
         */
        'Name',

        // [ '08:00-12:00', '13:00-17:00' ]
        {
            name        : 'Availability',
            persist     : true,
            convert     : function (value, record) {
                if (value) {
                    return Ext.typeOf(value) === 'string' ? [ value ] : value;
                } else {
                    return [];
                }
            }
        }
    ],

    availabilityCache           : null,

    /**
     * @cfg {String} weekDayField The name of the `Weekday` field.
     */
    weekDayField                : 'Weekday',

    /**
     * @cfg {String} overrideStartDateField The name of the `OverrideStartDate` field.
     */
    overrideStartDateField      : 'OverrideStartDate',

    /**
     * @cfg {String} overrideEndDateField The name of the `OverrideEndDate` field.
     */
    overrideEndDateField        : 'OverrideEndDate',

    /**
     * @cfg {String} typeField The name of the `Type` field.
     */
    typeField                   : 'Type',

    /**
     * @cfg {String} dateField The name of the `Date` field.
     */
    dateField                   : 'Date',

    /**
     * @cfg {String} isWorkingDayField The name of the `IsWorkingDay` field.
     */
    isWorkingDayField           : 'IsWorkingDay',

    /**
     * @cfg {String} clsField The name of the `Cls` field.
     */
    clsField                    : 'Cls',


    /**
     * @cfg {String} nameField The name of the `Name` field.
     */
    nameField                   : 'Name',

    /**
     * @cfg {String} availabilityField The name of the `Availability` field.
     */
    availabilityField           : 'Availability',


    /**
     * Sets the date for this day (will clear the time part)
     * @param {Date} date
     */
    setDate : function (date) {
        if (date) date      = Ext.Date.clearTime(date, true);

        this.set(this.dateField, date);
    },

    /**
     * Clears the date for this day
     * @param {Date} date
     */
    clearDate : function () {
        this.set(this.dateField, null);
    },

    /**
     * This method returns the availability for this day. By default it will decode an array of strings '08:00-12:00' to an
     * array of objects like:
     *
            {
                startTime       : new Date(0, 0, 0, 8),
                endTime         : new Date(0, 0, 0, 12)
            }

     * You can pass the "asString" flag to disable that and just return strings.
     *
     * @param {Boolean} asString Whether to just return an array of strings, instead of objects.
     * @return {Object[]/String[]} Array of objects with "startTime", "endTime" properties.
     */
    getAvailability : function (asString) {
        var me      = this;

        if (asString) {
            // Return the raw availability array with strings
            return this.get(this.availabilityField);
        }

        if (this.availabilityCache) {
            return this.availabilityCache;
        }

        var parsed  = [];

        Ext.Array.each(this.get(this.availabilityField), function (value) {
            parsed.push(Ext.typeOf(value) === 'string' ? me.parseInterval(value) : value);
        });

        this.verifyAvailability(parsed);

        return this.availabilityCache = parsed;
    },


    /**
     * This method updates the availability information for this day. It accept an array of strings: '08:00-12:00', or
     * objects like:

            {
                startTime       : new Date(0, 0, 0, 8),
                endTime         : new Date(0, 0, 0, 12)
            }

     * @param {Object[]/String[]} intervals Array of availability intervals
     */
    setAvailability : function (intervals) {
        // clear cache
        this.availabilityCache = null;

        this.set(this.availabilityField, this.stringifyIntervals(intervals));

        // to trigger the `verifyAvailability`
        this.getAvailability();
    },


    verifyAvailability : function (intervals) {
        intervals.sort(function (a, b) {
            return a.startTime - b.startTime;
        });

        Ext.Array.each(intervals, function (interval) {
            if (interval.startTime > interval.endTime) {
                throw new Error("Start time " + Ext.Date.format(interval.startTime, 'H:i') + " is greater than end time " + Ext.Date.format(interval.endTime, 'H:i'));
            }
        });

        for (var i = 1; i < intervals.length; i++) {
            var prev        = intervals[ i - 1 ];
            var curr        = intervals[ i ];

            if (prev.endTime > curr.startTime) {
                throw new Error("Availability intervals should not intersect: [" + this.stringifyInterval(prev) + "] and [" + this.stringifyInterval(curr) + "]");
            }
        }
    },


    prependZero : function (value) {
        return value < 10 ? '0' + value : value;
    },


    stringifyInterval : function (interval) {
        var startTime   = interval.startTime;
        var endTime     = interval.endTime;

        return this.prependZero(startTime.getHours()) + ':' + this.prependZero(startTime.getMinutes()) + '-' +
            (endTime.getDate() == 1 ? 24 : this.prependZero(endTime.getHours())) + ':' + this.prependZero(endTime.getMinutes());
    },


    stringifyIntervals : function (intervals) {
        var me                  = this;
        var result              = [];

        Ext.Array.each(intervals, function (interval) {
            if (Ext.typeOf(interval) === 'string') {
                result.push(interval);
            } else {
                result.push(me.stringifyInterval(interval));
            }
        });

        return result;
    },


    parseInterval : function (string) {
        var match   = /(\d\d):(\d\d)-(\d\d):(\d\d)/.exec(string);

        if (!match) throw "Invalid format for availability string: " + string + ". It should have exact format: hh:mm-hh:mm";

        return {
            startTime       : new Date(0, 0, 0, match[ 1 ], match[ 2 ]),
            endTime         : new Date(0, 0, 0, match[ 3 ], match[ 4 ])
        };
    },


    /**
     * Returns the total length of all availability intervals for this day in hours.
     *
     * @return {Number}
     */
    getTotalHours : function () {
        return this.getTotalMS() / 1000 / 60 / 60;
    },


    /**
     * Returns the total length of all availability intervals for this day in milliseconds.
     *
     * @return {Number}
     */
    getTotalMS : function () {
        var totalMS      = 0;

        Ext.Array.each(this.getAvailability(), function (interval) {
            totalMS      += interval.endTime - interval.startTime;
        });

        return totalMS;
    },


    /**
     * Adds a new availability interval to this day. Both arguments should have the same format.
     *
     * @param {Date/String} startTime Start time of the interval. Can be a Date object (new Date(0, 0, 0, 8)) or just a plain string: '08'
     * @param {Date/String} endTime End time of the interval. Can be a Date object (new Date(0, 0, 0, 12)) or just a plain string: '12'
     */
    addAvailabilityInterval : function (startTime, endTime) {
        var interval;

        if (startTime instanceof Date) {
            interval        = {
                startTime       : startTime,
                endTime         : endTime
            };
        } else {
            interval        = this.parseInterval(startTime + (endTime ? '-' + endTime : ''));
        }

        var intervals       = this.getAvailability().concat(interval);

        this.verifyAvailability(intervals);

        this.setAvailability(intervals);
    },


    /**
     * Removes the availability interval by its index.
     *
     * @param {Number} index Ordinal position of the interval to be removed
     */
    removeAvailbilityInterval : function (index) {
        var intervals       = this.getAvailability();

        intervals.splice(index, 1);

        this.setAvailability(intervals);
    },


    /**
     * Applies the availability intervals to a concrete day. For example the availability intervals [ '08:00-12:00', '13:00-17:00' ],
     * applied to a day 2012/01/01 will return the following result:
     *
    [
        {
            startDate       : new Date(2012, 0, 1, 8),
            endDate         : new Date(2012, 0, 1, 12)
        },
        {
            startDate       : new Date(2012, 0, 1, 13),
            endDate         : new Date(2012, 0, 1, 17)
        }
    ]

     *
     * @param {Date} date The date to apply the intervals to
     *
     * @returns {Object[]} Array of objects with "startDate / endDate" properties.
     */
    getAvailabilityIntervalsFor : function (timeDate) {
        timeDate                = typeof timeDate == 'number' ? new Date(timeDate) : timeDate;

        var year                = timeDate.getFullYear();
        var month               = timeDate.getMonth();
        var date                = timeDate.getDate();

        var result              = [];

        Ext.Array.each(this.getAvailability(), function (interval) {

            var endDate     = interval.endTime.getDate();

            result.push({
                startDate       : new Date(year, month, date, interval.startTime.getHours(), interval.startTime.getMinutes()),
                endDate         : new Date(year, month, date + (endDate == 1 ? 1 : 0), interval.endTime.getHours(), interval.endTime.getMinutes())
            });
        });

        return result;
    },


    /**
     * Returns the earliest available time for the given date. If this day has no availability intervals it returns `null`.
     *
     * @param {Date} date The date to get the earliest availability time for.
     *
     * @return {Date}
     */
    getAvailabilityStartFor : function (timeDate) {
        var intervals           = this.getAvailabilityIntervalsFor(timeDate);

        if (!intervals.length) {
            return null;
        }

        return intervals[ 0 ].startDate;
    },


    /**
     * Returns the latest available time for the given date. If this day has no availability intervals, it returns `null`.
     *
     * @param {Date} date The date to get the latest availability time for.
     *
     * @return {Date}
     */
    getAvailabilityEndFor : function (timeDate) {
        var intervals           = this.getAvailabilityIntervalsFor(timeDate);

        if (!intervals.length) {
            return null;
        }

        return intervals[ intervals.length - 1 ].endDate;
    }

});

Ext.define('Gnt.model.Week', {
    //extend              : 'Sch.model.Customizable',
    extend              : 'Ext.data.Model',
    
    idProperty          : 'Id',
    
    fields  : [
        { name: 'Id' },
        { name: 'name', type: 'string' },
        { name: 'startDate', type: 'date' },
        { name: 'endDate', type: 'date' },
        { name: 'mainDay' }, // type : Gnt.model.CalendarDay
        { name: 'weekAvailability' }
    ],
    
    set                 : function (field, value) {
        if (field == 'name') {
            Ext.Array.each(this.get('weekAvailability').concat(this.get('mainDay')), function (weekDay) {
                if (weekDay) {
                    weekDay.setName(value);
                }
            });
        }
        
        this.callParent(arguments);
    }
});
/**
 * @class Gnt.model.Assignment
 *
 * This class represent a single assignment of a resource to a task in your gantt chart. It is a subclass of the {@link Sch.model.Customizable} class, which in its turn subclasses {@link Ext.data.Model}.
 * Please refer to documentation of those classes to become familar with the base interface of this class.
 *
 * An Assignment has the following fields:
 *
 *   - `Id` - The id of the assignment
 *   - `ResourceId` - The id of the resource assigned
 *   - `TaskId` - The id of the task to which the resource is assigned
 *   - `Units` - An integer value representing how much of the resource's availability that is dedicated to this task
 *
 * The names of these fields can be customized by subclassing this class. Please refer to {@link Sch.model.Customizable} for details.
 *
 * See also: {@link Gnt.column.ResourceAssignment}
 */
Ext.define('Gnt.model.Assignment', {
    extend  : 'Sch.model.Assignment',

    customizableFields  : [
        { name : 'TaskId' },
        { name : 'Units', type : 'float', defaultValue : 100 }
    ],

    /**
     * @cfg {String} taskIdField The name of the field identifying the task to which an event belongs. Defaults to "TaskId".
     */
    taskIdField  : 'TaskId',
    eventIdField : 'TaskId',

    constructor : function(data, session) {
        var me = this;
        me.eventIdField = me.taskIdField;
        me.callParent([data, session]);
    },

    getEventId : function() {
        var me = this;
        return me.get(me.taskIdField);
    },

    setEventId : function(eventId) {
        var me = this;
        return me.set(me.taskIdField, eventId);
    },

    /**
     * @cfg {String} unitsField The name of the field identifying the units of this assignment. Defaults to "Units".
     */
    unitsField              : 'Units',

    /**
     * Returns the associated task store instance
     *
     * @return {Gnt.data.TaskStore}
     */
    getTaskStore : function() {
        return this.joined && this.joined.length > 0 && this.joined[ 0 ].getTaskStore() || null;
    },

    getEventStore : function() {
        return this.getTaskStore();
    },

    /**
     * Returns the units of this assignment
     *
     * @return {Number} units
     */
    getUnits : function () {
        var me = this;
        // constrain to be >= 0
        return Math.max(0, me.get(me.unitsField)); // Should we use Math.abs() here?
    },


    /**
     * Sets the units of this assignment
     *
     * @param {Number} value The new value for units
     */
    setUnits : function (value) {
        var me = this;


        me.set(me.unitsField, value);
    },


    /**
     * Returns the task associated with this assignment.
     *
     * @privateparam {Gnt.data.TaskStore} [taskStore]
     * @return {Gnt.model.Task} Instance of task
     */
    getTask : function(taskStore) {
        var me = this;
        return me.getEvent(taskStore);
    },

    /**
     * Returns associated task name
     *
     * @privateparam {Gnt.data.TaskStore} [taskStore]
     * @return {String}
     */
    getTaskName : function(taskStore) {
        var task = this.getTask(taskStore);
        return task && task.getName() || '';
    },

    /**
     * Returns the effort, contributed by the resource of this assignment to a task of this assignment.
     *
     * @param {String} unit Unit to return the effort in. Defaults to the `EffortUnit` field of the task
     *
     * @return {Number} effort
     */
    getEffort : function (unit) {
        var me          = this,
            task        = me.getTask(),
            totalEffort = 0;

        task.forEachAvailabilityIntervalWithResources(
            {
                startDate   : task.getStartDate(),
                endDate     : task.getEndDate(),
                resources   : [ me.getResource() ]
            },
            function (intervalStartDate, intervalEndDate, currentAssignments) {
                var i, totalUnits;

                for (i in currentAssignments) {
                    totalUnits = currentAssignments[ i ].units;
                }

                totalEffort += (intervalEndDate - intervalStartDate) * totalUnits / 100;
            }
        );

        return task.getProjectCalendar().convertMSDurationToUnit(totalEffort, unit || task.getEffortUnit());
    }
});

/**

@class Gnt.model.AssignmentEditing
@extends Gnt.model.Assignment
@private

*/

Ext.define('Gnt.model.AssignmentEditing', {
    extend : 'Gnt.model.Assignment',
    fields : ['ResourceName']
});
/**

@class Gnt.model.Dependency
@extends Sch.model.Customizable

This class represents a single Dependency in your gantt chart. It is a subclass of the {@link Sch.model.Customizable} class, which in its turn subclasses {@link Ext.data.Model}.
Please refer to documentation of those classes to become familar with the base interface of this class.

A Dependency has the following fields:

- `Id` - The id of the dependency itself
- `From` - The id of the task at which the dependency starts
- `To` - The id of the task at which the dependency ends
- `Lag` - A numeric part of the lag value between the tasks. Negative values are supported. Please note, that any lag-related calculations will be performed
  using project calendar. Also only working time is counted as "lag" time.
- `LagUnit` - A duration unit part of the lag value between the tasks. Default value is "d" (days). Valid values are:
    - "ms" (milliseconds)
    - "s" (seconds)
    - "mi" (minutes)
    - "h" (hours)
    - "d" (days)
    - "w" (weeks)
    - "mo" (months)
    - "q" (quarters)
    - "y" (years)

- `Cls` - A CSS class that will be applied to each rendered dependency DOM element
- `Type` - An integer constant representing the type of the dependency:
    - 0 - start-to-start dependency
    - 1 - start-to-end dependency
    - 2 - end-to-start dependency
    - 3 - end-to-end dependency

Subclassing the Dependency class
--------------------

The name of any field can be customized in the subclass, see the example below. Please also refer to {@link Sch.model.Customizable} for details.

    Ext.define('MyProject.model.Dependency', {
        extend      : 'Gnt.model.Dependency',

        toField     : 'targetId',
        fromField   : 'sourceId',

        ...
    })

*/
Ext.define('Gnt.model.Dependency', {
    extend              : 'Sch.model.Customizable',

    inheritableStatics  : {
        /**
         * @static
         * @property {Object} Type The enumerable object, containing names for the dependency types integer constants.
         */
        Type    : {
            StartToStart    : 0,
            StartToEnd      : 1,
            EndToStart      : 2,
            EndToEnd        : 3
        }
    },

    idProperty          : 'Id',

    customizableFields     : [

        // 3 mandatory fields
        { name: 'From' },
        { name: 'To' },
        { name: 'Type', type : 'int', defaultValue : 2},

        { name: 'Lag', type : 'number', defaultValue : 0},
        {
            name            : 'LagUnit',
            type            : 'string',
            defaultValue    : "d",
            // make sure the default value is applied when user provides empty value for the field, like "" or null
            convert         : function (value) {
                return value || "d";
            }
        },
        { name: 'Cls', defaultValue : ''}
    ],

    /**
    * @cfg {String} fromField The name of the field that contains the id of the source task.
    */
    fromField       : 'From',

    /**
    * @cfg {String} toField The name of the field that contains the id of the target task.
    */
    toField         : 'To',

    /**
    * @cfg {String} typeField The name of the field that contains the dependency type.
    */
    typeField       : 'Type',

    /**
    * @cfg {String} lagField The name of the field that contains the lag amount.
    */
    lagField        : 'Lag',

    /**
    * @cfg {String} lagUnitField The name of the field that contains the lag unit duration.
    */
    lagUnitField    : 'LagUnit',

    /**
    * @cfg {String} clsField The name of the field that contains a CSS class that will be added to the rendered dependency elements.
    */
    clsField        : 'Cls',

    isHighlighted   : false,

    constructor     : function(config) {
        this.callParent(arguments);

        if (config) {
            // Allow passing in task instances too
            if (config[this.fromField] && config[this.fromField] instanceof Gnt.model.Task) {
                this.setSourceTask(config[this.fromField]);

                delete config.fromField;
            }

            if (config[this.toField] && config[this.toField] instanceof Gnt.model.Task) {
                this.setTargetTask(config[this.toField]);

                delete config.toField;
            }
        }
    },


    getTaskStore : function() {
        return this.joined[0].taskStore;
    },

    /**
    * Returns the source task of the dependency
    * @return {Gnt.model.Task} The source task of this dependency
    */
    getSourceTask : function(taskStore) {
        return (taskStore || this.getTaskStore()).getModelById(this.getSourceId());
    },

    /**
    * Sets the source task of the dependency
    * @param {Gnt.model.Task} task The new source task of this dependency
    */
    setSourceTask : function(task) {
        this.setSourceId(task.getId() || task.internalId);
    },

    /**
    * Returns the target task of the dependency
    * @return {Gnt.model.Task} The target task of this dependency
    */
    getTargetTask : function(taskStore) {
        return (taskStore || this.getTaskStore()).getModelById(this.getTargetId());
    },

    /**
    * Sets the target task of the dependency
    * @param {Gnt.model.Task} task The new target task of this dependency
    */
    setTargetTask : function(task) {
        this.setTargetId(task.getId() || task.internalId);
    },

    /**
    * Returns the source task id of the dependency
    * @return {Mixed} The id of the source task for the dependency
    */
    getSourceId : function() {
        return this.get(this.fromField);
    },

    /**
    * Sets the source task id of the dependency
    * @param {Mixed} id The id of the source task for the dependency
    */
    setSourceId : function(id) {
        this.set(this.fromField, id);
    },

    /**
    * Returns the target task id of the dependency
    * @return {Mixed} The id of the target task for the dependency
    */
    getTargetId : function() {
        return this.get(this.toField);
    },

    /**
    * Sets the target task id of the dependency
    * @param {Mixed} id The id of the target task for the dependency
    */
    setTargetId : function(id) {
        this.set(this.toField, id);
    },

    /**
    * @method getType
    *
    * Returns the dependency type
    * @return {Mixed} The type of the dependency
    */

    /**
    * @method setType
    *
    * Sets the dependency type
    * @param {Mixed} id The type of the dependency
    */

    /**
    * @method getLag
    *
    * Returns the amount of lag for the dependency
    * @return {Number} id The amount of lag for the dependency
    */

    /**
    * @method setLag
    *
    * Sets the amount of lag for the dependency
    * @param {Number} id The amount of lag for the dependency
    */

    /**
    * Returns the duration unit of the lag.
    * @return {String} the duration unit
    */
    getLagUnit: function () {
        return this.get(this.lagUnitField) || 'd';
    },

    /**
    * @method setLagUnit
    *
    * Updates the lag unit of the dependency.
    *
    * @param {String} unit Lag duration unit
    */

    /**
     * @method getCls
     *
     * Returns the name of field holding the CSS class for each rendered dependency element
     *
     * @return {String} The cls field
     */

    /**
     * Returns true if the linked tasks have been persisted (e.g. neither of them are 'phantoms')
     *
     * @return {Boolean} true if this model can be persisted to server.
     */
    isPersistable : function() {
        var source = this.getSourceTask(),
            target = this.getTargetTask();

        return source && !source.phantom && target && !target.phantom;
    },


    /**
     * Returns `true` if the dependency is valid. Note, this method assumes that the model is part of a {@link Gnt.data.DependencyStore}.
     * Invalid dependencies are:
     * - a task linking to itself
     * - a dependency between a child and one of its parent
     * - transitive dependencies, e.g. if A -> B, B -> C, then A -> C is not valid
     *
     * @return {Boolean}
     */
    isValid : function (askStore) {
        var valid       = this.callParent(arguments),
            sourceId    = this.getSourceId(),
            targetId    = this.getTargetId(),
            type        = this.getType();

        if (valid) {
            valid       = Ext.isNumber(type) && !Ext.isEmpty(sourceId) && !Ext.isEmpty(targetId) && sourceId != targetId;
        }

        if (valid && askStore !== false && this.joined && this.joined[ 0 ]) {
            valid       = this.joined[ 0 ].isValidDependency(sourceId, targetId, type, null, null, this);
        }

        return valid;
    }

});

/**

@class Gnt.model.Resource
@extends Sch.model.Resource

This class represents a single Resource in your gantt chart.
The inheritance hierarchy of this class includes {@link Sch.model.Customizable} and {@link Ext.data.Model} classes.
Please refer to the documentation of those classes to become familar with the base interface of this class.

A Resource has only 2 mandatory fields - `Id` and `Name`. If you want to add some fields, describing resources - subclass this class:

    Ext.define('MyProject.model.Resource', {
        extend      : 'Gnt.model.Resource',

        fields      : [
            // `Id` and `Name` fields are already provided by the superclass
            { name: 'Company',          type : 'string' }
        ],

        getCompany : function () {
            return this.get('Company')
        },
        ...
    })

The name of any field can be customized in the subclass. Please refer to {@link Sch.model.Customizable} for details.

See also: {@link Gnt.model.Assignment}, {@link Gnt.column.ResourceAssignment}

*/
Ext.define('Gnt.model.Resource', {
    extend : 'Sch.model.Resource',

    customizableFields : [
        'CalendarId'
    ],

    /**
     * @cfg {String} calendarIdField The name of the field defining the id of the calendar for this specific resource.
     */
    calendarIdField         : 'CalendarId',

    normalized                  : false,
    calendarWaitingListener     : null,

    /**
     * Returns a task store this resource uses as default. Resource must be part
     * of a resource store to be able to retrieve event store.
     *
     * @return {Gnt.data.TaskStore|null}
     */
    getTaskStore : function () {
        return this.joined[ 0 ].getTaskStore();
    },


    getEventStore : function () {
        return this.getTaskStore();
    },


    /**
     * Returns an array of tasks associated with this resource
     *
     * @return {Sch.model.Task[]} Associated tasks
     */
    getTasks : function () {
        return this.getEvents();
    },

    /**
     * Returns the calendar, based on which is performed the schedule calculations for associated tasks.
     * It will be either the own calendar of this resource (if any) or the calendar of the whole project.
     *
     * @param {Boolean} ownCalendarOnly Pass `true` to return only own calendar.
     *
     * @return {Gnt.data.Calendar} The instance of calendar
     */
    getCalendar: function (ownCalendarOnly) {
        var me = this;
        return ownCalendarOnly ? me.getOwnCalendar() : me.getOwnCalendar() || me.getProjectCalendar();
    },


    /**
     * Returns the {@link Gnt.data.Calendar calendar} instance, associated with this resource (if any). See also {@link #calendarIdField}.
     *
     * @return {Gnt.data.Calendar} calendar
     */
    getOwnCalendar : function () {
        var calendarId      = this.getCalendarId();

        return calendarId ? Gnt.data.Calendar.getCalendar(calendarId) : null;
    },


    /**
     * Returns the {@link Gnt.data.Calendar calendar} instance, associated with the project of this resource (with the TaskStore instance
     * this resource belongs to).
     *
     * @return {Gnt.data.Calendar} calendar
     */
    getProjectCalendar : function () {
        return this.getTaskStore().getCalendar();
    },


    /**
     * Sets the {@link Gnt.data.Calendar calendar}, associated with this resource. Calendar must have a {@link Gnt.data.Calendar#calendarId calendarId} property
     * defined, which will be saved in the `CalendarId` field of this task.
     *
     * @param {Gnt.data.Calendar/String} calendar A calendar instance or string with calendar id
     */
    setCalendar: function (calendar) {
        var isCalendarInstance  = calendar instanceof Gnt.data.Calendar;

        if (isCalendarInstance && !calendar.calendarId) throw new Error("Can't set calendar w/o `calendarId` property");

        this.setCalendarId(isCalendarInstance ? calendar.calendarId : calendar);
    },


    setCalendarId : function (calendarId, isInitial) {
        if (calendarId instanceof Gnt.data.Calendar) calendarId = calendarId.calendarId;

        var prevCalendarId  = this.getCalendarId();

        if (prevCalendarId != calendarId || isInitial) {
            if (this.calendarWaitingListener) {
                this.calendarWaitingListener.destroy();
                this.calendarWaitingListener = null;
            }

            var listeners       = {
                calendarchange  : this.onCalendarChange,
                scope           : this
            };

            var prevInstance        = this.calendar || Gnt.data.Calendar.getCalendar(prevCalendarId);

            // null-ifying the "explicit" property - it should not be used at all generally, only "calendarId"
            this.calendar   = null;

            prevInstance && prevInstance.un(listeners);

            this.set(this.calendarIdField, calendarId);

            var calendarInstance    = Gnt.data.Calendar.getCalendar(calendarId);

            if (calendarInstance) {
                calendarInstance.on(listeners);

                if (!isInitial) this.onCalendarChange();
            } else {
                this.calendarWaitingListener = Ext.data.StoreManager.on('add', function (index, item, key) {
                    calendarInstance    = Gnt.data.Calendar.getCalendar(calendarId);

                    if (calendarInstance) {
                        this.calendarWaitingListener.destroy();
                        this.calendarWaitingListener = null;

                        calendarInstance.on(listeners);

                        this.onCalendarChange();
                    }
                }, this, { destroyable : true });
            }
        }
    },


    onCalendarChange : function () {
        // raise flag that the resource is processing its calendar change
        this.inOnCalendarChange = true;

        this.adjustToCalendar();

        this.inOnCalendarChange = false;
    },


    adjustToCalendar : function () {
        this.getTaskStore() && this.forEachTask(function (task) {
            task.adjustToCalendar();
        });
    },


    // TODO: move it to Scheduler codebase
    /**
     * Assigns this resource to a given task. A new {@link Gnt.model.Assignment assignment} will be created
     * and added to the {@link Gnt.data.AssignmentStore} of the project.
     *
     * @param {Gnt.model.Task/Number} taskOrId Either instance of {@link Gnt.model.Task} or id of the task
     * @param {Number} units The value for the "Units" field
     * @param {Function} [callback] Callback function to call after resource has been assigned and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    assignTo : function (taskOrId, units, callback) {
        var task    = taskOrId instanceof Gnt.model.Task ? taskOrId : this.getTaskStore().getModelById(taskOrId);

        return task.assign(this, units, callback);
    },


    // TODO: move it to Scheduler code base
    /**
     * Un assigns this resource from the given task. The corresponding {@link Gnt.model.Assignment assignment} record
     * will be removed from the {@link Gnt.data.AssignmentStore} of the project.
     *
     * @param {Gnt.model.Task/Number} taskOrId Either instance of {@link Gnt.model.Task} or id of the task
     * @param {Function} [callback] Callback function to call after resource has been unassigned and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    unAssignFrom : function(taskOrId, callback) {
        var task    = taskOrId instanceof Gnt.model.Task ? taskOrId : this.getTaskStore().getModelById(taskOrId);
        return task.unAssign(this, callback);
    },

    // TODO: move it to Scheduler codebase
    /**
     * Alias to {@link #unAsignFrom}.
     */
    unassignFrom : function() {
        return this.unAssignFrom.apply(this, arguments);
    },


    // TODO: maybe refactor this method using assignment store map* functions
    // TODO: move it to Scheduler's code base
    /**
     * Iterator for each assignment, associated with this resource.
     *
     * @param {Function} func The function to call. This function will receive an {@link Gnt.model.Assignment assignment} instance
     * as the only argument
     *
     * @param {Object} scope The scope to run the function in.
     */
    forEachAssignment : function (func, scope) {
        var me = this,
            taskStore = me.getTaskStore(),
            assignmentStore = taskStore && taskStore.getAssignmentStore(),
            assignments = assignmentStore && assignmentStore.getAssignmentsForResource(me) || [],
            i, len, done;

        scope = scope || this;

        for (done = false, i = 0, len = assignments.length; !done && i < len; ++i) {
            done = (false === func.call(scope, assignments[i]));
        }
    },


    // TODO: maybe refactor this method using assignment store map* methods
    // TODO: move it to Scheduler's codebase with forEachEvent name
    /**
     * Iterator for tasks, assigned to this resource.
     *
     * @param {Function} func The function to call. This function will receive an {@link Gnt.model.Task task} instance
     * as the only argument.
     *
     * @param {Object} scope The scope to run the function in.
     */
    forEachTask : function (func, scope) {
        var me = this,
            taskStore = me.getTaskStore(),
            assignmentStore = taskStore && taskStore.getAssignmentStore(),
            assignments = assignmentStore && assignmentStore.getAssignmentsForResource(me) || [],
            i, len, done, task;

        scope = scope || this;

        for (done = false, i = 0, len = assignments.length; !done && i < len; ++i) {
            task = assignments[i].getTask();
            task && (done = (false === func.call(scope, task)));
        }
    },


    collectAvailabilityIntervalPoints : function (intervals, startPoint, endPoint, pointsByTime, pointTimes) {
        for (var k = 0, l = intervals.length; k < l; k++) {
            var interval            = intervals[ k ];

            var intervalStartDate   = interval.startDate - 0;
            var intervalEndDate     = interval.endDate - 0;

            if (!pointsByTime[ intervalStartDate ]) {
                pointsByTime[ intervalStartDate ] = [];

                pointTimes.push(intervalStartDate);
            }

            pointsByTime[ intervalStartDate ].push(startPoint);

            if (!pointsByTime[ intervalEndDate ]) {
                pointsByTime[ intervalEndDate ] = [];

                pointTimes.push(intervalEndDate);
            }

            pointsByTime[ intervalEndDate ].push(endPoint);
        }
    },


    forEachAvailabilityIntervalWithTasks : function (options, func, scope) {
        scope                       = scope || this;

        var startDate               = options.startDate;
        var endDate                 = options.endDate;

        if (!startDate || !endDate) throw "Both `startDate` and `endDate` are required for `forEachAvailabilityIntervalWithTasks`";

        var cursorDate              = new Date(startDate);
        var includeAllIntervals     = options.includeAllIntervals;
        var includeResCalIntervals  = options.includeResCalIntervals;

        var resourceCalendar        = this.getCalendar();

        var assignments             = [];
        var tasks                   = [];
        var tasksCalendars          = [];

        var pointTimes              = [ startDate - 0, endDate - 0 ];
        var pointsByTime            = {};

        pointsByTime[ startDate - 0 ]   = [ { type  : '00-intervalStart' } ];
        pointsByTime[ endDate - 0 ]     = [ { type  : '00-intervalEnd' } ];

        this.forEachAssignment(function (assignment) {
            var task        = assignment.getTask();
            // filter out not existing tasks
            if (!task) return;

            var taskStart   = task.getStartDate();
            var taskEnd     = task.getEndDate();
            var taskId      = task.getId();

            // filter out tasks out of provided [ startDate, endDate ) interval
            if (taskStart > endDate || taskEnd < startDate) return;

            tasks.push(task);

            // We use the resource calendar if task has no an assigned calendar
            // Since we have to use resource calendar only in this case (project calendar should not be taken into account)
            tasksCalendars.push(task.getOwnCalendar() || this.getCalendar());

            // if task is segmented then segments start/end dates are points of interest
            if (task.isSegmented()) {

                for (var taskSegments = task.getSegments(), i = 0, l = taskSegments.length; i < l; i++) {
                    var segment     = taskSegments[i];

                    this.collectAvailabilityIntervalPoints([{ startDate : segment.getStartDate(), endDate : segment.getEndDate() }],
                        {
                            type        : '05-taskStart',
                            assignment  : assignment,
                            taskId      : taskId,
                            units       : assignment.getUnits()
                        },
                        {
                            type        : '04-taskEnd',
                            taskId      : taskId
                        },
                        pointsByTime,
                        pointTimes
                    );
                }

            // task start/end dates are points of interest
            } else {
                this.collectAvailabilityIntervalPoints([{ startDate : taskStart, endDate : taskEnd }],
                    {
                        type        : '05-taskStart',
                        assignment  : assignment,
                        taskId      : taskId,
                        units       : assignment.getUnits()
                    },
                    {
                        type        : '04-taskEnd',
                        taskId      : taskId
                    },
                    pointsByTime,
                    pointTimes
                );
            }

            assignments.push(assignment);
        });

        // if there are no tasks - then there are no common intervals naturally
        if (!tasks.length && !includeAllIntervals && !includeResCalIntervals) return;

        var DATE = Sch.util.Date;

        var i, l, taskId;

        while (cursorDate < endDate) {

            this.collectAvailabilityIntervalPoints(
                resourceCalendar.getAvailabilityIntervalsFor(cursorDate),
                {
                    type    : '00-resourceAvailabilityStart'
                },
                {
                    type    : '01-resourceAvailabilityEnd'
                },
                pointsByTime,
                pointTimes
            );

            // using "for" instead of "each" should be blazing fast! :)
            for (i = 0, l = tasksCalendars.length; i < l; i++) {

                taskId = tasks[i].getId();

                // resource specific calendar point
                this.collectAvailabilityIntervalPoints(
                    tasksCalendars[ i ].getAvailabilityIntervalsFor(cursorDate),
                    {
                        type        : '02-taskAvailabilityStart',
                        taskId      : taskId
                    },
                    {
                        type        : '03-taskAvailabilityEnd',
                        taskId      : taskId
                    },
                    pointsByTime,
                    pointTimes
                );

            }

            // does not perform cloning internally!
            cursorDate       = DATE.getStartOfNextDay(cursorDate);
        }

        // we have to define a sorting function here since there is a bug in Chrome
        // which affects large arrays sorting if you don't provide a sorting function (#1365)
        // pointTimes.sort();
        pointTimes.sort(function (a, b) { return a - b; });

        var inInterval          = false,
            inResource          = false,
            currentAssignments  = {},
            inTaskCalendar      = 0,
            inTask              = 0;

        for (i = 0, l = pointTimes.length - 1; i < l; i++) {
            var points      = pointsByTime[ pointTimes[ i ] ];

            points.sort(function (a, b) { return a.type < b.type ? 1 : -1; });

            for (var k = 0, j = points.length; k < j; k++) {
                var point       = points[ k ];

                switch (point.type) {
                    case '00-resourceAvailabilityStart' :
                        inResource = true;
                        break;

                    case '01-resourceAvailabilityEnd' :
                        inResource = false;
                        break;

                    case '02-taskAvailabilityStart' :
                        inTaskCalendar++;
                        break;

                    case '03-taskAvailabilityEnd' :
                        inTaskCalendar--;
                        break;

                    case '05-taskStart' :
                        currentAssignments[ point.taskId ] = point;
                        inTask++;
                        break;

                    case '04-taskEnd' :
                        delete currentAssignments[ point.taskId ];
                        inTask--;
                        break;

                    case '00-intervalStart' :
                        inInterval = true;
                        break;

                    case '00-intervalEnd' : return;
                }
            }

            if (inInterval && (includeAllIntervals || includeResCalIntervals && inResource || inResource && inTaskCalendar && inTask)) {

                var meta = {
                    inResourceCalendar  : !!inResource,
                    inTasksCalendar     : !!inTaskCalendar,
                    inTask              : inTask
                };

                var intervalStartDate       = pointTimes[ i ];
                var intervalEndDate         = pointTimes[ i + 1 ];

                // availability interval is out of [ startDate, endDate )
                if (intervalStartDate > endDate || intervalEndDate < startDate) continue;

                if (intervalStartDate < startDate) intervalStartDate = startDate - 0;
                if (intervalEndDate > endDate) intervalEndDate = endDate - 0;

                if (func.call(scope, intervalStartDate, intervalEndDate, currentAssignments, meta) === false) return false;
            }
        }
    },


    /**
     * This method will generate a report about the resource allocation in the given timeframe.
     * The start and end dates of the timeframe are provided as the "startDate/endDate" properties of the `options` parameter.
     * Options may also contain additional property: `includeAllIntervals` which includes the intervals w/o any
     * assignments in the ouput (see the example below).
     *
     * For example, this resource `R1` has the availability from 10:00 till 17:00 on 2012/06/01 and from 12:00 till 15:00 on 2012/06/02.
     * It is also assigned on 50% to two tasks:
     *
     * - `T1` has availability from 11:00 till 16:00 on 2012/06/01 and from 13:00 till 17:00 on 2012/06/02.
     *   It starts at 11:00 2012/06/01 and ends at 17:00 2012/06/02
     * - `T2` has availability from 15:00 till 19:00 on 2012/06/01 and from 09:00 till 14:00 on 2012/06/02.
     *   It starts at 15:00 2012/06/01 and ends at 14:00 2012/06/02
     *
     * So the allocation information for the period 2012/06/01 - 2012/06/03 (note the 03 in day - it means 2012/06/02 inclusive)
     * will looks like the following (to better understand this example you might want to draw all the information on the paper):
     *

    [
        {
            startDate           : new Date(2012, 5, 1, 11),
            endDate             : new Date(2012, 5, 1, 15),
            totalAllocation     : 50,
            assignments         : [ assignmentForTask1 ],
            assignmentsHash     : { 'T1' : assignmentForTask1 },
            inResourceCalendar  : true,
            inTasksCalendar     : true,
            inTask              : 1
        },
        {
            startDate           : new Date(2012, 5, 1, 15),
            endDate             : new Date(2012, 5, 1, 16),
            totalAllocation     : 100,
            assignments         : [ assignmentForTask1, assignmentForTask2 ],
            assignmentsHash     : {
                'T1' : assignmentForTask1,
                'T2' : assignmentForTask2
            },
            inResourceCalendar  : true,
            inTasksCalendar     : true,
            inTask              : 2
        },
        {
            startDate           : new Date(2012, 5, 1, 16),
            endDate             : new Date(2012, 5, 1, 17),
            totalAllocation     : 50,
            assignments         : [ assignmentForTask2 ],
            inResourceCalendar  : true,
            inTasksCalendar     : true,
            inTask              : 2
        },
        {
            startDate           : new Date(2012, 5, 2, 12),
            endDate             : new Date(2012, 5, 2, 13),
            totalAllocation     : 50,
            assignments         : [ assignmentForTask2 ],
            assignmentsHash     : { 'T2' : assignmentForTask2 },
            inResourceCalendar  : true,
            inTasksCalendar     : true,
            inTask              : 2
        },
        {
            startDate           : new Date(2012, 5, 2, 13),
            endDate             : new Date(2012, 5, 2, 14),
            totalAllocation     : 100,
            assignments         : [ assignmentForTask1, assignmentForTask2 ],
            assignmentsHash     : {
                'T1' : assignmentForTask1,
                'T2' : assignmentForTask2
            },
            inResourceCalendar  : true,
            inTasksCalendar     : true,
            inTask              : 2
        },
        {
            startDate           : new Date(2012, 5, 2, 14),
            endDate             : new Date(2012, 5, 2, 15),
            totalAllocation     : 50,
            assignments         : [ assignmentForTask1 ],
            assignmentsHash     : { 'T1' : assignmentForTask1 },
            inResourceCalendar  : true,
            inTasksCalendar     : true,
            inTask              : 1
        },
    ]

     *
     * As you can see its quite detailed information - every distinct timeframe is included in the report.
     * You can aggregate this information as you need.
     *
     * Setting the `includeAllIntervals` option to true, will include intervals w/o assignments in the report, so the in the
     * example above, the report will start with:
     *

    [
        {
            startDate           : new Date(2012, 5, 1, 00),
            endDate             : new Date(2012, 5, 1, 10),
            totalAllocation     : 0,
            assignments         : [],
            assignmentsHash     : {},
            inResourceCalendar  : false,
            inTasksCalendar     : false,
            inTask              : 0
        },
        {
            startDate           : new Date(2012, 5, 1, 10),
            endDate             : new Date(2012, 5, 1, 11),
            totalAllocation     : 0,
            assignments         : [],
            assignmentsHash     : {},
            inResourceCalendar  : true,
            inTasksCalendar     : false,
            inTask              : 0
        },
        {
            startDate           : new Date(2012, 5, 1, 11),
            endDate             : new Date(2012, 5, 1, 15),
            totalAllocation     : 50,
            assignments         : [ assignmentForTask1 ],
            assignmentsHash     : { 'T1' : assignmentForTask1 }
            inResourceCalendar  : true,
            inTasksCalendar     : true,
            inTask              : 1
        },
        ...
    ]


     *
     * @param {Object} options Object with the following properties:
     *
     * - "startDate" - start date for the report timeframe
     * - "endDate" - end date for the report timeframe
     * - "includeAllIntervals" - whether to include the intervals w/o assignments in the report
     * - "includeResCalIntervals" - whether to include the intervals of resource calendar in the report
     */
    getAllocationInfo : function (options) {
        var info        = [];

        this.forEachAvailabilityIntervalWithTasks(options, function (intervalStartDate, intervalEndDate, currentAssignments, meta) {
            var totalAllocation     = 0,
                assignments         = [],
                assignmentsHash     = {};

            if (meta.inResourceCalendar && meta.inTasksCalendar && meta.inTask) {
                for (var i in currentAssignments) {
                    totalAllocation += currentAssignments[ i ].units;
                    assignments.push(currentAssignments[ i ].assignment);
                    assignmentsHash[i] = currentAssignments[ i ].assignment;
                }
            }

            info.push(Ext.apply({
                startDate           : new Date(intervalStartDate),
                endDate             : new Date(intervalEndDate),

                totalAllocation     : totalAllocation,
                assignments         : assignments,
                assignmentsHash     : assignmentsHash
            }, meta));
        });

        return info;
    }
});

/**

@class Gnt.model.task.More
@mixin
@protected

Internal mixin class providing additional logic and functionality belonging to the Task model class.

*/
Ext.define('Gnt.model.task.More', {

    propagating : false,

    /**
     * Increases the indendation level of this task in the tree
     *
     * @param {Function} [callback] Callback function to call after task has been indented and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    indent : function(callback) {
        var me = this,
            previousSibling = me.previousSibling,
            cancelFn;

        if (previousSibling) {
            me.propagateChanges(
                function() {
                    return me.indentWithoutPropagation(function(fn) {
                        cancelFn = fn;
                    });
                },
                function(cancelChanges, affectedTasks) {
                    if (cancelChanges) {
                        cancelFn && cancelFn();
                    }
                    else {
                        previousSibling.expand();
                    }
                    callback && callback(cancelChanges, affectedTasks);
                }
            );
        }
        else {  // TODO: actually an exception should be thrown here, but BC is such BC
            callback && callback(false, {});
        }
    },


    indentWithoutPropagation : function (cancelFeedback) {
        var me = this,
            previousSibling = me.previousSibling,
            taskStore,
            originalParent,
            originalIndex,
            wasLeaf,
            segments,
            removeContext;

        removeContext = {
            parentNode          : me.parentNode,
            previousSibling     : me.previousSibling,
            nextSibling         : me.nextSibling
        };

        taskStore      = me.getTaskStore();

        // This data we need for canceling
        originalParent = me.parentNode;
        originalIndex  = originalParent.indexOf(me);
        // Need to suspend the events here to prevent the taskStore from doing a cascade and thereby triggering UI updates
        // before the indent operation has completed (node first removed, then appended).
        taskStore.suspendEvents(true);

        wasLeaf = previousSibling.get('leaf');
        if (wasLeaf) {
            segments = previousSibling.getSegments();
            previousSibling.markAsParent();
        }

        // This clears the removeContext object, put it back below
        previousSibling.appendChild(me);

        // http://www.sencha.com/forum/showthread.php?270802-4.2.1-NodeInterface-removeContext-needs-to-be-passed-as-an-arg
        me.removeContext = removeContext;

        // Iterate and drop existing invalid dependencies since a parent task cannot have
        // dependencies to its children etc.
        previousSibling.removeInvalidDependencies();

        //previousSibling.expand();
        cancelFeedback && cancelFeedback(function() {
            originalParent.insertChild(originalIndex, me);
            wasLeaf && previousSibling.set('leaf', true);
            wasLeaf && segments && previousSibling.setSegmentsWithoutPropagation(segments);
        });

        taskStore.resumeEvents();

        return me;
    },

    /**
     * Decreases the indendation level of this task in the tree
     * @param {Function} [callback] Callback function to call after task has been indented and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    outdent : function(callback) {
        var me = this,
            parentNode = me.parentNode,
            cancelFn;

        if (parentNode && !parentNode.isRoot()) {
            me.propagateChanges(
                function() {
                    return me.outdentWithoutPropagation(function(fn) {
                        cancelFn = fn;
                    });
                },
                function(cancelChanges, affectedTasks) {
                    cancelChanges && cancelFn && cancelFn();
                    callback && callback(cancelChanges, affectedTasks);
                }
            );
        }
        else {  // TODO: actually an exception should be thrown here, but BC is such BC
            callback && callback(false, {});
        }

    },

    outdentWithoutPropagation : function (cancelFeedback) {
        var me = this,
            originalParent,
            originalIndex,
            taskStore,
            removeContext;

        removeContext = {
            parentNode          : me.parentNode,
            previousSibling     : me.previousSibling,
            nextSibling         : me.nextSibling
        };

        taskStore = me.getTaskStore();

        // This data we need for canceling
        originalParent = me.parentNode;
        originalIndex  = originalParent.indexOf(me);
        // Need to suspend the events here to prevent the taskStore from doing a cascade and thereby triggering UI updates
        // before the indent operation has completed (node first removed, then appended).
        taskStore.suspendEvents(true);

        // This clears the removeContext object, put it back below
        if (originalParent.nextSibling) {
            originalParent.parentNode.insertBefore(me, originalParent.nextSibling);
        } else {
            originalParent.parentNode.appendChild(me);
        }

        me.convertEmptyParentToLeaf && originalParent.set('leaf', originalParent.childNodes.length === 0);

        // http://www.sencha.com/forum/showthread.php?270802-4.2.1-NodeInterface-removeContext-needs-to-be-passed-as-an-arg
        me.removeContext = removeContext;

        // Iterate and drop existing invalid dependencies since a parent task cannot have
        // dependencies to its children etc.
        originalParent.parentNode.removeInvalidDependencies();

        taskStore.resumeEvents();

        cancelFeedback && cancelFeedback(function() {
            originalParent.insertChild(originalIndex, me);
        });

        // Changes propagation will be collected using original parent as the source point
        return originalParent;
    },


    removeInvalidDependencies : function() {
        var depStore    = this.getDependencyStore(),
            deps        = this.getAllDependencies();

        for (var i = 0; i < deps.length; i++) {

            if(!deps[i].isValid(true)) {
                depStore.remove(deps[i]);
            }
        }
    },


    /**
     * Returns all dependencies of this task (both incoming and outgoing)
     *
     * @return {Gnt.model.Dependency[]}
     */
    getAllDependencies : function () {
        return this.predecessors.concat(this.successors);
    },

    /**
     * Returns true if this task has at least one incoming dependency
     *
     * @return {Boolean}
     */
    hasIncomingDependencies : function () {
        return this.predecessors.length > 0;
    },

    /**
     * Returns true if this task has at least one outgoing dependency
     *
     * @return {Boolean}
     */
    hasOutgoingDependencies : function () {
        return this.successors.length > 0;
    },

    /**
     * Returns all incoming dependencies of this task
     *
     * @param {Boolean} [doNotClone=false] Whether to **not** create a shallow copy of the underlying {@link Gnt.model.Task#predecessors} property.
     * Passing `true` is more performant, but make sure you don't modify the array in this case.
     *
     * @return {Gnt.model.Dependency[]}
     */
    getIncomingDependencies : function (doNotClone) {
        return doNotClone ? this.predecessors : this.predecessors.slice();
    },


    /**
     * Returns all outcoming dependencies of this task
     *
     * @param {Boolean} [doNotClone=false] Whether to **not** create a shallow copy of the underlying {@link Gnt.model.Task#successors} property.
     * Passing `true` is more performant, but make sure you don't modify the array in this case.
     *
     * @return {Gnt.model.Dependency[]}
     */
    getOutgoingDependencies : function (doNotClone) {
        return doNotClone ? this.successors : this.successors.slice();
    },


    // TODO: see if this is needed or can be removed or substituted by another method
    // NOTE: return value is never used anywhere in our code base
    /**
     * @private
     * Internal method, constrains the task according to its incoming dependencies
     * @param {Gnt.data.TaskStore} taskStore The task store
     * @return {Boolean} true if the task was updated as a result.
     */
    alignByIncomingDependencies : function (taskStore, currentCascadeBatch, callback) {
        var result      = this.alignByIncomingDependenciesWithoutPropagation(taskStore, currentCascadeBatch);

        this.propagateChanges(null, callback, true);

        return result;
    },


    alignByIncomingDependenciesWithoutPropagation : function (taskStore, currentCascadeBatch, parentNode) {
        if (this.isManuallyScheduled()) {
            return false;
        }

        var changed             = false;

        taskStore               = taskStore || this.getTaskStore();

        var constrainContext    = this.getIncomingDependenciesConstraintContext(taskStore, parentNode);

        if (constrainContext) {
            var startDate       = constrainContext.startDate;
            var endDate         = constrainContext.endDate;

            // if we have both start & end constraints ...
            if (startDate && endDate) {
                // we need to compare them to get effective constraint value
                // so we convert endDate constraint to task start date and compare it with startDate constraint
                var start   = this.calculateStartDate(endDate, this.getDuration(), this.getDurationUnit());
                if (start > startDate) {
                    startDate       = start;
                }
                // get rid of endDate constraint since we just processed it
                endDate         = null;
            }


            if (startDate && startDate - this.getStartDate() !== 0) {
                currentCascadeBatch && currentCascadeBatch.addAffected(this);

                this.setStartDateWithoutPropagation(startDate, true, taskStore.skipWeekendsDuringDragDrop);

                changed         = true;
            } else if (endDate && endDate - this.getEndDate() !== 0) {
                currentCascadeBatch && currentCascadeBatch.addAffected(this);

                this.setEndDateWithoutPropagation(endDate, true, taskStore.skipWeekendsDuringDragDrop);

                changed         = true;
            }
        }

        return changed;
    },


    getIncomingDependenciesConstraintContext: function (providedTaskStore, parentNode) {
        var incomingDependencies = this.getIncomingDependencies(true);

        if (!incomingDependencies.length || this.isUnscheduled()) {
            return null;
        }

        var DepType             = Gnt.model.Dependency.Type,
            earliestStartDate   = new Date(0), // This will break for tasks later then 01.01.1970
            earliestEndDate     = new Date(0), // This will break for tasks later then 01.01.1970
            projectCalendar     = this.getProjectCalendar(),
            ownCalendar         = this.getCalendar(),
            constrainingTask;

        var dependenciesCalendar    = (providedTaskStore || this.getTaskStore()).dependenciesCalendar;


        Ext.each(incomingDependencies, function (dependency) {
            var fromTask = dependency.getSourceTask(providedTaskStore);

            if (fromTask && (!parentNode || fromTask.isAncestor(parentNode))) {
                var calendar;

                if (dependenciesCalendar == 'project')
                    calendar    = projectCalendar;
                else if (dependenciesCalendar == 'source')
                    calendar    = fromTask.getCalendar();
                else if (dependenciesCalendar == 'target')
                    calendar    = ownCalendar;
                else
                    throw "Unsupported value for `dependenciesCalendar` config option";

                var lag         = dependency.getLag() || 0,
                    lagUnit     = dependency.getLagUnit(),
                    start       = fromTask.getStartDate(),
                    end         = fromTask.getEndDate();

                switch (dependency.getType()) {
                    case DepType.StartToEnd:
                        start   = calendar.skipWorkingTime(start, lag, lagUnit);
                        if (earliestEndDate < start) {
                            earliestEndDate     = start;
                            constrainingTask    = fromTask;
                        }
                        break;

                    case DepType.StartToStart:
                        start   = calendar.skipWorkingTime(start, lag, lagUnit);
                        if (earliestStartDate < start) {
                            earliestStartDate   = start;
                            constrainingTask    = fromTask;
                        }
                        break;

                    case DepType.EndToStart:
                        end     = calendar.skipWorkingTime(end, lag, lagUnit);
                        if (earliestStartDate < end) {
                            earliestStartDate   = end;
                            constrainingTask    = fromTask;
                        }
                        break;

                    case DepType.EndToEnd:
                        end     = calendar.skipWorkingTime(end, lag, lagUnit);
                        if (earliestEndDate < end) {
                            earliestEndDate     = end;
                            constrainingTask    = fromTask;
                        }
                        break;

                    default:
                        throw 'Invalid dependency type: ' + dependency.getType();
                }
            }
        });

        return {
            startDate           : earliestStartDate > 0 ? earliestStartDate : null,
            endDate             : earliestEndDate > 0 ? earliestEndDate : null,

            constrainingTask    : constrainingTask
        };
    },


    /**
     * @private
     * Internal method, called recursively to query for the longest duration of the chain structure
     * @return {Gnt.model.Task[]} chain An array forming a chain of linked tasks
     */
    getCriticalPaths: function () {
        var cPath = [this],
            ctx = this.getIncomingDependenciesConstraintContext();

        while (ctx) {
            cPath.push(ctx.constrainingTask);

            ctx = ctx.constrainingTask.getIncomingDependenciesConstraintContext();
        }

        return cPath;
    },


    /**
     * @removed Please use {@link Gnt.data.TaskStore#cascadeChangesForTask} method instead.
     * @method cascadeChanges
     */


    /**
     * Adds the passed task to the collection of child tasks.
     * @param {Gnt.model.Task} subtask The new subtask
     * @param {Function} [callback] Callback function to call after task has been added and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     * @return {Gnt.model.Task} The added subtask task
     */
    addSubtask : function(subtask, callback) {
        var me = this,
            compatResult,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.addSubtaskWithoutPropagation(subtask, function cancelAndResultFeedback(fn, result) {
                    cancelFn = fn;
                    compatResult = result;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );

        return compatResult;
    },

    addSubtaskWithoutPropagation : function(subtask, cancelAndResultFeedback) {
        var me = this,
            originalParent,
            originalIndex,
            propagationSources,
            wasLeaf,
            segments;

        originalParent = subtask.parentNode;
        originalIndex  = originalParent && originalParent.indexOf(me);

        wasLeaf = me.get('leaf');
        if (wasLeaf) {
            me.markAsParent();
            segments = me.getSegments();
        }

        subtask = me.appendChild(subtask);
        me.expand();

        cancelAndResultFeedback && cancelAndResultFeedback(function() {
            if (originalParent) {
                originalParent.insertChild(originalIndex, subtask);
            }
            else {
                me.removeChild(subtask);
            }

            wasLeaf && me.set('leaf', true);
            wasLeaf && segments && me.setSegmentsWithoutPropagation(segments);

        }, subtask);

        // Changes propagation will be collected using affected parents as the source points
        if (!originalParent) {
            propagationSources = subtask;
        }
        else if (me !== originalParent && me.getTaskStore(true) === originalParent.getTaskStore(true)) {
            propagationSources = [subtask, originalParent];
        }

        return propagationSources;
    },

    /**
     * Inserts the passed task to the collection of child tasks at the given index.
     * @param {Integer} index Tne new subtask index
     * @param {Gnt.model.Task} subtask The new subtask
     * @param {Function} [callback] Callback function to call after task has been inserted and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     * @return {Gnt.model.Task} The inserted subtask
     */
    insertSubtask : function(index, subtask, callback) {
        var me = this,
            compatResult,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.insertSubtaskWithoutPropagation(index, subtask, function cancelAndResultFeedback(fn, result) {
                    cancelFn = fn;
                    compatResult = result;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );

        return compatResult;
    },


    insertSubtaskWithoutPropagation : function(index, subtask, cancelAndResultFeedback) {
        var me = this,
            originalParent,
            originalIndex,
            propagationSources,
            wasLeaf,
            segments;

        originalParent = subtask.parentNode;
        originalIndex  = originalParent && originalParent.indexOf(me);

        wasLeaf = me.get('leaf');
        if (wasLeaf) {
            me.markAsParent();
            segments = me.getSegments();
        }

        subtask = me.insertChild(index, subtask);
        me.expand();

        cancelAndResultFeedback && cancelAndResultFeedback(function() {
            if (originalParent) {
                originalParent.insertChild(originalIndex, subtask);
            }
            else {
                me.removeChild(subtask);
            }

            wasLeaf && me.set('leaf', true);
            wasLeaf && segments && me.setSegmentsWithoutPropagation(segments);

        }, subtask);

        // Changes propagation will be collected using affected parents as the source points
        if (!originalParent) {
            propagationSources = subtask;
        }
        else if (me !== originalParent && me.getTaskStore(true) === originalParent.getTaskStore(true)) {
            propagationSources = [subtask, originalParent];
        }

        return propagationSources;
    },


    /**
     * Constraints aware removes the passed subtask from this task child nodes.
     *
     * @param {Gnt.model.Task} [subtask] The subtask to remove
     * @param {Function} [callback] Callback function to call after the subtask has been removed and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    removeSubtask : function(subtask, callback) {
        var me = this,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.removeSubtaskWithoutPropagation(subtask, function cancelFeedback(fn) {
                    cancelFn = fn;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );
    },

    removeSubtaskWithoutPropagation : function(subtask, cancelFeedback) {
        var me = this,
            indexOfSubtask = me.indexOf(subtask),
            subtree,
            dependencyStore,
            assignmentStore,
            dependencies,
            assignments,
            dependenciesIndices,
            assignmentsIndices,
            i, len, r;


        dependencyStore     = me.getDependencyStore();
        assignmentStore     = me.getAssignmentStore();
        dependencies        = dependencyStore && dependencyStore.getDependenciesForTask(subtask);
        assignments         = assignmentStore && subtask.getAssignments();
        subtree             = [];
        dependenciesIndices = [];
        assignmentsIndices  = [];

        // Collecting all the descendants of the subtask.
        subtask.cascadeBy(function(node) {
            node !== subtask && subtree.push(node);
        });

        // Collecting dependencies and assignments of the subtree
        for (i = 0, len = subtree.length; (dependencyStore || assignmentStore) && i < len; i++) {
            r = subtree[i];
            dependencyStore && (dependencies = dependencies.concat(dependencyStore.getDependenciesForTask(r)));
            assignmentStore && (assignments  = assignments.concat(r.getAssignments()));
        }

        // Sorting dependencies in index order for future restoration
        dependencies = dependencyStore && Ext.Array.unique(dependencies);
        dependencies = dependencyStore && Ext.Array.sort(dependencies, function(a, b) {
            return dependencyStore.indexOf(a) < dependencyStore.indexOf(b) ? -1 : 1; // 0 is not an option here
        });
        // Collecting dependencies indices
        for (i = 0, len = dependencies && dependencies.length; dependencyStore && i < len; i++) {
            dependenciesIndices.push(dependencyStore.indexOf(dependencies[i]));
        }

        // Sorting assignments in index order for future restoration
        assignments = assignmentStore && Ext.Array.sort(assignments, function(a, b) {
            return assignmentStore.indexOf(a) < assignmentStore.indexOf(b) ? -1 : 1; // 0 is not an option here
        });
        // Collecting assignments indicies
        for (i = 0, len = assignments && assignments.length; assignmentStore && i < len; i++) {
            assignmentsIndices.push(assignmentStore.indexOf(assignments[i]));
        }

        // Removing all assignments
        assignmentStore && assignmentStore.remove(assignments);
        // Removing all dependencies
        dependencyStore && dependencyStore.remove(dependencies);
        // Removing subtask (which will remove subtree as well)
        subtask = me.removeChild(subtask);

        // Converting self to leaf if required
        if (me.childNodes.length === 0 && me.convertEmptyParentToLeaf) {
            me.set('leaf', true);
        }

        cancelFeedback && cancelFeedback(function() {
            // Restoring everything back
            me.insertChild(indexOfSubtask, subtask);
            for (i = 0, len = assignments && assignments.length; assignmentStore && i < len; i++) {
                assignmentStore.insert(assignmentsIndices[i], assignments[i]);
            }
            for (i = 0, len = dependencies && dependencies.length; dependencyStore && i < len; i++) {
                dependencyStore.insert(dependenciesIndices[i], dependencies[i]);
            }
        });

        return me;
    },

    /**
     * Adds the passed task as a successor and creates a new dependency between the two tasks.
     * @param {Gnt.model.Task} [successor] The new successor
     * @param {Function} [callback] Callback function to call after task has been added and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     * @return {Gnt.model.Task} the successor task
     */
    addSuccessor : function(successor, callback) {
        var me = this,
            compatResult,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.addSuccessorWithoutPropagation(successor, function cancelAndResultFeedback(fn, result) {
                    cancelFn = fn;
                    compatResult = result;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );

        return compatResult;
    },


    addSuccessorWithoutPropagation : function(successor, cancelAndResultFeedback) {
        var me              = this,
            parentNode      = me.parentNode,
            index           = parentNode.indexOf(me),
            insertCancelFn,
            linkCancelFn;

        successor           = successor           || new me.self();
        successor.calendar  = successor.calendar  || me.getCalendar(); // WTF, why so?
        successor.taskStore = successor.taskStore || me.getTaskStore(true);

        if (me.getEndDate()) {
            successor.beginEdit();
            successor.set(me.startDateField, me.getEndDate());
            successor.set(me.endDateField, successor.calculateEndDate(me.getEndDate(), 1, Sch.util.Date.DAY));
            successor.set(me.durationField, 1);
            successor.set(me.durationUnitField, Sch.util.Date.DAY);
            successor.endEdit();
        }

        // adding successor below
        parentNode.insertSubtaskWithoutPropagation(index + 1, successor, function(fn, result) {
            insertCancelFn = fn;
            successor      = result;
        });

        me.linkToWithoutPropagation(successor, Gnt.model.Dependency.Type.EndToStart, function(fn) {
            linkCancelFn = fn;
        });

        cancelAndResultFeedback && cancelAndResultFeedback(function() {
            linkCancelFn();
            insertCancelFn();
        }, successor);

        return me;
    },

    /**
     * Adds the passed task as a milestone below this task.
     * @param {Gnt.model.Task} milestone (optional) The milestone
     * @param {Function} [callback] Callback function to call after task has been added and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     * @return {Gnt.model.Task} the new milestone
     */
    addMilestone : function(milestone, callback) {
        var me        = this,
            date      = me.getEndDate();

        if (!milestone) {
            milestone = new me.self();
        }
        else if (Ext.isObject(milestone) && !(milestone instanceof Gnt.model.Task)) {
            milestone = new me.self(milestone);
        }

        if (date && !milestone.isMilestone()) {
            milestone.calendar = milestone.calendar || me.getCalendar();
            milestone.setStartEndDate(date, date);
        }

        return me.addTaskBelow(milestone, callback);
   },

    /**
     * Adds the passed task as a predecessor and creates a new dependency between the two tasks.
     * @param {Gnt.model.Task} [predecessor] The new predecessor
     * @param {Function} [callback] Callback function to call after task has been added and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     * @return {Gnt.model.Task} the new predecessor
     */
    addPredecessor : function(predecessor, callback) {
        var me = this,
            compatResult,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.addPredecessorWithoutPropagation(predecessor, function cancelAndResultFeedback(fn, result) {
                    cancelFn = fn;
                    compatResult = result;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );

        return compatResult;
    },


    addPredecessorWithoutPropagation : function(predecessor, cancelAndResultFeedback) {
        var me              = this,
            parentNode      = me.parentNode,
            index           = parentNode.indexOf(me),
            insertCancelFn,
            linkCancelFn;

        predecessor           = predecessor           || new me.self();
        predecessor.calendar  = predecessor.calendar  || me.getCalendar(); // WTF, why so?
        predecessor.taskStore = predecessor.taskStore || me.getTaskStore(true);

        if (me.getStartDate()) {
            predecessor.beginEdit();
            predecessor.set(me.startDateField, predecessor.calculateStartDate(me.getStartDate(), 1, Sch.util.Date.DAY));
            predecessor.set(me.endDateField, me.getStartDate());
            predecessor.set(me.durationField, 1);
            predecessor.set(me.durationUnitField, Sch.util.Date.DAY);
            predecessor.endEdit();
        }

        parentNode.insertSubtaskWithoutPropagation(index, predecessor, function(fn, result) {
            insertCancelFn = fn;
            predecessor    = result;
        });

        predecessor.linkToWithoutPropagation(me, Gnt.model.Dependency.Type.EndToStart, function(fn) {
            linkCancelFn   = fn;
        });

        cancelAndResultFeedback && cancelAndResultFeedback(function() {
            linkCancelFn();
            insertCancelFn();
        }, predecessor);

        return predecessor;
    },

    /**
     * Returns all the successor tasks of this task
     *
     * @return {Gnt.model.Task[]}
     */
    getSuccessors: function () {
        var deps    = this.successors,
            res     = [];

        for (var i = 0, len = deps.length; i < len; i++) {
            var task = deps[i].getTargetTask();

            if (task) res.push(task);
        }

        return res;
    },

    /**
     * Returns all the predecessor tasks of a this task.
     *
     * @return {Gnt.model.Task[]}
     */
    getPredecessors: function () {
        var deps    = this.predecessors,
            res     = [];

        for (var i = 0, len = deps.length; i < len; i++) {
            var task = deps[i].getSourceTask();

            if (task) res.push(task);
        }

        return res;
    },

    /**
     * Adds the passed task (or creates a new task) before itself
     * @param {Gnt.model.Task} addTaskAbove (optional) The task to add
     * @param {Function} [callback] Callback function to call after task has been added and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     * @return {Gnt.model.Task} the newly added task
     */
    addTaskAbove : function (task, callback) {
        var me = this,
            parentNode = me.parentNode,
            index = parentNode.indexOf(me),
            compatResult,
            cancelFn;

        task = task || new me.self();

        me.propagateChanges(
            function() {
                return parentNode.insertSubtaskWithoutPropagation(index, task, function cancelAndResultFeedback(fn, result) {
                    cancelFn = fn;
                    compatResult = result;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );

        return compatResult;
    },

    /**
     * Adds the passed task (or creates a new task) after itself
     * @param {Gnt.model.Task} task (optional) The task to add
     * @param {Function} [callback] Callback function to call after task has been added and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     * @return {Gnt.model.Task} the newly added task
     */
    addTaskBelow : function (task, callback) {
        var me = this,
            parentNode = me.parentNode,
            index = parentNode.indexOf(me) + 1,
            compatResult,
            cancelFn;

        task = task || new me.self();

        me.propagateChanges(
            function() {
                return parentNode.insertSubtaskWithoutPropagation(index, task, function cancelAndResultFeedback(fn, result) {
                    cancelFn = fn;
                    compatResult = result;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );

        return compatResult;
    },

    // Returns true if this task model is 'above' the passed task model
    isAbove : function(otherTask) {
        var me          = this,
            minDepth    = Math.min(me.data.depth, otherTask.data.depth);

        var current     = this;

        // Walk upwards until tasks are on the same level
        while (current.data.depth > minDepth) {
            current     = current.parentNode;

            if (current == otherTask) return false;
        }
        while (otherTask.data.depth > minDepth) {
            otherTask   = otherTask.parentNode;

            if (otherTask == me) return true;
        }

        // At this point, depth of both tasks should be identical.
        // Walk up to find common parent, to be able to compare indexes
        while (otherTask.parentNode !== current.parentNode) {
            otherTask   = otherTask.parentNode;
            current     = current.parentNode;
        }

        return otherTask.data.index > current.data.index;
    },

    /**
     * Cascades the children of a task. The given function is not called for this node itself.
     * @param {Function} fn The function to call for each child
     * @param {Object} scope The 'this' object to use for the function, defaults to the current node.
     */
    cascadeChildren : function(fn, scope) {
        var me = this;

        if (me.isLeaf()) return;

        var childNodes      = this.childNodes;

        for (var i = 0, len = childNodes.length; i < len; i++) childNodes[ i ].cascadeBy(fn, scope);
    },

    /**
     * Returns the _slack_ (or _float_) of this task.
     * The _slack_ is the amount of time that this task can be delayed without causing a delay
     * to any of its successors.
     *
     * @param {String} unit The time unit used to calculate the slack.
     * @return {Number} The _slack_ of this task.
     */
    getSlack : function (unit) {
        unit = unit || Sch.util.Date.DAY;

        var earlyStart  = this.getEarlyStartDate(),
            lateStart   = this.getLateStartDate();

        if (!earlyStart || !lateStart) return null;

        // slack taking into account only working period of time
        return this.getCalendar().calculateDuration(earlyStart, lateStart, unit);
    },

    /**
     * Returns the _early start date_ of this task.
     * The _early start date_ is the earliest possible start date of a task.
     * This value is calculated based on the earliest end dates of the task predecessors.
     * If the task has no predecessors, its start date is the early start date.
     *
     * @return {Date} The early start date.
     */
    getEarlyStartDate : function () {
        var store = this.getTaskStore();
        if (!store) return this.getStartDate();

        var internalId = this.internalId;
        if (store.earlyStartDates[internalId]) return store.earlyStartDates[internalId];

        var dt, result = 0, i, l;

        // for a parent task we take the minimum Early Start from its children
        if (this.childNodes.length) {

            for (i = 0, l = this.childNodes.length; i < l; i++) {
                dt = this.childNodes[i].getEarlyStartDate();
                if (dt < result || !result) result = dt;
            }

            store.earlyStartDates[internalId] = result;

            return result;
        }

        // for manually scheduled task we simply return its start date
        if (this.isManuallyScheduled()) {
            result = store.earlyStartDates[internalId] = this.getStartDate();
            return result;
        }

        var deps = this.getIncomingDependencies(true),
            fromTask;

        if (!deps.length) {
            result = store.earlyStartDates[internalId] = this.getStartDate();
            return result;
        }

        var depType     = Gnt.model.Dependency.Type,
            cal         = this.getCalendar(),
            projectCal  = this.getProjectCalendar(),
            lag;

        // Early Start Date is the largest of Early Finish Dates of the preceding tasks
        for (i = 0, l = deps.length; i < l; i++) {

            fromTask = deps[i].getSourceTask();

            if (fromTask) {
                switch (deps[i].getType()) {
                    case depType.StartToStart: // start-to-start
                        dt  = fromTask.getEarlyStartDate();
                        break;
                    case depType.StartToEnd: // start-to-end
                        dt  = fromTask.getEarlyStartDate();
                        // minus duration to get start
                        dt  = cal.calculateStartDate(dt, this.getDuration(), this.getDurationUnit());
                        break;
                    case depType.EndToStart: // end-to-start
                        dt  = fromTask.getEarlyEndDate();
                        break;
                    case depType.EndToEnd: // end-to-end
                        dt  = fromTask.getEarlyEndDate();
                        // minus duration to get start
                        dt  = cal.calculateStartDate(dt, this.getDuration(), this.getDurationUnit());
                        break;
                }

                // plus dependency Lag
                lag = deps[i].getLag();
                if (lag) dt = projectCal.skipWorkingTime(dt, lag, deps[i].getLagUnit());
                dt = projectCal.skipNonWorkingTime(dt, true);
            }

            if (dt > result) result = dt;
        }

        // store found value into the cache
        store.earlyStartDates[internalId] = result;

        return result;
    },

    /**
     * Returns the _early end date_ of the task.
     * The _early end date_ is the earliest possible end date of the task.
     * This value is calculated based on the earliest end dates of predecessors.
     * If the task has no predecessors then its end date is used as its earliest end date.
     *
     * @return {Date} The early end date.
     */
    getEarlyEndDate : function () {
        var store = this.getTaskStore();

        if (!store) return this.getEndDate();

        var internalId = this.internalId;

        if (store.earlyEndDates[internalId]) return store.earlyEndDates[internalId];

        var result = 0;
        // for parent task we take maximum Early Finish from its children
        if (this.childNodes.length) {
            var dt, i, l;

            for (i = 0, l = this.childNodes.length; i < l; i++) {
                dt = this.childNodes[i].getEarlyEndDate();
                if (dt > result) result = dt;
            }

            store.earlyEndDates[internalId] = result;

            return result;
        }

        // for manually scheduled task we simply return its end date
        if (this.isManuallyScheduled())  {
            result = store.earlyEndDates[internalId] = this.getEndDate();

            return result;
        }

        // Early Finish Date is Early Start Date plus duration
        var value = this.getEarlyStartDate();

        if (!value) return null;

        result = store.earlyEndDates[internalId] = this.getCalendar().calculateEndDate(value, this.getDuration(), this.getDurationUnit());

        return result;
    },

    /**
     * Returns the _late end date_ of the task.
     * The _late end date_ is the latest possible end date of the task.
     * This value is calculated based on the latest start dates of its successors.
     * If the task has no successors, the project end date is used as its latest end date.
     *
     * @return {Date} The late end date.
     */
    getLateEndDate : function () {
        var store = this.getTaskStore();
        if (!store) return this.getEndDate();

        var internalId = this.internalId;
        if (store.lateEndDates[internalId]) return store.lateEndDates[internalId];

        var dt, result = 0, i, l;

        // for parent task we take maximum Late Finish from its children
        if (this.childNodes.length) {
            for (i = 0, l = this.childNodes.length; i < l; i++) {
                dt = this.childNodes[i].getLateEndDate();
                if (dt > result) result = dt;
            }

            store.lateEndDates[internalId] = result;

            return result;
        }

        // for manually scheduled task we simply return its end date
        if (this.isManuallyScheduled())  {
            result = store.lateEndDates[internalId] = this.getEndDate();
            return result;
        }

        var deps = this.getOutgoingDependencies(true);

        if (!deps.length) {
            result = store.lateEndDates[internalId] = store.getProjectEndDate();
            return result;
        }

        var depType     = Gnt.model.Dependency.Type,
            cal         = this.getCalendar(),
            projectCal  = this.getProjectCalendar(),
            toTask, lag;

        // Late Finish Date is the smallest of Late Start Dates of succeeding tasks
        for (i = 0, l = deps.length; i < l; i++) {
            toTask = deps[i].getTargetTask();

            if (toTask) {
                switch (deps[i].getType()) {
                    case depType.StartToStart: // start-to-start
                        dt  = toTask.getLateStartDate();
                        // plus duration to get end
                        dt  = cal.calculateEndDate(dt, this.getDuration(), this.getDurationUnit());
                        break;
                    case depType.StartToEnd: // start-to-end
                        dt  = toTask.getLateEndDate();
                        // plus duration to get end
                        dt  = cal.calculateEndDate(dt, this.getDuration(), this.getDurationUnit());
                        break;
                    case depType.EndToStart: // end-to-start
                        dt  = toTask.getLateStartDate();
                        break;
                    case depType.EndToEnd: // end-to-end
                        dt  = toTask.getLateEndDate();
                        break;
                }

                // minus dependency Lag
                lag = deps[i].getLag();
                if (lag) dt  = projectCal.skipWorkingTime(dt, -lag, deps[i].getLagUnit());
                dt = projectCal.skipNonWorkingTime(dt, false);

                if (dt < result || !result) result = dt;
            }
        }

        // cache found value
        store.lateEndDates[internalId] = result || store.getProjectEndDate();

        return store.lateEndDates[internalId];
    },

    /**
     * Returns the _late start date_ of the task.
     * The _late start date_ is the latest possible start date of this task.
     * This value is calculated based on the latest start dates of its successors.
     * If the task has no successors, this value is calculated as the _project end date_ minus the task duration
     * (_project end date_ is the latest end date of all the tasks in the taskStore).
     *
     * @return {Date} The late start date.
     */
    getLateStartDate : function () {
        var store = this.getTaskStore();
        if (!store) return this.getStartDate();

        var internalId = this.internalId;
        if (store.lateStartDates[internalId]) return store.lateStartDates[internalId];

        var result;
        // for parent task we take minimum Late Start from its children
        if (this.childNodes.length) {
            var dt, i, l;

            for (i = 0, l = this.childNodes.length; i < l; i++) {
                dt = this.childNodes[i].getLateStartDate();
                if (dt < result || !result) result = dt;
            }

            store.lateStartDates[internalId] = result;

            return result;
        }

        // for manually scheduled task we simply return its start date
        if (this.isManuallyScheduled())  {
            result = store.lateStartDates[internalId] = this.getStartDate();
            return result;
        }

        // Late Start Date is Late Finish Date minus duration
        var value = this.getLateEndDate();
        if (!value) return null;

        result = store.lateStartDates[internalId] = this.getCalendar().calculateStartDate(value, this.getDuration(), this.getDurationUnit());

        return result;
    },

    resetEarlyDates : function () {
        var store = this.getTaskStore();
        if (!store) return;

        var internalId = this.internalId;
        store.earlyStartDates[internalId]    = null;
        store.earlyEndDates[internalId]      = null;
    },

    resetLateDates : function () {
        var store = this.getTaskStore();
        if (!store) return;

        var internalId = this.internalId;
        store.lateStartDates[internalId]    = null;
        store.lateEndDates[internalId]      = null;
    },


    getTopParent : function (all) {
        var root    = this.getTaskStore().getRootNode(),
            p       = this,
            path    = [ this ],
            result;

        while (p) {
            if (p === root) return all ? path : result;

            path.push(p);

            result  = p;
            p       = p.parentNode;
        }
    },


    // TODO: use for something - as a fast way of iterating over all children of some parent in depth
    getInDepthWalker : function (includeThisNode) {
        var current         = includeThisNode ? this : this.childNodes && this.childNodes[ 0 ];
        var stopAt          = this;

        var visitedParents  = {};

        var next            = function (from) {
            var current     = from;
            var internalId  = current.internalId;

            if (current.isLeaf() || !current.childNodes.length)
                current     = current.nextSibling;
            else {
                if (visitedParents[ internalId ] === true) {
                    visitedParents[ internalId ] = false;

                    current = current.nextSibling;
                } else {
                    visitedParents[ internalId ] = true;

                    current = current.childNodes[ 0 ];
                }
            }

            if (!current) {
                current     = from;

                do {
                    if (current === stopAt) return null;

                    current = current.parentNode;

                    if (current === stopAt) return null;
                } while (visitedParents[ current.internalId ] === false);

                return next(current);
            }

            return current;
        };

        return function () {
            var task    = current;

            if (current) current  = next(current);

            return task;
        };
    },


    /**
     * Propagates changes done in `changer` function to the task to all dependent tasks. The action is asynchronous
     * since changes propagation might violate some constraints applied, which in it's turn might require user
     * interaction.
     *
     * @param {Function} [changer] A function which should apply changes to the task
     *  A changer might return:
     *  - true - in this case the task will be considered as propagation source and propagation will be done only
     *    if the task has outstanding changes to propagate;
     *  - false or nothing - to cancel changes and skip propagation entirely;
     *  - a task instance, or array of task instances - to considered given instances as propagation source(s) and do
     *    the propagation
     *  If changer is not given or it's equal to Ext.emptyFn then propagation will be forcefully executed and tasks
     *  will be aligned/constrained according to their dependencies and/or constraints.
     * @param {Gnt.model.Task} changer.task The task
     * @param {Function} [callback] A callback function which will be called after changes propagation.
     * @param {Boolean}  callback.cancel Flag showing whether entire changes transaction has been canceled
     *  and nothing is changed.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     * @param {Boolean}  [forceCascadeChanges=task's task store `cascadeChanges` option] Flag indicating whether to propagate changes to dependent tasks.
     */
    propagateChanges : function(changer, callback, forceCascadeChanges) {
        var me = this,
            propagationSources,
            affectedTasks,
            taskStore,
            cascadeBatch;


        taskStore = me.getTaskStore(true);
        forceCascadeChanges = arguments.length == 3 ? forceCascadeChanges : taskStore && taskStore.cascadeChanges;

        if (!me.propagating && taskStore) {

            me.propagating = true;
            affectedTasks  = {};
            taskStore.suspendAutoSync();
            cascadeBatch   = taskStore.startBatchCascade();
            taskStore.startProjection();

            try {
                propagationSources = (changer && changer !== Ext.emptyFn) ? changer(me) : [me];
            }
            catch(e) {
                taskStore.rejectProjection();
                taskStore.endBatchCascade();
                taskStore.resumeAutoSync(taskStore.autoSync);
                me.propagating = false;
                throw e;
            }

            if (propagationSources === true) {
                propagationSources = me.isProjected() && [me] || false;
            }
            else if (propagationSources) {
                propagationSources = [].concat(propagationSources);
            }

            // Propagating
            if (propagationSources) {
                me.propagateChangesThroughDependentTasks(
                    taskStore.getLinearWalkingSequenceForDependentTasks(
                        propagationSources, {
                            self        : true,
                            ancestors   : taskStore.recalculateParents,
                            descendants : taskStore.moveParentAsGroup,
                            successors  : forceCascadeChanges,
                            cycles      : taskStore.cycleResolutionStrategy
                        }
                    ),
                    taskStore,
                    cascadeBatch,
                    propagationSources,
                    forceCascadeChanges,
                    affectedTasks,
                    function propagateChangesThroughDependentTasksCallback(cancelChanges, affectedTasks) {
                        if (cancelChanges) {
                            taskStore.rejectProjection();
                            affectedTasks = {};
                        }
                        else {
                            taskStore.commitProjection();
                        }
                        taskStore.endBatchCascade();

                        me.propagating = false;
                        callback && callback(cancelChanges, affectedTasks);

                        taskStore.resumeAutoSync(taskStore.autoSync && !cancelChanges && !Ext.Object.isEmpty(affectedTasks));
                    }
                );
            }
            else {
                taskStore.rejectProjection();
                taskStore.endBatchCascade();
                me.propagating = false;
                callback && callback(false, {});
                taskStore.resumeAutoSync(taskStore.autoSync);
            }
        }
        // No task store
        else if (!me.propagating) {
            me.propagating = true;

            try {
                changer && changer(me);
            }
            catch (e) {
                me.propagating = false;
                throw e;
            }

            me.verifyConstraint(function(constraintSatisfied, cancelChanges) {
                affectedTasks = {};
                cancelChanges = !!cancelChanges;
                if (!cancelChanges) {
                    affectedTasks[me.getId()] = me;
                }
                me.propagating = false;
                callback && callback(cancelChanges, affectedTasks);
            });
        }
        // We are currently propagating
        else {
            callback && callback(true, {});
        }
    },


    /**
     * @private
     *
     * @param {Array} linearWalkingSequence
     * @param {Gnt.model.Task} linearWalkingSequence[0] Step task
     * @param {String}         linearWalkingSequence[1] Color of the visiting step
     *  - 'green'  - Task is ready to be processed
     *  - 'yellow' - Branch task is ready to process it's children
     * @param {Object}         linearWalkingSequence[2] Set of all collected dependent tasks
     * @param {Object}         linearWalkingSequence[3] Dependency data
     * @param {Gnt.data.TaskStore} taskStore
     * @param {Object}             cascadeBatch
     * @param {Gnt.model.Task[]}   propagationSources
     * @param {Boolean}            forceCascadeChanges
     * @param {Object}             affectedTasks
     * @param {Function}           callback
     * @param {Integer}            startAt
     */
    propagateChangesThroughDependentTasks : function(linearWalkingSequence, taskStore, cascadeBatch, propagationSources, forceCascadeChanges, affectedTasks, callback, startAt) {
        var me = this,
            i, len,
            constraintSatisfied;

        startAt             = startAt    || 0;
        constraintSatisfied = true;

        for (i = startAt, len = linearWalkingSequence.length; constraintSatisfied && i < len; ++i) {

            constraintSatisfied = me.processTaskConstraints(
                linearWalkingSequence,
                i,
                taskStore,
                cascadeBatch,
                propagationSources,
                forceCascadeChanges,
                affectedTasks,
                function(linearWalkingIndex, constraintSatisfied, propagationCanceled, affectedTasks) {
                    // This callback might be called either synchronously or asynchronously thus we can't rely on
                    // `i` variable here. That's because if it is called synchronously then `i` will not yet be
                    // incremented by the for loop counter incrementing part, and if it's called asynchronously
                    // then `i` will be already incremented by the for loop directive. Thus we got the index
                    // for which this callback is called for as a parameter

                    // Stop condition
                    if (propagationCanceled || (linearWalkingIndex == len - 1)) {
                        callback(propagationCanceled, affectedTasks);
                    }
                    // Continue by recursion condition
                    else if (!constraintSatisfied) {
                        me.propagateChangesThroughDependentTasks(
                            linearWalkingSequence,
                            taskStore,
                            cascadeBatch,
                            propagationSources,
                            forceCascadeChanges,
                            affectedTasks,
                            callback,
                            linearWalkingIndex + 1
                        );
                    }
                    // Else constraint is satisfied and we will continue by the for loop
                }
            );
        }
    },

    /**
     * @private
     *
     * Will return `false` if a constraint conflict has been detected and awaiting for resolution, once resolved
     * the callback method will be called.
     */
    processTaskConstraints : function(linearWalkingSequence, linearWalkingIndex, taskStore, cascadeBatch, propagationSources, forceCascadeChanges, affectedTasks, callback) {
        var me                             = this,
            step                           = linearWalkingSequence[linearWalkingIndex],
            task                           = step[0],
            color                          = step[1],
            isParent                       = task.hasChildNodes(),
            isLeaf                         = !isParent,
            autoScheduled                  = !(task.isManuallyScheduled() || Ext.Array.contains(propagationSources, task)),
            cascadeChanges                 = forceCascadeChanges || taskStore.cascadeChanges,
            recalculateParents             = taskStore.recalculateParents,
            moveParentAsGroup              = taskStore.moveParentAsGroup,
            parentNode                     = task.parentNode,
            parentNodeStartDate            = parentNode && (parentNode.getStartDate()),
            parentNodeUnprojectedStartDate = parentNode && (parentNode.getUnprojected(parentNode.startDateField)),
            parentNodeDateOffset           = parentNode && (parentNodeStartDate - parentNodeUnprojectedStartDate),
            offsetFromParent;

        function areIncomingDependenciesAffectedOrPropagationSourcesIncoming(task, affectedTasks, propagationSources) {
            var incomingDeps = task.getIncomingDependencies(true),
                result = false,
                i, len, dep, fromTask;

            for (i = 0, len = incomingDeps.length; !result && i < len; ++i) {
                dep = incomingDeps[i];
                fromTask = dep.getSourceTask();
                result = fromTask && affectedTasks.hasOwnProperty(fromTask.getId()) ||
                                     Ext.Array.contains(propagationSources, fromTask);
            }

            return result;
        }

        switch (true) {
            case autoScheduled && isLeaf   && color == 'green'  && parentNodeDateOffset && moveParentAsGroup:
            case autoScheduled && isParent && color == 'yellow' && parentNodeDateOffset && moveParentAsGroup:
                // TODO: we ignore case when parent StartDate set to NULL
                // since we cannot calculate proper dates to shift child tasks at
                if (parentNodeStartDate) {
                    var startDate = task.getStartDate();

                    if (startDate >= parentNodeUnprojectedStartDate) {
                        offsetFromParent = task.calculateDuration(parentNodeUnprojectedStartDate, startDate, null, { segments : false });
                        task.setStartDateWithoutPropagation(task.calculateEndDate(parentNodeStartDate, offsetFromParent, null, { segments : false }), true, taskStore.skipWeekendsDuringDragDrop);

                    // if the summary task starts after this one
                    } else {
                        // force to not take segments into account during new start date calculating
                        offsetFromParent = task.calculateDuration(startDate, parentNodeUnprojectedStartDate, null, { segments : false });
                        task.setStartDateWithoutPropagation(task.calculateStartDate(parentNodeStartDate, offsetFromParent, null, { segments : false }), true, taskStore.skipWeekendsDuringDragDrop);
                    }

                    // Passing a parent node here limits the constraining to incoming dependencies incoming from
                    // that parent node descendants only, outer nodes are not taken into account
                    areIncomingDependenciesAffectedOrPropagationSourcesIncoming(task, affectedTasks, propagationSources) &&
                        task.alignByIncomingDependenciesWithoutPropagation(taskStore, null, parentNode);
                }

                break;

            case autoScheduled && isLeaf   && color == 'green'  && cascadeChanges:
            case autoScheduled && isParent && color == 'yellow' && cascadeChanges:

                areIncomingDependenciesAffectedOrPropagationSourcesIncoming(task, affectedTasks, propagationSources) &&
                    task.alignByIncomingDependenciesWithoutPropagation(taskStore, null);
                break;

            case isParent && color == 'green' && recalculateParents:

                task.refreshCalculatedParentNodeData();
                break;
        }

        if (task.isProjected()) {
            cascadeBatch.addAffected(task);
            affectedTasks[task.getId()] = task;
        }

        return task.verifyConstraint(function(constraintSatisfied, propagationCanceled) {
            var yellowStep,
                yellowStepIdx;

            // In case a parent node is adjusted according to it's children and such an adjustment violates
            // the parent node constraint then we rewind back to the same parent node yellow step to readjust
            // it and it's children once again allowing a user to reconsider (by showing him constraint violation
            // dialog, for example). We rewince by calling a callback with ajusted step index.
            if (!constraintSatisfied && isParent && autoScheduled && taskStore.recalculateParents && color == 'green') {
                yellowStep = Ext.Array.findBy(linearWalkingSequence, function(step, index) {
                    var stepTask  = step[0],
                        stepColor = step[1];

                    yellowStepIdx = index;

                    return task === stepTask && stepColor == 'yellow';
                });
                // yellowStep must always be present in the linear walking sequence.
                callback(yellowStepIdx, constraintSatisfied, !!propagationCanceled, affectedTasks);
            }
            else {
                callback(linearWalkingIndex, constraintSatisfied, !!propagationCanceled, affectedTasks);
            }
        });
    }
});

/**

@class Gnt.model.task.Constraints
@mixin
@protected

Internal mixin class providing additional logic and functionality related to task constraints.

*/
Ext.define('Gnt.model.task.Constraints', {

    requires : [
        'Gnt.constraint.Base',
        'Gnt.constraint.StartNoEarlierThan',
        'Gnt.constraint.StartNoLaterThan',
        'Gnt.constraint.FinishNoEarlierThan',
        'Gnt.constraint.FinishNoLaterThan',
        'Gnt.constraint.MustStartOn',
        'Gnt.constraint.MustFinishOn'
    ],


    /**
     * Sets the constraint type and constraining date (if applicable) to the task.
     *
     * @param {String} type 
     *  Constraint type, see {@link #setConstraintType} for further description.
     * @param {Date}   date 
     *  Constraint date
     * @param {Function} [callback] Callback to call after constraint application and constraint conflict resolution 
     *  if any.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation 
     *  and a user opted for cancelling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setConstraint : function(type, date, callback) {
        var me = this,
            taskStore = me.getTaskStore(true),
            constraint;

        if (type) {
            constraint = Gnt.constraint.Base.getConstraintClass(type);
        }

        if (!date && constraint)  {
            date = constraint.getInitialConstraintDate(me);
        }

        function changer() {
            me.beginEdit();
            me.set(me.constraintTypeField, type || '');
            me.set(me.constraintDateField, date);
            me.endEdit();
            return true;
        }

        if (type) {
            me.propagateChanges(changer, callback);
        } 
        else {
            changer();
            callback && callback(false, {});
        }
    },

    /**
     * Sets the constraint type of the task. The type string can be one of the following values:
     *
     *  - finishnoearlierthan
     *  - finishnolaterthan
     *  - mustfinishon
     *  - muststarton
     *  - startnoearlierthan
     *  - startnolaterthan
     *
     * @param {String} type 
     *  Constraint type
     * @param {Function} [callback] Callback to call after constraint application and constraint conflict resolution 
     *  if any.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation 
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setConstraintType : function (type, callback) {
        this.setConstraint(type, this.getConstraintDate(), callback);
    },
    
    
    /**
     * Sets the constraint date of the task.
     *
     * @param {Date}   date 
     *  Constraint date
     * @param {Function} [callback] Callback to call after constraint application and constraint conflict resolution 
     *  if any.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation 
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setConstraintDate : function (date, callback) {
        this.setConstraint(this.getConstraintType(), date, callback);
    },


    /**
     * Checks whether a constraint is set for the task.
     *
     * @return {Boolean}
     */
    hasConstraint : function() {
        return !!this.getConstraintType();
    },


    /**
     * Returns a constraint singleton class corresponding to the constraint type currently set for the task.
     *
     * @return {Gnt.constraint.Base} subclass of
     */
    getConstraintClass : function() {
        return Gnt.constraint.Base.getConstraintClass(this.getConstraintType());
    },


    /**
     * Returns true if task has no constraint set or if a constraint set is satisfied by the task.
     *
     * @return {Boolean}
     */
    isConstraintSatisfied : function () {
        var me = this,
            taskStore = me.getTaskStore(true);

        return !me.hasConstraint() || me.getConstraintClass().isSatisfied(me, me.getConstraintDate());
    },


    /**
     * Verifies the constraint of the task.
     *
     * @param {Function} [onceResolvedContinueHere] Callback function to be called after constraint conflict resolution.
     * @param {Boolean}  onceResolvedContinueHere.constraintSatisfied Flag showing whether constraint has been satisfied or violated.
     * @param {Boolean}  onceResolvedContinueHere.cancelChanges Flag showing whether a user has opted for changes to be canceled.
     * @return {Boolean} True if no constraint conflict has been found, false otherwise
     *
     * @private
     */
    verifyConstraint : function(onceResolvedContinueHere) {
        var me = this,
            taskStore,
            precision,
            constraintResolutionContext,
            constraintSatisfied,
            hasConflictListener;
        

        constraintSatisfied         = me.isConstraintSatisfied();
        onceResolvedContinueHere    = onceResolvedContinueHere && Ext.Function.pass(onceResolvedContinueHere, [constraintSatisfied]);
        taskStore                   = me.getTaskStore(true);
        hasConflictListener         = taskStore && taskStore.hasListener('constraintconflict');
        precision                   = taskStore && taskStore.constraintDatePrecision || Sch.util.Date.DAY;
        constraintResolutionContext = !constraintSatisfied && me.getConstraintClass().getResolution(onceResolvedContinueHere, me, null, precision);

        if (!constraintSatisfied && taskStore && hasConflictListener) {
            /**
             * @event constraintconflict
             *
             * Fires when task constraint conflict has been found and requires a resolution.
             *
             * @param {Gnt.model.Task} task The task whose constraint is violated
             * @param {Object} context Constraint resolution context
             * @param {String} context.title The description of the  
             *
             * @member Gnt.data.TaskStore
             */
            taskStore.fireEvent('constraintconflict', me, constraintResolutionContext);
        }
        else if (!constraintSatisfied) {
            constraintResolutionContext.cancelAction();
        }
        else if (onceResolvedContinueHere) {
            onceResolvedContinueHere(false);
        }

        return constraintSatisfied;
    },

    /**
     * Returns working time start for the given date, task's calendar and calendars the task assigned resources
     * calendars are taken into account.
     *
     * If there's no working time present at the given date then returns false.
     *
     * @param {Date} date
     * @return {Date|false}
     */
    getWorkingTimeStartForDate : function(date) {
        var me     = this,
            result = false,
            startDate,
            endDate;


        startDate = Ext.Date.clearTime(date, true);
        endDate   = Sch.util.Date.add(startDate, Sch.util.Date.DAY, 1);

        me.forEachAvailabilityInterval({
            isForward   : true,
            startDate   : startDate, 
            endDate     : endDate,
            segments    : false,
            resources   : true,
            fn          : function(from, to) {
                result = new Date(from);
                return false;
            }
        });

        return result;
    },

    /**
     * Returns working time end for the given date, task's calendar and calendars the task assigned resources
     * calendars are taken into account.
     *
     * If there's no working time present at the given date then returns false.
     *
     * @param {Date} date
     * @return {Date|false}
     */
    getWorkingTimeEndForDate : function(date) {
        var me     = this,
            result = false,
            startDate,
            endDate;


        startDate = Ext.Date.clearTime(date, true);
        endDate   = Sch.util.Date.add(startDate, Sch.util.Date.DAY, 1);

        me.forEachAvailabilityInterval({
            isForward   : false,
            startDate   : startDate,
            endDate     : endDate,
            segments    : false,
            resources   : true,
            fn          : function(from, to) {
                result = new Date(to);
                return false;
            }
        });

        return result;
    },

    /**
     * Returns nearest working time start (earliest for the day) in the given search direction up to given search limit
     *
     * @param {Date} date Date to start searching from.
     * @param {Boolean} searchBackward Search direction flag.
     * @param {Integer} searchLimit Amount of days to search in.
     *
     * @return {Date|false}
     */
    getNearestWorkingTimeStartForDate : function(date, searchBackward, searchLimit) {
        var me = this,
            step,
            result;


        searchBackward = searchBackward || false;
        searchLimit    = searchLimit    || 365;
        step           = searchBackward ? -1 : 1;
        
        result = me.getWorkingTimeStartForDate(date);

        while (!result && searchLimit--) {
            date   = Sch.util.Date.add(date, Sch.util.Date.DAY, step);
            result = me.getWorkingTimeStartForDate(date);
        }

        return result;
    },

    /**
     * Returns nearest working time end (latest for the day) in the given search direction up to given search limit
     *
     * @param {Date} date Date to start searching from.
     * @param {Boolean} searchBackward Search direction flag.
     * @param {Integer} searchLimit Amount of days to search in.
     *
     * @return {Date|false}
     */
    getNearestWorkingTimeEndForDate : function(date, searchBackward, searchLimit) {
        var me = this,
            step,
            result;


        searchBackward = searchBackward || false;
        searchLimit    = searchLimit    || 365;
        step           = searchBackward ? -1 : 1;

        result = me.getWorkingTimeEndForDate(date);

        while (!result && searchLimit--) {
            date   = Sch.util.Date.add(date, Sch.util.Date.DAY, step);
            result = me.getWorkingTimeEndForDate(date);
        }

        return result;
    },


    /**
     * Returns working time interval for the given datetime, if datetime is not withing working time interval,
     * then returns false, task's calendar and calendars the task assigned resources calendars are taken into account.
     *
     * @param {Date} dateTime
     * @return {Object|false} Object containing _startDate_, _endDate_ properties or false.
     */
    getWorkingTimeIntervalForDateTime : function(dateTime) {
        var me     = this,
            result = false,
            startDate,
            endDate;


        startDate = Ext.Date.clearTime(dateTime, true);
        endDate   = Sch.util.Date.add(startDate, Sch.util.Date.DAY, 1);

        dateTime = dateTime.valueOf();

        me.forEachAvailabilityInterval({
            isForward   : true,
            startDate   : startDate, 
            endDate     : endDate,
            segments    : false,
            resources   : true,
            fn          : function(from, to) {
                if (from <= dateTime && dateTime <= to) {
                    result = {
                        startDate : new Date(from),
                        endDate   : new Date(to)
                    };
                }
                return !result;
            }
        });

        return result;
    },

    /**
     * Checks whether the given time is within working time interval for the task, task's calendar and calendars
     * the task assigned resources calendars are taken into account.
     *
     * @param {Date} dateTime
     * @return {Boolean}
     */
    isDateTimeWithinWorkingTimeInterval : function(dateTime) {
        var me = this;


        return me.getWorkingTimeIntervalForDateTime(dateTime) !== false;
    }
});

/**

@class Gnt.model.task.Splittable
@mixin
@protected

Internal mixin class providing task splitting logic and functionality belonging to the Task model class.

*/
Ext.define('Gnt.model.task.Splittable', {

    uses                        : [
        'Gnt.model.TaskSegment'
    ],

    segmentsTrackingSuspended   : 0,

    changingTaskBySegments      : false,

    splitsDuration              : 0,

    segmentsSnapshot            : null,

    segmentsProjection          : null,


    getFirstSegment : function () {
        var segments    = this.getSegments();

        return segments && segments[0];
    },


    getLastSegment : function () {
        var segments    = this.getSegments();

        return segments && segments[segments.length - 1];
    },


    normalizeSegments : function () {
        var segments    = this.getSegments();

        // we don't wanna hear any response from segments during their normalization
        this.suspendSegmentsTracking();

        // first let sort intervals by its start dates ascending
        segments.sort(function (a, b) {
            if (!a.normalized) a.normalize();
            if (!b.normalized) b.normalize();
            return a.getStartDate() > b.getStartDate() ? 1 : -1;
        });

        // merge overlapped segments if any
        this.mergeOverlappedSegments();

        // if we still have segmentation after merging
        if (segments = this.getSegments()) {
            this.data[ this.durationField ] = this.getSegmentsDuration();
        }

        this.resumeSegmentsTracking();
    },


    // Refreshes the task segments dates. We have to call this after the task time span change.
    updateSegmentsDates : function (options) {
        options     = options || {};

        if (!this.isSegmented()) return;

        // we don't want to catch response from segments
        this.suspendSegmentsTracking();

        options             = Ext.apply({
            useAbsoluteOffset   : false
        }, options);

        options.isForward   = options.isForward !== false;

        this.forEachSegment(function (segment) {
            segment.updateDatesByOffsets(options);
        }, options.isForward);

        // need to set Segments field dirty
        this.set(this.segmentsField, this.getSegments().slice());

        this.resumeSegmentsTracking();
    },


    getSegmentIntervalsForRange : function (from, till, segments) {
        segments    = segments || this.getSegments();
        if (!segments) return;

        var DATE    = Sch.util.Date,
            result  = [];

        for (var i = 0, l = segments.length; i < l; i++) {
            var part            = segments[i],
                segmentStart    = part.getStartDate(),
                segmentEnd      = part.getEndDate();

            if (DATE.intersectSpans(from, till, segmentStart, segmentEnd)) {
                result.push([ DATE.constrain(segmentStart, from, till) - 0, DATE.constrain(segmentEnd, from, till) - 0 ]);
            }
        }

        return result.length && result || null;
    },

    /**
     * Returns a segment that is ongoing on the provided date.
     * @param  {Date} date Date to find an ongoing segment on
     * @param  {Gnt.model.TaskSegment[]} [segments] List of segments to check. When not provided the task segments is used
     * @return {Gnt.model.TaskSegment} Ongoing segment
     */
    getSegmentByDate : function (date, segments) {
        segments    = segments || this.getSegments();
        if (!segments) return;

        for (var i = 0, l = segments.length; i < l; i++) {
            var part    = segments[i];
            if (date >= part.getStartDate() && date < part.getEndDate()) return part;
        }
    },


    // Truncates segments that don't fit into task time span (this can be detected either based on the task start/end dates or by comparing with the task duration).
    // @private
    constrainSegments : function (options) {
        // should be called only for the task driven changes, and `this.changingTaskBySegments` means that change initiated by a segment
        if (this.changingTaskBySegments) return;

        options             = options || {};

        var segments    = this.getSegments();
        if (!segments) return;

        var taskDuration    = this.getDuration('MILLI'),
            durationUnit    = options.unit || this.getDurationUnit(),
            durationLimit   = options.duration,
            startDate       = this.getStartDate(),
            endDate         = this.getEndDate(),
            converter       = this.getUnitConverter();

        if (!startDate || (!endDate && !taskDuration && !durationLimit)) {
            this.set(this.segmentsField, null);
            return;
        }

        if (durationLimit) {
            durationLimit   = converter.convertDurationToMs(durationLimit, durationUnit);
        } else if (!endDate) {
            durationLimit   = taskDuration;
        }

        // we don't want to catch response from segments
        this.suspendSegmentsTracking();

        segments[0].setStartDateWithoutPropagation(this.getStartDate(), false);

        // now let's loop over array and merged overlapping intervals
        var splitsDuration  = 0,
            toRemove        = [],
            durationLeft    = durationLimit,
            current, previous;

        var toRemoveChecker;
        // we check if segment fits into task timespan using either task end date or task duration depending on options provided
        if (durationLimit) {
            toRemoveChecker = function (segment) { return durationLeft <= 0; };
        } else {
            toRemoveChecker = function (segment) { return segment.getStartDate() >= endDate; };
        }

        for (var i = 0, l = segments.length; i < l; i++) {
            current         = segments[i];

            // we get rid of segments that do not fit into task timespan
            if (toRemoveChecker(current)) {
                toRemove.push.apply(toRemove, segments.slice(i));
                break;
            }

            durationLeft    -= current.getDuration('MILLI');

            // increment total splits duration
            if (previous) {
                splitsDuration  += current.getStartOffset() - previous.getEndOffset();
            }

            previous        = current;
        }

        // remove segments swallowed during merge
        this.removeSegments(toRemove);

        if (segments.length < 2) {
            this.set(this.segmentsField, null);

        } else {

            var last            = this.getLastSegment();
            var lastAdjusted    = false;

            // if we constrain using duration
            if (durationLimit) {
                if (durationLeft) {
                    last.setDurationWithoutPropagation(converter.convertMSDurationToUnit(last.getEndOffset() - last.getStartOffset() + durationLeft, last.getDurationUnit()));
                    lastAdjusted    = true;
                }
            } else {
                if (last.getEndDate() - endDate) {
                    last.setEndDateWithoutPropagation(endDate, false);
                    lastAdjusted    = true;
                }
            }

            last.setNextSegment(null);

            // keep total splits duration
            this.splitsDuration = splitsDuration;

            // if we modified segments and field is not marked as modified yet
            if ((toRemove.length || lastAdjusted) && (!this.modified || !this.modified[this.segmentsField])) {
                this.set(this.segmentsField, this.getSegments().slice());
            }
        }


        this.resumeSegmentsTracking();
    },


    forEachSegment : function (fn, isForward, startSegment, scope) {
        if (!fn) return;

        scope       = scope || this;

        var method, segment;

        if (isForward !== false) {
            // method to walk down the segments available
            method  = 'getNextSegment';
            // initial segment
            segment = startSegment || this.getFirstSegment();
        } else {
            method  = 'getPrevSegment';
            segment = startSegment || this.getLastSegment();
        }

        while (segment) {
            if (fn.call(scope, segment) === false) return;

            segment    = segment[method].call(segment);
        }
    },


    /**
     * Splits a task.
     * @param {Date} from The date to split this task at.
     * @param {Number} [duration=1] Split duration.
     * @param {String} [unit=d] Split duration unit.
     * @param {Boolean} [skipNonWorkingTime] Pass `true` to automatically move the start date to the earliest available working time (if it falls on non-working time).
     * Default is `false`
     * @param {Function} [callback] Callback function to call after task has been split and changes among dependent tasks were propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    split : function(from, duration, unit, skipNonWorkingTime, callback) {
        var me = this,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.splitWithoutPropagation(from, duration, unit, skipNonWorkingTime, function cancelFeedback(fn) {
                    cancelFn = fn;
                });
            },
            function(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );
    },


    splitWithoutPropagation : function (from, duration, unit, skipNonWorkingTime, cancelFeedback) {
        var me  = this;

        if (skipNonWorkingTime !== true && skipNonWorkingTime !== false) {
            var taskStore       = me.getTaskStore(true);

            skipNonWorkingTime  = taskStore ? taskStore.skipWeekendsDuringDragDrop : false;
        }

        // cannot split:
        // - if no split date specified
        // - a summary task
        // - a milestone
        if (!from || !me.isLeaf() || me.isMilestone()) return;

        var startDate   = me.getStartDate(),
            endDate     = me.getEndDate();

        // - not scheduled task
        // - provided date violates task interval
        if (!startDate || !endDate || (startDate >= from) || (from >= endDate)) return;

        var segments    = me.getSegments(),
            segmentToSplit;

        // let's make a snapshot to rollback in case of some constraint violation
        var snapshot    = me.buildSegmentsSnapshot(segments);

        if (segments) {
            segmentToSplit  = me.getSegmentByDate(from);

            if (!segmentToSplit) return;
        } else {
            segments        = [];
        }

        duration        = duration || 1;
        unit            = unit || this.getDurationUnit();

        var date        = new Date(from),
            splitStart  = date,
            splitEnd    = date,
            durationMS  = me.getUnitConverter().convertDurationToMs(duration, unit);

        if (skipNonWorkingTime) {
            splitEnd    = me.skipNonWorkingTime(splitEnd, true, true);
            splitStart  = me.skipNonWorkingTime(splitStart, false, true);

            // exit if split date is in a large gap between working periods of time
            // if (splitEnd - splitStart  > durationMS) return;
        }

        var taskDurationUnit    = me.getDurationUnit(),
            firstPieceDuration,
            secondPieceDuration,
            segmentData;

        // suspend to not call onSegmentsChanged on every segment modification
        // we call it one time on the last step
        me.suspendSegmentsTracking();

        // split not segmented task
        if (!segmentToSplit) {

            firstPieceDuration      = me.calculateDuration(startDate, splitStart);
            secondPieceDuration     = me.getDuration() - firstPieceDuration;

            segmentData = { task : me };
            segmentData[me.startDateField]  = startDate;
            segmentData[me.durationField]   = firstPieceDuration;
            segmentData[me.durationUnitField] = taskDurationUnit;
            segments.push(Ext.create(me.segmentClassName, segmentData));

        // split existing segment
        } else {
            firstPieceDuration  = me.calculateDuration( segmentToSplit.getStartDate(), splitStart, taskDurationUnit );
            secondPieceDuration = segmentToSplit.getDuration(taskDurationUnit) - firstPieceDuration;

            segmentToSplit.setEndDateWithoutPropagation( splitStart, false, skipNonWorkingTime );
        }

        var splitDurationMS = me.getUnitConverter().convertDurationToMs(duration, unit);

        // shift all further segments by provided duration
        if (segmentToSplit && segmentToSplit.getNextSegment()) {

            me.forEachSegment(function (s) {
                s.setStartEndOffset( s.getStartOffset() + splitDurationMS, s.getEndOffset() + splitDurationMS );
                s.updateDatesByOffsets();
            }, true, segmentToSplit.getNextSegment());

        }

        // take split duration into account
        splitEnd        = me.skipWorkingTime(splitEnd, splitDurationMS);

        if (skipNonWorkingTime) {
            // adjust to calendar if required
            splitEnd    = me.skipNonWorkingTime(splitEnd);
        }

        segmentData = {
            prevSegment : segmentToSplit || segments[0],
            task        : me
        };
        segmentData[me.startDateField]  = splitEnd;
        segmentData[me.durationField]   = secondPieceDuration;
        segmentData[me.durationUnitField] = taskDurationUnit;

        var newSegment = Ext.create(me.segmentClassName, segmentData);

        if (segmentToSplit) {
            Ext.Array.insert(segments, Ext.Array.indexOf(segments, segmentToSplit) + 1, [newSegment]);
        } else {
            segments.push(newSegment);
        }

        me.resumeSegmentsTracking();

        cancelFeedback && cancelFeedback(function() {
            me.rollbackSegmentsToSnapshot(snapshot);
        });

        if (!segmentToSplit) {
            me.setSegmentsWithoutPropagation(segments);
        } else {
            me.onSegmentsChanged(null, null);
        }

        return true;
    },


    /**
     * Merges two segments of a task.
     * @param {Gnt.model.TaskSegment} segment1 First segment to merge.
     * @param {Gnt.model.TaskSegment} segment2 Second segment to merge.
     * @param {Function} [callback] Callback function to call after task has been merged and changes among dependent tasks were propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    merge : function (segment1, segment2, callback) {
        var me = this;

        me.propagateChanges(
            function() {
                return me.mergeWithoutPropagation(segment1, segment2);
            },
            callback
        );
    },


    mergeWithoutPropagation : function(segment1, segment2) {
        if (!this.isSegmented() || !segment1 || !segment2) return;

        var first, second;

        if (segment1.getStartOffset() > segment2.getStartOffset()) {
            first   = segment2;
            second  = segment1;
        } else {
            first   = segment1;
            second  = segment2;
        }

        // merging itself will be done automatically inside of `onSegmentsChanged`
        first.setEndDateWithoutPropagation(second.getEndDate(), false);

        return true;
    },


    suspendSegmentsTracking : function () {
        this.segmentsTrackingSuspended++;
    },


    resumeSegmentsTracking : function () {
        this.segmentsTrackingSuspended--;
    },


    // Returns the sum of segments durations.
    getSegmentsDuration : function (unit) {
        unit            = unit || this.getDurationUnit();
        var segments    = this.getSegments();
        var duration    = 0;

        for (var i = 0, l = segments.length; i < l; i++) {
            var s       = segments[i];
            duration    += s.getEndOffset() - s.getStartOffset();
        }

        return this.getUnitConverter().convertMSDurationToUnit(duration, unit);
    },


    mergeOverlappedSegments : function (doNotTruncate) {
        var segments = this.getSegments();

        if (segments) {
            var toRemove    = [],
                previous    = segments[0],
                current;

            // Check if we should merge segments
            for (var i = 1, l = segments.length; i < l; i++) {
                current     = segments[i];

                // if `current` segment intersects `previous` segment
                if (current.getStartOffset() <= previous.getEndOffset()) {
                    // we skip the current
                    toRemove.push(current);

                    // if `current` end date is greater than `previous` one we elapse previous segment
                    if (current.getEndOffset() > previous.getEndOffset()) {
                        previous.setEndDateWithoutPropagation(current.getEndDate(), false);
                    }

                } else {
                    current.setPrevSegment(previous);
                    // `previous` keeps the last not skipped segment
                    previous    = current;
                }
            }

            this.removeSegments(toRemove);

            if (segments.length < 2 && !doNotTruncate) {
                this.setSegmentsWithoutPropagation(null);
            } else {
                segments[segments.length - 1].setNextSegment(null);
            }
        }
    },


    onSegmentEditBegin : function (segment) {
        this.snapshotSegments();
    },


    onSegmentsChanged : function (segment, modified) {

        if (this.segmentsTrackingSuspended) return;

        var segments = this.getSegments();

        this.changingTaskBySegments = true;

        // we don't want to escalate chain of calls
        this.suspendSegmentsTracking();

        // Check if we should merge segments
        // we pass `true` to not truncate segments array if we have 1 element in it (we need this to get duration from it)
        // The array will be completely reset inside of this.set() call
        this.mergeOverlappedSegments(true);

        segments    = this.getSegments();

        // segments has been changed so we need re-adjust task to take them into account

        // if segment duration has been changed - task duration has to be updated
        if (segment && modified && segment.durationField in modified) {
            // even after merge here we have at least 1 segment to be able to get duration from it
            this.setDurationWithoutPropagation(this.getSegmentsDuration());
        } else {
            this.setStartDateWithoutPropagation(this.getStartDate(), true);
        }

        // re-get segments list since it could've been rolled back because of failed propagation
        // inside of setDuration/setStartDate call
        segments    = this.getSegments();

        // set field state to dirty
        this.set(this.segmentsField, segments && segments.slice() || null);

        this.resumeSegmentsTracking();

        this.changingTaskBySegments = false;
    },


    removeSegments : function (toRemove) {
        var segments    = this.getSegments();

        if (!segments || !toRemove || !toRemove.length) return;

        if (!Ext.isArray(toRemove)) toRemove    = [ toRemove ];

        for (var i = 0, l = toRemove.length; i < l; i++) {
            Ext.Array.remove(segments, toRemove[i]);
        }

        this.onSegmentsChanged();
    },


    /**
     * Sets list of segments of the split task.
     * @param {Array[Gnt.model.TaskSegment/Object]} value List of segments.
     * @param {Function} [callback] Callback function to call after task end date has been set and changes among dependent tasks were propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setSegments : function (value, callback) {
        var me = this;

        me.propagateChanges(
            function() {
                return me.setSegmentsWithoutPropagation(value);
            },
            callback
        );
    },


    setSegmentsWithoutPropagation : function(value) {
        this.splitsDuration = 0;

        this.suspendSegmentsTracking();

        var oldSegments     = this.getSegments();

        // we slice() passed array to make model understand that field content is updated
        this.set(this.segmentsField, this.processSegmentsValue(value));

        if (!this.isSegmented()) {
            // remove old segments
            if (oldSegments) {
                this.removeSegments(oldSegments.slice());
            }
        }

        this.resumeSegmentsTracking();

        this.onSegmentsChanged(null, null);

        return true;
    },


    processSegmentsValue : function (value) {
        var segments, currentSegment, prevSegment;

        // if segments are specified for the task
        if (value) {
            value    = [].concat(value);
            segments = [];

            for (var i = 0, l = value.length; i < l; i++) {
                currentSegment = value[i];

                if (!(currentSegment instanceof Gnt.model.TaskSegment)) {
                    currentSegment = Ext.create(this.segmentClassName, Ext.apply(currentSegment, {
                        task    : this
                    }));
                }

                segments.push(currentSegment);

                currentSegment.setPrevSegment(prevSegment);

                prevSegment = currentSegment;
            }

            value = segments && segments.length > 1 && segments || null;
        }

        return value;
    },


    /**
     * Returns `true` if task is segmented and `false` otherwise.
     * @return {Boolean} `true` if task is segmented and `false` otherwise.
     */
    isSegmented : function () {
        return Boolean(this.getSegments());
    },


    /**
     * Gets segment by its index.
     * @param {Number} index Segment index to retrieve (zero based value).
     * @return {Gnt.model.TaskSegment}
     */
    getSegment : function(index) {
        return this.getSegments()[index];
    },


    rejectSegmentsProjection : function () {
        var projectionLevel = this.getTaskStore(true).getProjectionLevel();

        var snapshot, i;

        if (this.segmentsProjection) {
            var snapshotLevel;

            for (i = projectionLevel; i >= 0; i--) {
                if (snapshot        = this.segmentsProjection[i]) {
                    snapshotLevel   = i;
                    break;
                }
            }

            if (snapshotLevel === projectionLevel) {
                delete this.segmentsProjection[snapshotLevel];
            }
        }

        if (snapshot) {
            this.rollbackSegmentsToSnapshot(snapshot);
        }
    },


    commitSegmentsProjection : function () {
        var taskStore       = this.getTaskStore(true),
            projectionLevel = taskStore && taskStore.getProjectionLevel();

        if (this.segmentsProjection) {
            delete this.segmentsProjection[projectionLevel];
        }
    },


    rollbackSegmentsToSnapshot : function (snapshot) {
        this.data[this.segmentsField]   = snapshot && Ext.Array.map(snapshot, function (segment) {
            return segment && segment[0].readSnapshot(segment);
        });
    },


    buildSegmentsSnapshot : function (segments) {
        segments    = segments || this.getSegments();

        return segments && Ext.Array.map(segments, function (segment) {
            return segment && segment.buildSnapshot();
        });
    },


    snapshotSegments : function () {
        var taskStore       = this.getTaskStore(true),
            segments        = this.getSegments(),
            projectionLevel = taskStore && taskStore.getProjectionLevel(),
            snapshot;

        // if taskStore is in the middle of projection let's try to follow it
        // and bind snapshot to previous projection level, to be able to rollback segments
        // after projection rollback
        if (projectionLevel) {

            this.segmentsProjection = this.segmentsProjection || {};
            snapshot                = this.segmentsProjection[projectionLevel - 1];

            if (!snapshot) {

                snapshot                                        = this.buildSegmentsSnapshot(segments);
                this.segmentsProjection[projectionLevel - 1]    = snapshot;
            }

        }

        // this is a zero level snapshot that is used for task.reject() support
        if (!this.segmentsSnapshot) {
            this.segmentsSnapshot     = snapshot || this.buildSegmentsSnapshot(segments);
        }
    },


    commitSegments : function () {
        // EtxJS5 calls `commit` during `reject` call. o_O
        if (this.rejecting) return;

        // let's reset snapshot, we will fill it during first attempt to edit this task segments
        this.segmentsSnapshot   = null;

        var segments            = this.getSegments();

        if (segments) {
            for (var i = 0, l = segments.length; i < l; i++) {
                segments[i].commit();
            }
        }
    },


    rejectSegments : function () {
        // get kept previous segments data
        this.rollbackSegmentsToSnapshot(this.segmentsSnapshot);
        this.segmentsSnapshot           = null;

        var segments                    = this.getSegments();

        if (segments) {
            for (var i = 0, l = segments.length; i < l; i++) {
                segments[i].reject();
            }
        }
    }

});

/**

@class Gnt.model.Task
@extends Sch.model.Range

This class represents a single task in your Gantt chart.

The inheritance hierarchy of this class includes {@link Sch.model.Customizable} and {@link Ext.data.Model} classes.
This class will also receive a set of methods and additional fields that stem from the {@link Ext.data.NodeInterface}.
Please refer to the documentation of those classes to become familiar with the base interface of this class.

By default, a Task has the following fields as seen below.

Task Fields
------

- `Id` - (mandatory) a unique identifier of the task
- `Name` - the name of the task (task title)
- `StartDate` - the start date of the task in the ISO 8601 format. See {@link Ext.Date} for a formats definitions.
- `EndDate` - the end date of the task in the ISO 8601 format, **see "Start and End dates" section for important notes**
- `Duration` - the numeric part of the task duration (the number of units)
- `DurationUnit` - the unit part of the task duration (corresponds to units defined in `Sch.util.Date`), defaults to "d" (days). Valid values are:
     - "ms" (milliseconds)
     - "s" (seconds)
     - "mi" (minutes)
     - "h" (hours)
     - "d" (days)
     - "w" (weeks)
     - "mo" (months)
     - "q" (quarters)
     - "y" (years)
- `Effort` - the numeric part of the task effort (the number of units). The effort of the "parent" tasks will be automatically set to the sum
of efforts of their "child" tasks
- `EffortUnit` - the unit part of the task effort (corresponds to units defined in `Sch.util.Date`), defaults to "h" (hours). Valid values are:
     - "ms" (milliseconds)
     - "s" (seconds)
     - "mi" (minutes)
     - "h" (hours)
     - "d" (days)
     - "w" (weeks)
     - "mo" (months)
     - "q" (quarters)
     - "y" (years)
- `PercentDone` - the current status of a task, expressed as the percentage completed (integer from 0 to 100)
- `Cls` - A CSS class that will be applied to each rendered task DOM element
- `BaselineStartDate` - the baseline start date of the task in the ISO 8601 format. See {@link Ext.Date} for a formats definitions.
- `BaselineEndDate` - the baseline end date of the task in the ISO 8601 format, **see "Start and End dates" section for important notes**
- `BaselinePercentDone` - the baseline status of a task, expressed as the percentage completed (integer from 0 to 100)
- `CalendarId` - the id of the calendar, assigned to task. Allows you to set the time when task can be performed.
Should be only provided for specific tasks - all tasks by default are assigned to the project calendar, provided as the
{@link Gnt.data.TaskStore#calendar} option.
- `SchedulingMode` - the field, defining the scheduling mode for the task. Based on this field some fields of the task
will be "fixed" (should be provided) and some - computed. See {@link #getSchedulingMode} for details.
- `ManuallyScheduled` - When set to `true`, the `StartDate` of the task will not be changed by any of its incoming dependencies
or constraints. Also, a manually scheduled parent task is not affected by its child tasks and behaves like any other normal task.
- `ConstraintType` - A string containing the alias for a constraint class (w/o the `gntconstraint` prefix). Valid values are:

  - "finishnoearlierthan"
  - "finishnolaterthan"
  - "mustfinishon"
  - "muststarton"
  - "startnoearlierthan"
  - "startnolaterthan"

If you want to define your own custom constraint class, you need to alias it:

        Ext.define('MyConstraint', {
            extend      : 'Gnt.constraint.Base',

            alias       : 'gntconstraint.myconstraint',
            ...
        });

- `ConstraintDate` - A date, defining the constraint boundary date, if applicable.
- `Note` A freetext note about the task.
- `Rollup` Set this to 'true' if the task should rollup to its parent task.

If you want to add new fields or change the name/options for the existing fields,
you can do that by subclassing this class (see example below).

Subclassing the Task class
--------------------

The name of any field can be customized in the subclass. Please refer to {@link Sch.model.Customizable} for details.

    Ext.define('MyProject.model.Task', {
        extend              : 'Gnt.model.Task',

        nameField           : 'myName',
        percentDoneField    : 'percentComplete',

        isAlmostDone : function () {
            return this.get('percentComplete') > 80;
        },
        ...
    });

Creating a new Task instance programmatically
--------------------

To create a new task programmatically, simply call the Gnt.model.Task constructor and pass in any default field values.

    var newTask = new Gnt.model.Task({
        Name            : 'An awesome task',
        PercentDone     : 80, // So awesome it's almost done
        ...
    });

    // To take weekends and non-working time into account, the new task needs a reference to the task store (which has access to the global calendar)
    newTask.taskStore = taskStore;

    // Initialize new task to today
    newTask.setStartDate(new Date());

    // This is a leaf task
    newTask.set('leaf', true);

    // Now it will appear in the UI if the Gantt panel is rendered
    taskStore.getRootNode().appendChild(newTask);


Start and End dates
-------------------

For all tasks, the range between start date and end date is supposed to be not-inclusive on the right side: StartDate <= date < EndDate.
So, for example, the task which starts at 2011/07/18 and has 2 days duration, should have the end date: 2011/07/20, **not** 2011/07/19 23:59:59.

Also, both start and end dates of tasks in our components are *points* on time axis. For example, if user specifies that some task starts
01/01/2013 and has 1 day duration, that means the start point is 01/01/2013 00:00 and end point is 02/01/2013 00:00.
However, its a common requirement, to *display* such task as task with both start and end date as 01/01/2013. Because of that,
during rendering the end date is adjusted so for such task user will see a 01/01/2013 end date. In the model layer however, the precise point is stored.

Conversion to "days" duration unit
-----------------------------------

Some duration units cannot be converted to "days" consistently. For example a month may have 28, 29, 30 or 31 days. The year may have 365 or 366 days and so on.
So in such conversion operations, we will always assume that a task with a duration of 1 month will have a duration of 30 days.
This is {@link Gnt.data.Calendar#daysPerMonth a configuration option} of the calendar class.

Task API
-------

One important thing to consider is that, if you are using the availability/scheduling modes feature, then you need to use the task API call to update the fields like `StartDate / EndDate / Duration`.
Those calls will calculate the correct value of each the field, taking into account the information from calendar/assigned resources.

Server-side integration
-----------------------

Also, at least for now you should not use the "save" method of the model available in Ext 4:

    task.save() // WON'T WORK

This is because there are some quirks in using CRUD for Ext tree stores. These quirks are fixed in the TaskStore. To save the changes in task to server
use the "sync" method of the task store:

    taskStore.sync() // OK

*/
Ext.define('Gnt.model.Task', {
    extend              : 'Sch.model.Range',

    alias               : 'gntmodel.event',

    requires            : [
        'Sch.util.Date',
        'Ext.data.NodeInterface'
    ],

    uses                : [
        'Gnt.model.TaskSegment'
    ],

    mixins              : [
        'Gnt.model.mixin.ProjectableModel',
        'Gnt.model.task.More',
        'Gnt.model.task.Constraints',
        'Gnt.model.task.Splittable'
    ],

    segmentClassName    : 'Gnt.model.TaskSegment',

    idProperty          : "Id",

    customizableFields     : [
        { name: 'Duration', type: 'number', allowNull: true },
        { name: 'Effort', type: 'number', allowNull: true },
        { name: 'EffortUnit', type: 'string', defaultValue: 'h' },
        { name: 'CalendarId', type: 'string'},
        { name: 'Note', type: 'string'},

        {
            name: 'DurationUnit',
            type: 'string',
            defaultValue: "d",
            // make sure the default value is applied when user provides empty value for the field, like "" or null
            convert: function (value) {
                return value || "d";
            }
        },
        { name: 'PercentDone', type: 'number', defaultValue: 0 },

        { name: 'ConstraintType', type: 'string', defaultValue: '' },
        { name: 'ConstraintDate', type: 'date', dateFormat: 'c' },

        { name: 'ManuallyScheduled', type: 'boolean', defaultValue: false },
        { name: 'SchedulingMode', type: 'string', defaultValue: 'Normal' },

        { name: 'BaselineStartDate', type: 'date', dateFormat: 'c' },
        { name: 'BaselineEndDate', type: 'date', dateFormat: 'c' },
        { name: 'BaselinePercentDone', type: 'int', defaultValue: 0 },
        { name: 'Draggable', type: 'boolean', persist: false, defaultValue : true },   // true or false
        { name: 'Resizable', persist: false, defaultValue : '' },                      // true, false, 'start' or 'end'
        // { name: 'ReadOnly', persist : false, type : 'bool', defaultValue : false },


        { name: 'Rollup', type: 'boolean', defaultValue: false },
        {
            name    : 'Segments',
            persist : true,

            convert : function (value, record) {
                return record.processSegmentsValue(value, record);
            },

            serialize : function (value, record) {
                if (!value) return null;

                var segments    = [].concat(value),
                    data        = [];

                for (var i = 0, l = segments.length; i < l; i++) {
                    data.push(segments[i].serialize());
                }

                return data;
            }
        },
        // Two fields which specify the relations between "phantom" tasks when they are
        // being sent to the server to be created (e.g. when you create a new task containing a new child task).
        { name: 'PhantomId', type : 'string' },
        { name: 'PhantomParentId', type : 'string' },

        // Override NodeInterface defaults
        { name: 'index', type : 'int', persist : true }
    ],

    /**
     * @cfg {String} constraintTypeField The name of the field specifying the constraint type of this task.
     */
    constraintTypeField     : 'ConstraintType',

    /**
     * @cfg {String} constraintDateField The name of the field specifying the constraint date for this task.
     */
    constraintDateField     : 'ConstraintDate',

    /**
     * @cfg {String} draggableField The name of the field specifying if the event should be draggable in the timeline
     */
    draggableField          : 'Draggable',

    /**
     * @cfg {String} resizableField The name of the field specifying if/how the event should be resizable.
     */
    resizableField          : 'Resizable',

    /**
     * @cfg {String} nameField The name of the field that holds the task name. Defaults to "Name".
     */
    nameField               : 'Name',

    /**
     * @cfg {String} durationField The name of the field holding the task duration.
     */
    durationField           : 'Duration',

    /**
     * @cfg {String} durationUnitField The name of the field holding the task duration unit.
     */
    durationUnitField       : 'DurationUnit',

    /**
     * @cfg {String} effortField The name of the field holding the value of task effort.
     */
    effortField             : 'Effort',

    /**
     * @cfg {String} effortUnitField The name of the field holding the task effort unit.
     */
    effortUnitField         : 'EffortUnit',


    /**
     * @cfg {String} percentDoneField The name of the field specifying the level of completion.
     */
    percentDoneField        : 'PercentDone',

    /**
     * @cfg {String} manuallyScheduledField The name of the field defining if a task is manually scheduled or not.
     */
    manuallyScheduledField  : 'ManuallyScheduled',

    /**
     * @cfg {String} schedulingModeField The name of the field defining the scheduling mode of the task.
     */
    schedulingModeField     : 'SchedulingMode',


    /**
     * @cfg {String} rollupField The name of the field specifying if the task should rollup to its parent task.
     */
    rollupField             : 'Rollup',

    /**
     * @cfg {String} calendarIdField The name of the field defining the id of the calendar for this specific task. Task calendar has the highest priority.
     */
    calendarIdField         : 'CalendarId',

    /**
     * @cfg {String} baselineStartDateField The name of the field that holds the task baseline start date.
     */
    baselineStartDateField  : 'BaselineStartDate',

    /**
     * @cfg {String} baselineEndDateField The name of the field that holds the task baseline end date.
     */
    baselineEndDateField    : 'BaselineEndDate',

    /**
     * @cfg {String} baselinePercentDoneField The name of the field specifying the baseline level of completion.
     */
    baselinePercentDoneField    : 'BaselinePercentDone',

    /**
     * @cfg {String} noteField The name of the field specifying the task note.
     */
    noteField               : 'Note',

    segmentsField           : 'Segments',

    /*
     * @cfg {Boolean} readOnlyField The name of the field specifying if the task is readonly. When set on readonly the field
     * is not draggable, resizable and for all fields {@link #isEditable} returns `false`
     */
    readOnlyField           : 'ReadOnly',

    /**
     * @cfg {Gnt.data.Calendar} calendar
     * Optional. An explicitly provided {@link Gnt.data.Calendar calendar} instance. Usually will be retrieved by the task from the {@link Gnt.data.TaskStore task store}.
     */
    calendar                : null,

    /**
     * @cfg {Gnt.data.DependencyStore} dependencyStore
     * Optional. An explicitly provided {@link Gnt.data.DependencyStore} with dependencies information. Usually will be retrieved by the task from the {@link Gnt.data.TaskStore task store}.
     */
    dependencyStore         : null,

    /**
     * @cfg {Gnt.data.TaskStore} taskStore
     * Optional. An explicitly provided Gnt.data.TaskStore with tasks information. Usually will be set by the {@link Gnt.data.TaskStore task store}.
     */
    taskStore               : null,

    /**
     * @cfg {String} phantomIdField The name of the field specifying the phantom id when this task is being 'realized' by the server.
     */
    phantomIdField          : 'PhantomId',

    /**
     * @cfg {String} phantomParentIdField The name of the field specifying the parent task phantom id when this task is being 'realized' by the server.
     */
    phantomParentIdField    : 'PhantomParentId',

    normalized              : false,

    recognizedSchedulingModes   : [ 'Normal', 'FixedDuration', 'EffortDriven', 'DynamicAssignment' ],

    /**
     * Returns the constraint type of the task.
     * @method getConstraintType
     * @return {String} Constraint type. The type string might be one of the following values:
     *
     *  - `finishnoearlierthan`
     *  - `finishnolaterthan`
     *  - `mustfinishon`
     *  - `muststarton`
     *  - `startnoearlierthan`
     *  - `startnolaterthan`
     */

    /**
     * Returns the constraint date of the task.
     * @method getConstraintDate
     * @return {Date} Constraint date
     */

    /**
     * @cfg {Boolean} convertEmptyParentToLeaf
     *
     * This configuration option allows you to control whether an empty parent task should be converted into a leaf. Note, that
     * it's not a new field, but a regular configuration property of this class.
     *
     * Usually you will want to enable/disable it for the whole class:
     *

    Ext.define('MyApp.model.Task', {
        extend                      : 'Gnt.model.Task',

        convertEmptyParentToLeaf    : false
    })

     */
    convertEmptyParentToLeaf    : true,

    /**
     * @cfg {Boolean} autoCalculateEffortForParentTask
     *
     * This configuration option enables auto-calculation of the effort value for the parent task. When this option is enabled,
     * effort value of the parent tasks becomes not editable.
     *
     * Usually you will want to enable/disable it for the whole class:
     *

    Ext.define('MyApp.model.Task', {
        extend                              : 'Gnt.model.Task',

        autoCalculateEffortForParentTask    : false
    })

     *
     */
    autoCalculateEffortForParentTask        : true,

    /**
     * @cfg {Boolean} autoCalculatePercentDoneForParentTask
     *
     * This configuration option enables auto-calculation of the percent done value for the parent task. When this option is enabled,
     * percent done value of the parent tasks becomes not editable.
     *
     * Usually you will want to enable/disable it for the whole class:
     *

    Ext.define('MyApp.model.Task', {
        extend                                  : 'Gnt.model.Task',

        autoCalculatePercentDoneForParentTask   : false
    })

     *
     */
    autoCalculatePercentDoneForParentTask   : true,



    isHighlighted               : false,

    calendarWaitingListener     : null,

    childTasksDuration          : null,
    completedChildTasksDuration : null,

    totalCount                  : null,

    /**
     * @property {Gnt.model.Dependency[]} predecessors An array of dependencies, which are predecessors for this task.
     * To access this property safely you can use {@link #getIncomingDependencies} method.
     */
    predecessors                : null,

    /**
     * @property {Gnt.model.Dependency[]} successors An array of dependencies, which are successors for this task.
     * To access this property safely you can use {@link #getOutgoingDependencies} method.
     */
    successors                  : null,

    /**
     * @private
     * @deprecated Please use {@link #getAssignments} method.
     * @property {Gnt.model.Assignment[]} assignments An array of assignments for this task.
     * To access this property safely you can use {@link #getAssignments} method.
     */

    // special flag, that prevents parent from being converted into leafs when using "replaceChild" method
    // see `data_components/077_task_replace_child.t.js`
    removeChildIsCalledFromReplaceChild     : false,

    // see comments in `endEdit` override
    savedDirty                  : null,

    useOwnCalendarAsConverter   : false,

    constructor : function () {
        this._singleProp = {};

        this.initProjectable();

        this.callParent(arguments);

        if (this.phantom) {
            this.data[ this.phantomIdField ]    = this.getId();
        }

        this.predecessors   = [];
        this.successors     = [];
    },


    // should be called once after initial loading - will convert the "EndDate" field to "Duration"
    // the model should have the link to calendar
    normalize: function () {
        var durationUnit    = this.getDurationUnit(),
            startDate       = this.getStartDate(),
            endDate         = this.getEndDate(),
            data            = this.data,
            taskStore       = this.getTaskStore(true),
            schedulingMode  = this.getSchedulingMode();

        if (schedulingMode == 'Manual') {
            schedulingMode  = data[ this.schedulingModeField ] = 'Normal';
            data[ this.manuallyScheduledField ] = true;
        }

        var endDateField    = this.endDateField;

        // normalize segments if required
        if (taskStore && this.isSegmented()) {
            this.normalizeSegments();

            var last;
            // if task is still segmented after segments normalization
            // let's set the task end to the last segment finish
            if (last = this.getLastSegment()) {
                endDate = data[ endDateField ] = last.getEndDate();
            }
        }

        var duration        = this.getDuration();
        var effortField     = this.effortField;

        if (endDate && this.inclusiveEndDate) {
            // End date supplied, if end dates are inclusive we need to adjust them -
            // but only IF:
            //      * The end-date dateFormat does not contain any hour info, OR
            //      * The end-date dateFormat does contain any hour info AND it has no hours/minutes/seconds/ms

            var format = this.getField(endDateField).dateFormat;

            var doAdjust = (format && !Ext.Date.formatContainsHourInfo(format)) ||
                (endDate.getHours() === 0 && endDate.getMinutes() === 0 && endDate.getSeconds() === 0 && endDate.getMilliseconds() === 0);

            if (doAdjust) {
                if (Ext.isNumber(duration)) {
                    // Recalculate end date based on duration
                    endDate = data[ endDateField ] = this.calculateEndDate(startDate, duration, durationUnit);
                } else {
                    // Simply add 1 day to end date
                    endDate = data[ endDateField ] = Ext.Date.add(endDate, Ext.Date.DAY, 1);
                }
            }
        }

        // for all scheduling modes
        if (duration == null && startDate && endDate) {
            duration    = data[ this.durationField ] = this.calculateDuration(startDate, endDate, durationUnit);
        }

        if ((schedulingMode == 'Normal' || this.isManuallyScheduled()) && endDate == null && startDate && Ext.isNumber(duration)) {
            endDate     = data[ endDateField ] = this.calculateEndDate(startDate, duration, durationUnit);
        }

        // accessing the field value directly here, since we are interested in "raw" value
        // `getEffort` now returns 0 for empty effort values
        var effort          = this.get(effortField),
            effortUnit      = this.getEffortUnit();

        switch (schedulingMode) {

            case 'FixedDuration' :

                if (endDate == null && startDate && Ext.isNumber(duration)) {
                    endDate = data[ endDateField ] = this.calculateEndDate(startDate, duration, durationUnit);
                }

                if (effort == null && startDate && endDate) {
                    data[ effortField ] = this.calculateEffort(startDate, endDate, effortUnit);
                }

                break;

            case 'EffortDriven' :

                if (effort == null && startDate && endDate) {
                    data[ effortField ] = this.calculateEffort(startDate, endDate, effortUnit);
                }

                if (endDate == null && startDate && effort) {
                    data[ endDateField ]  = this.calculateEffortDrivenEndDate(startDate, effort, effortUnit);

                    // for "effortDriven" task, user can only provide StartDate and Effort - that's all we need
                    if (duration == null) {
                        data[ this.durationField ] = this.calculateDuration(startDate, data[ endDateField ], durationUnit);
                    }
                }

                break;

            default :

                if (endDate == null && startDate && Ext.isNumber(duration)) {
                    endDate = data[endDateField] = this.calculateEndDate(startDate, duration, durationUnit);
                }

            break;
        }

        var calendarId      = this.getCalendarId();

        if (calendarId) this.setCalendarId(calendarId, true);

        this.normalized = true;
    },


    getUnitConverter : function () {
        return this.useOwnCalendarAsConverter && this.getCalendar() || this.getProjectCalendar();
    },


    // recursive task
    normalizeParent : function () {
        var childNodes              = this.childNodes;

        var totalEffortInMS         = 0;
        var totalDurationInMS       = 0;
        var completedDurationInMS   = 0;

        var autoCalculatePercentDoneForParentTask   = this.autoCalculatePercentDoneForParentTask;
        var autoCalculateEffortForParentTask        = this.autoCalculateEffortForParentTask;

        for (var i = 0; i < childNodes.length; i++) {
            var child               = childNodes[ i ];
            var isLeaf              = child.isLeaf();

            if (!isLeaf) child.normalizeParent();

            if (autoCalculateEffortForParentTask) {
                totalEffortInMS         += child.getEffort('MILLI');
            }

            if (autoCalculatePercentDoneForParentTask) {
                var durationInMS        = isLeaf ? child.getDuration('MILLI') || 0 : child.childTasksDuration;

                totalDurationInMS       += durationInMS;
                completedDurationInMS   += isLeaf ? durationInMS * (child.getPercentDone() || 0) : child.completedChildTasksDuration;
            }
        }

        if (autoCalculatePercentDoneForParentTask) {
            this.childTasksDuration             = totalDurationInMS;
            this.completedChildTasksDuration    = completedDurationInMS;

            var newPercentDone          = totalDurationInMS ? completedDurationInMS / totalDurationInMS : 0;

            if (this.getPercentDone() != newPercentDone)    this.data[ this.percentDoneField ] = newPercentDone;
        }

        if (autoCalculateEffortForParentTask) {
            if (this.getEffort('MILLI') != totalEffortInMS) this.data[ this.effortField ] = this.getUnitConverter().convertMSDurationToUnit(totalEffortInMS, this.getEffortUnit());
        }
    },


    /**
     * Returns the {@link Gnt.data.Calendar calendar} instance, associated with this task. If task has no own calendar, it will be recursively looked up
     * starting from task's parent. If no one from parents have own calendar then project calendar will be returned.
     * See also `ownCalendarOnly` parameter and {@link #getOwnCalendar}, {@link #getProjectCalendar} methods.
     *
     * @param {Boolean} ownCalendarOnly When set to true, return only own calendar of this task and `null` if task has no calendar
     *
     * @return {Gnt.data.Calendar} calendar
     */
    getCalendar: function (ownCalendarOnly) {
        return ownCalendarOnly ? this.getOwnCalendar() : this.getOwnCalendar() || this.parentNode && this.parentNode.getCalendar() || this.getProjectCalendar();
    },


    /**
     * Returns the {@link Gnt.data.Calendar calendar} instance, associated with this task (if any). See also {@link #calendarIdField}.
     *
     * @return {Gnt.data.Calendar} calendar
     */
    getOwnCalendar : function () {
        var calendarId    = this.get(this.calendarIdField);

        return calendarId ? Gnt.data.Calendar.getCalendar(calendarId) : this.calendar;
    },

    // TODO: cache project
    /**
     * Returns the {@link Gnt.model.Project project} instance, associated with this task if this task belongs to a project
     *
     * @return {Gnt.model.Project} project
     */
    getProject : function () {
        var me      = this,
            project = null;

        this.bubble(function (task) {
            if (me !== task && task.isProject) {
                project = task;
                return false;
            }
        }, this);

        return project;
    },


    /**
     * Returns the {@link Gnt.data.Calendar calendar} instance, associated with the project of this task (with the TaskStore instance
     * this task belongs to).
     *
     * @return {Gnt.data.Calendar} calendar
     */
    getProjectCalendar: function () {
        var store       = this.getTaskStore(true);
        var calendar    = store && store.getCalendar() || this.parentNode && this.parentNode.getProjectCalendar() || this.isRoot() && this.calendar;

        if (!calendar) {
            Ext.Error.raise("Can't find a project calendar in `getProjectCalendar`");
        }

        return calendar;
    },


    /**
     * Sets the {@link Gnt.data.Calendar calendar}, associated with this task. Calendar must have a {@link Gnt.data.Calendar#calendarId calendarId} property
     * defined, which will be saved in the `CalendarId` field of this task.
     *
     * @param {Gnt.data.Calendar/String} calendar A calendar instance or string with calendar id
     * @param {Function} [callback] Callback function to call after task calendar has been changed and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setCalendar: function (calendar, callback) {
        var me = this,
            isCalendarInstance  = calendar instanceof Gnt.data.Calendar;

        if (isCalendarInstance && !calendar.calendarId) {
            throw new Error("Can't set calendar w/o `calendarId` property");
        }

        return me.setCalendarId(isCalendarInstance ? calendar.calendarId : calendar, false, callback);
    },


    setCalendarId : function(calendarId, isInitial, callback) {
        var me = this;

        if (!isInitial) {
            me.propagateChanges(
                function() {
                    return me.setCalendarIdWithoutPropagation(calendarId, isInitial);
                },
                callback
            );
        }
        else {
            me.setCalendarIdWithoutPropagation(calendarId, isInitial);
        }
    },


    setCalendarIdWithoutPropagation : function(calendarId, isInitial) {
        var propagate = false;

        if (calendarId instanceof Gnt.data.Calendar) calendarId = calendarId.calendarId;

        var prevCalendarId  = this.getCalendarId();

        if (prevCalendarId != calendarId || isInitial) {

            propagate = true;

            if (this.calendarWaitingListener) {
                this.calendarWaitingListener.destroy();
                this.calendarWaitingListener = null;
            }

            var listeners       = {
                calendarchange  : this.adjustToCalendarWithoutPropagation,
                scope           : this
            };

            var prevInstance        = this.calendar || Gnt.data.Calendar.getCalendar(prevCalendarId);

            // null-ifying the "explicit" property - it should not be used at all generally, only "calendarId"
            this.calendar   = null;

            prevInstance && prevInstance.un(listeners);

            this.set(this.calendarIdField, calendarId);

            var calendarInstance    = Gnt.data.Calendar.getCalendar(calendarId);

            if (calendarInstance) {
                calendarInstance.on(listeners);

                if (!isInitial) this.adjustToCalendarWithoutPropagation();
            } else {
                this.calendarWaitingListener = Ext.data.StoreManager.on('add', function (index, item, key) {
                    calendarInstance    = Gnt.data.Calendar.getCalendar(calendarId);

                    if (calendarInstance) {
                        this.calendarWaitingListener.destroy();
                        this.calendarWaitingListener = null;

                        calendarInstance.on(listeners);

                        this.adjustToCalendarWithoutPropagation();
                    }
                }, this, { destroyable : true });
            }
        }

        return propagate;
    },


    /**
     * Returns the dependency store, associated with this task.
     *
     * @return {Gnt.data.DependencyStore} The dependency store instance
     */
    getDependencyStore: function () {
        var taskStore = this.getTaskStore(true),
            dependencyStore = taskStore && taskStore.getDependencyStore();

        // TODO: do we need this check here?
        if (!dependencyStore) {
            Ext.Error.raise("Can't find a dependencyStore in `getDependencyStore`");
        }

        return dependencyStore;
    },


    /**
     * Returns the resource store, associated with this task.
     *
     * @return {Gnt.data.Resource} The resource store instance
     */
    getResourceStore : function () {
        var taskStore = this.getTaskStore(true);
        return taskStore && taskStore.getResourceStore();
    },


    /**
     * Returns the assignment store, associated with this task.
     *
     * @return {Gnt.data.AssignmentStore} The assignment store instance
     */
    getAssignmentStore : function () {
        var taskStore = this.getTaskStore(true);
        return taskStore && taskStore.getAssignmentStore();
    },


    /**
     * Returns the {@link Gnt.data.TaskStore task store} instance, associated with this task
     *
     * @return {Gnt.data.TaskStore} task store
     */
    getTaskStore: function (ignoreAbsense) {
        var me = this;

        if (!me.taskStore) {
            me.taskStore = me.getTreeStore() || me.parentNode && me.parentNode.getTaskStore(ignoreAbsense);
        }

        if (!me.taskStore && !ignoreAbsense) {
            Ext.Error.raise("Can't find a taskStore in `getTaskStore`");
        }

        return me.taskStore;
    },

    getEventStore : function() {
        return this.getTaskStore();
    },

    /**
     * Provides a reference to a {@link Gnt.data.TaskStore task store} instance, which the task will use to access the global
     * {@link Gnt.data.Calendar calendar}. Calling this does *not* add the model to the task store. Call this method if you want to use
     * methods like {@link #setStartDate} or {@link #setEndDate} that should take the store calendar into account.
     *
     * @param {Gnt.data.TaskStore} the task store
     */
    setTaskStore: function (taskStore) {
        this.taskStore = taskStore;
    },


    /**
     * Returns true if the task is manually scheduled. Manually scheduled task is not affected by incoming dependencies or
     * constraints. Also, the manually scheduled parent task is not affected by its child tasks positions and behaves like any other normal task.
     *
     * @return {Boolean} The value of the ManuallyScheduled field
     */
    isManuallyScheduled: function () {
        return this.get(this.schedulingModeField) === 'Manual' || this.get(this.manuallyScheduledField);
    },

    /*
     * Sets the task manually scheduled status.
     * If that field was set to "Manual", calling this method with false value will set the scheduling mode to "Normal".
     *
     * @param {Boolean} value The new value of the SchedulingMode field
     * @param {Function} [callback] Callback function to call after effort has been set and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setManuallyScheduled: function (value, callback) {

        var me  = this;

        me.propagateChanges(
            function() {
                return me.setManuallyScheduledWithoutPropagation(value);
            },
            function (canceled) {
                canceled ? me.rejectSegmentsProjection() : me.commitSegmentsProjection();
                callback && callback.apply(this, arguments);
            }
        );
    },

    setManuallyScheduledWithoutPropagation : function(value) {
        var me = this;

        me.beginEdit();
        this.set(me.manuallyScheduledField, value);
        me.endEdit();

        return true;
    },


    /**
     * @method getSchedulingMode
     *
     * Returns the scheduling mode of this task. May be one of the
     * following strings:
     *
     * - `Normal` is the default (and backward compatible) mode. It means the task will be scheduled based on information
     * about its start/end dates, task own calendar (project calendar if there's no one) and calendars of the assigned resources.
     *
     * - `FixedDuration` mode means, that task has fixed start and end dates, but its effort will be computed dynamically,
     * based on the assigned resources information. Typical example of such task is - meeting. Meetings typically have
     * pre-defined start and end dates and the more people are participating in the meeting, the more effort is spent on the task.
     * When duration of such task increases, its effort is increased too (and vice-versa). Note: fixed start and end dates
     * here doesn't mean that a user can't update them via GUI, the only field which won't be editable in GUI is the effort field,
     * it will be calculated according to duration and resources assigned to the task.
     *
     * - `EffortDriven` mode means, that task has fixed effort and computed duration. The more resources will be assigned
     * to this task, the less the duration will be. The typical example will be a "paint the walls" task -
     * several painters will complete it faster.
     *
     * - `DynamicAssignment` mode can be used when both duration and effort of the task are fixed. The computed value in this
     * case will be - the assignment units of the resources assigned. In this mode, the assignment level of all assigned resources
     * will be updated to evenly distribute the task's workload among them.
     *
     * @return {String} scheduling mode string
     */


    /**
     * Sets the scheduling mode for this task.
     *
     * @param {String} value Name of the scheduling mode. Should be one of the
     * following strings:
     *
     * - `Normal` is the default (and backward compatible) mode. It means the task will be scheduled based on information
     * about its start/end dates, task own calendar (project calendar if there's no one) and calendars of the assigned resources.
     *
     * - `FixedDuration` mode means, that task has fixed start and end dates, but its effort will be computed dynamically,
     * based on the assigned resources information. Typical example of such task is - meeting. Meetings typically have
     * pre-defined start and end dates and the more people are participating in the meeting, the more effort is spent on the task.
     * When duration of such task increases, its effort is increased too (and vice-versa). Note: fixed start and end dates
     * here doesn't mean that a user can't update them via GUI, the only field which won't be editable in GUI is the effort field,
     * it will be calculated according to duration and resources assigned to the task.
     *
     * - `EffortDriven` mode means, that task has fixed effort and computed duration. The more resources will be assigned
     * to this task, the less the duration will be. The typical example will be a "paint the walls" task -
     * several painters will complete it faster.
     *
     * - `DynamicAssignment` mode can be used when both duration and effort of the task are fixed. The computed value in this
     * case will be - the assignment units of the resources assigned. In this mode, the assignment level of all assigned resources
     * will be updated to evenly distribute the task's workload among them.
     *
     * - `Manual` **this mode is deprecated. Please set "ManuallyScheduled" field to `true` instead.**
     *
     * @param {Function} [callback] Callback function to call after task's scheduling mode has been changed and possible
     *  changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setSchedulingMode : function(value, callback) {
        var me = this;

        me.propagateChanges(
            function () {
                return me.setSchedulingModeWithoutPropagation(value);
            },
            callback
        );
    },


    setSchedulingModeWithoutPropagation : function(value) {
        var me = this,
            propagationSource;


        if (me.getSchedulingMode() != value) {

            me.set(this.schedulingModeField, value);

            switch (value) {
                case 'FixedDuration'    : me.updateEffortBasedOnDuration(); break;
                case 'EffortDriven'     : me.updateSpanBasedOnEffort(); break;
            }

            var predecessors = me.getPredecessors();

            if (predecessors.length > 0) {
                propagationSource = predecessors[0];
            }
            else {
                propagationSource = me;
            }
        }

        return propagationSource;
    },

    /**
     * @method getSegments
     * Gets segments of the task
     * @returns {Gnt.model.TaskSegment[]} Task segments
     */

    skipWorkingTime : function (date, duration, isForward, segments) {
        var result;
        var durationLeft;

        isForward   = isForward !== false;

        var cfg             = {
            isForward   : isForward,
            segments    : segments || false,
            // take resources into account if any
            resources   : this.hasResources(),
            fn          : function (from, to) {
                var diff            = to - from,
                    dstDiff         = new Date(from).getTimezoneOffset() - new Date(to).getTimezoneOffset();

                if (diff >= durationLeft) {
                    result          = new Date((isForward ? from : to) - 0 + (isForward ? 1 : -1) * durationLeft);

                    return false;
                } else {
                    durationLeft    -= diff + dstDiff * 60 * 1000;
                }
            }
        };

        if (Ext.isObject(date)) {
            Ext.apply(cfg, date);
        } else {
            if (isForward) {
                cfg.startDate   = date;
            } else {
                cfg.endDate     = date;
            }
        }

        durationLeft    = duration || cfg.duration;

        if (!durationLeft) return date;

        this.forEachAvailabilityInterval(cfg);

        return result;
    },

    /**
     * @ignore
     */
    skipNonWorkingTime : function (date, isForward, segments) {
        var skipped     = false;

        isForward       = isForward !== false;

        var cfg             = {
            isForward   : isForward,
            segments    : segments || false,
            // take resources into account if any
            resources   : this.hasResources(),
            fn          : function (from, to) {
                // if found interval has zero time length then nothing to skip so we just ignore it.
                // TODO: need to review a possibility to move this condition right into forEachAvailabilityInterval() body
                if (from !== to) {
                    date        = isForward ? from : to;
                    skipped     = true;

                    return false;
                }
            }
        };

        if (Ext.isObject(date)) {
            Ext.apply(cfg, date);
        } else {
            if (isForward) {
                cfg.startDate   = date;
            } else {
                cfg.endDate     = date;
            }
        }

        // resetting the date to the earliest availability interval
        this.forEachAvailabilityInterval(cfg);

        return skipped ? new Date(date) : this.getCalendar().skipNonWorkingTime(date, isForward);
    },


    /**
     * @method getStartDate
     *
     * Returns the start date of this task
     *
     * @return {Date} start date
     */


    /**
     * Depending from the arguments, set either `StartDate + EndDate` fields of this task, or `StartDate + Duration`
     * considering the weekends/holidays rules. The modifications are wrapped with `beginEdit/endEdit` calls.
     *
     * @param {Date} date Start date to set
     * @param {Boolean} [keepDuration=true] Pass `true` to keep the duration of the task ("move" the task), `false` to change the duration ("resize" the task).
     * @param {Boolean} [skipNonWorkingTime=taskStore.skipWeekendsDuringDragDrop] Pass `true` to automatically move the start date to the earliest available working time (if it falls on non-working time).
     * @param {Function} [callback] Callback function to call after start date has been set and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setStartDate : function (date, keepDuration, skipNonWorkingTime, callback) {
        var me  = this;

        me.propagateChanges(
            function () {
                return me.setStartDateWithoutPropagation(date, keepDuration, skipNonWorkingTime);
            },
            function (canceled, affectedTasks) {
                if (canceled) {
                    me.rejectSegmentsProjection();
                }
                else {
                    me.commitSegmentsProjection();
                }

                callback && callback.apply(this, arguments);
            }
        );
    },


    // TODO: refactor this
    setStartDateWithoutPropagation : function (date, keepDuration, skipNonWorkingTime) {
        var me = this,
            taskStore = me.getTaskStore(true),
            duration, endDate;

        // {{{ Parameters normalization
        keepDuration = keepDuration !== false;

        if (taskStore && skipNonWorkingTime !== true && skipNonWorkingTime !== false) {
            skipNonWorkingTime = taskStore.skipWeekendsDuringDragDrop;
        }
        else if (skipNonWorkingTime !== true && skipNonWorkingTime !== false) {
            skipNonWorkingTime = false;
        }
        // }}}

        me.beginEdit();

        if (!date) {
            me.set(me.durationField, null);
            me.set(me.startDateField, null);
            me.setSegments(null);

        } else {
            if (skipNonWorkingTime) {
                // for milestones we skip non-working backwards, for normal tasks - forward
                date = me.skipNonWorkingTime(date, !me.isMilestone());
            }

            var currentStartDate    = me.getStartDate();

            me.set(me.startDateField, date);

            // recalculate split dates
            if (taskStore && me.isSegmented()) {
                me.updateSegmentsDates();
            }

            if (keepDuration !== false) {
                me.set(me.endDateField, me.recalculateEndDate(date));
            } else {
                endDate  = this.getEndDate();

                if (endDate) {
                    // truncate segments that don't fit into master task range and shrink/expand last segment
                    this.constrainSegments();

                    me.set(me.durationField, me.calculateDuration(date, endDate, me.getDurationUnit()));
                }
            }
        }
        // eof "has `date`" branch

        duration            = me.getDuration();
        endDate             = me.getEndDate();

        if (date && endDate && (duration === undefined || duration === null)) {
            me.set(me.durationField, me.calculateDuration(date, endDate, me.getDurationUnit()));
        }

        me.onPotentialEffortChange();

        me.endEdit();

        return true;
    },


    /**
     * @method getEndDate
     *
     * Returns the end date of this task
     *
     * @return {Date} end date
     */


    /**
     * Depending from the arguments, set either `StartDate + EndDate` fields of this task, or `EndDate + Duration`
     * considering the weekends/holidays rules. The modifications are wrapped with `beginEdit/endEdit` calls.
     *
     * @param {Date} date End date to set
     * @param {Boolean} [keepDuration=true] Pass `true` to keep the duration of the task ("move" the task), `false` to change the duration ("resize" the task).
     * @param {Boolean} [skipNonWorkingTime=taskStore.skipWeekendsDuringDragDrop] Pass `true` to automatically move the end date to the previous working day (if it falls on weekend/holiday).
     * @param {Function} [callback] Callback function to call after end date has been set and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setEndDate : function (date, keepDuration, skipNonWorkingTime, callback) {
        var me  = this;

        me.propagateChanges(
            function() {
                return me.setEndDateWithoutPropagation(date, keepDuration, skipNonWorkingTime);
            },
            function (canceled, affectedTasks) {
                if (canceled) {
                    me.rejectSegmentsProjection();
                }
                else {
                    me.commitSegmentsProjection();
                }

                callback && callback.apply(this, arguments);
            }
        );
    },

    // TODO: refactor this
    setEndDateWithoutPropagation : function (date, keepDuration, skipNonWorkingTime) {
        var me = this,
            taskStore = me.getTaskStore(true),
            duration, startDate;

        // {{{ Parameters normalization
        keepDuration = keepDuration !== false;

        if (skipNonWorkingTime !== true && skipNonWorkingTime !== false && taskStore) {
            skipNonWorkingTime = taskStore.skipWeekendsDuringDragDrop;
        }
        else if (skipNonWorkingTime !== true && skipNonWorkingTime !== false) {
            skipNonWorkingTime = false;
        }
        // }}}

        me.beginEdit();

        var currentEndDate    = me.getEndDate();

        if (!date) {
            me.set(me.durationField, null);
            me.set(me.endDateField, null);
            me.setSegments(null);
        } else {
            startDate       = me.getStartDate();
            // task end date cannot be less than its start date
            if (date < startDate && keepDuration === false) {
                date        = startDate;
            }

            if (skipNonWorkingTime) {
                date        = me.skipNonWorkingTime(date, false);
            }

            if (keepDuration !== false) {
                duration    = me.getDuration();

                if (Ext.isNumber(duration)) {

                    // recalculate segments dates (we need this to calculate the task start date properly)
                    if (taskStore && me.isSegmented() && (date - currentEndDate)) {
                        me.updateSegmentsDates({
                            isForward   : false,
                            endDate     : date
                        });
                    }

                    me.set(me.startDateField, me.calculateStartDate(date, duration, me.getDurationUnit()));
                    me.set(me.endDateField, date);
                } else {
                    me.set(me.endDateField, date);
                }
            } else {
                var wasMilestone    = me.isMilestone();

                // if end date after adjusting to calendar is less than start date
                // then it's going to be a milestone and we set start date equal to adjusted end date
                if (date < startDate) {
                    me.set(me.startDateField, date);
                }

                me.set(me.endDateField, date);

                me.constrainSegments();

                if (startDate) {
                    me.set(me.durationField, me.calculateDuration(startDate, date, me.getDurationUnit()));

                    // if we converted to regular task from milestone
                    // let's make sure that task start is adjusted to the calendar
                    if (wasMilestone && !me.isMilestone()) {
                        var properStartDate = me.skipNonWorkingTime(startDate, true);
                        if (properStartDate - startDate !== 0) {
                            // set start date adjusted to the calendar
                            me.set(me.startDateField, properStartDate);
                        }
                    }
                }
            }
        }

        duration            = me.getDuration();
        startDate           = me.getStartDate();

        if (date && startDate && (duration === undefined || duration === null)) {
            me.set(me.durationField, me.calculateDuration(startDate, date, me.getDurationUnit()));
        }

        me.onPotentialEffortChange();

        me.endEdit();

        return true;
    },

    /**
     * Sets the `StartDate / EndDate / Duration` fields of this task, considering the availability/holidays information.
     * The modifications are wrapped with `beginEdit/endEdit` calls.
     *
     * @param {Date} startDate Start date to set
     * @param {Date} endDate End date to set
     * @param {Boolean} [skipNonWorkingTime=taskStore.skipWeekendsDuringDragDrop] Pass `true` to automatically move the start/end dates to the next/previous working day (if they falls on weekend/holiday).
     * @param {Function} [callback] Callback function to call after start/end date has been set and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setStartEndDate : function (startDate, endDate, skipNonWorkingTime, callback) {
        var me  = this;

        // This is required to have Data components tests green
        skipNonWorkingTime = skipNonWorkingTime || false;

        me.propagateChanges(
            function() {
                return me.setStartEndDateWithoutPropagation(startDate, endDate, skipNonWorkingTime);
            },
            function (canceled, affectedTasks) {
                if (canceled) {
                    me.rejectSegmentsProjection();
                }
                else {
                    me.commitSegmentsProjection();
                }

                callback && callback.apply(this, arguments);
            }
        );
    },

    setStartEndDateWithoutPropagation : function(startDate, endDate, skipNonWorkingTime) {
        var me = this,
            taskStore = me.getTaskStore(true);

        // {{{ Parameters normalization
        if (skipNonWorkingTime !== true && skipNonWorkingTime !== false && taskStore) {
            skipNonWorkingTime = taskStore.skipWeekendsDuringDragDrop;
        }
        else if (skipNonWorkingTime !== true && skipNonWorkingTime !== false) {
            skipNonWorkingTime = false;
        }
        // }}}

        if (skipNonWorkingTime) {
            startDate = startDate && me.skipNonWorkingTime(startDate, true);
            endDate   = endDate && me.skipNonWorkingTime(endDate, false);

            if (endDate < startDate) {
                startDate = endDate;
            }
        }

        var currentStartDate    = me.getStartDate(),
            currentEndDate      = me.getEndDate();

        me.beginEdit();

        me.set(me.startDateField, startDate);
        me.set(me.endDateField,   endDate);

        // recalculate split dates
        if (me.getTaskStore(true) && me.isSegmented() && ((startDate - currentStartDate) || (endDate - currentEndDate))) {
            me.updateSegmentsDates();
        }

        if (endDate - currentEndDate) {
            me.constrainSegments();
        }

        me.set(me.durationField, me.calculateDuration(startDate, endDate, me.getDurationUnit()));

        me.onPotentialEffortChange();

        me.endEdit();

        return true;
    },


    /**
     * Shift the dates for the date range by the passed amount and unit
     * @param {String} unit The unit to shift by (e.g. range.shift(Sch.util.Date.DAY, 2); ) to bump the range 2 days forward
     * @param {Number} amount The amount to shift
     * @param {Function} [callback] Callback function to call after task has been shifted and changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    shift : function(unit, amount, callback) {
        var me = this;

        me.setStartEndDate(
            Sch.util.Date.add(me.getStartDate(), unit, amount),
            Sch.util.Date.add(me.getEndDate(), unit, amount),
            undefined,
            callback
        );
    },


    /**
     * Returns the duration of the task expressed in the unit passed as the only parameter (or as specified by the DurationUnit for the task).
     *
     * @param {String} unit Unit to return the duration in. Defaults to the `DurationUnit` field of this task
     *
     * @return {Number} duration
     */
    getDuration: function (unit) {
        if (!unit) return this.get(this.durationField);

        var converter       = this.getUnitConverter(),
            durationInMS    = converter.convertDurationToMs(this.get(this.durationField), this.get(this.durationUnitField));

        return converter.convertMSDurationToUnit(durationInMS, unit);
    },


    /**
     * Returns the effort of the task expressed in the unit passed as the only parameter (or as specified by the EffortUnit for the task).
     *
     * @param {String} unit Unit to return the effort in. Defaults to the `EffortUnit` field of this task
     *
     * @return {Number} effort
     */
    getEffort: function (unit) {
        var fieldValue      = this.get(this.effortField) || 0;

        if (!unit) return fieldValue;

        var converter       = this.getUnitConverter(),
            durationInMS    = converter.convertDurationToMs(fieldValue, this.getEffortUnit());

        return converter.convertMSDurationToUnit(durationInMS, unit);
    },


    /**
     * Sets the `Effort + EffortUnit` fields of this task. In case the task has the `EffortDriven`
     * scheduling mode will also update the duration of the task accordingly.
     * In case of `DynamicAssignment` mode - will update the assignments.
     *
     * The modifications are wrapped with `beginEdit/endEdit` calls.
     *
     * @param {Number} number The number of duration units
     * @param {String} [unit=task.getEffortUnit()] The unit of the effort.
     * @param {Function} [callback] Callback function to call after effort has been set and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setEffort: function (number, unit, callback) {
        var me  = this;

        me.propagateChanges(
            function() {
                return me.setEffortWithoutPropagation(number, unit);
            },
            function (canceled) {
                if (canceled) me.rejectSegmentsProjection(); else me.commitSegmentsProjection();

                callback && callback.apply(this, arguments);
            }
        );
    },


    setEffortWithoutPropagation : function(number, unit) {
        var me = this;

        // {{{ Parameters normalization
        unit = unit || me.getEffortUnit();
        // }}}

        me.beginEdit();

        me.set(me.effortField, number);
        me.set(me.effortUnitField, unit);

        switch (me.getSchedulingMode()) {
            case 'EffortDriven'         : me.updateSpanBasedOnEffort(); break;
            case 'DynamicAssignment'    : me.updateAssignments();       break;
        }

        me.endEdit();

        return true;
    },


    /**
     * Returns the "raw" calendar duration (difference between end and start date) of this task in the given units.
     *
     * Please refer to the "Task durations" section for additional important details about duration units.
     *
     * @param {String} unit Unit to return return the duration in. Defaults to the `DurationUnit` field of this task
     *
     * @return {Number} duration
     */
    getCalendarDuration: function (unit) {
        return this.getUnitConverter().convertMSDurationToUnit(this.getEndDate() - this.getStartDate(), unit || this.get(this.durationUnitField));
    },


    /**
     * Sets the `Duration + DurationUnit + EndDate` fields of this task, considering the weekends/holidays rules.
     * The modifications are wrapped with `beginEdit/endEdit` calls.
     *
     * May also update additional fields, depending from the scheduling mode.
     *
     * @param {Number} number The number of duration units
     * @param {String} [unit=task.getDurationUnit()] The unit of the duration.
     * @param {Function} [callback] Callback function to call after duration has been set and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    setDuration : function(number, unit, callback) {
        var me  = this;

        me.propagateChanges(
            function() {
                return me.setDurationWithoutPropagation(number, unit);
            },
            function (canceled) {
                if (canceled) me.rejectSegmentsProjection(); else me.commitSegmentsProjection();

                callback && callback.apply(this, arguments);
            }
        );
    },


    setDurationWithoutPropagation: function(number, unit) {
        var me = this;

        // {{{ Parameters normalization
        unit = unit || me.getDurationUnit();
        // }}}

        var wasMilestone = me.isMilestone();

        me.beginEdit();

        // Provide project start date (if any) or now as start date if it isn't already set
        if (Ext.isNumber(number) && !me.getStartDate()) {
            var taskStore       = me.getTaskStore(true);
            var newStartDate    = (taskStore && taskStore.getProjectStartDate()) || Ext.Date.clearTime(new Date());
            me.setStartDateWithoutPropagation(newStartDate);
        }

        var newEndDate = null;

        this.constrainSegments({ duration : number, unit : unit });

        if (Ext.isNumber(number)) {
            newEndDate = me.calculateEndDate(me.getStartDate(), number, unit);
        }

        me.set(me.endDateField, newEndDate);
        me.set(me.durationField, number);
        me.set(me.durationUnitField, unit);

        // if task is switched to/from milestone then we also need
        // to check if start/end dates are adjusted to the calendar
        if (me.isMilestone() != wasMilestone) {
            // if it's not a milestone now
            if (wasMilestone) {
                // check if start date is adjusted to calendar
                var startDate       = me.getStartDate();
                if (startDate) {
                    var properStartDate = me.skipNonWorkingTime(startDate, true);
                    if (properStartDate - startDate !== 0) {
                        // set start date adjusted to the calendar
                        me.set(me.startDateField, properStartDate);
                    }
                }
            // if it's a milestone
            } else if (newEndDate) {
                // skip non-working time backward
                var properEndDate   = me.skipNonWorkingTime(newEndDate, false);
                if (properEndDate - newEndDate !== 0) {
                    // set start/end dates adjusted to the calendar
                    me.set(me.startDateField, properEndDate);
                    me.set(me.endDateField, properEndDate);
                }
            }
        }

        me.onPotentialEffortChange();

        me.endEdit();

        return true;
    },


    calculateStartDate : function (endDate, duration, unit, options) {
        unit = unit || this.getDurationUnit();

        if (!duration) return endDate;

        options         = Ext.apply({
            endDate     : endDate,
            isForward   : false,
            // if there are any assignments, need to take them into account when calculating the duration
            resources   : this.hasResources()
        }, options);

        var schedulingMode  = this.getSchedulingMode();

        // if there are any assignments, need to take them into account when calculating the duration
        // but only for "normal" scheduling mode
        // for "EffortDriven" one should use "calculateEffortDrivenEndDate"
        // for "FixedDuration/DynamicAssignment" assignments should not affect the end date of the task
        if (this.getTaskStore(true) && schedulingMode != 'FixedDuration' && schedulingMode != 'DynamicAssignment' && schedulingMode != 'EffortDriven') {

            var leftDuration    = this.getUnitConverter().convertDurationToMs(duration, unit);
            var startDate;

            this.forEachAvailabilityInterval(options, function (from, till) {
                var intervalDuration    = till - from;

                if (intervalDuration >= leftDuration) {

                    startDate           = new Date(till - leftDuration);

                    return false;

                } else {
                    var dstDiff     = new Date(till).getTimezoneOffset() - new Date(from).getTimezoneOffset();
                    leftDuration    -= intervalDuration + dstDiff * 60 * 1000;
                }
            });


            return startDate;

        } else {
            // otherwise just consult the calendar
            return this.getCalendar().calculateStartDate(endDate, duration, unit);
        }
    },


     //Recalculates a task end date based on a new startdate (use task start date if omitted)
    recalculateEndDate : function (startDate) {
        var me = this,
            result,
            duration;

        startDate = startDate || me.getStartDate();

        if (startDate && me.getSchedulingMode() == 'EffortDriven') {
            result = me.calculateEffortDrivenEndDate(startDate, me.getEffort());
        }
        else {
            duration = me.getDuration();

            if (startDate && Ext.isNumber(duration)) {
                result = me.calculateEndDate(startDate, duration, me.getDurationUnit());
            }
            else {
                result = me.getEndDate();
            }
        }

        return result;
    },


    calculateEndDate : function (startDate, duration, unit, options) {
        unit = unit || this.getDurationUnit();

        if (!duration) return startDate;

        options = Ext.apply({ startDate : startDate }, options);

        var schedulingMode  = this.getSchedulingMode(),
            endDate;

        // if there are any assignments, need to take them into account when calculating the duration
        // but only for "normal" scheduling mode
        // for "EffortDriven" one should use "calculateEffortDrivenEndDate"
        // for "FixedDuration/DynamicAssignment" assignments should not affect the end date of the task
        if (
            this.getTaskStore(true) &&
            schedulingMode != 'FixedDuration' &&
            schedulingMode != 'DynamicAssignment' &&
            schedulingMode != 'EffortDriven'
        ) {
            var leftDuration    = this.getUnitConverter().convertDurationToMs(duration, unit);

            options.resources   = this.hasResources();

            this.forEachAvailabilityInterval(options, function (from, till) {
                var intervalDuration    = till - from;

                if (intervalDuration >= leftDuration) {

                    endDate             = new Date(from + leftDuration);

                    return false;

                } else {
                    var dstDiff     = new Date(from).getTimezoneOffset() - new Date(till).getTimezoneOffset();
                    leftDuration    -= intervalDuration + dstDiff * 60 * 1000;
                }
            });

        } else {
            // otherwise just consult the calendar
            return this.getCalendar().calculateEndDate(startDate, duration, unit);
        }

        return endDate;
    },


    calculateDuration : function (startDate, endDate, unit, options) {
        unit = unit || this.getDurationUnit();

        if (!startDate || !endDate) {
            return 0;
        }

        // if there are any assignments, need to take them into account when calculating the duration
        if (this.getTaskStore(true)) {
            var durationInMS    = 0;

            this.forEachAvailabilityInterval(
                Ext.apply({
                    startDate   : startDate,
                    endDate     : endDate,
                    resources   : this.hasResources()
                }, options),
                function (from, till) {
                    var dstDiff     = new Date(from).getTimezoneOffset() - new Date(till).getTimezoneOffset();
                    durationInMS    += till - from + dstDiff * 60 * 1000;
                }
            );

            return this.getUnitConverter().convertMSDurationToUnit(durationInMS, unit);
        } else {
            // otherwise just consult the calendar
            return this.getCalendar().calculateDuration(startDate, endDate, unit);
        }
    },


    isCalendarApplicable : function (calendarId) {
        var startDate   = this.getStartDate();

        if (!startDate) return true;

        var taskStore   = this.getTaskStore(true);
        if (!taskStore) return true;

        var endDate     = Sch.util.Date.add(startDate, 'd', (taskStore && taskStore.availabilitySearchLimit) || 5*365);

        var assignments         = this.getAssignments();
        var resourcesCalendars  = [];

        Ext.each(assignments, function (assignment) {
            var resource    = assignment.getResource();

            if (resource) {
                resourcesCalendars.push(resource.getCalendar());
            }
        });

        if (!resourcesCalendars.length) return true;

        var calendar = Gnt.data.Calendar.getCalendar(calendarId);

        for (var i = 0, l = resourcesCalendars.length; i < l; i++) {
            if (calendar.isAvailabilityIntersected(resourcesCalendars[i], startDate, endDate)) return true;
        }

        return false;
    },


    forEachAvailabilityInterval : function (options, func, scope) {
        func                        = func || options.fn;
        scope                       = scope || options.scope || this;

        var me                      = this,
            startDate               = options.startDate,
            endDate                 = options.endDate,
            includeEmptyIntervals   = options.includeEmptyIntervals,
            needResources           = options.resources,
            useSegments             = options.segments || (options.segments !== false),
            // isForward enabled by default
            isForward               = options.isForward !== false,
            DATE                    = Sch.util.Date,
            taskStart               = this.getStartDate(),
            taskEnd                 = this.getEndDate(),
            cursorDate, segments;

        // need taskStore to get default `availabilitySearchLimit` value
        var store                   = this.getTaskStore(true);

        if (isForward) {
            if (!startDate) throw new Error("forEachAvailabilityInterval: `startDate` is required when `isForward` is true");

            // if no boundary we still have to specify some limit
            if (!endDate) endDate = DATE.add(startDate, 'd', options.availabilitySearchLimit || (store && store.availabilitySearchLimit) || 5*365);

            cursorDate  = new Date(startDate);
        } else {
            if (!endDate) throw new Error("forEachAvailabilityInterval: `endDate` is required when `isForward` is false");

            // if no boundary we still have to specify some limit
            if (!startDate) startDate = DATE.add(endDate, 'd', - (options.availabilitySearchLimit || (store && store.availabilitySearchLimit) || 5*365));

            cursorDate  = new Date(endDate);
        }

        var taskCalendar                = this.getOwnCalendar(),
            projectCalendar             = this.getProjectCalendar(),

            resourceByCalendar          = {},
            calendars                   = [];

        // if we take resources into account
        if (needResources) {

            var resourceFound   = false;
            // we can provide list of assignments as well
            var assignments     = options.assignments;

            // helper function to prepare resources data
            var handleResource  = function (resource) {
                var resourceId  = resource.getId(),
                    assignment  = assignments && Ext.Array.findBy(assignments, function (a) {
                        return a.getResourceId() == resourceId;
                    }) || me.getAssignmentFor(resource),
                    calendar    = resource.getCalendar(),
                    id          = calendar.getCalendarId();

                if (!resourceByCalendar[id]) {
                    resourceByCalendar[id]  = [];

                    calendars.push(calendar);
                }

                resourceByCalendar[id].push({
                    assignment      : assignment,
                    resourceId      : resourceId,
                    units           : assignment && assignment.getUnits()
                });

                resourceFound   = true;
            };

            // user has provided the resources to use for iteration
            if (needResources !== true) {

                Ext.each(needResources, handleResource);

                // otherwise retrieve all assigned resources
            } else {
                Ext.each(this.getAssignments(), function (assignment) {
                    var resource    = assignment.getResource();

                    if (resource) handleResource(resource);
                });
            }

            // if there are no resources - then iterator should not be called by contract, just return
            if (!resourceFound) return;

            // if we don't use resource calendars for calculation then we gonna use the task/project calendar
        } else {
            taskCalendar    = taskCalendar || projectCalendar;
        }

        if (useSegments) {
            if (!Ext.isArray(useSegments)) {
                segments  = this.getSegments();
            } else {
                segments  = useSegments;
            }
        }

        var i, k, l, interval, intervalStartDate, intervalEndDate;

        while (isForward ? cursorDate < endDate : cursorDate > startDate) {
            var pointsByTime        = {};
            var pointTimes          = [];
            var cursorDT            = cursorDate - (isForward ? 0 : 1);

            // if a task has a custom calendar
            if (taskCalendar) {
                var taskIntervals       = taskCalendar.getAvailabilityIntervalsFor(cursorDT);

                // the order of intervals processing doesn't matter here, since we are just collecting the "points of interest"
                for (k = 0, l = taskIntervals.length; k < l; k++) {
                    interval            = taskIntervals[ k ];
                    intervalStartDate   = interval.startDate - 0;
                    intervalEndDate     = interval.endDate - 0;

                    if (!pointsByTime[ intervalStartDate ]) {
                        pointsByTime[ intervalStartDate ] = [];

                        pointTimes.push(intervalStartDate);
                    }
                    pointsByTime[ intervalStartDate ].push({
                        type            : '00-taskAvailailabilityStart',
                        typeBackward    : '01-taskAvailailabilityStart'
                    });

                    pointTimes.push(intervalEndDate);

                    pointsByTime[ intervalEndDate ] = pointsByTime[ intervalEndDate ] || [];
                    pointsByTime[ intervalEndDate ].push({
                        type            : '01-taskAvailailabilityEnd',
                        typeBackward    : '00-taskAvailailabilityEnd'
                    });
                }
            }

            // if we take segmentation into account
            if (segments) {

                var from, till;

                if (isForward) {
                    from    = cursorDate;
                    till    = DATE.getStartOfNextDay(cursorDate);
                } else {
                    from    = DATE.getEndOfPreviousDay(cursorDate);
                    till    = cursorDate;
                }

                var intervals   = this.getSegmentIntervalsForRange(from, till, segments);

                if (intervals) {
                    for (i = 0, l = intervals.length; i < l; i++) {
                        intervalStartDate   = intervals[i][0];
                        intervalEndDate     = intervals[i][1];

                        if (!pointsByTime[ intervalStartDate ]) {
                            pointsByTime[ intervalStartDate ] = [];

                            pointTimes.push(intervalStartDate);
                        }

                        pointsByTime[ intervalStartDate ].push({
                            type            : '04-taskSegmentStart',
                            typeBackward    : '05-taskSegmentStart'
                        });

                        pointTimes.push(intervalEndDate);

                        pointsByTime[ intervalEndDate ] = pointsByTime[ intervalEndDate ] || [];

                        pointsByTime[ intervalEndDate ].push({
                            type            : '05-taskSegmentEnd',
                            typeBackward    : '04-taskSegmentEnd'
                        });
                    }
                }
            }

            var resourceList;

            // loop over resources having custom calendars
            for (i = 0, l = calendars.length; i < l; i++) {
                var cal                 = calendars[ i ],
                    resourceIntervals   = cal.getAvailabilityIntervalsFor(cursorDT);

                resourceList        = resourceByCalendar[ cal.getCalendarId() ];

                // using "for" instead of "each" should be blazing fast! :)
                // the order of intervals processing doesn't matter here, since we are just collecting the "points of interest"
                for (k = 0; k < resourceIntervals.length; k++) {
                    interval            = resourceIntervals[ k ];
                    intervalStartDate   = interval.startDate - 0;
                    intervalEndDate     = interval.endDate - 0;

                    if (!pointsByTime[ intervalStartDate ]) {
                        pointsByTime[ intervalStartDate ] = [];

                        pointTimes.push(intervalStartDate);
                    }
                    pointsByTime[ intervalStartDate ].push({
                        type            : '02-resourceAvailailabilityStart',
                        typeBackward    : '03-resourceAvailailabilityStart',
                        resources       : resourceList
                    });

                    if (!pointsByTime[ intervalEndDate ]) {
                        pointsByTime[ intervalEndDate ] = [];

                        pointTimes.push(intervalEndDate);
                    }
                    pointsByTime[ intervalEndDate ].push({
                        type            : '03-resourceAvailailabilityEnd',
                        typeBackward    : '02-resourceAvailailabilityEnd',
                        resources       : resourceList
                    });
                }
            }

            pointTimes.sort();

            var inTask              = !taskStart || !taskEnd || (cursorDate >= taskStart && cursorDate <= taskEnd),
                inTaskCalendar      = false,
                inSegment           = false,
                currentResources    = {},
                resourceCounter     = 0,
                points, point, m, n;

            if (isForward) {
                for (i = 0, l = pointTimes.length; i < l; i++) {
                    points          = pointsByTime[ pointTimes[ i ] ];

                    points.sort(function (a, b) { return a.type < b.type ? 1 : -1; });

                    for (k = 0; k < points.length; k++) {
                        point           = points[ k ];

                        switch (point.type) {
                            case '00-taskAvailailabilityStart' : inTaskCalendar  = true; break;

                            case '01-taskAvailailabilityEnd' : inTaskCalendar  = false; break;

                            case '02-resourceAvailailabilityStart' :
                                resourceList    = point.resources;
                                for (m = 0, n = resourceList.length; m < n; m++) {
                                    currentResources[resourceList[m].resourceId]    = resourceList[m];
                                    resourceCounter++;
                                }
                                break;

                            case '03-resourceAvailailabilityEnd' :
                                resourceList    = point.resources;
                                for (m = 0, n = resourceList.length; m < n; m++) {
                                    delete currentResources[resourceList[m].resourceId];
                                    resourceCounter--;
                                }
                                break;

                            case '04-taskSegmentStart' : inSegment = true; break;

                            case '05-taskSegmentEnd' : inSegment = false; break;
                        }
                    }

                    if ((inTaskCalendar || !taskCalendar) && (!segments || !inTask || inSegment) && (!needResources || resourceCounter || includeEmptyIntervals)) {
                        intervalStartDate       = pointTimes[ i ];
                        intervalEndDate         = pointTimes[ i + 1 ];

                        // availability interval is out of [ startDate, endDate )
                        if (intervalStartDate >= endDate || intervalEndDate <= startDate) continue;

                        if (intervalStartDate < startDate) intervalStartDate = startDate - 0;
                        if (intervalEndDate > endDate) intervalEndDate = endDate - 0;

                        if (func.call(scope, intervalStartDate, intervalEndDate, currentResources) === false) return false;
                    }
                }
            } else {
                for (i = pointTimes.length - 1; i >= 0; i--) {
                    points          = pointsByTime[ pointTimes[ i ] ];

                    points.sort(function (a, b) { return a.typeBackward < b.typeBackward ? 1 : -1; });

                    for (k = 0; k < points.length; k++) {
                        point           = points[ k ];

                        switch (point.typeBackward) {
                            case '00-taskAvailailabilityEnd' : inTaskCalendar  = true; break;

                            case '01-taskAvailailabilityStart' : inTaskCalendar  = false; break;

                            case '02-resourceAvailailabilityEnd' :
                                resourceList    = point.resources;
                                for (m = 0, n = resourceList.length; m < n; m++) {
                                    currentResources[resourceList[m].resourceId]    = resourceList[m];
                                    resourceCounter++;
                                }
                                break;

                            case '03-resourceAvailailabilityStart' :
                                resourceList    = point.resources;
                                for (m = 0, n = resourceList.length; m < n; m++) {
                                    delete currentResources[resourceList[m].resourceId];
                                    resourceCounter--;
                                }
                                break;

                            case '04-taskSegmentEnd' : inSegment = true; break;

                            case '05-taskSegmentStart' : inSegment = false; break;
                        }
                    }

                    if ((inTaskCalendar || !taskCalendar) && (!segments || !inTask || inSegment) && (!needResources || resourceCounter || includeEmptyIntervals)) {
                        intervalStartDate       = pointTimes[ i - 1 ];
                        intervalEndDate         = pointTimes[ i ];

                        // availability interval is out of [ startDate, endDate )
                        if (intervalStartDate > endDate || intervalEndDate <= startDate) continue;

                        if (intervalStartDate < startDate) intervalStartDate = startDate - 0;
                        if (intervalEndDate > endDate) intervalEndDate = endDate - 0;

                        if (func.call(scope, intervalStartDate, intervalEndDate, currentResources) === false) return false;
                    }
                }
            }
            // eof backward branch

            // does not perform cloning internally!
            cursorDate       = isForward ? DATE.getStartOfNextDay(cursorDate) : DATE.getEndOfPreviousDay(cursorDate);
        }
        // eof while
    },

    // iterates over the common availability intervals for tasks and resources in between `startDate/endDate`
    // note, that function will receive start/end dates as number, not dates (for optimization purposes)
    // this method is not "normalized" intentionally because of performance considerations
    forEachAvailabilityIntervalWithResources : function (options, func, scope) {
        if (!options.resources) options.resources = true;

        this.forEachAvailabilityInterval.apply(this, arguments);
    },


    calculateEffortDrivenEndDate : function (startDate, effort, unit) {
        if (!effort) return startDate;

        var effortInMS      = this.getUnitConverter().convertDurationToMs(effort, unit || this.getEffortUnit());

        var endDate         = new Date(startDate);

        this.forEachAvailabilityIntervalWithResources({ startDate : startDate }, function (intervalStartDate, intervalEndDate, currentResources) {
            var totalUnits          = 0;

            for (var i in currentResources) totalUnits += currentResources[ i ].units;

            var intervalDuration    = intervalEndDate - intervalStartDate;
            var availableEffort     = totalUnits * intervalDuration / 100;

            if (availableEffort >= effortInMS) {

                endDate             = new Date(intervalStartDate + effortInMS / availableEffort * intervalDuration);

                return false;

            } else {
                effortInMS          -= availableEffort;
            }
        });

        return endDate;
    },


    // this method has a contract that all child parents should already have refeshed data, so it should be called
    // in the "bubbling" order - starting from deeper nodes to closer to root
    refreshCalculatedParentNodeData : function () {

        var autoCalculatePercentDoneForParentTask   = this.autoCalculatePercentDoneForParentTask;
        var autoCalculateEffortForParentTask        = this.autoCalculateEffortForParentTask;

        var childNodes                  = this.childNodes;
        var length                      = childNodes.length;
        var changedFields               = {};

        if (length > 0 && (autoCalculateEffortForParentTask || autoCalculatePercentDoneForParentTask)) {
            var totalEffortInMS         = 0;
            var totalDurationInMS       = 0;
            var completedDurationInMS   = 0;

            for (var k = 0; k < length; k++) {
                var childNode           = childNodes[ k ];
                var isLeaf              = childNode.isLeaf();

                if (autoCalculateEffortForParentTask) totalEffortInMS += childNode.getEffort('MILLI');

                if (autoCalculatePercentDoneForParentTask) {
                    var durationInMS        = isLeaf ? childNode.getDuration('MILLI') || 0 : childNode.childTasksDuration;

                    totalDurationInMS       += durationInMS;
                    completedDurationInMS   += isLeaf ? durationInMS * (childNode.getPercentDone() || 0) : childNode.completedChildTasksDuration;
                }
            }

            if (autoCalculateEffortForParentTask && this.getEffort('MILLI') != totalEffortInMS) {
                changedFields.Effort        = true;
                this.setEffortWithoutPropagation(this.getUnitConverter().convertMSDurationToUnit(totalEffortInMS, this.getEffortUnit()));
            }

            if (autoCalculatePercentDoneForParentTask) {
                this.childTasksDuration             = totalDurationInMS;
                this.completedChildTasksDuration    = completedDurationInMS;

                var newPercentDone          = totalDurationInMS ? completedDurationInMS / totalDurationInMS : 0;

                if (this.getPercentDone() != newPercentDone) {
                    changedFields.PercentDone       = true;
                    this.setPercentDone(newPercentDone);
                }
            }
        }


        var startChanged, endChanged;

        if (!this.isRoot() && length > 0 && !this.isManuallyScheduled()) {

            var minDate  = new Date(-8640000000000000),
                maxDate  = new Date(+8640000000000000),
                earliest = new Date(+8640000000000000), //new Date(maxDate)
                latest   = new Date(-8640000000000000); //new Date(minDate) - this works incorrect in FF

            for (var i = 0; i < length; i++) {
                var r       = childNodes[i];

                earliest    = Sch.util.Date.min(earliest, r.getStartDate() || earliest);
                latest      = Sch.util.Date.max(latest, r.getEndDate() || latest);
            }

            // This could happen if a parent task has two children, one having just start date and another having just an end date
            if (latest < earliest && earliest < maxDate && latest > minDate) {
                var tmp;

                tmp         = latest;
                latest      = earliest;
                earliest    = tmp;
            }

            startChanged    = changedFields.StartDate = earliest - maxDate !== 0 && this.getStartDate() - earliest !== 0;
            endChanged      = changedFields.EndDate = latest - minDate !== 0 && this.getEndDate() - latest !== 0;

            // special case to only trigger 1 update event and avoid extra "recalculateParents" calls
            // wrapping with `beginEdit / endEdit` is not an option, because they do not nest (one "endEdit" will "finalize" all previous "beginEdit")
            if (startChanged && endChanged) {
                this.setStartEndDateWithoutPropagation(earliest, latest, false);
            } else if (startChanged) {
                this.setStartDateWithoutPropagation(earliest, false, false);
            } else if (endChanged) {
                this.setEndDateWithoutPropagation(latest, false, false);
            }
        }

        return changedFields;
    },


    // This function is mostly used for backward compatibility as it does not trigger the changes propagation
    recalculateParents: function () {
        var parent = this.parentNode;

        parent && (
            parent.refreshCalculatedParentNodeData(),
            !this.getTaskStore().cascading && parent.recalculateParents()
        );
        /*
        var parent = this.parentNode;

        if (parent) {
            var changedFields   = parent.refreshCalculatedParentNodeData();
            var startChanged    = changedFields.StartDate;
            var endChanged      = changedFields.EndDate;

            // if `startChanged` or `endChanged` is true, then propagation to parent task has alreday happened in the
            // `onTaskUpdated` method of the TaskStore (during setStart/EndDate call), otherwise need to propagate it manually
            //
            // In the case of cascading, the store listeners are temporarily disabled so we should bubble up if there's a change
            if ((this.getTaskStore().cascading && (startChanged || endChanged)) || (!startChanged && !endChanged)) {
                if (!parent.isRoot()) parent.recalculateParents();
            }
        }
        */
    },


    // TODO: check if it's needed and remove it if it's not
    recalculateAllParents : function () {
        var parent           = this.parentNode,
            hasChangedFields = false,
            changedFields;

        if (parent) {
            changedFields = parent.refreshCalculatedParentNodeData();

            for (var i in changedFields) {
                if (changedFields[ i ]) {
                    hasChangedFields = true;
                    break;
                }
            }

            hasChangedFields && parent.recalculateAllParents();
        }
    },


    /**
     * Returns true if this task is a milestone (has the same start and end dates).
     *
     * @param {Boolean} isBaseline Whether to check for baseline dates instead of "normal" dates. If this argument is provided with
     * "true" value, this method returns the result from the {@link #isBaselineMilestone} method.
     *
     * @return {Boolean}
     */
    isMilestone : function (isBaseline) {

        if (isBaseline) return this.isBaselineMilestone();

        // a summary task may have zero duration when "recalculateParents" is on
        // and a child task has working time on the summary task non-working time
        // so we operate start and end date pair here
        if (!this.get('leaf')) {

            var startDate = this.getStartDate(),
                endDate   = this.getEndDate();

            if (startDate && endDate) {
                return endDate - startDate === 0;
            }

        }

        return this.getDuration() === 0;
    },

    /**
     * Converts this task to a milestone (start date will match the end date).
     *
     * @param {Function} [callback] Callback function to call after task has been converted and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    convertToMilestone : function(callback) {
        var me = this;

        me.propagateChanges(
            function() {
                return me.convertToMilestoneWithoutPropagation();
            },
            callback
        );
    },


    convertToMilestoneWithoutPropagation: function() {
        var me = this,
            propagate = false;

        if (!me.isMilestone()) {
            me.setStartDateWithoutPropagation(me.getEndDate(), false);
            me.setDurationWithoutPropagation(0);
            propagate = true;
        }

        return propagate;
    },

    /**
     * Converts a milestone task to a regular task with a duration of 1 [durationUnit].
     *
     * @param {Function} [callback] Callback function to call after task has been converted and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    convertToRegular : function(callback) {
        var me = this;

        me.propagateChanges(
            function() {
                return me.convertToRegularWithoutPropagation();
            },
            callback
        );
    },


    convertToRegularWithoutPropagation : function() {
        var me = this,
            propagate = false,
            unit,
            newStart;

        if (me.isMilestone()) {
            unit = me.get(me.durationUnitField);
            newStart = me.calculateStartDate(me.getStartDate(), 1, unit);

            me.setDurationWithoutPropagation(1, unit);
            // we set the `moveParentAsGroup` flag to false, because in me case we don't want/need to
            // change any of child tasks
            me.setStartDateWithoutPropagation(newStart, true, false, false);

            propagate = true;
        }

        return propagate;
    },

    /**
     * Returns true if this task is a "baseline" milestone (has the same start and end baseline dates) or false if it's not or the dates are wrong.
     *
     * @return {Boolean}
     */
    isBaselineMilestone: function() {
        var baseStart = this.getBaselineStartDate(),
            baseEnd   = this.getBaselineEndDate();

        if (baseStart && baseEnd){
            return baseEnd - baseStart === 0;
        }

        return false;
    },


    // Sets the task "leaf" attribute to `false` and resets `Segments` field
    // since a parent task cannot be split
    markAsParent : function() {
        var me = this;

        me.isSegmented() && me.setSegmentsWithoutPropagation(null); // Parent task should never be split
        me.set('leaf', false);
    },


    // Tested in 064_model_binding_to_taskstore.t.js
    // @OVERRIDE
    // TODO remove "isFillingRoot" from task store
    /*afterEdit: function (modifiedFieldNames) {
        // see comment in the `endEdit` method
        // need to restore the `dirty` flag value asap, before the parent method implementation
        if (this.savedDirty != null) {
            this.dirty          = this.savedDirty;
            this.savedDirty     = null;
        }

        // If a node is bound to a store, 'update' will be fired from the task store.
        // Required because of the Ext lazy loading of tree nodes.
        // See http://www.sencha.com/forum/showthread.php?180406-4.1B2-TreeStore-inconsistent-firing-of-update
        if (this.stores.length > 0 || !this.normalized) {
            this.callParent(arguments);
        } else {
            var taskStore = this.taskStore || this.getTaskStore(true);

            if (taskStore && !taskStore.isFillingRoot) {
                taskStore.afterEdit(this, modifiedFieldNames);
            }
            this.callParent(arguments);
        }
    },*/

    /**
     * Returns the duration unit of the task.
     * @return {String} the duration unit
     */
    getDurationUnit: function () {
        return this.get(this.durationUnitField) || 'd';
    },

    /**
     * @method setDurationUnit
     *
     * Updates the duration unit of the task.
     *
     * @param {String} unit New duration unit
     * @return {String} the duration unit
     */


    /**
     * Returns the effort unit of the task.
     * @return {String} the effort unit
     */
    getEffortUnit: function () {
        return this.get(this.effortUnitField) || 'h';
    },

    /**
     * @method setEffortUnit
     *
     * Updates the effort unit of the task.
     *
     * @param {String} unit New effort unit
     * @return {String} the effort unit
     */



    /**
     * @method setPercentDone
     *
     * Sets the percent complete value of the task
     *
     * @param {Number} value The new value
     */

    /**
     * @method getPercentDone
     *
     * Gets the percent complete value of the task
     * @return {Number} The percent complete value of the task
     */

    /**
     * @method getCls
     *
     * Returns the name of field holding the CSS class for each rendered task element
     *
     * @return {String} cls The cls field
     */

    /**
     * @method getBaselineStartDate
     *
     * Returns the baseline start date of this task
     *
     * @return {Date} The baseline start date
     */

    /**
     * @method setBaselineStartDate
     *
     * Sets the baseline start date of this task
     *
     * @param {Date} date
     */

    /**
     * @method getBaselineEndDate
     *
     * Returns the baseline end date of this task
     *
     * @return {Date} The baseline end date
     */

    /**
     * @method setBaselineEndDate
     *
     * Sets the baseline end date of this task
     *
     * @param {Date} date
     */

    /**
     * @method setBaselinePercentDone
     *
     * Sets the baseline percent complete value
     *
     * @param {Number} value The new value
     */

    /**
     * Gets the baseline percent complete value
     * @return {Number} The percent done level of the task
     */
    getBaselinePercentDone : function() {
        return this.get(this.baselinePercentDoneField) || 0;
    },

    /**
     * Returns true if the Task can be persisted (e.g. task and resource are not 'phantoms')
     *
     * @return {Boolean} true if this model can be persisted to server.
     */
    isPersistable : function() {
        var parent = this.parentNode;
        return !parent || !parent.phantom || parent.isRoot();
    },

    /**
     * Returns an array of Gnt.model.Resource instances assigned to this Task.
     *
     * @return {Gnt.model.Resource[]} resources
     */
    getResources : function () {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        return assignmentStore && assignmentStore.getResourcesForEvent(me) || [];
    },

    /**
     * Returns an array of Gnt.model.Assignment instances associated with this Task.
     *
     * @return {Gnt.model.Assignment[]} resources
     */
    getAssignments : function () {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        return assignmentStore && assignmentStore.getAssignmentsForTask(me) || [];
    },

    /**
     * Returns true if this task has any assignments. **Note**, that this function returns `true` even if all assignment records are invalid
     * (ie pointing to non-existing resource in the resource store).
     *
     * @return {Boolean}
     */
    hasAssignments : function () {
        return this.getAssignments().length > 0;
    },

    /**
     * Returns true if this task has any assignments with valid resources. Returns `true` only if at least one assignment record is valid -
     * pointing to existed resource record in the resource store.
     *
     * @return {Boolean}
     */
    hasResources : function () {
        var assignments = this.getAssignments(),
            result = false,
            i, len;

        for (i = 0, len = assignments.length; !result && i < len; i++) {
            result = !!assignments[i].getResource();
        }

        return result;
    },

    /**
     * If given resource is assigned to this task, returns a Gnt.model.Assignment record.
     * Otherwise returns `null`
     *
     * @param {Gnt.model.Resource/Mixid} resourceOrId The instance of {@link Gnt.model.Resource} or resource id
     *
     * @return {Gnt.model.Assignment|null}
     */
    getAssignmentFor : function(resource) {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        return assignmentStore && assignmentStore.getAssignmentForEventAndResource(me, resource) || null;
    },

    /**
     * @method isAssignedTo
     * Returns true if the task is assigned to a certain resource.
     *
     * @param {Sch.model.Resource} resource The resource to query for
     * @return {Boolean}
     */
    isAssignedTo : function(resource) {
        var me = this,
            assignmentStore = me.getAssignmentStore();

        return assignmentStore && assignmentStore.isTaskAssignedToResource(me, resource) || false;
    },

    /**
     * Assigns this task to the passed Resource or Resource Id.
     *
     * @param {Gnt.model.Resource/Mixed} resourceOrId The instance of a {@link Gnt.model.Resource resource} or its id.
     * @param {Number} units The integer value for the {@link Gnt.model.Assignment#unitsField Units field} of the assignment record.
     * @param {Function} [callback] Callback function to call after resource has been assigned and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    assign : function(resource, units, callback) {
        var me = this,
            compatResult,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.assignWithoutPropagation(resource, units, function cancelAndResultFeedback(fn, result) {
                    cancelFn = fn;
                    compatResult = result;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );

        return compatResult;
    },


    assignWithoutPropagation : function (resource, units, cancelAndResultFeedback) {
        var me              = this,
            cancelActions   = [],
            taskStore       = me.getTaskStore(),
            assignmentStore = taskStore.getAssignmentStore(),
            resourceStore   = taskStore.getResourceStore(),
            assignment,
            resourceId;

        // {{{ Parameter normalization
        units = units || 100;
        // }}}

        // Preconditions:
        // TODO: wrap it into debug tags when our build system will support debug builds
        !me.getAssignmentFor(resource) ||
            Ext.Error.raise("Resource can't be assigned twice to the same task");

        // If we have a resource model instance but it's not in the resource store then adding it,
        // the resource is proably a phantom record
        if (resource instanceof Gnt.model.Resource && resourceStore.indexOf(resource) == -1) {
            resourceId = resource.getId();
            resourceStore.add(resource);
            cancelActions.push(function() {
                resourceStore.remove(resource);
            });
        }
        // If we have a resource model already in the store then just getting it's id
        else if (resource instanceof Gnt.model.Resource) {
            resourceId = resource.getId();
        }
        // If we don't have a resource model then we must have a resource id, and if a resource with the given id
        // is present in the store then we can proceed
        else if (resourceStore.indexOfId(resource) >= 0) {
            resourceId = resource;
        }
        // Otherwise we have nothing to assign to the task, raising an error

        assignment = assignmentStore.assignTaskToResource(me, resourceId, units);

        cancelActions.push(function() {
            assignmentStore.unassignTaskFromResource(me, resourceId);
        });

        cancelAndResultFeedback && cancelAndResultFeedback(function() {
            Ext.Array.forEach(cancelActions, function(action) {
                action();
            });
        }, assignment[0]);

        return true;
    },

    /**
     * Un-assign a resource from this task
     *
     * @param {Gnt.model.Resource/Number} resource An instance of the {@link Gnt.model.Resource} class or a resource id
     * @param {Function} [callback] Callback function to call after resource has been unassigned and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    unassign : function () {
        return this.unAssign.apply(this, arguments);
    },


    unAssign : function(resource, callback) {
        var me = this,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.unassignWithoutPropagation(resource, function cancelFeedback(fn) {
                    cancelFn = fn;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );
    },


    unassignWithoutPropagation : function(resource, cancelFeedback) {
        var me               = this,
            resourceId       = resource instanceof Gnt.model.Resource ? resource.getId() : resource,
            assignmentStore  = me.getAssignmentStore(),
            assignment       = me.getAssignmentFor(resourceId),
            indexOfAssignment;


        indexOfAssignment = assignmentStore.indexOf(assignment);
        assignmentStore.unassignTaskFromResource(me, resource);

        cancelFeedback && cancelFeedback(function() {
            assignmentStore.insert(indexOfAssignment, assignment);
        });

        return true;
    },

    /**
     * Atomicaly reassigns a task from old resource to new resource
     *
     * @param {Gnt.model.Resource/Mixed} resource A resource to unassign from
     * @param {Gnt.model.Resource/Mixed} resource A resource to assign to
     * @param {Function} [callback] Callback function to call after resource has been reassigned and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    reassign : function(oldResource, newResource, callback) {
        var me = this,
            unassignCancelFn,
            assignCancelFn;

        me.propagateChanges(
            function() {
                me.unassignWithoutPropagation(oldResource, function unassignCancelFeedback(fn) {
                    unassignCancelFn = fn;
                });
                me.assignWithoutPropagation(newResource, function assignCancelFeedback(fn) {
                    assignCancelFn = fn;
                });
                return true;
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                if (cancelChanges) {
                    assignCancelFn && assignCancelFn();
                    unassignCancelFn && unassignCancelFn();
                }
                callback && callback(cancelChanges, affectedTasks);
            }
        );
    },

    // TODO: interceptor is needed only for Gnt.view.Dependency, ask Nick if it can be removed
    /**
     * Links a task to another one given in `toId` with typed dependency given in `type`.
     *
     * @param {Gnt.model.Task|Number} toId
     * @param {Integer} [type=Gnt.model.Dependency.Type.EndToStart] dependency type see {@link Gnt.model.Dependency#Type}.
     * @param {Function} [callback] Callback function to call after tasks has been linked and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    linkTo : function(toId, type, callback, /* private */interceptor) {
        var me = this,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.linkToWithoutPropagation(toId, type, function cancelFeedback(fn) {
                    cancelFn = fn;
                }, interceptor);
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );
    },


    linkToWithoutPropagation : function(toId, type, cancelFeedback, /* deprecated */interceptor) {
        var me              = this,
            fromId          = me.getId(),
            taskStore       = me.getTaskStore(),
            dependencyStore = me.getDependencyStore(),
            newDependency;

        // {{{ Parameters normalization
        toId   = toId instanceof Gnt.model.Task ? toId.getId() : toId;
        type   = ((type === null || type === undefined) && Gnt.model.Dependency.Type.EndToStart) || type;
        // }}}


        newDependency = new dependencyStore.model();
        newDependency.setSourceId(fromId);
        newDependency.setTargetId(toId);
        newDependency.setType(type);

        if (dependencyStore.isValidDependency(newDependency) && (!interceptor || interceptor(newDependency) !== false)) {
            dependencyStore.add(newDependency);
        }

        cancelFeedback && cancelFeedback(function() {
            dependencyStore.remove(newDependency);
        });

        return me;
    },


    /**
     * Unlinks a task from another one given in `fromId`.
     *
     * @param {Gnt.model.Task|Number} fromId
     * @param {Function} [callback] Callback function to call after tasks has been unlinked and possible changes among dependent tasks was propagated.
     * @param {Boolean} callback.cancelChanges Flag showing that the setting has caused a constraint violation
     *  and a user opted for canceling the change and thus nothing has been updated.
     * @param {Object}   callback.affectedTasks Object containing a map (by id) of tasks affected by changes propagation.
     */
    unlinkFrom : function(fromId, callback) {
        var me = this,
            cancelFn;

        me.propagateChanges(
            function() {
                return me.unlinkFromWithoutPropagation(fromId, function cancelFeedback(fn) {
                    cancelFn = fn;
                });
            },
            function onPropagationComplete(cancelChanges, affectedTasks) {
                cancelChanges && cancelFn && cancelFn();
                callback && callback(cancelChanges, affectedTasks);
            }
        );
    },


    unlinkFromWithoutPropagation : function(fromId, cancelFeedback) {
        var me                 = this,
            toId               = me.getId(),
            dependencyStore    = me.getDependencyStore(),
            dependency,
            indexOfDependency;

        // {{{ Parameters normalization
        fromId = fromId instanceof Gnt.model.Task ? fromId.getId() : fromId;
        // }}}

        dependency = dependencyStore.getByTaskIds(fromId, toId);


        indexOfDependency = dependencyStore.indexOf(dependency);

        dependencyStore.remove(dependency);

        cancelFeedback && cancelFeedback(function() {
            dependencyStore.insert(indexOfDependency, dependency);
        });

        return me;
    },


    // side-effects free method - suitable for use in "normalization" stage
    // calculates the effort based on the assignments information
    calculateEffort : function (startDate, endDate, unit) {
        // effort calculation requires both dates
        if (!startDate || !endDate) return 0;

        var totalEffort     = 0;

        this.forEachAvailabilityIntervalWithResources({ startDate : startDate, endDate : endDate }, function (intervalStartDate, intervalEndDate, currentAssignments) {
            var totalUnits          = 0;

            for (var i in currentAssignments) totalUnits += currentAssignments[ i ].units;

            totalEffort             += (intervalEndDate - intervalStartDate) * totalUnits / 100;
        });

        return this.getUnitConverter().convertMSDurationToUnit(totalEffort, unit || this.getEffortUnit());
    },


    updateAssignments : function () {
        var startDate                   = this.getStartDate();
        var endDate                     = this.getEndDate();

        // do nothing if task is not scheduled
        if (!startDate || !endDate) return;

        var totalTime                   = 0;

        this.forEachAvailabilityIntervalWithResources({ startDate : startDate, endDate : endDate }, function (intervalStartDate, intervalEndDate, currentAssignments) {

            for (var resourceId in currentAssignments) {
                totalTime               += intervalEndDate - intervalStartDate;
            }
        });

        // no available resources?
        if (!totalTime) {
            return;
        }

        var effortInMS      = this.getEffort(Sch.util.Date.MILLI);

        Ext.Array.each(this.getAssignments(), function (assignment) {
            assignment.setUnits(effortInMS / totalTime * 100);
        });
    },


    updateEffortBasedOnDuration : function () {
        this.setEffortWithoutPropagation(this.calculateEffort(this.getStartDate(), this.getEndDate()));
    },


    // Alias for updateEffortBasedOnDuration(). Added to have symmetry with updateSpanBasedOnEffort.
    updateEffortBasedOnSpan : function () {
        this.updateEffortBasedOnDuration();
    },


    updateSpanBasedOnEffort : function () {
        // we have to update startDate because duration change can turn the task into a milestone
        // and for milestones we should set startDate to the end of last working period
        this.setStartEndDateWithoutPropagation(this.getStartDate(), this.recalculateEndDate());
    },


    onPotentialEffortChange : function () {
        switch (this.getSchedulingMode()) {
            case 'FixedDuration'        : this.updateEffortBasedOnDuration(); break;
            case 'DynamicAssignment'    : this.updateAssignments(); break;
        }
    },


    onAssignmentMutation : function () {
        switch (this.getSchedulingMode()) {
            case 'FixedDuration'     : this.updateEffortBasedOnDuration(); break;
            case 'EffortDriven'      : this.updateSpanBasedOnEffort(); break;
            case 'DynamicAssignment' : this.updateAssignments(); break;
        }
    },


    onAssignmentStructureMutation : function () {
        switch (this.getSchedulingMode()) {
            case 'FixedDuration'        : this.updateEffortBasedOnDuration(); break;
            case 'EffortDriven'         : this.updateSpanBasedOnEffort(); break;
            case 'DynamicAssignment'    : this.updateAssignments(); break;
        }
    },


    adjustToCalendar : function (callback) {
        var me = this;

        me.propagateChanges(
            function() {
                return me.adjustToCalendarWithoutPropagation();
            },
            callback
        );
    },


    adjustToCalendarWithoutPropagation : function () {
        var me = this,
            taskStore = me.getTaskStore(true),
            propagate = false;


        if (me.taskStore) {

            if (me.get('leaf')) {
                me.setStartDateWithoutPropagation(me.getStartDate(), true, taskStore.skipWeekendsDuringDragDrop);
                me.alignByIncomingDependenciesWithoutPropagation(taskStore, null);
                propagate = this;

            } else if (me.getStartDate() && me.getEndDate()) {
                me.set(me.durationField, me.calculateDuration(me.getStartDate(), me.getEndDate(), me.getDurationUnit()));
                propagate = this;
            }
        }

        return propagate;
    },

    /*
     Returns if the task is readonly. When readonly is `true` {@link #isEditable} will return false for all fields.
     @param {Boolean} [ownState=false] Pass `true` to not take the project readonly state into account
     @return {Boolean} Boolean value, indicating whether the model is readonly
     */
    isReadOnly : function (ownState) {
        var project;

        // if we have to take into account project readonly state
        if (!ownState) {
            project = this.getProject();
        }

        return project && project.getReadOnly() || this.getReadOnly();
    },

    /*
     * @method setReadOnly
     * Sets if the given task is readonly. You can subclass this class and override this method to provide your own logic.
     *
     * When the task is readonly {@link #isEditable} returns `false` for all fields except the readonly field.
     * A task in readonly state will not allow dependency creation.
     *
     * @param {String} value indicating if the task is readonly
     */

    /**
     * Checks if the given task field is editable. You can subclass this class and override this method to provide your own logic.
     *
     * It takes the scheduling mode of the task into account. For example for "FixedDuration" mode, the "Effort"
     * field is calculated and should not be updated by user directly.
     *
     * @param {String} fieldName Name of the field
     * @return {Boolean} Boolean value, indicating whether the given field is editable
     */
    isEditable : function (fieldName) {
        // check if the project is readonly
        if (!this.isProject) {
            var project = this.getProject();

            if (project && project.isReadOnly()) return false;
        }

        if (fieldName === this.readOnlyField) return true;

        // check if the task is readonly
        if (this.isReadOnly(true)) return false;

        if (!this.isLeaf()) {
            if (fieldName === this.effortField && this.autoCalculateEffortForParentTask) return false;
            if (fieldName === this.percentDoneField && this.autoCalculatePercentDoneForParentTask) return false;
        }

        if ((fieldName === this.durationField || fieldName === this.endDateField) && this.getSchedulingMode() === 'EffortDriven') {
            return false;
        }

        if (fieldName === this.effortField && this.getSchedulingMode() === 'FixedDuration') {
            return false;
        }

        return true;
    },


    /**
     * @method isDraggable
     *
     * Returns true if event can be drag and dropped
     * @return {Mixed} The draggable state for the event.
     */
    isDraggable: function () {
        return this.getDraggable();
    },

    /**
     * @method setDraggable
     *
     * Sets the new draggable state for the event
     * @param {Boolean} draggable true if this event should be draggable
     */

    /**
     * @method isResizable
     *
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can be resized.
     * @return {Mixed} The resource Id
     */
    isResizable: function () {
        return this.getResizable();
    },

    /**
     * @method getWBSCode
     *
     * Returns WBS code of task.
     * @return {String} The WBS code string
     */
    getWBSCode: function () {
        var indexes     = [],
            task        = this;

        while (task.parentNode) {
            indexes.push(task.data.index + 1);
            task        = task.parentNode;
        }

        return indexes.reverse().join('.');
    },


    resetTotalCount : function (preventCaching) {
        var task            = this;

        while (task) {
            task.totalCount = preventCaching ? -1 : null;
            task            = task.parentNode;
        }
    },

    /**
     * Returns total count of child nodes and their children.
     *
     * @return {Number} Total count of child nodes
     */
    getTotalCount : function () {
        var totalCount          = this.totalCount;
        var cachingPrevented    = totalCount == -1;

        // `cachingPrevented` (totalCount == -1) will cause the value to be always recalculated
        if (totalCount == null || cachingPrevented) {
            var childNodes  = this.childNodes;

            totalCount      = childNodes.length;

            for (var i = 0, l = childNodes.length; i < l; i++) {
                totalCount  += childNodes[ i ].getTotalCount();
            }

            if (cachingPrevented)
                return totalCount;
            else
                this.totalCount = totalCount;
        }

        return totalCount;
    },


    /**
     * @method getPreviousSiblingsTotalCount
     * Returns count of all sibling nodes (including their children).
     *
     * @return {Number}
     */
    getPreviousSiblingsTotalCount : function () {
        var task    = this.previousSibling,
            count   = this.data.index;

        while (task) {
            count   += task.getTotalCount();
            task    = task.previousSibling;
        }

        return count;
    },


    /**
     * Returns count of all predecessors nodes (including their children).
     * @return {Number}
     * @deprecated Was renamed to {@link #getPreviousSiblingsTotalCount} since `predecessor` term has another meaning in the gantt context.
     */
    getPredecessorsCount : function () {
        return this.getPreviousSiblingsTotalCount.apply(this, arguments);
    },


    /**
     * @method getSequenceNumber
     *
     * Returns the sequential number of the task. A sequential number means the ordinal position of the task in the total dataset, regardless
     * of its nesting level and collapse/expand state of any parent tasks. The root node has a sequential number equal to 0.
     *
     * For example, in the following tree data sample sequential numbers are specified in the comments:

        root : {
            children : [
                {   // 1
                    leaf : true
                },
                {       // 2
                    children : [
                        {   // 3
                            children : [
                                {   // 4
                                    leaf : true
                                },
                                {   // 5
                                    leaf : true
                                }
                            ]
                        }]
                },
                {   // 6
                    leaf : true
                }
            ]
        }

     * If we will collapse some of the parent tasks, sequential number of collapsed tasks won't change.
     *
     * See also {@link Gnt.data.TaskStore#getBySequenceNumber}.
     *
     * @return {Number} The code
     */
    getSequenceNumber: function () {
        var code    = 0,
            task    = this;

        while (task.parentNode) {
            code    += task.getPredecessorsCount() + 1;
            task    = task.parentNode;
        }

        return code;
    },

    // generally should be called on root node only
    getBySequenceNumber : function (number) {
        var resultNode = null,
            childNode, totalCount;

        if (number === 0) {
            resultNode = this;
        } else if (number > 0 && number <= this.getTotalCount()) {
            number--;

            for (var i = 0, l = this.childNodes.length; i < l; i++) {
                childNode       = this.childNodes[i];
                totalCount      = childNode.getTotalCount();

                if (number > totalCount)
                    number      -= totalCount + 1;
                else {
                    childNode   = this.childNodes[i];
                    resultNode  = childNode.getBySequenceNumber(number);
                    break;
                }
            }
        }

        return resultNode;
    },

    /**
     * @method getDisplayStartDate
     *
     * Returns the formatted start date value to be used in the UI.
     * @param {String} format Date format.
     * @param {Boolean} [adjustMilestones=true] If true, milestones will display one day earlier than the actual raw date.
     * @param {Date} [value=this.getStartDate()] Start date value. If not specified, the Task start date will be used.
     * @return {String} Formatted start date value.
     */
    getDisplayStartDate : function (format, adjustMilestones, value, returnDate, isBaseline) {
        format = format || Ext.Date.defaultFormat;

        // if no value specified then we'll take task start date
        if (arguments.length < 3) {
            value       = this.getStartDate();
            // by default we consider adjustMilestones enabled
            if (arguments.length < 2) adjustMilestones = true;
        }

        if (value && adjustMilestones && this.isMilestone(isBaseline) && value - Ext.Date.clearTime(value, true) === 0 && !Ext.Date.formatContainsHourInfo(format)) {
            value       = Sch.util.Date.add(value, Sch.util.Date.MILLI, -1);
        }

        return returnDate ? value : (value ? Ext.util.Format.date(value, format) : '');
    },

    /**
     * @method getDisplayEndDate
     *
     * Returns the formatted end date value to be used in the UI.
     * **Note** that the end date of tasks in the Gantt chart is not inclusive, however this method will compensate the value.
     * For example, if you have a 1 day task which starts at **2011-07-20T00:00:00** and ends at **2011-07-21T00:00:00** (remember the end date is not inclusive),
     * this method will return **2011-07-20** if called with 'Y-m-d'.

            var task = new Gnt.model.Task({
                StartDate : new Date(2011, 6, 20),
                EndDate   : new Date(2011, 6, 21)
            });

            // below code will display "2011/07/20"
            alert(task.getDisplayEndDate("Y/m/d"));

     * @param {String} format Date format (required).
     * @param {Boolean} [adjustMilestones=true] If true, milestones will display one day earlier than the actual raw date.
     * @param {Date} [value=this.getEndDate()] End date value. If not specified, the Task end date will be used.
     * @return {String} The formatted end date value.
     */
    getDisplayEndDate : function (format, adjustMilestones, value, returnDate, isBaseline) {
        format = format || Ext.Date.defaultFormat;

        if (arguments.length < 3) {
            value       = this.getEndDate();
            if (arguments.length < 2) adjustMilestones = true;
        }

        if (value && (!this.isMilestone(isBaseline) || adjustMilestones) && value - Ext.Date.clearTime(value, true) === 0 && !Ext.Date.formatContainsHourInfo(format)) {
            value       = Sch.util.Date.add(value, Sch.util.Date.MILLI, -1);
        }

        return returnDate ? value : (value ? Ext.util.Format.date(value, format) : '');
    },

    /**
     * @method setResizable
     *
     * Sets the new resizable state for the event. You can specify true/false, or 'start'/'end' to only allow resizing one end of an event.
     * @param {Boolean} resizable true if this event should be resizable
     */


    // Does a regular copy but also copies references to the model taskStore etc
    // Intended to be used when copying a task that will be added to the same taskStore
    fullCopy : function (model) {
        var cp = this.callParent(arguments);

        cp.taskStore = this.getTaskStore();

        return cp;
    },


    commit: function () {
        this.callParent(arguments);

        this.commitSegments();
    },


    reject: function () {
        this.callParent(arguments);

        this.rejectSegments();
    },

    isUnscheduled : function () {
        return !this.getStartDate() || !this.getEndDate();
    },

    // TODO: temp dummy methods, remove these lines on #2104 completion
    getReadOnly : Ext.emptyFn,
    setReadOnly : Ext.emptyFn

}, function () {
    // Do this first to be able to override NodeInterface methods
    Ext.data.NodeInterface.decorate(this);

    this.override({

        // @OVERRIDE
        remove : function () {
            var me        = this,
                parent    = me.parentNode,
                taskStore = me.getTaskStore(true),
                result;

            result = me.callParent(arguments);

            // If the parent has no other children, change it to a leaf task if required
            if (parent && taskStore && taskStore.recalculateParents && parent.convertEmptyParentToLeaf && !parent.isRoot() && parent.childNodes.length === 0) {
                parent.set('leaf', true);
            }
            // If the parent has some children left then recalculate it's start/end dates if required
            else if (parent && taskStore && taskStore.recalculateParents && !taskStore.suspendAutoRecalculateParents && !parent.isRoot() && parent.childNodes.length > 0) {
                parent.refreshCalculatedParentNodeData();
                parent.recalculateParents();
            }

            return result;
        },

        // @OVERRIDE
        insertBefore : function (node, refNode) {
            // this will surprisingly change the value of the 1st argument in the `arguments`, try
            //      var aa = function (a) { a = 'zz'; console_log(arguments) }
            //      aa(1, 2)
            node        = this.createNode(node);

            if (!node) return;

            var store                   = this.getTaskStore(true),
                root                    = store && store.getRoot(),
                phantomParentIdField    = this.phantomParentIdField,
                phantom                 = this !== root && this.phantom,
                internalId              = this.getId();

            if (phantom) {
                this.data[this.phantomIdField] = internalId;
            }

            if (internalId !== node.data[phantomParentIdField]) {
                if (!node.phantom) {
                    node.modified                       = node.modified || {};
                    node.modified[phantomParentIdField] = node.data[phantomParentIdField];
                }

                node.data[phantomParentIdField]    = phantom ? internalId : null;
            }

            var refNodeIndex            = refNode && refNode.get('index');

            var needToSuspendCaching    = node.parentNode;

            this.resetTotalCount(needToSuspendCaching);

            var res                     = this.callParent(arguments);

            if (needToSuspendCaching) this.resetTotalCount();

            // fix for ExtJS 5.1.0 bug:
            // https://www.sencha.com/forum/showthread.php?300695-getChanges-doesn-t-include-quot-index-quot-after-insertBefore-call&p=1098694#post1098694
            if (refNode && refNode.get('index') != refNodeIndex) {
                refNode.modified        = refNode.modified || {};
                refNode.modified.index  = refNodeIndex;
            }

            return res;
        },

        // @OVERRIDE
        appendChild : function (nodes, suppressEvents, commit) {
            nodes                       = nodes instanceof Array ? nodes : [ nodes ];

            var store                   = this.getTaskStore(true),
                root                    = store && store.getRoot(),
                needToSuspendCaching    = false,
                phantomParentIdField    = this.phantomParentIdField,
                phantom                 = this !== root && this.phantom,
                internalId              = this.getId(),
                nodesCreated            = 0;

            for (var i = 0; i < nodes.length; i++) {
                var node = this.createNode(nodes[ i ]);

                if (!node) continue;

                nodesCreated++;

                nodes[ i ] = node;

                // appending child that is already in the same tree, will first remove it from previous parent.
                // Removing is hidden inside of the `appendChild` implementation and causes various side effects
                // which re-fills the `totalCount` cache with wrong value. Need to suspend caching during parent
                // "appendChild" implementation
                if (node.parentNode) needToSuspendCaching = true;

                if (internalId !== node.data[phantomParentIdField]) {
                    if (!node.phantom) {
                        node.modified                       = node.modified || {};
                        node.modified[phantomParentIdField] = node.data[phantomParentIdField];
                    }

                    node.data[phantomParentIdField]     = phantom ? internalId : null;
                }
            }

            if (!nodesCreated) return;

            if (phantom) {
                this.data[ this.phantomIdField ]    = internalId;
            }

            this.resetTotalCount(needToSuspendCaching);

            // convert a single element array back to just element, to avoid extra function call
            var res     = this.callParent([ nodes.length > 1 ? nodes : nodes[ 0 ], suppressEvents, commit ]);

            if (needToSuspendCaching) this.resetTotalCount();


            this.beginEdit();
            // Bugfix ticket #1401
            this.markAsParent();
            // since the task became a parent we switch its scheduling mode to 'Normal' (ticket #1441)
            this.set(this.schedulingModeField, 'Normal');
            this.endEdit();

            return res;
        },

        // @OVERRIDE
        removeChild : function (node, destroy, suppressEvents, isMove) {
            var me                  = this,
                needToConvertToLeaf = !me.removeChildIsCalledFromReplaceChild && me.convertEmptyParentToLeaf && me.childNodes.length == 1,
                taskStore           = me.getTaskStore(true),
                result;

            me.resetTotalCount();

            // need to reset the flag early, because the removal operation may cause some side effects (event listeners)
            // flag should be already reset in those listeners
            me.removeChildIsCalledFromReplaceChild    = false;

            // Calling parent
            result = me.callParent(arguments);

            // In case of node move we need to reset the total count cache one more time here.
            // This is for the case, when we append/insert some existing node to a different position
            // in its parent node. In this case, the total count cache will be originally reset in our
            // overrides for `insertBefore` or `appendChild`. This is supposed to be enough, but its not,
            // because before doing actuall append, not first will be removed from the parent ("removeChild" call
            // is part of the `appendChild/insertBefore` methods. The listeners of `remove` event may call
            // `getTotalCount` and fill the cache. Then, we continue to actual node insertion, but cache is already filled
            // with wrong data.
            if (isMove) {
                me.resetTotalCount();
            }

            // If the parent has no other children, change it to a leaf task
            if (taskStore && taskStore.recalculateParents && !taskStore.suspendAutoRecalculateParents) {
                me.refreshCalculatedParentNodeData();
            }

            needToConvertToLeaf && !me.isRoot() && me.set('leaf', true);

            return result;
        },

        replaceChild : function () {
            // flag will be reset in the `removeChild` override
            this.removeChildIsCalledFromReplaceChild    = true;

            this.callParent(arguments);
        },

        removeAll : function () {
            this.resetTotalCount();
            this.callParent(arguments);
        },


        // @OVERRIDE
        createNode : function (node) {

            var me          = this,
                store       = me.getTaskStore(true),
                root        = store && store.getRoot(),
                reader;

            if (store) {
                reader      = store.getProxy().getReader();

                var originalGetChildType = reader.getChildType;

                // TODO: check this in ext5.1.2+
                // parent "createNode" doesnot fallback to the reader model
                // and raises exception because of that (in ext5.1.0/ext5.1.1)
                reader.getChildType = function() {
                    return originalGetChildType.apply(this, arguments) || this.getModel();
                };
            }

            node    = this.callParent(arguments);

            // restore original reader.getChildType
            if (store && reader) delete reader.getChildType;

            // project nodes under the root allowed only
            if (store && root !== this && node.isProject) {
                return;
            }

            var needsNormalization = store && store.autoNormalizeNodes && !node.normalized && !node.normalizeScheduled;

            node = this.callParent(arguments);

            if (needsNormalization) {

                var prevUpdateInfo  = node.updateInfo;

                node.updateInfo = function () {

                    prevUpdateInfo.apply(this, arguments);
                    delete node.updateInfo;

                    // normalization needs to fully set up node, this happens after 1) createNode 2) updateNodeInfo
                    node.normalize();
                };

                //createNode is called multiple times before the node is normalized.
                //For preventing a chain of calls to updateInfo and normalize is created we set a property to schedule normalization only once
                node.normalizeScheduled = true;

            }

            return node;
        }
    });
});

/**
@class Gnt.model.TaskSegment
@extends Gnt.model.Task

This class represents a segment of a split task in your Gantt chart.

*/
Ext.define('Gnt.model.TaskSegment', {
    extend                  : 'Gnt.model.Task',

    /**
     * @hide
     * @method setName
     */
    /**
     * @hide
     * @method getName
     */
    /**
     * @hide
     * @cfg autoCalculateEffortForParentTask
     */
    /**
     * @hide
     * @cfg autoCalculatePercentDoneForParentTask
     */
    /**
     * @hide
     * @cfg baselineEndDateField
     */
    /**
     * @hide
     * @cfg baselinePercentDoneField
     */
    /**
     * @hide
     * @cfg baselineStartDateField
     */
    /**
     * @hide
     * @cfg calendar
     */
    /**
     * @hide
     * @cfg calendarIdField
     */
    /**
     * @hide
     * @cfg constraintDateField
     */
    /**
     * @hide
     * @cfg constraintTypeField
     */
    /**
     * @hide
     * @cfg convertEmptyParentToLeaf
     */
    /**
     * @hide
     * @cfg draggableField
     */
    /**
     * @hide
     * @cfg effortField
     */
    /**
     * @hide
     * @cfg effortUnitField
     */
    /**
     * @hide
     * @cfg manuallyScheduledField
     */
    /**
     * @hide
     * @cfg percentDoneField
     */
    /**
     * @hide
     * @cfg phantomParentIdField
     */
    /**
     * @hide
     * @cfg resizableField
     */
    /**
     * @hide
     * @cfg rollupField
     */
    /**
     * @hide
     * @cfg schedulingModeField
     */
    /**
     * @hide
     * @cfg taskStore
     */
    /**
     * @hide
     * @cfg dependencyStore
     */
    /**
     * @hide
     * @property assignments
     */
    /**
     * @hide
     * @property predecessors
     */
    /**
     * @hide
     * @property successors
     */
    /**
     * @hide
     * @method addMilestone
     */
    /**
     * @hide
     * @method addPredecessor
     */
    /**
     * @hide
     * @method addSubtask
     */
    /**
     * @hide
     * @method addSuccessor
     */
    /**
     * @hide
     * @method addTaskAbove
     */
    /**
     * @hide
     * @method addTaskBelow
     */
    /**
     * @hide
     * @method assign
     */
    /**
     * @hide
     * @method cascadeChanges
     */
    /**
     * @hide
     * @method cascadeChildren
     */
    /**
     * @hide
     * @method convertToMilestone
     */
    /**
     * @hide
     * @method convertToRegular
     */
    /**
     * @hide
     * @method forEachDate
     */
    /**
     * @hide
     * @method getAllDependencies
     */
    /**
     * @hide
     * @method getAssignmentFor
     */
    /**
     * @hide
     * @method getAssignmentStore
     */
    /**
     * @hide
     * @method getAssignments
     */
    /**
     * @hide
     * @method getBaselineEndDate
     */
    /**
     * @hide
     * @method getBaselinePercentDone
     */
    /**
     * @hide
     * @method getBaselineStartDate
     */
    /**
     * @hide
     * @method setBaselineEndDate
     */
    /**
     * @hide
     * @method setBaselinePercentDone
     */
    /**
     * @hide
     * @method setBaselineStartDate
     */
    /**
     * @hide
     * @method getCalendar
     */
    /**
     * @hide
     * @method getCalendarDuration
     */
    /**
     * @hide
     * @method getConstraintClass
     */
    /**
     * @hide
     * @method getDates
     */
    /**
     * @hide
     * @method getDependencyStore
     */
    /**
     * @hide
     * @method getDisplayEndDate
     */
    /**
     * @hide
     * @method getDisplayStartDate
     */
    /**
     * @hide
     * @method getEarlyEndDate
     */
    /**
     * @hide
     * @method getEarlyStartDate
     */
    /**
     * @hide
     * @method getEffort
     */
    /**
     * @hide
     * @method getEffortUnit
     */
    /**
     * @hide
     * @method getIncomingDependencies
     */
    /**
     * @hide
     * @method getLateEndDate
     */
    /**
     * @hide
     * @method getLateStartDate
     */
    /**
     * @hide
     * @method getOutgoingDependencies
     */
    /**
     * @hide
     * @method getOwnCalendar
     */
    /**
     * @hide
     * @method getPercentDone
     */
    /**
     * @hide
     * @method getPredecessors
     */
    /**
     * @hide
     * @method getPredecessorsCount
     */
    /**
     * @hide
     * @method getResourceStore
     */
    /**
     * @hide
     * @method getResources
     */
    /**
     * @hide
     * @method getSchedulingMode
     */
    /**
     * @hide
     * @method getSegment
     */
    /**
     * @hide
     * @method getSequenceNumber
     */
    /**
     * @hide
     * @method getSlack
     */
    /**
     * @hide
     * @method getSuccessors
     */
    /**
     * @hide
     * @method getTaskStore
     */
    /**
     * @hide
     * @method getTotalCount
     */
    /**
     * @hide
     * @method getWBSCode
     */
    /**
     * @hide
     * @method hasAssignments
     */
    /**
     * @hide
     * @method hasConstraint
     */
    /**
     * @hide
     * @method hasIncomingDependencies
     */
    /**
     * @hide
     * @method hasOutgoingDependencies
     */
    /**
     * @hide
     * @method hasResources
     */
    /**
     * @hide
     * @method indent
     */
    /**
     * @hide
     * @method insertSubtask
     */
    /**
     * @hide
     * @method isAssignedTo
     */
    /**
     * @hide
     * @method isBaselineMilestone
     */
    /**
     * @hide
     * @method isConstraintSatisfied
     */
    /**
     * @hide
     * @method isManuallyScheduled
     */
    /**
     * @hide
     * @method isMilestone
     */
    /**
     * @hide
     * @method isPersistable
     */
    /**
     * @hide
     * @method isProjected
     */
    /**
     * @hide
     * @method isSegmented
     */
    /**
     * @hide
     * @method linkTo
     */
    /**
     * @hide
     * @method merge
     */
    /**
     * @hide
     * @method outdent
     */
    /**
     * @hide
     * @method setBaselinePercentDone
     */
    /**
     * @hide
     * @method setCalendar
     */
    /**
     * @hide
     * @method setConstraint
     */
    /**
     * @hide
     * @method setConstraintDate
     */
    /**
     * @hide
     * @method setConstraintType
     */
    /**
     * @hide
     * @method setEffort
     */
    /**
     * @hide
     * @method setEffortUnit
     */
    /**
     * @hide
     * @method setPercentDone
     */
    /**
     * @hide
     * @method setSchedulingMode
     */
    /**
     * @hide
     * @method setSegments
     */
    /**
     * @hide
     * @method setTaskStore
     */
    /**
     * @hide
     * @method shift
     */
    /**
     * @hide
     * @method split
     */
    /**
     * @hide
     * @method unAssign
     */
    /**
     * @hide
     * @method unlinkFrom
     */

    /**
     * @cfg {Gnt.model.Task} task The task part of which this segment is.
     * @required
     */
    task                    : null,

    prevSegment             : null,

    nextSegment             : null,

    customizableFields      : [
        { name : 'StartOffset',     type : 'int' },
        { name : 'EndOffset',       type : 'int' }
    ],

    startOffsetField        : 'StartOffset',
    endOffsetField          : 'EndOffset',

    taskNotifyingSuspended  : 0,
    respectNeighbours       : 0,

    constructor : function (cfg) {
        cfg         = cfg || {};

        cfg.leaf    = true;

        if (!cfg.task) throw "'task' has to be specified";

        this.task = cfg.task;

        this.setPrevSegment(cfg.prevSegment);

        this.callParent(arguments);

        Ext.override(this, this.overridables);

        if (this.getTask().normalized && this.getTaskStore(true) && !this.normalized) {
            this.normalize();
        }
    },


    overridables : {

        // we have to treat set() method override this way since we use explicit Ext.override() call
        // to override it in Gnt.model.mixin.ProjectableModel, and thus we can override it using the same approach only
        set : function () {
            var task    = this.getTask();

            if (!this.editing && task) {
                // let master task know of editing being started
                task.onSegmentEditBegin(this);
            }

            this.callParent(arguments);
        }

    },


    serialize : function () {
        var data    = {};

        if (this.getId()) {
            data[this.idProperty]       = this.getId();
        }
        data[this.phantomIdField]       = this.getPhantomId();
        data[this.startDateField]       = this.getStartDate();
        data[this.endDateField]         = this.getEndDate();
        data[this.durationField]        = this.getDuration();
        data[this.durationUnitField]    = this.getDurationUnit();
        data[this.clsField]             = this.getCls();

        return data;
    },


    setStartOffset : function (startOffset) {
        var cal                 = this.getTask().getProjectCalendar();
        var durationInTaskUnit  = cal.convertMSDurationToUnit(this.getEndOffset() - startOffset, this.getDurationUnit());

        this.beginEdit();

        this.set(this.startOffsetField, startOffset);
        this.set(this.durationField, durationInTaskUnit);

        this.endEdit();
    },


    setEndOffset : function (endOffset) {
        var cal                 = this.getTask().getProjectCalendar();
        var durationInTaskUnit  = cal.convertMSDurationToUnit(endOffset - this.getStartOffset(), this.getDurationUnit());

        this.beginEdit();

        this.set(this.endOffsetField, endOffset);
        this.set(this.durationField, durationInTaskUnit);

        this.endEdit();
    },


    setStartEndOffset : function (startOffset, endOffset) {
        var cal                 = this.getTask().getProjectCalendar();
        var durationInTaskUnit  = cal.convertMSDurationToUnit(endOffset - startOffset, this.getDurationUnit());

        this.beginEdit();

        this.set(this.startOffsetField, startOffset);
        this.set(this.endOffsetField, endOffset);
        this.set(this.durationField, durationInTaskUnit);

        this.endEdit();
    },


    normalize : function () {
        // fill missing standard task fields: end date based on duration or duration based on end date etc.
        this.callParent(arguments);

        var startDate   = this.getStartDate();

        // fill offsets if needed
        if (!this.getStartOffset() && startDate) {
            var task                = this.getTask();
            var startOffset         = this.calculateDuration(task.getStartDate(), startDate, 'MILLI');
            var endOffset           = startOffset + this.getDuration('MILLI');
            var cal                 = task.getProjectCalendar();
            var durationInTaskUnits = cal.convertMSDurationToUnit(endOffset - startOffset, this.getDurationUnit());

            this.data[this.startOffsetField]    = startOffset;
            this.data[this.endOffsetField]      = endOffset;
            this.data[this.durationField]       = durationInTaskUnits;
        }
    },


    updateOffsetsByDates : function () {
        // we need task store to use its project calendar
        if (!this.getTaskStore(true)) return;

        // prevents nested updating of offsets
        // and updating of offsets during start/end recalculation (based on offsets)
        if (this.updatingOffsets || this.updatingDates) return;

        // set flag saying that we are in the middle of updating offsets by dates
        this.updatingOffsets    = true;

        var offset              = this.calculateDuration(this.getTask().getStartDate(), this.getStartDate(), 'MILLI');

        this.setStartEndOffset(offset, offset + this.getDuration('MILLI'));

        this.updatingOffsets    = false;
    },


    updateDatesByOffsets : function (options) {
        options                 = options || {};

        // prevents nested updating of dates
        // and updating of dates during offsets updating
        if (this.updatingDates || this.updatingOffsets) return;

        var isForward           = options.isForward !== false,
            useAbsoluteOffset   = options.useAbsoluteOffset !== false,
            startDate           = options.startDate,
            endDate             = options.endDate,
            taskStore           = this.getTaskStore(true);

        if (!taskStore) return;

        // set flag saying that we are in the middle of updating dates by offsets
        this.updatingDates      = true;

        var date, neighbour;

        if (isForward) {
            neighbour   = this.getPrevSegment();

            if (neighbour && !useAbsoluteOffset) {
                date    = this.skipWorkingTime(neighbour.getEndDate(), this.getStartOffset() - neighbour.getEndOffset());
            } else {
                date    = this.skipWorkingTime(startDate || this.getTask().getStartDate(), this.getStartOffset());
            }

        } else {
            neighbour   = this.getNextSegment();

            if (neighbour && !useAbsoluteOffset) {
                date    = this.skipWorkingTime(neighbour.getStartDate(), neighbour.getStartOffset() - this.getEndOffset() + this.getDuration('MILLI'), false);
            } else {
                date    = this.skipWorkingTime(endDate || this.getTask().getEndDate(), this.getDuration('MILLI'), false);
            }

        }

        this.setStartDateWithoutPropagation(date, true, taskStore.skipWeekendsDuringDragDrop);

        this.updatingDates      = false;
    },


    getPrevSegment : function () {
        return this.prevSegment;
    },

    getNextSegment : function () {
        return this.nextSegment;
    },

    setPrevSegment : function (prevSegment) {
        this.prevSegment        = prevSegment;

        if (prevSegment) {
            prevSegment.nextSegment = this;
        }
    },

    setNextSegment : function (nextSegment) {
        this.nextSegment        = nextSegment;

        if (nextSegment) {
            nextSegment.prevSegment = this;
        }
    },


    buildSnapshot : function () {
        // snapshot keeps:
        // - reference to segment itself
        // - its `data` snapshot
        // - and few other properties
        return [
            this,
            Ext.apply({}, this.data),
            { prevSegment : this.getPrevSegment(), nextSegment : this.getNextSegment() }
        ];
    },


    readSnapshot : function (snapshot) {
        if (snapshot) {
            Ext.apply(this.data, snapshot[1]);
            Ext.apply(this, snapshot[2]);

            return this;
        }

        return snapshot;
    },


    enableRespectNeighbours : function () {
        this.respectNeighbours++;
    },


    disableRespectNeighbours : function () {
        this.respectNeighbours--;
    },


    suspendTaskNotifying : function () {
        this.taskNotifyingSuspended++;
    },


    resumeTaskNotifying : function () {
        this.taskNotifyingSuspended--;
    },


    setStartDate : function (date, keepDuration) {
        // if we move the segment their neighbours constraints the movement range
        if (keepDuration) {
            this.enableRespectNeighbours();
        }

        this.callParent(arguments);

        if (keepDuration) {
            this.disableRespectNeighbours();
        }
    },


    setStartDateWithoutPropagation : function () {
        this.beginEdit();

        this.callParent(arguments);
        this.updateOffsetsByDates();

        // if we have next segment(s) and we have to respect and not overlap them
        if (!this.inShifting && this.respectNeighbours && this.getNextSegment()) {
            // this.shiftNeighboursWithoutPropagation();
            var neighbour   = this.getNextSegment();
            var shift       = this.getEndOffset() - neighbour.getStartOffset();

            if (neighbour && (shift > 0)) {
                neighbour.suspendTaskNotifying();
                neighbour.enableRespectNeighbours();

                neighbour.shiftWithoutPropagation(shift);

                neighbour.resumeTaskNotifying();
                neighbour.disableRespectNeighbours();
            }
        }

        this.endEdit();

        return true;
    },


    /**
     * @private
     * Shifts the segment by provided number of milliseconds.
     * If the segment has {@link #respectNeighbours} set to `true` this call will shift further segments as well.
     * @param {Number} amountMS Number of milliseconds the segment shoud be mover by.
     */
    shiftWithoutPropagation : function (amountMS) {
        var me          = this;

        if (!amountMS) return;

        me.beginEdit();

        me.inShifting   = true;

        me.setStartEndOffset(me.getStartOffset() + amountMS, me.getEndOffset() + amountMS);
        me.updateDatesByOffsets();

        var neighbour;

        if (me.respectNeighbours && (neighbour   = amountMS > 0 ? me.getNextSegment() : me.getPrevSegment())) {
            neighbour.suspendTaskNotifying();
            neighbour.enableRespectNeighbours();

            neighbour.shiftWithoutPropagation(amountMS);

            neighbour.resumeTaskNotifying();
            neighbour.disableRespectNeighbours();
        }

        me.inShifting   = false;

        me.endEdit();

        return true;
    },


    setEndDateWithoutPropagation : function () {
        this.beginEdit();

        this.callParent(arguments);
        this.updateOffsetsByDates();

        this.endEdit();

        return true;
    },

    setStartEndDateWithoutPropagation : function () {
        this.beginEdit();

        this.callParent(arguments);
        this.updateOffsetsByDates();

        this.endEdit();

        return true;
    },

    setDurationWithoutPropagation : function () {
        this.beginEdit();

        this.callParent(arguments);
        this.updateOffsetsByDates();

        this.endEdit();

        return true;
    },

    /**
     * Gets the task part of which the segment is.
     * @return {Gnt.model.Task} The task.
     */
    getTask : function () {
        return this.task;
    },

    beginEdit : function () {
        var task    = this.getTask();

        if (task && !this.__editCounter) {
            // let master task know of editing being started
            task.onSegmentEditBegin(this);
        }

        this.callParent(arguments);
    },

    endEdit : function () {
        var modified    = this.previous;

        this.callParent(arguments);

        if (!this.__editCounter && !this.taskNotifyingSuspended) {
            // if the timespan was affected by the change we gonna let the master task know of it
            if (this.startDateField in modified || this.endDateField in modified || this.startOffsetField in modified || this.endOffsetField in modified || this.durationField in modified)
            {
                this.getTask().onSegmentsChanged(this, modified);
            }
        }
    },

    // sub-segments are not supported

    //@ignore
    setSegments : Ext.emptyFn,
    //@ignore
    getSegments : Ext.emptyFn,

    callTask : function (args) {
        var task        = this.task;
        var method      = this.callTask.caller;
        var taskMethod  = method && task[method.$name];

        if (taskMethod) return taskMethod.apply(task, args);
    },

    //@ignore
    getSchedulingMode : function () {
        // #1902 here we redirected this call to the task previously (using: this.callTask(arguments);)
        // yet it brings few questions when it comes to "EfforDriven" mode
        // where end date is calculated based on effort value ..and segment just doesn't have it normally
        return 'Normal';
    },

    // methods mapped from the task

    getCalendar : function () {
        return this.callTask(arguments);
    },

    getOwnCalendar : function () {
        return this.callTask(arguments);
    },

    getProjectCalendar : function () {
        return this.callTask(arguments);
    },

    getDependencyStore : function () {
        return this.callTask(arguments);
    },

    getResourceStore : function () {
        return this.callTask(arguments);
    },

    getAssignmentStore : function () {
        return this.callTask(arguments);
    },

    getTaskStore : function () {
        return this.callTask(arguments);
    },

    forEachAvailabilityInterval : function (options) {
        // we query the task for available intervals
        // but force it to NOT take segmentation into account
        options.segments    = options.segments || false;

        return this.callTask(arguments);
    },

    propagateChanges : function(/*...*/) {
        return this.callTask(arguments);
    },

    rejectSegmentsProjection : function() {
        return this.callTask(arguments);
    },

    commitSegmentsProjection : function() {
        return this.callTask(arguments);
    },

    getAssignments : function () {
        return this.callTask(arguments);
    },

    getAssignmentFor : function () {
        return this.callTask(arguments);
    },

    isAssignedTo : function () {
        return this.callTask(arguments);
    },

    getResources : function () {
        return this.callTask(arguments);
    }

});

/**
@class Gnt.model.ProjectLine
@extends Ext.data.Model

This class represent a single line drawn by {@link Gnt.plugin.ProjectLines}.

A line has the following fields:

- `Id` - The id of the line
- `ProjectId` - The id of the corresponding project
- `Date` The date of the line.
- `Text` The Text to show when hovering over the line (optional)
- `Cls`  A CSS class to add to the line (optional)
*/
Ext.define('Gnt.model.ProjectLine', {
    extend      : 'Ext.data.Model',

    idProperty  : 'Id',

    fields      : [
        { name: 'Id' },
        { name: 'ProjectId' },
        { name: 'Date', type: 'date' },
        { name: 'Cls', type: 'string' },
        { name: 'Text', type: 'string' }
    ]

});
/**

@class Gnt.model.Project
@extends Gnt.model.Task

This class represents a single Project in your Gantt chart.

The inheritance hierarchy of this class includes {@link Gnt.model.Task}, {@link Sch.model.Customizable} and {@link Ext.data.Model} classes.
This class will also receive a set of methods and additional fields that stem from the {@link Ext.data.NodeInterface}.
Please refer to the documentation of those classes to become familiar with the base interface of this class.

By default, a Project has the following fields as seen below.

# Project Fields

- `Description` - the description of the project, this field maps to the task `Note` field
- `AllowDependencies` - this field indicates if the project tasks allowed to have dependencies with tasks external to the project

*/
Ext.define('Gnt.model.Project', {
    extend                  : 'Gnt.model.Task',

    alias                   : 'gntmodel.project',

    /**
     * @property {Boolean} isProject Indicates that this is a project.
     * Can be used in heterogeneous stores to distinguish project records from task ones.
     */
    isProject               : true,

    /**
     * @cfg {String} descriptionField The description of the project.
     */
    descriptionField        : 'Note',

    /**
     * @cfg {Boolean} allowDependenciesField The name of the field specifying if the task allows dependencies.
     */
    allowDependenciesField  : 'AllowDependencies',

    customizableFields      : [
        { name : 'Description', type : 'string' },
        { name : 'AllowDependencies', persist : false, type : 'bool', defaultValue : false }
    ],

    recognizedSchedulingModes : ['Normal'],

    isEditable : function (fieldName) {
        // some fields editing doesn't make sense for a project
        switch (fieldName) {
            case this.nameField:
            case this.startDateField:
            case this.endDateField:
            case this.durationField:
            case this.durationUnitField:
            case this.allowDependenciesField:
            case this.descriptionField:
            case this.allowDependenciesField:
                return this.callParent(arguments);
            default :
                return false;
        }
    }

    /*
     * @method setReadOnly
     * Sets if the given project is read only. All underlying tasks will be considered as read only as well.
     *
     * @param {String} value `True` to mark the project as read only.
     */

});

/*
 * @class Gnt.util.DurationParser
 * @private
 * Internal class handling the duration parsing.

 Recognizable values for duration unit part are (the trailing `..` symbols means anything will match):

- Milliseconds: `ms` or `mil..`
- Seconds: `s` or `sec..`
- Minutes: `m` or `min..`
- Hours: `h` or `hr` or `hour..`
- Days: `d` or `day..`
- Weeks: `w` or `wk` or `week..`
- Months: `mo..` or `mnt..`
- Quarters: `q` or `quar..` or `qrt..`
- Years: `y` or `yr..` or `year..`

You can change that using the `unitsRegex` configuration option.

 */
Ext.define("Gnt.util.DurationParser", {
    requires        : ["Sch.util.Date"],

    mixins          : ['Gnt.mixin.Localizable'],

    parseNumberFn   : null,
    durationRegex   : null,

    /*
     * @cfg {Boolean} allowDecimals Set to `false` to disable parsing duration values with decimals component
     */
    allowDecimals   : true,

    /*
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - unitsRegex : {
                - MILLI       : /^ms$|^mil/i,
                - SECOND      : /^s$|^sec/i,
                - MINUTE      : /^m$|^min/i,
                - HOUR        : /^h$|^hr$|^hour/i,
                - DAY         : /^d$|^day/i,
                - WEEK        : /^w$|^wk|^week/i,
                - MONTH       : /^mo|^mnt/i,
                - QUARTER     : /^q$|^quar|^qrt/i,
                - YEAR        : /^y$|^yr|^year/i
            }
     */

    constructor : function(config) {
        Ext.apply(this, config);

        if (this.unitsRegex) Ext.apply(this.l10n.unitsRegex, this.unitsRegex);

        if (!this.durationRegex) {
            this.durationRegex = this.allowDecimals ? /^\s*([\-+]?\d+(?:[.,]\d+)?)\s*(\w+)?/i : /^\s*([\-+]?\d+)(?![.,])\s*(\w+)?/i;
        }
    },

    parse : function (value) {
        var match               = this.durationRegex.exec(value);

        if (value == null || !match) return null;

        var durationValue       = this.parseNumberFn(match[ 1 ]);

        var durationUnitName    = match[ 2 ];
        var durationUnit;

        if (durationUnitName) {
            Ext.iterate(this.L('unitsRegex'), function (name, regex) {

                if (regex.test(durationUnitName)) {
                    durationUnit    = Sch.util.Date.getUnitByName(name);

                    return false;
                }
            });

            if (!durationUnit) return null;
        }

        return {
            value   : durationValue,
            unit    : durationUnit
        };
    }
});

/**
 * @class Gnt.util.DependencyParser
 * @private
 * Internal class handling the dependency string parsing related functionality. Used by {@link Gnt.field.Dependency} field.
 */
Ext.define("Gnt.util.DependencyParser", {
    requires                : ['Gnt.util.DurationParser'],

    mixins                  : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:
     - typeText :
         - SS : 'SS'
         - SF : 'SF'
         - FS : 'FS'
         - FF : 'FF'
     */

    separator               : /\s*;\s*/,
    parseNumberFn           : null,
    dependencyRegex         : null,
    types                   : null,

    constructor : function(config) {

        Ext.apply(this, config);

        // fill types array with values
        this.initTypes();

        var typeText    = this.L('typeText');

        for(var i = 0; i < this.types.length; i++) {
            this.types[i]   = (typeText[this.types[i]] || this.types[i]);
        }

        var re = "(-?\\d+)(" + this.types.join('|') + ")?([\\+\\-].*)?";

        this.dependencyRegex = this.dependencyRegex || new RegExp(re, "i");

        this.durationParser = new Gnt.util.DurationParser({ parseNumberFn : this.parseNumberFn });
    },


    initTypes : function () {
        this.types  = this.types || [
            'SS',   // Start-To-Start
            'SF',   // Start-To-Finish
            'FS',   // Finish-To-Start
            'FF'    // Finish-To-Finish
        ];
    },


    /*
     * Returns an object with the following properties (or null if the parsing fails):
            {
                taskId  : 3,    // Int, always present
                type    : "FS", // String, always present
                lag     : 3,    // Int, optional
                lagUnit : 'd'   // String, optional
            }
    **/
    parse : function (value) {
        if (!value) {
            return [];
        }

        var parts   = value.split(this.separator);
        var result  = [];
        var depRe   = this.dependencyRegex;

        for (var i = 0; i < parts.length; i++) {
            var part        = parts[ i ];

            // allow ";" at the end of the string - will lead to empty element
            if (!part && i == parts.length - 1) continue;

            var match       = depRe.exec(part);
            var data        = {};

            if (!match) {
                // Tolerate no sloppy input
                return null;
            }

            data.taskId     = parseInt(match[ 1 ], 10);

            data.type       = Ext.Array.indexOf(this.types, (match[2] || this.types[2]).toUpperCase());
            var lagValue    = match[ 3 ];

            if (lagValue) {
                var lag = this.durationParser.parse(lagValue);

                if (!lag) {
                    // Tolerate no sloppy input
                    return null;
                }

                data.lag        = lag.value;
                data.lagUnit    = lag.unit || 'd';
            }

            result.push(data);
        }

        return result;
    }
});

Ext.define('Gnt.util.Data', {

    requires    : ['Ext.data.Model'],

    singleton   : true,

    // Copies a collection of records performing a copy of each model.
    // Each model in the resulting set keeps a link to its original instance in the originalRecord property.
    // Copied models have their "phantom" property set to false.
    // To apply changes made in the copy to its original data, {@link #applyCloneChanges} can be used.
    //
    // @param {Ext.data.Store/Ext.util.MixedCollection/Ext.data.Model[]} dataSet Collection of records to copy.
    // @param {Function} [fn] The function to be called at each model copying iteration.
    // @param {Ext.data.Model} fn.cloned The newly created copy of the model.
    // @param {Ext.data.Model} fn.original The original model.
    // @param {Mixed} [scope] The scope for fn function call. By default it`s the dataSet.
    // @return {Ext.data.Model[]} Array of cloned records.
    cloneModelSet : function (dataSet, fn, scope) {
        var data = [],
            cloned;

        var process = function (record) {
            // clone the record
            cloned          = record.copy();

            cloned.phantom  = false;
            // keep link to original record
            cloned.originalRecord  = record;

            // if callback is set
            if (fn) {
                if (fn.call(scope || dataSet, cloned, record) === false) return;
            }

            data.push(cloned);
        };

        if (dataSet.each) {
            dataSet.each(process);
        } else {
            Ext.Array.each(dataSet, process);
        }

        return data;
    },

    applyCloneChanges : function (cloneStore, originalStore, fn, scope) {
        var toRemove    = [];

        var autoSyncSuspended = originalStore.autoSyncSuspended;

        // suspend automatic sync calls we will call sync() manually in the end of changes applying
        if (originalStore.autoSync && !autoSyncSuspended) originalStore.suspendAutoSync();

        // first apply deleted records
        var removed = cloneStore.getRemovedRecords();
        for (var i = 0, l = removed.length; i < l; i++) {
            if (removed[i].originalRecord) {
                toRemove.push(removed[i].originalRecord);
            }
        }

        if (toRemove.length) {
            originalStore.remove(toRemove);

            cloneStore.removed.length = 0;
        }

        // let`s get updated & added records
        var modified    = cloneStore.getModifiedRecords(),
            originalRecord, data, added;

        // and loop over them
        for (i = 0, l = modified.length; i < l; i++) {

            // original instance of modified record
            originalRecord  = modified[i].originalRecord;
            // new data
            data            = modified[i].getData();

            delete data[modified[i].idProperty];

            // if it`s modification of existing record
            if (originalRecord) {
                // let`s update it
                originalRecord.beginEdit();
                for (var field in data) {
                    originalRecord.set(field, data[field]);
                }

                // if custom callback specified
                if (fn) {
                    fn.call(scope || modified[i], data, modified[i]);
                }

                originalRecord.endEdit();
            // new record creation
            } else {
                // if custom callback specified
                if (fn) {
                    fn.call(scope || modified[i], data, modified[i]);
                }

                added   = originalStore.add(data);

                // let`s bind our record to effective one
                modified[i].originalRecord = added && added[0];
            }

            modified[i].commit(true);
        }

        // enable autoSync back and call sync to persist changes
        if (originalStore.autoSync && !autoSyncSuspended) {
            originalStore.resumeAutoSync();
            originalStore.sync();
        }

    }

});

/* global Ext */
/**
 * @singleton
 */
Ext.define('Gnt.data.linearizator.CycleResolvers', function(thisClass) {

    /**
     * Doesn't resolve dependency cycle.
     *
     * @method none
     * @member Gnt.data.linearizator.CycleResolvers
     */
    function resolveCycleNone() {
        return false;
    }

    /**
     * Doesn't resolve dependency cycle and throws exception.
     *
     * @method exception
     * @member Gnt.data.linearizator.CycleResolvers
     */
    function resolveCycleByException() {
        Ext.Error.raise("Can't linearize dependent tasks, there's a cycle in the dependency chain!");
    }

    /**
     * Resolve a dependency cycle by cutting (forcefully marking one or more dependencies as resolved ('green')).
     *
     * @method cut
     * @member Gnt.data.linearizator.CycleResolvers
     */
    function resolveCycleByCuttingLinks$(sourceSet, depsData) {
        
        // The code assuming that nodes in source set form strict upward vertical hierarchy i.e. there can't be child
        // nodes missing parents but the opposite (downward) might be possible, i.e. it is possible forparent node to
        // miss children in the source set, as well as horizontal hierarchy might be lax, i.e. there might be nodes
        // whose siblings are not present the source set.

        var sourceTree = buildSourceTreeFromSourceSet(sourceSet, depsData),
            cuts = {},
            cutsCollector = function(from, to) {
                var d = cuts[from] || (cuts[from] = {});
                d[to] = to;
            };
 
        // Folding order is the following:
        //   A
        // +-+-+
        // B C D
        //
        // B - skipped
        // C - folded with B
        // D - folded with C and then folded with A
        traverseSourceTreePostOrder(sourceTree, function foldNode$(node) {

            // First we fold a node with it's previous sibling if one exists
            if (node.prevSibling) {
                collectCycles(node.prevSibling.foldedDeps, node.foldedDeps, cutsCollector);
                node.foldedDeps = Ext.apply(node.foldedDeps, node.prevSibling.foldedDeps);
            }

            // Next if a node is the last sibling in a parent node then we fold it with parent node
            if (!node.nextSibling && node.parentNode) {
                collectCycles(node.parentNode.foldedDeps, node.foldedDeps, cutsCollector);
                node.parentNode.foldedDepds = Ext.apply(node.parentNode.foldedDeps, node.foldedDeps);
            }

        });

        cutCycles$(depsData.fromById, cuts);

        return true;
    }

    // --- Private functions --------------------------------------------------------------------------------------- //
    // Source set represents a set of colored nodes, which might or might not have vertical links among themselves
    // regardles of that fact we have to build a traversable tree from that linear data structure, so if a task
    // from colored node has some siblings which are not in the sources set then those siblings shouldn't be present
    // in resulting tree, same goes for children and parent nodes. Due to this node skipping we might end with several
    // nodes having no parent nodes, such nodes will be then joined together under common pseudo root node.
    function buildSourceTreeFromSourceSet(sourceSet, depsData) {
        var root,
            roots = [],
            nodes = {},
            internalId, node;

        // In this loop we transform each colored node from a source set into a tree node (an object we use
        // to represent a tree node), and collecting each transformed node for furher realization as well as each
        // root node, i.e. nodes whose parents are not in the source set, for further processing.
        for (internalId in sourceSet) {
            if (sourceSet.hasOwnProperty(internalId)) {
                node = nodes[internalId] = createRawSourceTreeNode(sourceSet[internalId].task, sourceSet, depsData);
                if (!sourceSet.hasOwnProperty(node.parentNode)) {
                    roots.push(node);
                }
            }
        }

        // In this loop we relize collected tree nodes to point to other tree nodes instead of ids.
        for (internalId in nodes) {
            if (nodes.hasOwnProperty(internalId)) {
                nodes[internalId] = realizeRawSourceTreeNode$(nodes[internalId], nodes);
            }
        }

        if (roots.length == 1) {
            root = roots[0];
        }
        else {
            // The data structure is the same createRawSourceTreeNode() returns
            root = {
                parentNode  : null,
                prevSibling : null,
                nextSibling : null,
                children    : roots,
                foldedDeps  : {}
            };
        }

        return root;
    }


    function createRawSourceTreeNode(storeNode, sourceSet, depsData) {
        var fromDeps         = depsData.fromById,
            foldedDeps       = {},
            internalId       = storeNode.internalId,
            parentNode, nextSibling, prevSibling,
            children, childInternalId, childrenInternalIds,
            i, len;

        // We count outgoing horizontal (i.e. successors)  dependencies only, this is ok, since if we would count
        // both successors and predecessors then each successor - predecessor pair will create a direct loop
        foldedDeps[internalId] = Ext.clone(fromDeps[internalId] || {});

        // Vertical upward hierarchy might be either present or not, if it's present then it's present up to root
        parentNode = storeNode.parentNode && sourceSet.hasOwnProperty(storeNode.parentNode.internalId) && storeNode.parentNode.internalId;

        // Vertical downward hierarchy might be lax
        children = storeNode.childNodes || [];
        childrenInternalIds = [];

        for (i = 0, len = children.length; i < len; i++) {
            childInternalId = children[i].internalId;
            if (sourceSet.hasOwnProperty(childInternalId)) {
                childrenInternalIds.push(childInternalId);
            }
        }

        // Horizontal hierarchy might be lax.
        prevSibling = storeNode.previousSibling;
        while (prevSibling && !sourceSet.hasOwnProperty(prevSibling.internalId)) {
            prevSibling = prevSibling.previousSibling;
        }
        prevSibling = prevSibling && prevSibling.internalId;

        nextSibling = storeNode.nextSibling;
        while (nextSibling && !sourceSet.hasOwnProperty(nextSibling.internalId)) {
            nextSibling = nextSibling.nextSibling;
        }
        nextSibling = nextSibling && nextSibling.internalId;

        // That'll be our source node
        // now it references related nodes by ids.
        // Each original node which is referenced by a task but not present in source set has been skipped
        // The resulting data structure will be further realized to reference other tree nodes instead of ids.
        return {
            parentNode  : parentNode, 
            prevSibling : prevSibling, 
            nextSibling : nextSibling,
            children    : childrenInternalIds,
            foldedDeps  : foldedDeps
        };
    }


    function realizeRawSourceTreeNode$(node, nodes) {
        var i, len,
            children = node.children;

        for (i = 0, len = children.length; i < len; i++) {
            children[i] = nodes[children[i]];
        }

        node.parentNode  = (node.parentNode  || node.parentNode === 0)   && nodes[node.parentNode]  || null;
        node.prevSibling = (node.prevSibling || node.prevSibling === 0)  && nodes[node.prevSibling] || null;
        node.nextSibling = (node.nextSibling || node.nextSibling === 0)  && nodes[node.nextSibling] || null;  

        return node;
    }


    function traverseSourceTreePostOrder(branchRoot, stepFn) {
        var children = branchRoot.children,
            i, len;

        for (i = 0, len = children.length; i < len; i++) {
            traverseSourceTreePostOrder(children[i], stepFn);
        }

        stepFn(branchRoot);

        return branchRoot;
    }


    function collectCycles(sourceNodeDeps, destNodeDeps, cycleDepsCollectorFn) {
        var sourceFrom, sourceTo,
            destFrom, destTo,
            intersectSourceToDestFrom, weightFromSourceToDest,
            intersectDestToSourceFrom, weightFromDestToSource,
            fromId, toId;

        sourceFrom = Ext.Object.getKeys(sourceNodeDeps);
        destFrom   = Ext.Object.getKeys(destNodeDeps);

        sourceTo   = Ext.Array.flatten(
                        Ext.Array.map(sourceFrom, function(id) {
                            return Ext.Object.getKeys(sourceNodeDeps[id]);
                        })
                     );

        destTo     = Ext.Array.flatten(
                        Ext.Array.map(destFrom, function(id) {
                            return Ext.Object.getKeys(destNodeDeps[id]);
                        })
                     );
        
        intersectSourceToDestFrom = Ext.Array.intersect(sourceTo, destFrom);
        intersectDestToSourceFrom = Ext.Array.intersect(destTo, sourceFrom);

        // Detecting cut
        if (intersectSourceToDestFrom.length > 0 && intersectDestToSourceFrom.length > 0) {
            // Detecting minimal cut
            weightFromSourceToDest = 0;
            Ext.Array.forEach(intersectSourceToDestFrom, function(id) {
                for (var i = 0, len = sourceTo.length; i < len; i++) {
                    sourceTo[i] == id && ++weightFromSourceToDest;
                }
            });
            weightFromDestToSource = 0;
            Ext.Array.forEach(intersectDestToSourceFrom, function(id) {
                for (var i = 0, len = destTo.length; i < len; i++) {
                    destTo[i] == id && ++weightFromDestToSource;
                }
            });

            // Collecting minimal cut
            if (weightFromSourceToDest < weightFromDestToSource) {
                Ext.Array.forEach(intersectSourceToDestFrom, function(id) {
                    collectAllDepsTo(sourceNodeDeps, id, cycleDepsCollectorFn);
                });
            }
            else {
                Ext.Array.forEach(intersectDestToSourceFrom, function(id) {
                    collectAllDepsTo(destNodeDeps, id, cycleDepsCollectorFn);
                });
            }
        } 
    }

    function collectAllDepsTo(fromDeps, toId, depsCollectorFn) {
        var fromId;

        for (fromId in fromDeps) {
            if (fromDeps.hasOwnProperty(fromId) && fromDeps[fromId].hasOwnProperty(toId)) {
                depsCollectorFn(fromId, toId);
            }
        }
    }

    function cutCycles$(fromDeps, cuts) {
        var fromId, toId,
            toIdMap, i, len;

        for (fromId in cuts) {
            if (cuts.hasOwnProperty(fromId)) {
                toIdMap = cuts[fromId];
                for (toId in toIdMap) {
                    if (toIdMap.hasOwnProperty(toId)) {
                        fromDeps[fromId][toId][0] = 'green';
                    }
                }
            }
        }

        return fromDeps;
    }

    // --- Public interface ---------------------------------------------------------------------------------------- //
    return {
        singleton   : true,

        'none'      : resolveCycleNone, 
        'exception' : resolveCycleByException,
        'cut'       : resolveCycleByCuttingLinks$
    };
});

Ext.define('Gnt.data.Linearizator', function(thisClass) {

    var walkingSpecificationsCache = {};

    // {{{ linearWalkBySpecification
    /**
     * Linearly walks source task list and it's members dependent tasks in dependency resolution order.
     *
     * @param {Gnt.model.Task|[Gnt.model.Task]} sourceTasksList
     *  Walking source points
     * @param {Function}       processorFn
     *  Function to call at each walking step
     * @param {Gnt.model.Task} processorFn.task
     *  A task which dependencies a considered to be resolved at the step
     * @param {String}         processorFn.color
     *  Task dependencies resolution state, might be either **'green'** or **'yellow'**. Leaf tasks might be visited
     *  with **'green'** color only, but parent tasks will be visited twice, first with **'yellow'** color and then,
     *  after visiting all node's **'green'** children, the node will be visited again but with **'green'** color.
     *  Parent node **'yellow'** dependencies resolution state means that all it's horizontal dependencies, i.e.
     *  dependencies from node's predecessors, has been visited (and probably processed somehow during the visit),
     *  **'green'** (for any node) means that all node's dependencies, both horizontal and vertical has been visitied
     *  (and processed).
     * @param {Object}         processor.sourceSet
     *  Set of all tasks involved into the walking alongside with their dependency resolution state color.
     * @param {Gnt.model.Task} processor.sourceSet.task
     *  Step task
     * @param {String}         processor.sourceSet.color
     *  Step color
     * @param {Object}         processor.depsMap
     *  **Private**. Dependecies map, this parameter is currently considered to be private.
     * @param {Object}         walkingSpec
     *  Walking specification, contains information describing how to walk and process task dependencies
     * @param {Boolean}        walkingSpec.self
     *  Whether to include tasks from source tasks list into a walking sequence
     * @param {Boolean}        walkingSpec.ancestors
     *  Whether to include tasks' ancestors into a walking sequence
     * @param {Boolean}        walkingSpec.descendants
     *  Whether to include tasks' descendants into a walking sequence
     * @param {Boolean}        walkingSpec.successors
     *  Whether to include tasks's successors into a walking sequece
     * @param {String}         walkingSpec.cycles
     *  Cycles resolution strategy. See {@link Gnt.data.linearizator.CycleResolvers} public method for possible values.
     *
     * @member Gnt.data.Linearizator
     * @method linearWalkBySpecification
     */
    function linearWalkBySpecification(sourceTasksList, processorFn, walkingSpec) {

        walkingSpec = resolveWalkingSpecification(walkingSpec);

        return linearWalk(
            [].concat(sourceTasksList),
            processorFn,
            walkingSpec.tasksDepsCollectingFn,
            walkingSpec.cycleSolverFn
        );
    }
    // }}}

    // {{{ linearWalk
    function linearWalk(sourceTasksList, processorFn, tasksDepsCollectingFn, cycleSolverFn) {
        var done = false,
            hadCycle = true,
            tasksColorMap$, depsColorMap$,
            taskId, task, color;

        tasksColorMap$ = createEmptyTasksColorMap();
        depsColorMap$  = createEmptyDepsColorMap();

        collectTasksAndDepsIntoColorMaps$(sourceTasksList, tasksDepsCollectingFn, tasksColorMap$, depsColorMap$);

        while (hadCycle) {

            done = false;

            while (!done) {
                done        = true;
                hadCycle    = false;

                for (taskId in tasksColorMap$) {
                    if (tasksColorMap$.hasOwnProperty(taskId) && tasksColorMap$[ taskId ].color != 'green') {

                        task  = tasksColorMap$[ taskId ].task;
                        color = calculateTaskColor(task, depsColorMap$);

                        if (color != 'red') {
                            setCalculatedTaskColor$(color, task, tasksColorMap$, depsColorMap$);
                            processorFn(task, color, tasksColorMap$, depsColorMap$);
                            done        = false;
                        } else {
                            hadCycle    = true;
                        }
                    }
                }
            }

            if (hadCycle) {
                hadCycle = cycleSolverFn && cycleSolverFn(tasksColorMap$, depsColorMap$);
            }
        }
    }
    // }}}

    // {{{ resolveWalkingSpecification
    function resolveWalkingSpecification(spec) {
        var walkingSpecificationKey = getWalkingSpecificationKey(spec),
            cycleSolverFn,
            tasksDepsCollectingFn,
            result;

        result = walkingSpecificationsCache[walkingSpecificationKey];

        if (!result) {

            cycleSolverFn = Gnt.data.linearizator.CycleResolvers[spec.cycles || 'none'];


            tasksDepsCollectingFn = [];
            spec.self            && (tasksDepsCollectingFn.push(selfTasksDepsCollector$));
            spec.ancestors       && (tasksDepsCollectingFn.push(ancestorsTasksDepsCollector$));
            spec.descendants     && (tasksDepsCollectingFn.push(descendantsTasksDepsCollector$));
            spec.successors      && (tasksDepsCollectingFn.push(successorsTasksDepsCollector$));
            tasksDepsCollectingFn = composeTasksDepsCollectors(tasksDepsCollectingFn);

            result = {
                tasksDepsCollectingFn : tasksDepsCollectingFn,
                cycleSolverFn         : cycleSolverFn
            };

            walkingSpecificationsCache[walkingSpecificationKey] = result;
        }

        return result;
    }
    // }}}

    // {{{ getWalkingSpecificationKey
    function getWalkingSpecificationKey(spec) {
        var result = [],
            prop;

        for (prop in spec) {
            if (spec.hasOwnProperty(prop)) {
                result.push(prop, '=', String(spec[prop]));
            }
        }

        return result.join(';');
    }
    // }}}

    // {{{ composeTasksDepsCollectors
    function composeTasksDepsCollectors(collectors) {
        return function(task, tasksColorMap$, depsColorMap$) {
            var collectedTasks = [];

            Ext.Array.forEach(collectors, function(collectorFn) {
                collectedTasks = collectedTasks.concat(collectorFn(task, tasksColorMap$, depsColorMap$));
            });

            return collectedTasks;
        };
    }
    // }}}

    // {{{ collectTasksAndDepsIntoColorMaps$
    function collectTasksAndDepsIntoColorMaps$(tasksList, stepTasksDepsCollectorFn$, tasksMap$, depsMap$) {

        Ext.Array.forEach(tasksList, function(task) {

            var collectedTasks = stepTasksDepsCollectorFn$(task, tasksMap$, depsMap$);

            if (collectedTasks.length > 0) {
                collectTasksAndDepsIntoColorMaps$(collectedTasks, stepTasksDepsCollectorFn$, tasksMap$, depsMap$);
            }
        });
    }
    // }}}

    // {{{ selfTasksDepsCollector$
    function selfTasksDepsCollector$(task, tasksColorMap$, depsColorMap$) {
        var collectedTasks = [],
            taskId         = task.internalId;

        if (!tasksColorMap$.hasOwnProperty(taskId)) {
            // Collecting task
            tasksColorMap$[ taskId ] = {
                task  : task,
                color : 'red'
            };
            collectedTasks = [ task ];
        }

        return collectedTasks;
    }
    // }}}

    // {{{ ancestorsTasksDepsCollector$
    function ancestorsTasksDepsCollector$(task, tasksColorMap$, depsColorMap$) {
        var collectedTasks  = [],
            downFromByIdMap = depsColorMap$.downFromById,
            downToByIdMap   = depsColorMap$.downToById,
            upFromByIdMap   = depsColorMap$.upFromById,
            upToByIdMap     = depsColorMap$.upToById,
            taskId          = task.internalId,
            parentTask      = task.parentNode,
            parentId        = parentTask && parentTask.internalId,
            downColor, upColor;

        // Collecting task
        if (parentTask && !tasksColorMap$.hasOwnProperty(parentId)) {

            tasksColorMap$[ parentId ] = {
                task  : parentTask,
                color : 'red'
            };

            collectedTasks.push(parentTask);
        }

        // Collecting dependencies
        // NOTE: if a task is collected it doesn't mean all it's directional dependencies are collected
        if (parentTask) {
            downColor = [ 'red' ];
            upColor   = [ 'red' ];

            !downFromByIdMap[ parentId ]           && (downFromByIdMap[ parentId ]            = {});
            !downFromByIdMap[ parentId ][ taskId ] && (downFromByIdMap[ parentId ][ taskId ]  = downColor);
            !downToByIdMap[ taskId ]               && (downToByIdMap[ taskId ]                = downColor);

            !upToByIdMap[ parentId ]               && (upToByIdMap[ parentId ]                = {});
            !upToByIdMap[ parentId ][ taskId ]     && (upToByIdMap[ parentId ][ taskId ]      = upColor);
            !upFromByIdMap[ taskId ]               && (upFromByIdMap[ taskId ]                = upColor);
        }

        return collectedTasks;
    }
    // }}}

    // {{{ descendantsTasksDepsCollector$
    function descendantsTasksDepsCollector$(task, tasksColorMap$, depsColorMap$) {
        var collectedTasks  = [],
            downFromByIdMap = depsColorMap$.downFromById,
            downToByIdMap   = depsColorMap$.downToById,
            upFromByIdMap   = depsColorMap$.upFromById,
            upToByIdMap     = depsColorMap$.upToById,
            children        = !task.isRoot() && task.childNodes,
            taskId          = task.internalId;

        children && Ext.Array.forEach(children, function(childTask) {

            var childId = childTask.internalId,
                downColor,
                upColor;

            // Collecting tasks
            if (!tasksColorMap$.hasOwnProperty(childId)) {

                tasksColorMap$[ childId ] = {
                    task  : childTask,
                    color : 'red'
                };

                collectedTasks.push(childTask);
            }

            // Collecting dependencies
            // NOTE: if a task is collected it doesn't mean all it's directional dependencies are collected
            downColor = [ 'red' ];
            upColor   = [ 'red' ];

            !downFromByIdMap[ taskId ]            && (downFromByIdMap[ taskId ]            = {});
            !downFromByIdMap[ taskId ][ childId ] && (downFromByIdMap[ taskId ][ childId ] = downColor);
            !downToByIdMap[ childId ]             && (downToByIdMap[ childId ]             = downColor);

            !upToByIdMap[ taskId ]                && (upToByIdMap[ taskId ]                = {});
            !upToByIdMap[ taskId ][ childId ]     && (upToByIdMap[ taskId ][ childId ]     = upColor);
            !upFromByIdMap[ childId ]             && (upFromByIdMap[ childId ]             = upColor);
        });

        return collectedTasks;
    }
    // }}}

    // {{{ successorsTasksDepsCollector$
    function successorsTasksDepsCollector$(task, tasksColorMap$, depsColorMap$) {
        var collectedTasks = [],
            fromByIdMap    = depsColorMap$.fromById,
            toByIdMap      = depsColorMap$.toById,
            successors     = task.getSuccessors(),
            taskId         = task.internalId;

        Ext.Array.forEach(successors, function(successorTask) {

            var successorId = successorTask.internalId,
                color;

            // Collecting tasks
            if (!tasksColorMap$.hasOwnProperty(successorId)) {

                tasksColorMap$[ successorId ] = {
                    task  : successorTask,
                    color : 'red'
                };

                collectedTasks.push(successorTask);
            }

            // Collecting dependencies
            // NOTE: if a task is collected it doesn't mean all it's directional dependencies are collected
            color = [ 'red' ];

            !fromByIdMap[ taskId ]                && (fromByIdMap[ taskId ] = {});
            !fromByIdMap[ taskId ][ successorId ] && (fromByIdMap[ taskId ][ successorId ] = color);

            !toByIdMap[ successorId ]             && (toByIdMap[ successorId ] = {});
            !toByIdMap[ successorId ][ taskId ]   && (toByIdMap[ successorId ][ taskId ] = color);
        });

        return collectedTasks;
    }
    // }}}

    // {{{ createEmptyTasksColorMap
    function createEmptyTasksColorMap() {
        return {};
    }
    // }}}

    // {{{ createEmptyDepsColorMap
    function createEmptyDepsColorMap() {
        return {
            // Horizontal successor dependencies from a task
            // {
            //     taskId : {
            //         successorTaskId : [dependency color]
            //         ...
            //     }
            //     ...
            //     1 : {
            //         2 : ['red'] // the array instance is shared with toById
            //     }
            // }
            fromById      : {},

            // Horizontal predecessor dependencies to a task
            // {
            //     taskId : {
            //         predecessorTaskId : [dependency color]
            //         ...
            //     }
            //     ...
            //     2 : {
            //         1 : ['red'] // the array instance is shared with fromById
            //     }
            // }
            toById        : {},

            // Vertical (virtual) downward dependencies from a parent task to a children tasks
            // {
            //     parentTaskId : {
            //         childTaskId : [dependency color] // the array instance is shared with downToById
            //         ...
            //     }
            //     ...
            // }
            downFromById  : {},

            // Vertical (virtual) downward dependency to a child task from a parent task
            // {
            //    childTaskId : [dependency color] // the array instance is shared with downFromById
            //    ...
            // }
            // The other participant is uniquely identified by child task parent node
            downToById    : {},

            // Vertical (virtual) upward dependencies from a child task to a parent task
            // {
            //    childTaskId : [dependency color] // the array instance is shared with upToById
            //    ...
            // }
            // The other participant is uniquely identified by child task parent node
            upFromById    : {},

            // Vertical (virtual) upward dependencies to a parent task from a child task
            // {
            //    parentTaskId : {
            //        childTaskId : [dependency color] // the array instance is shared with upFromById
            //        ...
            //    }
            //    ...
            // }
            upToById      : {}
        };
    }
    // }}}

    // {{{ hasRedDepsTo
    function hasRedDepsTo(task, depsMap) {
        var toByIdMap = depsMap.toById[ task.internalId ],
            result    = false,
            i;

        for (i in toByIdMap) {
            if (toByIdMap.hasOwnProperty(i) && toByIdMap[ i ] && toByIdMap[ i ][ 0 ] == 'red') {
                result = true;
                break;
            }
        }

        return result;
    }
    // }}}

    // {{{ hasRedDepsFrom
    function hasRedDepsFrom(task, depsMap) {
        var fromByIdMap = depsMap.fromById[ task.internalId ],
            result      = false,
            i;

        for (i in fromByIdMap) {
            if (fromByIdMap.hasOwnProperty(i) && fromByIdMap[ i ] && fromByIdMap[ i ][ 0 ] == 'red') {
               result = true;
               break;
            }
        }

        return result;
    }
    // }}}

    // {{{ hasRedDepsDownTo
    function hasRedDepsDownTo(task, depsMap) {
        var downToByIdMap = depsMap.downToById,
            internalId    = task.internalId;

        return downToByIdMap[ internalId ] && downToByIdMap[ internalId ][0] == 'red';
    }
    // }}}

    // {{{ hasRedDepsDownFrom
    function hasRedDepsDownFrom(task, depsMap) {
        var downFromByIdMap = depsMap.downFromById[ task.internalId ],
            result          = false,
            i;

        for (i in downFromByIdMap) {
            if (downFromByIdMap.hasOwnProperty(i) && downFromByIdMap[ i ] && downFromByIdMap[ i ][ 0 ] == 'red') {
                result = true;
                break;
            }
        }

        return result;
    }
    // }}}

    // {{{ hasRedDepsUpTo
    function hasRedDepsUpTo(task, depsMap) {
        var upToByIdMap = depsMap.upToById[ task.internalId ],
            result      = false,
            i;

        for (i in upToByIdMap) {
            if (upToByIdMap.hasOwnProperty(i) && upToByIdMap[ i ] && upToByIdMap[ i ][ 0 ] == 'red') {
                result = true;
                break;
            }
        }

        return result;
    }
    // }}}

    // {{{ hasRedDepsUpFrom
    function hasRedDepsUpFrom(task, depsMap) {
        var internalId  = task.internalId,
            upToByIdMap = depsMap.upToById;

        return upToByIdMap[ internalId ] && upToByIdMap[ internalId ][ 0 ] == 'red';
    }
    // }}}

    // {{{ calculateTaskColor
    function calculateTaskColor(task, depsMap) {
        var color = 'red';

        if (!hasRedDepsTo(task, depsMap) && !hasRedDepsDownTo(task, depsMap) && !hasRedDepsUpTo(task, depsMap)) {
            color = 'green';
        }
        else if (!hasRedDepsTo(task, depsMap) && !hasRedDepsDownTo(task, depsMap) && hasRedDepsDownFrom(task, depsMap)) {
            color = 'yellow';
        }
        else {
            color = 'red';
        }

        return color;
    }
    // }}}

    // {{{ setCalculatedTaskColor$
    function setCalculatedTaskColor$(color, task, tasksColorMap$, depsColorMap$) {

        var taskId          = task.internalId,
            fromByIdMap     = depsColorMap$.fromById[ taskId ],
            downFromByIdMap = depsColorMap$.downFromById[ taskId ],
            upFromByIdMap   = depsColorMap$.upFromById[ taskId ],
            i;

        tasksColorMap$[ taskId ].color   = color;

        if (color == 'green') {

            if (fromByIdMap) {
                for (i in fromByIdMap) {
                    if (fromByIdMap.hasOwnProperty(i)) {
                        fromByIdMap[ i ][ 0 ] = color;
                    }
                }
            }

            if (downFromByIdMap) {
                for (i in downFromByIdMap) {
                    if (downFromByIdMap.hasOwnProperty(i)) {
                        downFromByIdMap[ i ][ 0 ] = color;
                    }
                }
            }

            if (upFromByIdMap) {
                upFromByIdMap[ 0 ] = color;
            }
        }
        else if (color == 'yellow') {

            if (downFromByIdMap) {
                for (i in downFromByIdMap) {
                    if (downFromByIdMap.hasOwnProperty(i)) {
                        downFromByIdMap[ i ][ 0 ] = color;
                    }
                }
            }
        }
        // else red and do nothing
    }
    // }}}

    // {{{ Class descriptor
    return {
        // Class behaviour
        singleton       : true,
        requires        : [
            'Gnt.data.linearizator.CycleResolvers'
        ],
        // Public interface
        linearWalkBySpecification : linearWalkBySpecification
    };
    // }}}
});

/**
 * @class   Gnt.widget.ConstraintResolutionForm
 * @extend  Ext.form.Panel
 */
Ext.define("Gnt.widget.ConstraintResolutionForm", {
    extend : "Ext.form.Panel",

    requires : [
        'Ext.form.RadioGroup',
        'Ext.form.field.Display'
    ],

    mixins : ["Gnt.mixin.Localizable"],

    alias  : 'widget.constraintresolutionform',

    /**
     * @cfg {Object} l10n Object containing localication strings
     * An object, purposed for the class localization. Contains the following keys/values:

            - "Constraint violation" : "Constraint violation"
            - dateFormat           : "m/d/Y",
            - "OK"                 : 'OK',
            - "Cancel"             : 'Cancel',
            - "Resolution options" : "Resolution options",
            - "Don't ask again"    : "Don't ask again",
            - "Task {0} violates constraint {1}"     : "Task {0} violates constraint {1}",
            - "Task {0} violates constraint {1} {2}" : "Task {0} violates constraint {1} {2}"
     */

    legacyMode : false, // That's for localizable mixin

    config : {
        /**
         * @cfg {Object} resolutionContext Object containing a set of possible resolutions provided by {@link Gnt.constraint.Base#getResolution()}.
         */
        resolutionContext : null,
        /**
         * @cfg {String} [dateFormat=null] Date format string to use in vialotion description string. If none is given then 
         * the one from {@link #l10n} will be used otherwise {@link Ext.Date#defaultFormat}.
         */
        dateFormat : null
    },

    bodyPadding : 5,
    autoScroll  : true,

    constructor : function(config) {
        var me = this;

        if (Ext.Version.compare(Ext.versions.extjs, '5.0.0') == -1) {
            me.initConfig(config);
        }

        me.callParent([config]);
    },

    initComponent : function() {
        var me = this;


        me.setupItemsFromResolutionContext(me.resolutionContext);
        me.setupFooterFromResolutionContext(me.resolutionContext);

        me.callParent(arguments);
    },

    setupItemsFromResolutionContext : function(resolutionContext) {
        var me = this,
            resolutions = [];


        Ext.Array.each(resolutionContext.resolutions, function(r, index) {
            resolutions.push({
                xtype                 : 'radio',
                boxLabel              : me.getResolutionOptionDescription(r.title, resolutionContext),
                name                  : 'resolutionOption',
                checked               : r === resolutionContext.getCancelActionOption(),
                inputValue            : index,
                tabIndex              : index
            });
        });

        me.items = [{
            xtype      : 'displayfield',
            itemId     : 'description',
            value      : me.getConstraintViolationDescription(resolutionContext),
            anchor     : "-0"
        }, {
            xtype      : 'radiogroup',
            itemId     : 'options',
            columns    : 1,
            title      : me.L("Resolution options"),
            allowBlank : false,
            items      : resolutions,
            anchor     : "-0"
        }];
    },

    setupFooterFromResolutionContext : function(resolutionContext) {
        var me = this;


        me.fbar = {
            itemId : 'footer-tb',
            items  : [{
                xtype    : 'checkbox',
                itemId   : 'dont-ask-cb',
                boxLabel : me.L("Don't ask again"),
                tabIndex : resolutionContext.resolutions.length + 1
            }, '->', {
                text     : me.L("OK"),
                itemId   : 'ok-btn',
                formBind : true,
                tabIndex : resolutionContext.resolutions.length + 2,
                handler  : me.onUserActionOk,
                scope    : me
            }, {
                text     : me.L("Cancel"),
                itemId   : 'cancel-btn',
                tabIndex : resolutionContext.resolutions.length + 3,
                handler  : me.onUserActionCancel,
                scope    : me
            }]
        };
    },

    getDontAskValue : function() {
        var me = this;
        return me.down('#dont-ask-cb').getValue();
    },

    getConstraintViolationDescription : function(resolutionContext) {
        var me = this,
            constraintTitle,
            constraintDate,
            constraintClass,
            task, taskName, 
            dateFormat;


        constraintTitle = resolutionContext.title;
        task            = resolutionContext.task;
        taskName        = task.getName() || '';
        constraintClass = task.getConstraintClass();
        dateFormat      = me.dateFormat || me.L("dateFormat") || Ext.Date.defaultFormat;
        constraintDate  = constraintClass && constraintClass.getDisplayableConstraintDateForFormat(resolutionContext.date, dateFormat, task) || resolutionContext.date;

        return constraintDate ?
                   Ext.String.format(
                       me.L("Task {0} violates constraint {1} {2}"),
                       taskName, constraintTitle, Ext.Date.format(constraintDate, dateFormat)
                   )
                       :
                   Ext.String.format(
                       me.L("Task {0} violates constraint {1}"),
                       taskName, constraintTitle
                   );
    },

    getResolutionOptionDescription : function(rawDescription, resolutionContext) {
        var me = this,
            task,
            constraintDate,
            constraintClass,
            dateFormat;


        task            = resolutionContext.task;
        constraintClass = task.getConstraintClass();
        dateFormat      = me.dateFormat || me.L("dateFormat") || Ext.Date.defaultFormat;
        constraintDate  = constraintClass && constraintClass.getDisplayableConstraintDateForFormat(resolutionContext.date, dateFormat, task) || resolutionContext.date;

        return constraintDate ?
                   Ext.String.format(
                       rawDescription,
                       Ext.Date.format(constraintDate, dateFormat)
                   )
                       :
                   Ext.String.format(
                       rawDescription,
                       ''
                   );
    },

    onUserActionOk : function(btn) {
        var me = this,
            result;

        result = me.getValues();

        result.dontAsk = me.getDontAskValue();

        me.fireEvent('ok', me, result);
    },

    onUserActionCancel : function(btn) {
        var me = this;
        me.fireEvent('cancel', me);
    },

    getOptimalHeight : function(width) {
        var me = this,
            originalPos, originalWidth,
            radioGroup, radioGroupOffsets,
            optimalHeight,
            footerBar;

        if (width) {
            originalPos   = me.getXY();
            originalWidth = me.getWidth();
            me.setXY([-10000, -10000]);
            me.setWidth(width);
        }

        radioGroup        = me.getComponent('options');
        radioGroupOffsets = radioGroup.getEl().getOffsetsTo(me.body);
        footerBar         = me.getDockedComponent('footer-tb');
        optimalHeight     = radioGroupOffsets[1] + Ext.getDom(radioGroup.getEl()).scrollHeight + 2 * me.bodyPadding + footerBar.getHeight() + 10 /* scroll safety */;

        if (width) {
            me.setWidth(originalWidth);
            me.setXY(originalPos);
        }

        return optimalHeight;
    }
});

/**
 * @class   Gnt.widget.ConstraintResolutionWindow
 * @extends Ext.window.Window
 */
Ext.define("Gnt.widget.ConstraintResolutionWindow", {
    extend   : "Ext.window.Window",
    alias    : "widget.constraintresolutionwindow",
    requires : ["Gnt.widget.ConstraintResolutionForm"],
    mixins   : ["Gnt.mixin.Localizable"],

    modal       : true,
    closable    : true,
    resizable   : true,
    collapsible : false,
    border      : false,
    bodyBorder  : false,

    /**
     * @cfg {Object} l10n Object containing localication strings
     * An object, purposed for the class localization. Contains the following keys/values:

            - "Constraint violation" : "Constraint violation"
     */

    config : {
        /**
         * @cfg {Object} resolutionContext Object containing a set of possible resolutions provided by {@link Gnt.constraint.Base#getResolution()}.
         */
        resolutionContext : null,
        /**
         * @cfg {String} dateFormat
         *
         * Date format to pass to {@link Gnt.widget.ConstraintResolutionForm}
         */
        dateFormat : null
    },

    form : null,

    constructor : function(config) {
        var me = this;

        if (Ext.Version.compare(Ext.versions.extjs, '5.0.0') == -1) {
            me.initConfig(config);
        }

        me.callParent([config]);
    },

    initComponent : function() {
        var me = this;

        me.title = me.L("Constraint violation");
        me.setupItems();

        me.height = Math.round(Ext.dom.Element.getViewportHeight() / 3);
        me.width  = Math.round(Ext.dom.Element.getViewportWidth() / 4);

        me.callParent(arguments);

        me.on('afterlayout', me.onAfterOptimalLayout, me, {single : true });
    },

    setupItems : function() {
        var me = this;

        me.layout = 'fit';

        me.form = new Gnt.widget.ConstraintResolutionForm({
            margin              : '0 0 3 0',
            resolutionContext   : me.getResolutionContext(),
            dateFormat          : me.getDateFormat(),
            bubbleEvents        : ['ok', 'cancel']
        });

        me.items = me.form;
    },

    onAfterOptimalLayout : function() {
        var me = this,
            originalHeight,
            originalFormHeight,
            formOptimalHeight,
            optimalHeight;

        originalHeight     = me.getHeight();
        originalFormHeight = me.form.getHeight();
        formOptimalHeight  = me.form.getOptimalHeight();
        optimalHeight      = formOptimalHeight + originalHeight - originalFormHeight;

        originalHeight != optimalHeight && me.setHeight(optimalHeight);
    }
});

/**
 * @class   Gnt.plugin.ConstraintResolutionGui
 * @extends Ext.AbstractPlugin
 */
Ext.define("Gnt.plugin.ConstraintResolutionGui", {
    extend   : "Ext.AbstractPlugin",
    alias    : "plugin.constraintresolutiongui",
    requires : ["Gnt.widget.ConstraintResolutionWindow"],

    config : {
        /**
         * @cfg {String} dateFormat
         *
         * Date format to pass to {@link Gnt.widget.ConstraintResolutionWindow}
         */
        dateFormat : null
    },

    cmpDetacher         : null,
    storeDetacher       : null,
    storedResolutions   : null,

    constructor : function(config) {
        var me = this;

        if (Ext.Version.compare(Ext.versions.extjs, '5.0.0') == -1) {
            me.initConfig(config);
        }

        me.callParent([config]);
    },

    init : function(cmp) {
        var me = this;

        me.callParent(arguments);

        if (!me.disabled) {
            me.enable();
        }
    },

    enable : function() {
        var me = this,
            cmp = me.getCmp();

        me.callParent();

        // This is a GUI class, let's wait for the Gantt view to render first
        if (cmp.rendered) {
            me.attachToTaskStore();
        }
        else {
            me.cmpDetacher = cmp.on('afterrender', function() {
                me.attachToTaskStore();
            }, null, { destroyable : true, single : true });
        }
    },

    disable : function() {
        var me = this,
            cmp = me.getCmp();

        me.callParent();

        if (cmp.rendered) {
            me.detachFromTaskStore();
        }
        else {
            me.cmpDetacher && Ext.destroy(me.cmpDetacher);
            me.cmpDetacher = null;
        }
    },

    attachToTaskStore : function() {
        var me = this,
            cmp, store;

        if (!me.storeDetacher) {
            cmp   = me.getCmp();
            store = cmp.getTaskStore();
            me.storeDetacher = cmp.mon(store, 'constraintconflict', me.onConstraintConflict, me, { destroyable : true });
        }
    },

    detachFromTaskStore : function() {
        var me = this;
        me.storeDetacher && Ext.destroy(me.storeDetacher);
        me.storeDetacher = null;
    },

    onConstraintConflict : function(task, resolutionContext) {
        var me         = this,
            ganttPanel = me.getCmp(),
            lockedView = ganttPanel.lockedGrid.getView(),
            normalView = ganttPanel.normalGrid.getView(),
            depView    = ganttPanel.getDependencyView(),
            taskIdx    = normalView.indexOf(task),
            wnd,
            detacher, detacherWrapper = {
                destroy : function() {
                    Ext.destroy(detacher);
                }
            };

        // Redrawing the conflicting task row and dependencies
        function redrawTask() {
            if (taskIdx != -1) {
                lockedView.refreshNode(taskIdx);
                normalView.refreshNode(taskIdx);
                depView.updateDependencies(task);
            }
        }

        redrawTask();

        if (!me.hasStoredResolutionForContext(resolutionContext)) {
            wnd = new Gnt.widget.ConstraintResolutionWindow({
                dateFormat        : me.getDateFormat(),
                resolutionContext : resolutionContext
            });

            detacher = wnd.on({
                'ok'        : Ext.Function.bind(me.onUserActionOk,     me, [resolutionContext, redrawTask, wnd, detacherWrapper], true),
                'cancel'    : Ext.Function.bind(me.onUserActionCancel, me, [resolutionContext, redrawTask, wnd, detacherWrapper], true),
                'close'     : Ext.Function.bind(me.onUserActionClose,  me, [resolutionContext, redrawTask, detacherWrapper],      true),

                scope       : me,
                destroyable : true
            });

            ganttPanel.completeEdit();

            wnd.show();
        }
        else {
            me.resolveSilently(resolutionContext, redrawTask);
        }
    },

    getStoredResolutions : function() {
        var me = this;

        if (!me.storedResolutions) {
            me.storedResolutions = {};
        }
        return me.storedResolutions;
    },

    getStoredResolutionKeyForContext : function(resolutionContext) {

        return resolutionContext.title + resolutionContext.resolutions.length;
    },

    hasStoredResolutionForContext : function(resolutionContext) {
        var me = this,
            key = me.getStoredResolutionKeyForContext(resolutionContext),
            storedResolutions = me.getStoredResolutions();

        return Ext.isDefined(storedResolutions[key]);
    },

    getStoredResolutionForContext : function(resolutionContext) {
        var me = this,
            key = me.getStoredResolutionKeyForContext(resolutionContext),
            storedResolutions = me.getStoredResolutions();


        return storedResolutions[key];
    },

    storeResolutionForContext : function(resolutionContext, optionIndex) {
        var me = this,
            key = me.getStoredResolutionKeyForContext(resolutionContext),
            storedResolutions = me.storedResolutions;

        me.storedResolutions[key] = optionIndex;
    },

    resolveSilently : function(resolutionContext, redrawTaskFn) {
        var me = this,
            optionIndex = me.getStoredResolutionForContext(resolutionContext);


        resolutionContext.resolutions[optionIndex].resolve();

        // Redrawing the conflicting task again after user has decided what to do
        redrawTaskFn();
    },

    onUserActionOk : function(form, userChoise, eOpts, resolutionContext, redrawTaskFn, wnd, detacher) {
        var me = this;


        Ext.destroy(detacher);
        wnd.close();

        if (userChoise.dontAsk) {
            me.storeResolutionForContext(resolutionContext, userChoise.resolutionOption);
        }

        resolutionContext.resolutions[userChoise.resolutionOption].resolve();

        // Redrawing the conflicting task again after user has decided what to do
        redrawTaskFn();
    },

    onUserActionCancel : function(form, eOpts, resolutionContext, redrawTaskFn, wnd, detacher) {
        var me = this;


        Ext.destroy(detacher);
        wnd.close();

        resolutionContext.cancelAction();

        // Redrawing the conflicting task again after user has decided what to do
        redrawTaskFn();
    },

    onUserActionClose : function(wnd, eOpts, resolutionContext, redrawTaskFn, detacher) {
        var me = this;


        Ext.destroy(detacher);

        resolutionContext.cancelAction();

        // Redrawing the conflicting task again after user has decided what to do
        redrawTaskFn();
    }
});

/**
 * This class extends id consistency management inherited from Sch.data.util.IdConsistencyManager to dependency store
 *
 * Note on update process:
 *  at the time when 'idchanged' handler is called we can effectively query stores which are using caches for
 *  a data cached under old id, but we cannot update related models with the new id since at the time of
 *  'idchanged' handler is called a record which id has been updated is still marked as phantom, it's
 *  phantom flag will be reset only at 'update' event time (and 'idchanged' event is always followed by 'update'
 *  event) and it's important we start updating related records after primary records are not phantoms
 *  any more since we might rely on this flag (for example a related store sync operation might be blocked
 *  if primary store records it relies on are still phantom).
 *
 * TODO: it should be merged with Sch.data.util.IdConsistencyManager when dependency store will be moved to Scheduler
 *       as well
 *
 * @private
 */
if (!Ext.ClassManager.get("Gnt.data.util.IdConsistencyManager")) Ext.define('Gnt.data.util.IdConsistencyManager', {

    extend : 'Sch.data.util.IdConsistencyManager',

    config : {
        dependencyStore : null
    },

    // {{{ Event handlers

    // Please see the note at the class description
    onEventIdChanged : function(eventStore, event, oldId, newId) {
        var me = this,
            dependencyStore = me.getDependencyStore(),
            dependenciesUpdater;

        me.callParent([eventStore, event, oldId, newId]);

        if (dependencyStore) {
            dependenciesUpdater = me.getUpdateDependencyFromToFieldsFn(dependencyStore, oldId, newId);
            eventStore.on(
                'update',
                dependenciesUpdater,
                null,
                { single : true, priority : 200 }
            );
        }
    },
    // }}}

    // {{{ Update rules
    getUpdateDependencyFromToFieldsFn : function(dependencyStore, oldId, newId) {
        var dependencies = dependencyStore.getRange();

        return function() {
            Ext.Array.forEach(dependencies, function(dependency) {
                if (dependency.getFrom() == oldId) {
                    dependency.setFrom(newId);
                }
                else if (dependency.getTo() == oldId) {
                    dependency.setTo(newId);
                }
            });
        };
    }
    // }}}
});

/**
 * This class extends model persistency management inherited from Sch.data.util.ModelPersistencyManager to dependency
 * store
 *
 * TODO: it should be merged with Sch.data.util.ModelPersistencyManager when dependency store will be moved to Scheduler
 *       as well
 *
 * @private
 */
if (!Ext.ClassManager.get("Gnt.data.util.ModelPersistencyManager")) Ext.define('Gnt.data.util.ModelPersistencyManager', {

    extend : 'Sch.data.util.ModelPersistencyManager',

    config : {
        dependencyStore : null
    },

    dependencyStoreDetacher : null,

    // {{{ Event attachers
    updateDependencyStore : function(newDependencyStore, oldDependencyStore) {
        var me = this;

        Ext.destroyMembers(me, 'dependencyStoreDetacher');

        if (newDependencyStore && newDependencyStore.autoSync) {
            me.dependencyStoreDetacher = newDependencyStore.on({
                beforesync  : me.onDependencyStoreBeforeSync,
                scope       : me,
                destroyable : true,
                // Just in case
                priority    : 100
            });
        }
    },
    // }}}

    // {{{ Event handlers
    onDependencyStoreBeforeSync : function(options) {
        var me = this;
        me.removeNonPersistableRecordsToCreate(options);
        return me.shallContinueSync(options);
    }
    // }}}
});

/**

@class Gnt.data.Calendar
@extends Ext.data.Store
@aside guide gantt_calendars

A class representing a customizable calendar with weekends, holidays and availability information for any day.
Internally, it's just a subclass of the Ext.data.Store class which should be loaded with a collection
of {@link Gnt.model.CalendarDay} instances. Additionally, calendars may have parent-child relations, allowing "child" calendars to "inherit"
all special dates from its "parent" and add its own. See {@link #parent} property for details.

* **Note, that this calendar class is configured for backward compatibility and sets whole 24 hours of every day except weekends,
as available time. If you are looking for a calendar with regular business hours and availability, use {@link Gnt.data.calendar.BusinessTime}**

A calendar can be instantiated like this:

    var calendar        = new Gnt.data.Calendar({
        data    : [
            {
                Date            : new Date(2010, 0, 13),
                Cls             : 'gnt-national-holiday'
            },
            {
                Date            : new Date(2010, 1, 1),
                Cls             : 'gnt-company-holiday'
            },
            {
                Date            : new Date(2010, 0, 16),
                IsWorkingDay    : true
            }
        ]
    });

It can then be provided as a {@link Gnt.data.TaskStore#calendar configuration option} for the {@link Gnt.data.TaskStore}. Note that the calendar should be
loaded prior to loading the taskStore where it's consumed.

Please refer to the {@link Gnt.model.CalendarDay} class to know with what data calendar can be loaded with.

To edit the data in the calendar visually you can use {@link Gnt.widget.calendar.Calendar}

*/
Ext.define('Gnt.data.Calendar', {
    extend      : 'Ext.data.Store',

    requires    : [
        'Ext.Date',
        'Gnt.model.CalendarDay',
        'Sch.model.Range',
        'Sch.util.Date'
    ],

    mixins      : [
        'Sch.data.mixin.UniversalModelGetter'
    ],

    model       : 'Gnt.model.CalendarDay',

    proxy       : 'memory',

    /**
     * Number of days per month. Will be used when converting the big duration units like month/year to days.
     *
     * @cfg {Number} daysPerMonth
     */
    daysPerMonth        : 30,

    /**
     * Number of days per week. Will be used when converting the duration in weeks to days.
     *
     * @cfg {Number} daysPerWeek
     */
    daysPerWeek         : 7,

    /**
     * Number of hours per day. Will be used when converting the duration in days to hours.
     *
     * **Please note**, that this config is used for duration convertion and not anything else. If you need to change
     * the number of working hours in the day, update the {@link #defaultAvailability}
     *
     * @cfg {Number} hoursPerDay
     */
    hoursPerDay         : 24,

    unitsInMs           : null,

    defaultNonWorkingTimeCssCls     : 'gnt-holiday',

    /**
     * @cfg {Boolean} weekendsAreWorkdays Setting this option to `true` will treat *all* days as working. Default value is `false`.
     * This option can also be specified as the {@link Gnt.panel.Gantt#weekendsAreWorkdays config} of the gantt panel.
     */
    weekendsAreWorkdays             : false,

    /**
     * @cfg {Number} weekendFirstDay The index of the first day in weekend, 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
     * Default value is 6 - Saturday
     */
    weekendFirstDay                 : 6,

    /**
     * @cfg {Number} weekendSecondDay The index of the second day in weekend, 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
     * Default value is 0 - Sunday
     */
    weekendSecondDay                : 0,

    holidaysCache                   : null,
    availabilityIntervalsCache      : null,
    daysIndex                       : null,

    // a "cached" array of WEEKDAY days
    weekAvailability                : null,

    // the "very default" availability array, calculated based on `defaultAvailability` property
    defaultWeekAvailability         : null,

    nonStandardWeeksByStartDate     : null,
    nonStandardWeeksStartDates      : null,

    /**
     * @cfg {String} calendarId The unique id for the calendar. Providing the `calendarId` will register thi calendar in the calendars registry
     * and it can be retrieved later with {@link #getCalendar}. Generally only required if want to use {@link #parent parent-child relations} between the calendars,
     * or assign this calendar to a particular task or resource.
     *
     * Note, that when loading the calendar using ExtJS proxy this field will not be set.
     */
    calendarId                      : null,

    /**
     * @cfg {String/Gnt.data.Calendar} parent The parent calendar. Can be provided as the calendar id or calendar instance itself. If this property is provided
     * or set with {@link #setParent} method, this calendar becomes a "child" of the specified calendar. This means that it will "inherit" all day overrides, week days and
     * week day overrides from its "parent". In the same time, special days, defined in this calendar take priority over the ones from the "parent".
     *
     * You can use this feature if you'd like to create a single "main" calendar for the whole project, and then allow some task or resource to
     * have slightly different calendar (with an additional day off for example). You will not have to re-create all special days in the calendar of such task/resource - just
     * set the "main" calendar as a "parent" for it.
     */
    parent                          : null,

    /**
     * @cfg {String[]} defaultAvailability The array of default availability intervals (in the format of the `Availability` field
     * in the {@link Gnt.model.CalendarDay}) for each working weekday (Monday-Friday). Defaults to whole day (00-24) for backward compatibility.
     */
    defaultAvailability             : [ '00:00-24:00' ],

    /**
     * @cfg {String} name The name of this calendar
     */
    name                            : null,


    suspendCacheUpdate              : 0,


    /**
    * @cfg {Number} availabilitySearchLimit Maximum number of days to search for calendar availability intervals.
    * Used in various calculations requiring to respect working time.
    * In these cases system iterate through working time day by day. This option determines a maximum distance iteration will be done.
    * Prevents from infinite loop in case of wrong calendar configuration.
    */
    availabilitySearchLimit     : 1825, //5*365

    statics: {
        /**
         * Returns the registered calendar with the given id.
         *
         * @param {String} id The calendar id
         * @return {Gnt.data.Calendar}
         */
        getCalendar: function (id) {
            if (id instanceof Gnt.data.Calendar) return id;

            return Ext.data.StoreManager.lookup('GNT_CALENDAR:' + id);
        },


        /**
         * Returns an array of all registered calendars.
         *
         * @return {Gnt.data.Calendar[]}
         */
        getAllCalendars : function () {
            var result  = [];

            Ext.data.StoreManager.each(function (store) {
                if (store instanceof Gnt.data.Calendar) {
                    result.push(store);
                }
            });

            return result;
        },

        /**
         * Destroys all registered calendars.
         *
         * @return {Gnt.data.Calendar[]}
         */
        removeAll : function () {
            var sm = Ext.data.StoreManager;

            sm.each(function (store) {
                if (store instanceof Gnt.data.Calendar) {
                    sm.unregister(store);
                    Ext.destroy(store);
                }
            });
        }
    },


    constructor : function (config) {
        config      = config || {};

        var parent      = config.parent;
        delete config.parent;

        var calendarId  = config.calendarId;
        delete config.calendarId;

        this.callParent(arguments);

        this.setParent(parent);
        this.setCalendarId(calendarId);

        this.unitsInMs = {
            MILLI       : 1,
            SECOND      : 1000,
            MINUTE      : 60 * 1000,
            HOUR        : 60 * 60 * 1000,
            DAY         : this.hoursPerDay * 60 * 60 * 1000,
            WEEK        : this.daysPerWeek * this.hoursPerDay * 60 * 60 * 1000,
            MONTH       : this.daysPerMonth * this.hoursPerDay * 60 * 60 * 1000,
            QUARTER     : 3 * this.daysPerMonth * 24 * 60 * 60 * 1000,
            YEAR        : 4 * 3 * this.daysPerMonth * 24 * 60 * 60 * 1000
        };

        this.defaultWeekAvailability        = this.getDefaultWeekAvailability();

        // traditional "on-demand" caching seems to be not so efficient for calendar (in theory)
        // calculating any cached property, like, "weekAvailability" or "nonStandardWeeksStartDates" will require full calendar scan each time
        // so we update ALL cached values on any CRUD operations
        this.on({
            // TODO ignore changes of "Name/Cls" field?
            update      : this.clearCache,
            datachanged : this.clearCache,
            clear       : this.clearCache,

            load        : this.clearCache,
            scope       : this
        });

        this.clearCache();
    },


    /**
     * Returns the {@link #calendarId} of the current calendar
     * @return {String}
     */
    getCalendarId : function () {
        return this.calendarId;
    },


    /**
     * Sets the {@link #calendarId} of the current calendar and register it in the calendar registry.
     *
     * @param {String} id
     */
    setCalendarId : function (id) {
        // allow "0" as the calendarId
        if (this.calendarId != null) Ext.data.StoreManager.unregister(this);

        this.calendarId     = id;

        if (id != null) {
            this.storeId    = 'GNT_CALENDAR:' + id;
            Ext.data.StoreManager.register(this);
        } else
            this.storeId    = null;

        var proxy           = this.proxy;

        if (proxy && proxy.extraParams) proxy.extraParams.calendarId    = id;
    },


    getDefaultWeekAvailability : function () {
        var availability        = this.defaultAvailability;
        var weekendFirstDay     = this.weekendFirstDay;
        var weekendSecondDay    = this.weekendSecondDay;

        var res                 = [];

        for (var i = 0; i < 7; i++) {
            res.push(
                this.weekendsAreWorkdays || i != weekendFirstDay && i != weekendSecondDay ?
                    new this.model({ Type : 'WEEKDAY', Weekday : i, Availability : availability && Ext.Array.clone(availability) || [], IsWorkingDay : true })
                        :
                    new this.model({ Type : 'WEEKDAY', Weekday : i, Availability : []  })
            );
        }

        return res;
    },


    // will scan through all calendar days in the store and save references to special ones to the properties, for speedup
    clearCache : function () {
        if (this.suspendCacheUpdate > 0) return;

        this.holidaysCache                  = {};
        this.availabilityIntervalsCache     = {};

        var daysIndex                       = this.daysIndex                    = {};

        var weekAvailability                = this.weekAvailability             = [];
        var nonStandardWeeksStartDates      = this.nonStandardWeeksStartDates   = [];
        var nonStandardWeeksByStartDate     = this.nonStandardWeeksByStartDate  = {};

        this.each(function (calendarDay) {
            // backward compat
            var id                  = calendarDay.getId();
            var overrideMatch       = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(id);
            var weekDayMatch        = /^WEEKDAY:(\d+)$/.exec(id);

            var type                = calendarDay.getType();

            var weekDay             = calendarDay.getWeekday();

            if (type == 'WEEKDAYOVERRIDE' || overrideMatch) {
                var startDate, endDate;

                if (type == 'WEEKDAYOVERRIDE') {
                    startDate       = calendarDay.getOverrideStartDate();
                    endDate         = calendarDay.getOverrideEndDate();
                }

                // backward compat
                if (overrideMatch) {
                    startDate       = Ext.Date.parse(overrideMatch[ 2 ], 'Y/m/d');
                    endDate         = Ext.Date.parse(overrideMatch[ 3 ], 'Y/m/d');
                    weekDay         = overrideMatch[ 1 ];
                }

                // allow partially defined days - they will not be included in calculations
                if (startDate && endDate && weekDay != null) {
                    var startDateNum            = startDate - 0;

                    if (!nonStandardWeeksByStartDate[ startDateNum ]) {
                        nonStandardWeeksByStartDate[ startDateNum ] = {
                            startDate           : new Date(startDate),
                            endDate             : new Date(endDate),
                            name                : calendarDay.getName(),
                            weekAvailability    : [],
                            // main day representing the week override itself - for example for overrides w/o any re-defined availability
                            mainDay             : null
                        };

                        nonStandardWeeksStartDates.push(startDateNum);
                    }

                    if (weekDay >= 0)
                        nonStandardWeeksByStartDate[ startDateNum ].weekAvailability[ weekDay ] = calendarDay;
                    else
                        nonStandardWeeksByStartDate[ startDateNum ].mainDay = calendarDay;
                }

            } else if (type == 'WEEKDAY' || weekDayMatch) {
                if (weekDayMatch) weekDay = weekDayMatch[ 1 ];

                // again - only fully defined records will be taken into account
                if (weekDay != null) {
                    if (weekDay < 0 || weekDay > 6) { throw new Error("Incorrect week day index"); }

                    weekAvailability[ weekDay ] = calendarDay;
                }
            } else {
                var date            = calendarDay.getDate();

                if (date) daysIndex[ date - 0 ] = calendarDay;
            }
        });

        nonStandardWeeksStartDates.sort();

        this.fireEvent('calendarchange', this);
    },


    /**
     * Returns `true` or `false` depending whether the given time span intersects with one of the defined week day overrides.
     *
     * @param {Date} startDate The start date of the time span
     * @param {Date} endDate The end date of the time span
     *
     * @return {Boolean}
     */
    intersectsWithCurrentWeeks : function (startDate, endDate) {
        var result                          = false;

        this.forEachNonStandardWeek(function (week) {
            var weekStartDate       = week.startDate;
            var weekEndDate         = week.endDate;

            if (weekStartDate <= startDate && startDate < weekEndDate || weekStartDate < endDate && endDate <= weekEndDate) {
                result      = true;

                // stop the iteration
                return false;
            }
        });

        return result;
    },


    /**
     * Adds a week day override ("non-standard" week) to the calendar. As a reminder, week day override consists from up to 7 days,
     * that re-defines the default week days availability only within certain time span.
     *
     * @param {Date} startDate The start date of the time span
     * @param {Date} endDate The end date of the time span
     * @param {Gnt.model.CalendarDay[]/String[][]} weekAvailability The array indexed from 0 to 7, containing items for week days.
     * Index 0 corresponds to Sunday, 1 to Monday, etc. Some items can be not defined or set to `null`, indicating that override does not
     * change this week day. Item can be - an instance of {@link Gnt.model.CalendarDay} (only `Availability` field needs to be set), or
     * an array of strings, defining the availability (see the description of the `Availability` field in the {@link Gnt.model.CalendarDay}).
     * @param {String} name The name of this week day override
     */
    addNonStandardWeek : function (startDate, endDate, weekAvailability, name) {
        startDate       = Ext.Date.clearTime(new Date(startDate));
        endDate         = Ext.Date.clearTime(new Date(endDate));

        if (this.intersectsWithCurrentWeeks(startDate, endDate)) {
            throw new Error("Can not add intersecting week");
        }

        var DayModel    = this.model;
        var days        = [];

        Ext.Array.each(weekAvailability, function (day, index) {
            if (day instanceof Gnt.model.CalendarDay) {
                day.setType('WEEKDAYOVERRIDE');
                day.setOverrideStartDate(startDate);
                day.setOverrideEndDate(endDate);
                day.setWeekday(index);
                day.setName(name || 'Week override');

                days.push(day);
            } else if (Ext.isArray(day)) {
                var newDay = new DayModel();

                newDay.setType('WEEKDAYOVERRIDE');
                newDay.setOverrideStartDate(startDate);
                newDay.setOverrideEndDate(endDate);
                newDay.setWeekday(index);
                newDay.setName(name || 'Week override');
                newDay.setAvailability(day);

                days.push(newDay);
            }
        });

        var mainDay     = new DayModel();

        mainDay.setType('WEEKDAYOVERRIDE');
        mainDay.setOverrideStartDate(startDate);
        mainDay.setOverrideEndDate(endDate);
        mainDay.setWeekday(-1);
        mainDay.setName(name || 'Week override');

        days.push(mainDay);

        this.add(days);
    },


    /**
     * Returns an object describing a week day override ("non-standard" week), that starts at the given date or `null` if there's no any.
     *
     * @param {Date} startDate The start date of the week day override
     *
     * @return {Object} An object with the following properties
     * @return {Object} return.name A "Name" field of the week days in the override
     * @return {Date} return.startDate An "OverrideStartDate" field of the week days in the override
     * @return {Date} return.endDate An "OverrideEndDate" field of the week days in the override
     * @return {Gnt.model.CalendarDay[]} return.weekAvailability An array with the week days, defined by this override. May be filled only partially if
     * week day override does not contain all days.
     * @return {Gnt.model.CalendarDay} return.mainDay A "main" day instance for this override
     */
    getNonStandardWeekByStartDate : function (startDate) {
        return this.nonStandardWeeksByStartDate[ Ext.Date.clearTime(new Date(startDate)) - 0 ] || null;
    },


    /**
     * Returns an object describing a week day override ("non-standard" week), that contains the given date or `null` if there's no any.
     *
     * @param {Date} startDate The date that falls within some of the week day overrides
     *
     * @return {Object} An object describing week day override. See {@link #getNonStandardWeekByStartDate} method for details.
     */
    getNonStandardWeekByDate : function (timeDate) {
        timeDate        = Ext.Date.clearTime(new Date(timeDate)) - 0;

        var nonStandardWeeksStartDates      = this.nonStandardWeeksStartDates;
        var nonStandardWeeksByStartDate     = this.nonStandardWeeksByStartDate;

        for (var i = 0; i < nonStandardWeeksStartDates.length; i++){
            var week                = nonStandardWeeksByStartDate[ nonStandardWeeksStartDates[ i ] ];

            // since `nonStandardWeeksStartDates` are sorted inc and week overrides do not intersect
            // we can shorcut in this case
            if (week.startDate > timeDate) break;

            if (week.startDate <= timeDate && timeDate <= week.endDate) {
                return week;
            }
        }

        return null;
    },


    /**
     * Removes all calendar day instances, that forms a week day override ("non-standard" week) with the given start date.
     *
     * @param {Date} startDate The start date of the week day override
     */
    removeNonStandardWeek : function (startDate) {
        startDate       = Ext.Date.clearTime(new Date(startDate)) - 0;

        var week        = this.getNonStandardWeekByStartDate(startDate);

        if (!week) return;

        this.remove(Ext.Array.clean(week.weekAvailability).concat(week.mainDay));
    },


    /**
     * Iterator for each week day override, defined in this calendar.
     *
     * @param {Function} func The function to call for each override. It will receive a single argument - object, describing the override.
     * See {@link #getNonStandardWeekByStartDate} for details. Returning `false` from the function stops the iterator.
     * @param {Object} scope The scope to execute the `func` with.
     *
     * @return {Boolean} `false` if any of the function calls have returned `false`
     */
    forEachNonStandardWeek : function (func, scope) {
        var me                              = this;
        var nonStandardWeeksStartDates      = this.nonStandardWeeksStartDates;
        var nonStandardWeeksByStartDate     = this.nonStandardWeeksByStartDate;

        for (var i = 0; i < nonStandardWeeksStartDates.length; i++) {
            if (func.call(scope || me, nonStandardWeeksByStartDate[ nonStandardWeeksStartDates[ i ] ]) === false) return false;
        }
    },


    /**
     * Updates the default availability information based on the value provided.
     *
     * @param {Boolean} value true if weekends should be regarded as working time.
     */
    setWeekendsAreWorkDays : function(value) {
        if (value !== this.weekendsAreWorkdays) {
            this.weekendsAreWorkdays = value;

            // Must generate new defaultWeekAvailability
            this.defaultWeekAvailability = this.getDefaultWeekAvailability();

            this.clearCache();
        }
    },

    /**
     * Returns true if weekends are regarded as working time.
     *
     * @return {Boolean} true if weekends should be regarded as working time.
     */
    areWeekendsWorkDays : function() {
        return this.weekendsAreWorkdays;
    },

    /**
     * Returns a corresponding {@link Gnt.model.CalendarDay} instance for the given date. First, this method checks for {@link #getOverrideDay day overrides}
     * (either in this or parent calendars), then for week days (again, in this or parent calendars) and finally fallbacks to the
     * calendar day with the {@link #defaultAvailability} availability.
     *
     * @param {Date} timeDate A date (can contain time portion which will be ignored)
     *
     * @return {Gnt.model.CalendarDay}
     */
    getCalendarDay : function (timeDate) {
        timeDate        = typeof timeDate == 'number' ? new Date(timeDate) : timeDate;

        return this.getOverrideDay(timeDate) || this.getWeekDay(timeDate.getDay(), timeDate) || this.getDefaultCalendarDay(timeDate.getDay());
    },


    /**
     * Returns a day override corresponding to the given date (possibly found in the parent calendars) or `null` if the given date
     * has no overrides in this calendar and all its parents.
     *
     * @param {Date} timeDate The date to check for day overrides for
     * @return {Gnt.model.CalendarDay}
     */
    getOverrideDay : function (timeDate) {
        return this.getOwnCalendarDay(timeDate) || this.parent && this.parent.getOverrideDay(timeDate) || null;
    },


    /**
     * Returns an "own" day override corresponding to the given date. That is - day override defined in the current calendar only.
     *
     * @param {Date} timeDate The date to check for day overrides for
     * @return {Gnt.model.CalendarDay}
     */
    getOwnCalendarDay : function (timeDate) {
        timeDate        = typeof timeDate == 'number' ? new Date(timeDate) : timeDate;

        return this.daysIndex[ Ext.Date.clearTime(timeDate, true) - 0 ];
    },


    /**
     * Returns a "special" week day corresponding to the given date. Under "special" week day we mean a calendar day with the `Type = WEEKDAY` or `WEEKDAYOVERRIDE`.
     * See the {@link Gnt.model.CalendarDay} class for details. If the concrete date is given as 2nd argument, this method will
     * first check for any week overrides passing on it.
     *
     * If not found in current calendar, this method will consult parent. If no "special" week day found neither in this calendar, no parents - it returns `null`.
     *
     * @param {Number} weekDayIndex The index of the week day to retrieve (0-Sunday, 1-Monday, etc)
     * @param {Date} [timeDate] The date for which the week day is being retrieved.
     * @return {Gnt.model.CalendarDay}
     */
    getWeekDay : function (weekDayIndex, timeDate) {
        // if 2nd argument is provided then try to search in non-standard weeks first
        if (timeDate) {
            var week        = this.getNonStandardWeekByDate(timeDate);

            if (week && week.weekAvailability[ weekDayIndex ]) return week.weekAvailability[ weekDayIndex ];
        }

        return this.weekAvailability[ weekDayIndex ] || this.parent && this.parent.getWeekDay(weekDayIndex, timeDate) || null;
    },


    /**
     * Returns a "default" calendar day instance, corresponding to the one, generated from {@link #defaultAvailability}. By default all working days in the week
     * corresponds to the day with {@link #defaultAvailability} set in the `Availability` field and non-working days has empty `Availability`.
     *
     * @param {Number} weekDayIndex The index of the "default" week day to retrieve (0-Sunday, 1-Monday, etc)
     * @return {Gnt.model.CalendarDay}
     */
    getDefaultCalendarDay : function (weekDayIndex) {
        if (!this.hasOwnProperty('defaultAvailability') && !this.hasOwnProperty('weekendsAreWorkdays') && this.parent) {
            return this.parent.getDefaultCalendarDay(weekDayIndex);
        }

        return this.defaultWeekAvailability[ weekDayIndex ];
    },


    /**
     * Returns a boolean indicating whether a passed date falls on the weekend or holiday.
     *
     * @param {Date} timeDate A given date (can contain time portion)
     *
     * @return {Boolean}
     */
    isHoliday : function (timeDate) {
        var secondsSinceEpoch       = timeDate - 0;
        var holidaysCache           = this.holidaysCache;

        if (holidaysCache[ secondsSinceEpoch ] != null) {
            return holidaysCache[ secondsSinceEpoch ];
        }

        timeDate        = typeof timeDate == 'number' ? new Date(timeDate) : timeDate;

        var day         = this.getCalendarDay(timeDate);

        if (!day) throw "Can't find day for " + timeDate;

        return holidaysCache[ secondsSinceEpoch ] = !day.getIsWorkingDay();
    },


    /**
     * Returns `true` if given date passes on the weekend and `false` otherwise. Weekend days can be re-defined with the {@link #weekendFirstDay} and {@link #weekendSecondDay} options.
     *
     * @param {Date} timeDate The date to check
     * @return {Boolean}
     */
    isWeekend : function (timeDate) {
        var dayIndex = timeDate.getDay();
        return dayIndex === this.weekendFirstDay || dayIndex === this.weekendSecondDay;
    },


    /**
     * Returns a boolean indicating whether a passed date is a working day.
     *
     * @param {Date} date A given date (can contain time portion which will be ignored)
     *
     * @return {Boolean}
     */
    isWorkingDay : function (date) {
        return !this.isHoliday(date);
    },


    /**
     * Convert the duration given in milliseconds to a given unit. Uses the {@link #daysPerMonth} configuration option.
     *
     * @param {Number} durationInMs Duration in milliseconds
     * @param {String} unit Duration unit to which the duration should be converted
     *
     * @return {Number} converted value
     */
    convertMSDurationToUnit : function (durationInMs, unit) {
        return durationInMs / this.unitsInMs[ Sch.util.Date.getNameOfUnit(unit) ];
    },


    /**
     * Convert the duration given in some unit to milliseconds. Uses the {@link #daysPerMonth} configuration option.
     *
     * @param {Number} durationInMs
     * @param {String} unit
     *
     * @return {Number} converted value
     */
    convertDurationToMs : function (duration, unit) {
        return duration * this.unitsInMs[ Sch.util.Date.getNameOfUnit(unit) ];
    },


    /**
     * Returns an array of ranges for non-working days between `startDate` and `endDate`. For example normally, given a full month,
     * it will return an array from 4 `Sch.model.Range` instances, containing ranges for the weekends. If some holiday lasts for several days
     * and all {@link Gnt.model.CalendarDay} instances have the same `Cls` value then all days will be combined in single range.
     *
     * @param {Date} startDate - A start date of the timeframe to extract the holidays from
     * @param {Date} endDate - An end date of the timeframe to extract the holidays from
     *
     * @return {Sch.model.Range[]}
     */
    getHolidaysRanges : function (startDate, endDate, includeWeekends) {
        if (startDate > endDate) {
            Ext.Error.raise("startDate can't be bigger than endDate");
        }

        startDate       = Ext.Date.clearTime(startDate, true);
        endDate         = Ext.Date.clearTime(endDate, true);

        var ranges          = [],
            currentRange,
            date;

        for (date = startDate; date < endDate; date = Sch.util.Date.getNext(date, Sch.util.Date.DAY, 1)) {

            if (this.isHoliday(date) || (this.weekendsAreWorkdays && includeWeekends && this.isWeekend(date))) {
                var day         = this.getCalendarDay(date);
                var cssClass    = day && day.getCls() || this.defaultNonWorkingTimeCssCls;

                var nextDate    = Sch.util.Date.getNext(date, Sch.util.Date.DAY, 1);

                // starts new range
                if (!currentRange) {
                    currentRange    = new Sch.model.Range({
                        StartDate   : date,
                        EndDate     : nextDate,
                        Cls         : cssClass
                    });
                } else {
                    // checks if the range is still the same
                    if (currentRange.getCls() == cssClass) {
                        currentRange.setEndDate(nextDate);
                    } else {
                        ranges.push(currentRange);

                        currentRange    = new Sch.model.Range({
                            StartDate   : date,
                            EndDate     : nextDate,
                            Cls         : cssClass
                        });
                    }
                }
            } else {
                if (currentRange) {
                    ranges.push(currentRange);
                    currentRange = null;
                }
            }
        }

        if (currentRange) {
            ranges.push(currentRange);
        }

        return ranges;
    },


    /**
     * This an iterator that is monotonically passes through the all availability intervals (working time intervals) in the given date range.
     *
     * For example if the default availability in this calendar is [ '09:00-13:00', '14:00-18:00' ] and this function is called, like this:
     *
     *      calendar.forEachAvailabilityInterval(
     *           //             midnight  Friday                 midnight Tuesday
     *          { startDate : new Date(2013, 1, 8), endDate : new Date(2013, 1, 12) },
     *          function (startDate, endDate) { ... }
     *      )
     * then the provided function will be called 4 times with the following arguments:
     *
     *      startDate : new Date(2013, 1, 8, 9),    endDate : new Date(2013, 1, 8, 13)
     *      startDate : new Date(2013, 1, 8, 14),   endDate : new Date(2013, 1, 8, 18)
     *      startDate : new Date(2013, 1, 11, 9),   endDate : new Date(2013, 1, 11, 13)
     *      startDate : new Date(2013, 1, 11, 14),  endDate : new Date(2013, 1, 11, 18)
     *
     *
     * @param {Object} options An object with the following properties:
     * @param {Date} options.startDate A start date of the date range. Can be omitted, if `isForward` flag is set to `false`. In this case iterator
     * will not stop until the call to `func` will return `false`.
     * @param {Date} options.endDate An end date of the date range. Can be omitted, if `isForward` flag is set to `true`. In this case iterator
     * will not stop until the call to `func` will return `false`.
     * @param {Boolean} [options.isForward=true] A flag, defining the direction, this iterator advances in. If set to `true` iterations
     * will start from the `startDate` option and will advance in date increasing direction. If set to `false` iterations will start from the `endDate`
     * option and will advance in date decreasing direction.
     * @param {Function} func A function to call for each availability interval, in the given date range. It receives 2 arguments - the start date
     * of the availability interval and the end date.
     * @param {Object} scope A scope to execute the `func` with.
     *
     * @return {Boolean} `false` if any of the calls to `func` has returned `false`
     */
    forEachAvailabilityInterval : function (options, func, scope) {
        scope                       = scope || this;
        var me                      = this;

        var startDate               = options.startDate;
        var endDate                 = options.endDate;

        // isForward by default
        var isForward               = options.isForward !== false;

        if (isForward ? !startDate : !endDate) {
            throw new Error("At least `startDate` or `endDate` is required, depending from the `isForward` option");
        }

        var cursorDate              = new Date(isForward ? startDate : endDate);
        var DATE                    = Sch.util.Date;

        // if no boundary we still have to specify some limit
        if (isForward) {
            if (!endDate) {
                endDate             = DATE.add(startDate, 'd', options.availabilitySearchLimit || this.availabilitySearchLimit || 5*365);
            }
        } else {
            if (!startDate) {
                startDate           = DATE.add(endDate, 'd', - (options.availabilitySearchLimit || this.availabilitySearchLimit || 5*365));
            }
        }

        // the Ext.Date.clearTime() method is called a lot during this method (like 200k times for 2k tasks project)
        // sometimes w/o real need for it since we always advance to the next day's boundary
        // this optimization brings it down to ~10k, ~10% speed up in the profiles
        var noNeedToClearTime       = false;

        while (isForward ? cursorDate < endDate : cursorDate > startDate) {
            // - 1 for backward direction ensures that we are checking correct day,
            // since the endDate is not inclusive - 02/10/2012 means the end of 02/09/2012
            // for backward direction we always clear time, because intervals are cached by the beginning of the day
            var intervals           = this.getAvailabilityIntervalsFor(cursorDate - (isForward ? 0 : 1), isForward ? noNeedToClearTime : false);

            // the order of processing is different for forward / backward processing
            for (var i = isForward ? 0 : intervals.length - 1; isForward ? i < intervals.length : i >= 0; isForward ? i++ : i--) {
                var interval                = intervals[ i ];
                var intervalStartDate       = interval.startDate;
                var intervalEndDate         = interval.endDate;

                // availability interval is out of [ startDate, endDate )
                if (intervalStartDate >= endDate || intervalEndDate <= startDate) continue;

                var countingFrom            = intervalStartDate < startDate ? startDate : intervalStartDate;
                var countingTill            = intervalEndDate > endDate ? endDate : intervalEndDate;

                if (func.call(scope, countingFrom, countingTill) === false) return false;
            }

            cursorDate              = isForward ? DATE.getStartOfNextDay(cursorDate, false, noNeedToClearTime) : DATE.getEndOfPreviousDay(cursorDate, noNeedToClearTime);

            noNeedToClearTime       = true;
        }
    },


    /**
     * Calculate the duration in the given `unit` between 2 dates, taking into account the availability/holidays information (non-working time will be excluded from the duration).
     *
     * @param {Date} startDate The start date
     * @param {Date} endDate The end date
     * @param {String} unit One of the units of the {@link Sch.util.Date} class, for example `Sch.util.Date.DAY`.
     *
     * @return {Number} Working time duration between given dates.
     */
    calculateDuration : function (startDate, endDate, unit) {
        var duration        = 0;

        this.forEachAvailabilityInterval({ startDate : startDate, endDate : endDate }, function (intervalStartDate, intervalEndDate) {
            var dstDiff                 = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();

            duration                    += intervalEndDate - intervalStartDate + dstDiff * 60 * 1000;
        });

        return this.convertMSDurationToUnit(duration, unit);
    },


    /**
     * Calculate the end date for the given start date and duration, taking into account the availability/holidays information (non-working time will not be counted as duration).
     *
     * @param {Date} startDate The start date
     * @param {Number} duration The "pure" duration (w/o any non-working time).
     * @param {String} unit One of the units of the {@link Sch.util.Date} class, for example `Sch.util.Date.DAY`.
     *
     * @return {Date} The end date
     */
    calculateEndDate : function (startDate, duration, unit) {
        // if duration is 0 - return the same date
        if (!duration) {
            return new Date(startDate);
        }

        var DATE = Sch.util.Date,
            endDate;

        duration        = this.convertDurationToMs(duration, unit);

        var startFrom   =
            // milestone case, which we don't want to re-schedule to the next business days
            // milestones should start/end in the same day as its incoming dependency
            duration === 0 && Ext.Date.clearTime(startDate, true) - startDate === 0 ?

            DATE.add(startDate, Sch.util.Date.DAY, -1)
                :
            startDate;

        this.forEachAvailabilityInterval({ startDate : startFrom }, function (intervalStartDate, intervalEndDate) {
            var diff                    = intervalEndDate - intervalStartDate;
            var dstDiff                 = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();

            if (diff >= duration) {
                endDate                 = new Date(intervalStartDate - 0 + duration);

                return false;
            } else {
                duration                -= diff + dstDiff * 60 * 1000;
            }
        });

        return endDate;
    },


    /**
     * Calculate the start date for the given end date and duration, taking into account the availability/holidays information (non-working time will not be counted as duration).
     *
     * @param {Date} endDate The end date
     * @param {Number} duration The "pure" duration (w/o any non-working time).
     * @param {String} unit One of the units of the {@link Sch.util.Date} class, for example `Sch.util.Date.DAY`.
     *
     * @return {Date} The start date
     */
    calculateStartDate : function (endDate, duration, unit) {
        // if duration is 0 - return the same date
        if (!duration) {
            return new Date(endDate);
        }

        var startDate;

        duration        = this.convertDurationToMs(duration, unit);

        this.forEachAvailabilityInterval({ endDate : endDate, isForward : false }, function (intervalStartDate, intervalEndDate) {
            var diff                    = intervalEndDate - intervalStartDate;

            if (diff >= duration) {
                startDate               = new Date(intervalEndDate - duration);

                return false;
            } else
                duration                -= diff;
        });

        return startDate;
    },


    /**
     * This method starts from the given `date` and moves forward/backward in time (depending from the `isForward` flag) skiping the non-working time.
     * It returns the nearest edge of the first working time interval it encounters. If the given `date` falls on the working time, then `date` itself is returned.
     *
     * For example, if this function is called with some Saturday as `date` and `isForward` flag is set, it will return the earliest working hours on following Monday.
     * If `isForward` flag will be set to `false` - it will return the latest working hours on previous Friday.
     *
     * @param {Date} date A date (presumably falling on the non-working time).
     * @param {Boolean} isForward Pass `true` to skip the non-working time in forward direction, `false` - in backward
     *
     * @return {Date} Nearest working date.
     */
    skipNonWorkingTime : function (date, isForward) {
        var found   = false;
        // reseting the date to the earliest availability interval
        this.forEachAvailabilityInterval(
            isForward ? { startDate : date } : { endDate : date, isForward : false },

            function (intervalStartDate, intervalEndDate) {
                date        = isForward ? intervalStartDate : intervalEndDate;
                found       = true;

                return false;
            }
        );

        if (!found) throw 'skipNonWorkingTime: Cannot skip non-working time, please ensure that this calendar has any working period of time specified';

        return new Date(date);
    },


    /**
     * This method starts from the given `date` and moves forward/backward in time (depending from the `duration` argument).
     * It stops as soon as it skips the amount of *working* time defined by the `duration` and `unit` arguments. Skipped non-working time simply will not
     * be counted.
     *
     * **Note** that this method behaves differently from the {@link #skipNonWorkingTime} - that method stops as soon as it encounters the non-working time.
     * This method stops as soon as it accumulate enough skipped working time.
     *
     * @param {Date} date A starting point
     * @param {Number} duration The duration of the working time. To skip working time in backward direction pass a negative value.
     * @param {String} unit One of the units of the {@link Sch.util.Date} class, for example `Sch.util.Date.DAY`.
     *
     * @return {Date}
     */
    skipWorkingTime : function(date, duration, unit) {
        return duration >= 0 ? this.calculateEndDate(date, duration, unit) : this.calculateStartDate(date, -duration, unit);
    },


    /**
     * Returns the availability intervals of the concrete day. Potentially can consult a parent calendar.
     *
     * @param {Date} timeDate
     * @return {Object[]} Array of objects, like:

    {
        startDate       : new Date(...),
        endDate         : new Date(...)
    }
     */
    getAvailabilityIntervalsFor : function (timeDate, noNeedToClearTime) {
        // This is more rubust method of time clearing then direct call to Ext.Date.clearTime
        if (noNeedToClearTime) {
            timeDate = (timeDate).valueOf();
        }
        else if (timeDate instanceof Date) {
            timeDate = (new Date(timeDate.getFullYear(), timeDate.getMonth(), timeDate.getDate())).valueOf();
        }
        else {
            timeDate = Ext.Date.clearTime(new Date(timeDate)).valueOf();
        }

        return this.availabilityIntervalsCache[ timeDate ] = (this.availabilityIntervalsCache[ timeDate ] || this.getCalendarDay(timeDate).getAvailabilityIntervalsFor(timeDate));
    },


    getByInternalId : function (internalId) {
        return this.data.map[ internalId ];
    },


    isChildOf : function (calendar) {
        var parent  = calendar === this && this,
            found   = false;

        while (parent && !found) {
            found = parent === calendar;
            parent = parent.parent;
        }

        return found;
    },


    getParentableCalendars : function() {
        var me          = this,
            result      = [],
            calendars   = Gnt.data.Calendar.getAllCalendars();

        Ext.Array.each(calendars, function (calendar) {
            if (calendar !== me && !calendar.isChildOf(me)) result.push({ Id : calendar.calendarId, Name : calendar.name || calendar.calendarId });
        });

        return result;
    },


    /**
     * Sets the {@link #parent} for this calendar. Pass `null` to remove the parent.
     *
     * @param {Null/String/Gnt.data.Calendar} parentOrId String with {@link #calendarId} value or calendar instance itself.
     */
    setParent : function (parentOrId) {
        var parent          = Gnt.data.Calendar.getCalendar(parentOrId);

        if (parentOrId && !parent) throw new Error("Invalid parent specified for the calendar");

        if (this.parent != parent) {
            var proxy       = this.proxy;

            var listeners   = {
                calendarchange          : this.clearCache,
                destroy                 : this.onParentDestroy,
                scope                   : this
            };

            var oldParent   = this.parent;

            if (oldParent) oldParent.un(listeners);

            this.parent     = parent;

            if (parent) parent.on(listeners);

            if (proxy && proxy.extraParams) proxy.extraParams.parentId  = parent ? parent.calendarId : null;

            this.clearCache();

            /**
             * @event parentchange
             *
             * @param {Gnt.data.Calendar} calendar The calendar which parent has changed
             * @param {Gnt.data.Calendar} newParent The new parent of this calendar (can be `null` if parent is being removed)
             * @param {Gnt.data.Calendar} oldParent The old parent of this calendar (can be `null` if there were no parent)
             */
            this.fireEvent('parentchange', this, parent, oldParent);
        }
    },


    onParentDestroy : function () {
        this.setParent(null);
    },


    isAvailabilityIntersected : function  (withCalendar, startDate, endDate) {
        var ownWeekDay, ownAvailability,
            testWeekDay, testAvailability;

        // first let's try to find overlapping of weeks (check daily intervals)
        // loop over week days
        for (var i = 0; i < 7; i++) {
            ownWeekDay      = this.getWeekDay(i) || this.getDefaultCalendarDay(i);
            testWeekDay     = withCalendar.getWeekDay(i) || withCalendar.getDefaultCalendarDay(i);

            if (!ownWeekDay || !testWeekDay) continue;

            // get daily intervals
            ownAvailability     = ownWeekDay.getAvailability();
            testAvailability    = testWeekDay.getAvailability();

            // loop over intervals to find overlapping
            for (var j = 0, l = ownAvailability.length; j < l; j++) {
                for (var k = 0, ll = testAvailability.length; k < ll; k++) {
                    if (testAvailability[k].startTime < ownAvailability[j].endTime && testAvailability[k].endTime > ownAvailability[j].startTime) {
                        return true;
                    }
                }
            }
        }

        var result = false;

        this.forEachNonStandardWeek(function (week) {
            if (week.startDate >= endDate) return false;

            if (startDate < week.endDate) {
                result      = true;
                // stop the iteration
                return false;
            }
        });

        return result;
    }

});

/**
@class Gnt.data.CalendarManager
@extends Ext.data.TreeStore

Class implements a central storage of all project calendars. Technically it's a collection of {@link Gnt.model.Calendar} records.

    var calendarManager = Ext.create('Gnt.data.CalendarManager');

Calendars loading
=================

This class is mainly designed to facilitate calendars loading/persisting. You can use both default Ext JS proxies approach:

    var calendarManager = Ext.create('Gnt.data.CalendarManager', {
        proxy : {
            type : 'ajax',
            url  : 'calendars.php'
        },
        listeners : {
            load : function () {
                // set project calendar when all calendars get loaded
                taskStore.setCalendar(123);
            }
        }
    });

Or the {@link Gnt.data.CrudManager} class to load all project stores by batch:

    var calendarManager = Ext.create('Gnt.data.CalendarManager');

    var taskStore = Ext.create('Gnt.data.TaskStore', {
        // taskStore calendar will automatically be set when calendarManager gets loaded
        calendarManager : calendarManager,
        resourceStore   : resourceStore,
        dependencyStore : dependencyStore,
        assignmentStore : assignmentStore
    });

    var crudManager = Ext.create('Gnt.data.CrudManager', {
        taskStore       : taskStore,
        transport       : {
            load    : {
                url     : 'php/read.php'
            },
            sync    : {
                url     : 'php/save.php'
            }
        }
    });

Each record in the store, except the root node, automatically gets linked to its {@link Gnt.data.Calendar calendar instance}
which can be retrieved by {@link #getCalendar} method.

    // gets calendar instance having calendar Id equal to 'general'
    var calendar = calendarManager.getCalendar('general');

    // and here we do the same using {@link Gnt.model.Calendar} {@link Gnt.model.Calendar#getCalendar getCalendar} method.
    calendar = calendarManager.getById('general').getCalendar();

Please note that root node does not correspond to the project calendar (main calendar of the task store).
Any node can be the project calendar. See {@link #setProjectCalendar} for details.

Automatic calendar building
===========================

When you add a new record to the store a new calendar is automatically gets created:

    var calendarManager = Ext.create('Gnt.data.CalendarManager');

    // append new record to the calendar manager
    var record = calendarManager.getRoot().appendChild({
        leaf                : true,
        Name                : 'General II',
        DaysPerMonth        : 30,
        DaysPerWeek         : 7,
        HoursPerDay         : 24,
        WeekendsAreWorkdays : true,
        WeekendFirstDay     : 6,
        WeekendSecondDay    : 0,
        DefaultAvailability : [ '00:00-24:00' ]
    });

    // get newly created calendar to calendar2 variable
    var calendar2 = record.getCalendar();

Calendar class customizing
==========================

Class that should be used to instantiating a calendar (during loading or manual adding) can be customized by {@link #calendarClass} config:

    var calendarManager = Ext.create('Gnt.data.CalendarManager', {
        // by default we will create BusinessTime calendars
        calendarClass   : 'Gnt.data.calendar.BusinessTime'
    });

*/
Ext.define('Gnt.data.CalendarManager', {

    extend              : 'Ext.data.TreeStore',

    requires            : ['Gnt.data.Calendar'],

    mixins              : [
        'Sch.data.mixin.UniversalModelGetter'
    ],

    model               : 'Gnt.model.Calendar',

    alias               : 'store.calendarmanager',

    storeId             : 'calendars',

    /**
     * @cfg {String} calendarClass
     * The name of a class that will be used to create calendar instances.
     * If {@link Gnt.model.Calendar.calendarClass calendarClass} field is specified on a {@link Gnt.model.Calendar record} then it will be used instead.
     */
    calendarClass       : 'Gnt.data.Calendar',

    /**
     * @cfg {Object} calendarConfig An object to be applied to the newly created instance of the {@link Gnt.widget.calendar.Calendar}.
     */
    calendarConfig      : null,

    projectCalendar     : null,

    myListeners         : null,

    constructor : function (config) {
        config  = config || {};

        if (!config.proxy) config.proxy = { type : 'memory' };

        this.callParent([ config ]);

        this.myListeners = this.on({
            idchanged       : this.onChangeId,
            rootchange      : this.onNewRoot,
            nodeappend      : this.onNewNode,
            nodeinsert      : this.onNewNode,
            noderemove      : this.onRemoveNode,

            destroyable     : true,
            scope       : this
        });

        var root = this.getRoot();

        if (root) {
            this.bindCalendars(root);
        } else {
            this.setRoot({ expanded : true });
        }

    },


    destroy : function () {
        this.myListeners.destroy();
        this.callParent(arguments);
    },


    onChangeId : function (node, oldId, newId, oldInternalId) {
        if (!(node instanceof Gnt.model.Calendar)) return;

        var calendar    = this.getCalendar(oldId || oldInternalId);

        calendar.setCalendarId(newId);
    },


    // @override
    // TODO get rid of this if ext5 will restore support of 'idchanged' event
    onIdChanged : function (node, oldId, newId) {
        this.onChangeId(node, oldId, newId);
        return this.callParent(arguments);
    },


    onNewNode : function (parent, node) {
        // create/bind calendar for the new node and for each of its children
        this.bindCalendars(node);

        if (node !== this.getRoot()) {
            this.fixCalendarParent(node);
        }

        var me  = this;

        node.cascadeBy(function (node) { node.setCalendarManager(me); });
    },

    onNewRoot : function(root){
        this.onNewNode(null, root);
    },

    onRemoveNode : function (parent, node, isMove) {
        if (!isMove) {
            var calendar    = node.calendar;

            if (calendar) {
                this.unbindCalendarEvents(calendar);

                // if we're not in the middle of calendar manager loading
                // let's destroy the calendar instance
                if (!this.__loading) {
                    calendar.destroy();

                    Ext.data.StoreManager.unregister(calendar);
                }

                node.setCalendarManager(null);
            }
        }
    },


    suspendCalendarsEvents : function (queueSuspended) {
        this.getRoot().cascadeBy(function (node) {
            var c   = node.getCalendar();
            if (c) c.suspendEvents(queueSuspended);
        }, this);
    },


    resumeCalendarsEvents : function () {
        this.getRoot().cascadeBy(function (node) {
            var c   = node.getCalendar();
            if (c) c.resumeEvents();
        }, this);
    },


    getCalendarClass : function () {
        return this.calendarClass;
    },


    /**
     * Returns the project calendar.
     * @return {Gnt.data.Calendar} The project calendar.
     */
    getProjectCalendar : function () {
        return this.projectCalendar;
    },


    /**
     * Sets the project calendar.
     * @param {Gnt.data.Calendar/String} calendar The project calendar or its identifier.
     */
    setProjectCalendar : function (calendar) {
        if (typeof calendar !== 'object') {
            calendar    = this.getCalendar(calendar) || Gnt.data.Calendar.getCalendar(calendar);
        }

        if (!calendar) return;

        this.projectCalendar    = calendar;

        /**
         * @event projectcalendarset
         * Fires after {@link #setProjectCalendar} completion.
         * @param {Gnt.data.CalendarManager} calendarManager The calendar manager.
         * @param {Gnt.data.Calendar} calendar The calendar that was set as a project calendar.
         */
        this.fireEvent('projectcalendarset', this, calendar);
    },


    /**
     * Returns the calendar instance by specified identifier.
     * @param {String} calendarId Calendar identified.
     * @return {Gnt.data.Calendar}
     */
    getCalendar : function (calendarId) {
        var record  = this.getModelById(calendarId);

        return record && record.getCalendar();
    },


    getNodeByCalendar : function (calendar) {
        // only root node is supposed to not have a calendar assigned
        if (!calendar) return this.getRoot();

        var result = this.getModelById(calendar.calendarId);

        if (!result) {
            this.getRoot().cascadeBy(function (node) {
                var c   = node.getCalendar();
                if (c === calendar) {
                    result = node;
                    return false;
                }
            }, this);
        }

        return result;
    },


    onParentChange : function (calendar, parent, oldParent) {
        var node    = this.getNodeByCalendar(calendar);

        if (node && !node.syncingCalendarParent) {
            this.fixNodeParent(node);
        }
    },


    bindCalendarEvents : function (calendar) {
        /**
         * @event calendarload
         * Fires after a calendar instance was loaded.
         * @param {Gnt.data.Calendar} calendar Calendar that was loaded.
         * @param {Gnt.model.CalendarDay[]} days An array of records
         * @param {Boolean} successful True if the operation was successful.
         * @param {Object} eOpts The options object passed to Ext.util.Observable.addListener.
         */
        this.relayEvents(calendar, ['load'], 'calendar');
        /**
         * @event dayadd
         * Fired when a {@link Gnt.model.CalendarDay} instance has been added to a calendar.
         * @param {Gnt.data.Calendar} calendar Calendar that got new record.
         * @param {Gnt.model.CalendarDay[]} days The days that were added.
         * @param {Number} index The index at which the instances were inserted
         * @param {Object} eOpts The options object passed to Ext.util.Observable.addListener.
         */
        /**
         * @event dayupdate
         * Fired when a {@link Gnt.model.CalendarDay} instance has been updated.
         * @param {Gnt.data.Calendar} calendar Calendar that holds the modified record.
         * @param {Gnt.model.CalendarDay} day The day record that was added.
         * @param {String} operation The update operation being performed. Value may be one of:
         *
         *  - `Ext.data.Model.EDIT`
         *  - `Ext.data.Model.REJECT`
         *  - `Ext.data.Model.COMMIT`
         * @param {String[]} modifiedFieldNames Array of field names changed during edit.
         * @param {Object} eOpts The options object passed to Ext.util.Observable.addListener.
         */
        /**
         * @event dayremove
         * Fired when a {@link Gnt.model.CalendarDay} instance has been removed from a calendar.
         *
         * **If many days may be removed in one go, then it is more efficient to listen for the {@link #event-daybulkremove} event
         * and perform any processing for a bulk remove than to listen for this {@link #event-dayremove} event.**
         * @param {Gnt.data.Calendar} calendar The calendar object.
         * @param {Gnt.model.CalendarDay} day The day record that was removed.
         * @param {Number} index The index of the day record that was removed.
         */
        /**
         * @event daybulkremove
         * Fired at the *end* of the {@link Gnt.data.Calendar#method-remove remove} method when all days in the passed array have been removed.
         *
         * If many records may be removed in one go, then it is more efficient to listen for this event
         * and perform any processing for a bulk remove than to listen for many {@link #event-dayremove} events.
         * @param {Gnt.data.Calendar} calendar The calendar object.
         * @param {Gnt.model.CalendarDay[]} days The array of days that were removed (In the order they appear in the calendar).
         * @param {Number[]} indexes The indexes of the days that were removed.
         */
        this.relayEvents(calendar, ['add', 'update', 'remove', 'bulkremove'], 'day');
        /**
         * @event calendarchange
         * Fired after calendar data has been changed (like day add, edit, remove).
         * @param {Gnt.data.Calendar} calendar The calendar object.
         */
        this.relayEvents(calendar, ['calendarchange']);

        calendar.on('parentchange', this.onParentChange, this);

        // we listen to relayed versions of events here since they fired before
        // original calendar add/update/remove events and we need our onDayAdd/onDayUpdate/onDayRemove to get executed
        // before gantt CRUD manager notice changes (and it listens to dayadd/dayupdate/dayremove)
        this.on({
            dayadd    : this.onDayAdd,
            dayupdate : this.onDayUpdate,
            dayremove : this.onDayRemove,

            scope     : this
        });
    },


    unbindCalendarEvents : function (calendar) {
        this.un({
            dayadd    : this.onDayAdd,
            dayupdate : this.onDayUpdate,
            dayremove : this.onDayRemove,

            scope     : this
        });

        calendar && calendar.un({
            parentchange : this.onParentChange,

            scope        : this
        });
    },


    onDayAdd : function (store, record) {
        this.getModelById(store.getCalendarId()).dirty = true;
    },


    onDayUpdate : function (store, record) {
        this.getModelById(store.getCalendarId()).dirty = true;
    },


    onDayRemove : function (store, record) {
        this.getModelById(store.getCalendarId()).dirty = true;
    },


    fixCalendarParent : function (node) {
        if (node.syncingCalendarParent) return;

        var parentNodeCalendar  = node.parentNode.getCalendar(),
            nodeCalendar        = node.getCalendar();

        if (parentNodeCalendar !== nodeCalendar.parent) {
            node.syncingCalendarParent = true;
            nodeCalendar.setParent(parentNodeCalendar);
            node.syncingCalendarParent = false;
        }
    },


    fixNodeParent : function (node) {
        var parentNodeCalendar  = node.parentNode.getCalendar(),
            calendarParent      = node.getCalendar().parent;

        // here we put "node" to the proper "parentNode" based on "calendar.parent"
        if (parentNodeCalendar !== calendarParent) {
            var properParentNode    = this.getNodeByCalendar(calendarParent);
            properParentNode && properParentNode.appendChild(node);
        }
    },


    bindCalendar : function (record) {
        if (!record || this.getRoot() === record) return;

        var calendar    = record.getCalendar();
        var days        = record.getDays();
        var id          = record.getId() || record.internalId;
        days            = Ext.isArray(days) && days;

        // if no calendar specified on the record or provided array of days to build new calendar
        if (!calendar || days) {

            if (!calendar) {
                // // let's try to get calendar by record identifier
                // calendar    = this.getCalendar(id);
                // // if this calendar is already bound to calendar manager
                // if (calendar) {
                //     // let's set link to it from the record
                //     record.setCalendar(calendar);
                //     return;
                // }

                // try to find calendar by record Id
                calendar    = Gnt.data.Calendar.getCalendar(id);
            }

            // if we don't have the calendar registered yet
            if (!calendar) {

                // get parent calendar
                var parent          = record.parentNode && record.parentNode.getCalendar();

                var calendarClass   = Ext.ClassManager.get(record.getCalendarClass() || this.calendarClass);

                var calendarConfig  = Ext.applyIf(record.getCalendarConfig(), {
                    data            : days,
                    parent          : parent
                });

                // create calendar instance
                calendar    = Ext.create(calendarClass, Ext.apply(calendarConfig, this.calendarConfig));
            }

            record.setCalendar(calendar);

            this.bindCalendarEvents(calendar);

        // if calendar specified on the record but not registered in the calendar manager
        } else if (!this.getCalendar(calendar.calendarId)) {
            // bind calendar manager listeners to it
            this.bindCalendarEvents(calendar);
        }

        /**
         * @event calendarbound
         * Fires after a calendar instance has been assigned to a record.
         * @param {Gnt.data.CalendarManager} calendarManager Calendar manager instance.
         * @param {Gnt.data.Calendar} calendar Calendar assigned to a record.
         * @param {Gnt.model.Calendar} record Record that was bound to a calendar.
         */
        this.fireEvent('calendarbound', this, calendar, record);
    },


    unbindCalendar : function (record) {
        if (!record || this.getRoot() === record) return;

        var calendar    = record.getCalendar();
        if (!calendar) return;

        this.unbindCalendarEvents(calendar);

        this.fireEvent('calendarunbound', this, calendar, record);
    },


    bindCalendars : function (node) {
        var me  = this;

        if (node) {
            if (Ext.isArray(node)) {
                Ext.each(node, function (n) {
                    n.cascadeBy(me.bindCalendar, me);
                });
            } else {
                node.cascadeBy(me.bindCalendar, me);
            }
        }
    },


    unbindCalendars : function (node) {
        var me  = this;

        if (node) {
            if (Ext.isArray(node)) {
                Ext.each(node, function (n) {
                    n.cascadeBy(me.unbindCalendar, me);
                });
            } else {
                node.cascadeBy(me.unbindCalendar, me);
            }
        }
    }

});

/**

@class Gnt.data.calendar.BusinessTime
@extends Gnt.data.Calendar

A class representing a customizable calendar with weekends, holidays and availability information for any day. 

This class is basically a subclass of {@link Gnt.data.Calendar}, configured for normal business hours availability, 
you can fine-tune its setting if needed. Default availability hours for every day are 08:00-12:00 and 13:00-17:00 
(can be configured with {@link #defaultAvailability} property.

See also {@link Gnt.data.Calendar} for additional information.

*/
Ext.define('Gnt.data.calendar.BusinessTime', {
    extend              : 'Gnt.data.Calendar',
    
    /**
     * Number of days per month. Will be used when converting the big duration units like month/year to days.
     * 
     * @cfg {Number} daysPerMonth
     */
    daysPerMonth        : 20,

    /**
     * Number of days per week. Will be used when converting the duration in weeks to days.
     * 
     * @cfg {Number} daysPerWeek
     */
    daysPerWeek         : 5,

    /**
     * Number of hours per day. Will be used when converting the duration in days to hours.
     * 
     * **Please note**, that this config is used for duration convertion and not anything else. If you need to change
     * the number of working hours in the day, update the {@link #defaultAvailability}
     * 
     * @cfg {Number} hoursPerDay
     */
    hoursPerDay         : 8,
    
    /**
     * @cfg {String[]} defaultAvailability The array of default availability intervals (in the format of the `Availability` field
     * in the {@link Gnt.model.CalendarDay}) for each working weekday (Monday-Friday). 
     */
    defaultAvailability : [ '08:00-12:00', '13:00-17:00' ]
});
/**

@class Gnt.data.DependencyStore
@extends Ext.data.Store

 A class representing a collection of dependencies between the tasks in the {@link Gnt.data.TaskStore}.
 Contains a collection of {@link Gnt.model.Dependency} records.

## Custom validation

You can subclass this Store class like any other Ext JS class and add your own custom validation for Dependencies:

    Ext.define('MyDependencyStore', {
        extend              : 'Gnt.data.DependencyStore',

        // Override this method to provide custom logic defining what constitutes a valid dependency
        getDependencyError  : function (from, to) {
            // Support default validation rules
            var error = this.callParent(arguments);
            if (error) return error;

            // Example: Don`t allow links between tasks of type A, to tasks with type B
            var isDepInput = from instanceof Ext.data.Model;
            var sourceTask = isDepInput ? from.getSourceTask() : this.getTaskById(from);
            var targetTask = isDepInput ? from.getTargetTask() : this.getTaskById(to);

            // Let`s return a custom error code -100 for such case (it must be a negative value)
            if (sourceTask.getType() !== 'A' || targetTask.getType() !== 'B') return -100;

            // No errors
            return 0;
        },

        ...
    })

*/
Ext.define('Gnt.data.DependencyStore', {
    extend          : 'Ext.data.Store',

    mixins          : [
        'Sch.data.mixin.UniversalModelGetter'
    ],

    model           : 'Gnt.model.Dependency',

    storeId         : 'dependencies',
    alias           : 'store.gantt_dependencystore',

    /**
     * @property {Gnt.data.TaskStore} taskStore The task store to which this dependency store is associated.
     * Usually is configured automatically, by the task store itself.
     */
    taskStore       : null,

    methodsCache    : null,

    /**
     * @cfg {Boolean} strictDependencyValidation A boolean flag indicating whether a strict validation of dependencies should be applied.
     * This mode will detect indirect cycles between parent-child relationships.
     * For example, the following cases will be considered as invalid (here `P1`, `P2`, `P3` are parent tasks and `T1`, `T2`, `T3` - their children respectively):

                P1 =========
                T1 ++++++          P2 =========
                                   T2    +++++        P3 ===============
                                                      T3 +++++++++++++++

     * These cases will be considered as cycles:
     *
     * - if we have dependency `P1---->P2` then dependency `T2---->P1` will be invalid
     * - if we have dependency `P1---->T2` then dependency `T2---->T1` will be invalid
     * - if we have dependency `P1---->P2` then dependency `T2---->T1` will be invalid
     * - if we have dependencies `P1---->P2---->P3` then dependency `T3---->T1` will be invalid
     * - if we have dependency `P1---->T2` then dependency `P2---->T1` will be invalid
     * - if we have dependencies `P1---->T2` `P2---->T3` then dependency `P3---->T1` will be invalid
     * - if we have dependencies `T1---->P2` `T2---->P3` then dependency `T3---->P1` will be invalid
     *
     * and these cases will be treated as transitivity (or duplicating) dependency when {@link #transitiveDependencyValidation} is set to `True`:
     *
     * - if we have dependency `P1---->P2` then dependency `T1---->P2` will be invalid
     * - if we have dependency `P1---->T2` then dependency `T1---->T2` will be invalid
     * - if we have dependency `P1---->P2` then dependency `T1---->T2` will be invalid
     * - if we have dependencies `P1---->P2---->P3` then dependency `T1---->T3` will be invalid
     * - if we have dependency `P1---->T2` then dependency `T1---->P2` will be invalid
     * - if we have dependencies `P1---->T2` `P2---->T3` then dependency `T1---->P3` will be invalid
     * - if we have dependencies `T1---->P2` `T2---->P3` then dependency `P1---->T3` will be invalid
     */
    strictDependencyValidation  : false,

    /**
     * @cfg {Boolean} transitiveDependencyValidation When set to true, alternative routes between tasks are considered invalid.
     * For example if we have dependencies `A---->B---->C` and `D---->C` then dependency `A---->D` will be treated as invalid
     * because it builds an alternative route from task `A` to task `C`.
     *
     * When {@link #strictDependencyValidation} is `True` this setting also enables detecting transitivity between groups of tasks.
     * Please see {@link #strictDependencyValidation} description for examples.
     */
    transitiveDependencyValidation  : false,

    // this flag is used to ignore the initial "add" events, that are fired when data is provided in the config
    ignoreInitial               : true,

    // we set it to true to catch `datachanged` event from `loadData` method and ignore this event from records' CRUD operations
    isLoadingRecords            : false,

    /**
     * @cfg {String[]} allowedDependencyTypes
     *
     * Represents a list of the dependency types that are allowed in this store. Any {@link Gnt.panel.Gantt} panel associated with this store
     * will query this store for this information. If set to `null` (the default value) all types of dependencies are allowed.
     * To restrict the allowed dependencies set, provide it as an array of strings, corresponding to the names in the {@link Gnt.model.Dependency#Type} enumerable.
     *
     * For example:
     *
     *          allowedDependencyTypes : [ 'StartToEnd', 'EndToEnd' ]
     *
     */
    allowedDependencyTypes      : null,

    proxy   : 'memory',

    /**
     * @cfg {Boolean} allowParentTaskDependencies Set to `false` to disallow dependencies involving parent tasks.
     */
    allowParentTaskDependencies : true,

    constructor : function(config) {
        config  = config || {};


        // subscribing to the CRUD before parent constructor - in theory, that should guarantee, that our listeners
        // will be called first (before any other listeners, that could be provided in the "listeners" config)
        // and state in other listeners will be correct

        this.callParent([config]);

        this.init();

        this.ignoreInitial      = false;
    },

    init : function() {
        this.methodsCache   = {};

        this.on({
            add         : this.onDependencyAdd,
            update      : this.onDependencyUpdate,

            load        : this.onDependencyLoad,
            // look like it is not required since we're updating cache on record CRUD and they fire `datachanged` event
            // this mean when we catch this event cache should be already updated
            datachanged : this.onDependencyDataChanged,

            // seems we can't use "bulkremove" event, because one can listen to `remove` event on the task store
            // and expect correct state in it
            remove      : this.onDependencyRemove,
            clear       : this.onDependencyStoreClear,
            priority    : 100,

            scope       : this
        });
    },

    onDependencyLoad    : function () {
        var taskStore = this.getTaskStore();
        taskStore && taskStore.fillTasksWithDepInfo();
    },

    onDependencyDataChanged : function () {
        var taskStore = this.getTaskStore();
        if (this.isLoadingRecords && taskStore) taskStore.fillTasksWithDepInfo();
    },


    loadRecords    : function () {
        this.isLoadingRecords = true;
        this.callParent(arguments);
        this.isLoadingRecords = false;
    },


    // Checks if a provided task is fully scheduled and sets its empty start/end/duration fields otherwise.
    scheduleTask : function (task) {
        var taskStore = this.getTaskStore(),
            startDate = task.getStartDate(),
            endDate   = task.getEndDate();

        if (!startDate || !endDate) {
            task.beginEdit();

            // if task doesn't have a start date let's set it to the project start date
            if (!startDate) {
                task.setStartDateWithoutPropagation(taskStore.getProjectStartDate(), undefined !== task.getDuration());
            }
            // default duration is gonna be 1 duration unit (day by default)
            if (!endDate) {
                task.setDurationWithoutPropagation(1);
            }

            task.endEdit();
        }
    },


    // Checks tasks linked by dependency if they are fully scheduled
    // and fills their missing start/end/duration values otherwise.
    scheduleLinkedTasks : function (from, to) {
        // schedule predecessor (if required)
        this.scheduleTask(from);

        // if successor has no start date and `cascadeChanges` is disabled we'll try to
        // schedule it by alignByIncomingDependencies() call
        if (!to.getStartDate() && !from.getTaskStore().cascadeChanges) {
            to.alignByIncomingDependencies();
        }

        // schedule successor (if required)
        this.scheduleTask(to);
    },


    onDependencyAdd : function (me, dependencies) {
        // need to ignore the initial "add" events for data provided in the config
        if (this.ignoreInitial) return;

        for (var i = 0; i < dependencies.length; i++) {
            var dependency  = dependencies[ i ];

            if (!this.isValidDependencyType(dependency.getType())) throw 'This dependency type is invalid. Check Gnt.data.DependencyStore#allowedDependencyTypes value';

            var from        = dependency.getSourceTask(),
                to          = dependency.getTargetTask();

            if (from && to) {
                from.successors.push(dependency);
                to.predecessors.push(dependency);

                // ensure that tasks being linked are fully scheduled
                this.scheduleLinkedTasks(from, to);
            }
        }

        me.resetMethodsCache();
    },


    onDependencyRemove : function (me, dependencies, index, isMove) {
        var taskStore       = this.getTaskStore();

        // dependecies are already removed from the dependecies store and has no reference to it
        // so `getTaskStore` on the dependency instance won't work, need to provide `taskStore`
        Ext.each(dependencies, function (dependency) {
            var from        = dependency.getSourceTask(taskStore),
                to          = dependency.getTargetTask(taskStore);

            if (from) Ext.Array.remove(from.successors, dependency);
            if (to) Ext.Array.remove(to.predecessors, dependency);
        });

        me.resetMethodsCache();
    },


    onDependencyUpdate : function (me, dependency, operation) {
        if (operation != Ext.data.Model.COMMIT) {
            var taskStore       = this.getTaskStore();
            var previous        = dependency.previous;

            var newFromTask     = dependency.getSourceTask();
            var newToTask       = dependency.getTargetTask();
            var fromChanged     = previous && dependency.fromField in previous;
            var toChanged       = previous && dependency.toField in previous;

            if (fromChanged) {
                var oldFromTask = taskStore.getModelById(previous[ dependency.fromField ]);

                oldFromTask && Ext.Array.remove(oldFromTask.successors, dependency);

                if (newFromTask && Ext.Array.indexOf(newFromTask.successors, dependency) < 0) {
                    newFromTask.successors.push(dependency);
                }
            }

            if (toChanged) {
                var oldToTask   = taskStore.getModelById(previous[ dependency.toField ]);
                // remove from old array
                oldToTask && Ext.Array.remove(oldToTask.predecessors, dependency);

                if (newToTask && Ext.Array.indexOf(newToTask.predecessors, dependency) < 0) {
                    newToTask.predecessors.push(dependency);
                }
            }

            if ((fromChanged || toChanged) && newFromTask && newToTask) {
                this.scheduleLinkedTasks(newFromTask, newToTask);
            }

            this.resetMethodsCache();
        }
    },


    onDependencyStoreClear : function (me) {
        var taskStore       = me.getTaskStore();

        taskStore && taskStore.fillTasksWithDepInfo();
    },

    /**
     * Returns all dependencies of for a certain task (both incoming and outgoing)
     *
     * @param {Gnt.model.Task} task
     *
     * @return {Gnt.model.Dependency[]}
     */
    getDependenciesForTask : function (task) {
        return task.successors.concat(task.predecessors);
    },

    /**
     * Returns all incoming dependencies of the given task
     *
     * @param {Gnt.model.Task} task
     *
     * @return {Gnt.model.Dependency[]}
     */
    getIncomingDependenciesForTask: function (task, doNotClone) {
        return doNotClone ? task.predecessors : task.predecessors.slice();
    },


    /**
     * Returns all outcoming dependencies of a task
     *
     * @param {Gnt.model.Task} task
     *
     * @return {Gnt.model.Dependency[]}
     */
    getOutgoingDependenciesForTask: function (task, doNotClone) {
        return doNotClone ? task.successors : task.successors.slice();
    },

    // @private
    // Serializes array of dependencies. Used during cache key calculation.
    getKeyByDeps : function (dependencies, fromField, toField) {
        if (!dependencies || !dependencies.length) return '';

        var key     = '';

        for (var i = 0, l = dependencies.length; i < l; i++) {
            var dep     = dependencies[i];

            key += (dep.getSourceId && dep.getSourceId() || dep[fromField]) + ':' +
                (dep.getTargetId && dep.getTargetId() || dep[toField]) + ',';
        }

        return key;
    },


    buildCacheKey : function (sourceId, targetId, ignoreDepRecords, addDepRecords, context) {
        var fromField       = context.fromField || (context.fromField = this.model.prototype.fromField),
            toField         = context.toField || (context.toField = this.model.prototype.toField),
            ignoreDepKey    = context.ignoreDepKey,
            addDepKey       = context.addDepKey;

        // let's preserve key part calculated by ignoreDepRecords and addDepRecords since they will not change
        if (!context.hasOwnProperty('ignoreDepKey')) {
            context.ignoreDepKey    = ignoreDepKey    = ignoreDepRecords && this.getKeyByDeps(ignoreDepRecords, fromField, toField) || '';
            context.addDepKey       = addDepKey       = addDepRecords && this.getKeyByDeps(addDepRecords, fromField, toField) || '';
        }

        // calculate cache key for provided arguments
        return sourceId + '-' + targetId + '-' + ignoreDepKey + '-' + addDepKey;
    },


    /**
     * Returns `true` if there is a dependency (either direct or "transitive") between tasks
     * with `sourceId` and `targetId`
     *
     * @param {String} sourceId
     * @param {String} targetId
     * @param {Gnt.model.Dependency[]} [ignoreDepRecords] If provided, dependencies in this array will be ignored during transitivity search.
     * @param {Gnt.model.Dependency[]/Object[]} [addDepRecords] If provided, search will be done supposing that specified records exist in the dependency store.
     *
     * @return {Boolean}
     */
    hasTransitiveDependency: function (sourceId, targetId, ignoreDepRecords, addDepRecords, context) {
        context             = context || { visitedTasks : {}};

        // calculate cache key for provided arguments
        var cacheKey        = this.buildCacheKey(sourceId, targetId, ignoreDepRecords, addDepRecords, context);

        var visitedTasks    = context.visitedTasks,
            extraSuccessors = context.extraSuccessors;

        if (this.isCachedResultAvailable('hasTransitiveDependency', cacheKey)) {
            return this.methodsCache.hasTransitiveDependency[ cacheKey ];
        }

        var me              = this,
            fromField       = context.fromField,
            toField         = context.toField,
            sourceTask      = this.getTaskById(sourceId),
            i, l;

        // protection from cycles
        if (visitedTasks[ sourceId ]) return false;

        visitedTasks[ sourceId ] = true;

        if (sourceTask) {
            // if list of dependencies to be created is provided let's
            // organize it as a hash containing successors list by task ids
            if (addDepRecords && !extraSuccessors) {
                extraSuccessors = context.extraSuccessors     = {};

                for (i = 0, l = addDepRecords.length; i < l; i++) {
                    var dep     = addDepRecords[i];
                    var from    = dep.getSourceId && dep.getSourceId() || dep[fromField];

                    extraSuccessors[from] = extraSuccessors[from] || [];
                    extraSuccessors[from].push(dep);
                }
            }

            var dependency,
                successors      = sourceTask.successors;

            // add successors to be added to existing successors
            if (extraSuccessors && extraSuccessors[sourceId]) successors = successors.concat(extraSuccessors[sourceId]);

            for (i = 0, l = successors.length; i < l; i++) {
                dependency  = successors[ i ];
                var target  = dependency.getTargetId && dependency.getTargetId() || dependency[toField];

                if ((!ignoreDepRecords || Ext.Array.indexOf(ignoreDepRecords, dependency) == -1) &&
                    (target === targetId || me.hasTransitiveDependency(target, targetId, ignoreDepRecords, addDepRecords, context))) {
                    return this.setCachedResult('hasTransitiveDependency', cacheKey, true);
                }
            }
        }

        return this.setCachedResult('hasTransitiveDependency', cacheKey, false);
    },


    successorsHaveTransitiveDependency : function (sourceId, targetId, ignoreDepRecords, addDepRecords, context) {
        context             = context || {};

        // calculate cache key for provided arguments
        var cacheKey        = this.buildCacheKey(sourceId, targetId, ignoreDepRecords, addDepRecords, context);

        var task            = targetId instanceof Gnt.model.Task ? targetId : this.getTaskById(targetId);

        if (this.isCachedResultAvailable('successorsHaveTransitiveDependency', cacheKey)) {
            return this.methodsCache.successorsHaveTransitiveDependency[ cacheKey ];
        }

        for (var i = 0, l = task.successors.length; i < l; i++) {
            var toId    = task.successors[i].getTargetId();

            if (this.hasTransitiveDependency(sourceId, toId, ignoreDepRecords, addDepRecords) ||
                this.predecessorsHaveTransitiveDependency(sourceId, toId, ignoreDepRecords, addDepRecords) ||
                this.successorsHaveTransitiveDependency(sourceId, toId, ignoreDepRecords, addDepRecords, context))
                    return this.setCachedResult('successorsHaveTransitiveDependency', cacheKey, true);
        }

        return this.setCachedResult('successorsHaveTransitiveDependency', cacheKey, false);
    },


    predecessorsHaveTransitiveDependency : function (sourceId, targetId, ignoreDepRecords, addDepRecords, context) {
        context             = context || {};

        // calculate cache key for provided arguments
        var cacheKey        = this.buildCacheKey(sourceId, targetId, ignoreDepRecords, addDepRecords, context);

        var task            = sourceId instanceof Gnt.model.Task ? sourceId : this.getTaskById(sourceId);

        if (this.isCachedResultAvailable('predecessorsHaveTransitiveDependency', cacheKey)) {
            return this.methodsCache.predecessorsHaveTransitiveDependency[ cacheKey ];
        }

        for (var i = 0, l = task.predecessors.length; i < l; i++) {
            var fromId    = task.predecessors[i].getSourceId();

            if (this.hasTransitiveDependency(fromId, targetId, ignoreDepRecords, addDepRecords) ||
                this.successorsHaveTransitiveDependency(fromId, targetId, ignoreDepRecords, addDepRecords) ||
                this.predecessorsHaveTransitiveDependency(fromId, targetId, ignoreDepRecords, addDepRecords, context))
                    return this.setCachedResult('predecessorsHaveTransitiveDependency', cacheKey, true);
        }

        return this.setCachedResult('predecessorsHaveTransitiveDependency', cacheKey, false);
    },


    isPartOfTransitiveDependency : function (sourceId, targetId, ignoreDepRecords, addDepRecords) {
        var task    = sourceId instanceof Gnt.model.Task ? sourceId : this.getTaskById(sourceId);

        if (!task.predecessors.length && !task.successors.length) return false;

        if (task.predecessors.length) {
            return this.predecessorsHaveTransitiveDependency.apply(this, arguments);
        } else {
            return this.successorsHaveTransitiveDependency.apply(this, arguments);
        }
    },


    getCycle : function (context) {
        context             = context || {};

        Ext.applyIf(context, {
            ignoreTasks     : {},
            visitedTasks    : {},
            path            : [],
            task            : this.getAt(0).getSourceTask()
        });

        var visitedTasks    = context.visitedTasks,
            ignoreTasks     = context.ignoreTasks,
            path            = context.path,
            task            = context.task,
            taskId          = task.getId();

        if (ignoreTasks[taskId]) return;

        path.push(task);

        if (visitedTasks[taskId]) return path;

        visitedTasks[taskId]    = true;

        var successors          = task.successors;

        for (var i = 0, l = successors.length; i < l; i++) {
            context.task    = successors[ i ].getTargetTask();

            var cycle       = this.getCycle(context);

            if (cycle) return cycle;
        }

        path.pop();
        delete visitedTasks[taskId];
    },


    // TODO improve so it can detect all cycles
    getCycles : function () {
        var me          = this,
            result      = [],
            ignoreTasks = {};

        this.each(function (dep) {
            var path    = me.getCycle({ task : dep.getSourceTask(), ignoreTasks : ignoreTasks });

            if (path) {
                for (var i = 0, l = path.length; i < l; i++) {
                    ignoreTasks[path[i]]    = true;
                }
                result.push(path);
            }
        });

        return result;
    },


    resetMethodsCache : function () {
        this.methodsCache   = {};
    },


    isCachedResultAvailable : function (method, key) {
        return this.methodsCache[method] && this.methodsCache[method].hasOwnProperty(key);
    },


    getCachedResult : function (method, key) {
        return this.methodsCache[ method ][ key ];
    },


    setCachedResult : function (method, key, value) {
        this.methodsCache[method]       = this.methodsCache[method] || {};
        this.methodsCache[method][key]  = value;

        return value;
    },

    //@private
    getGroupTopTasks : function(sourceGroup, targetGroup) {
        var sourceGroupLength    = sourceGroup.length,
            targetGroupLength    = targetGroup.length,
            i                    = sourceGroupLength,
            j                    = targetGroupLength,
            sourceTopParent, targetTopParent;

        do {
            sourceTopParent     = sourceGroup[i];
            targetTopParent     = targetGroup[j];
            i--;
            j--;
        } while (sourceTopParent == targetTopParent && i >= 0 && j>=0);

        return [sourceTopParent, targetTopParent];
    },

    groupsHasTransitiveDependency : function (sourceId, targetId, ignoreDepRecords, addDepRecords, context) {
        var ctx     = context || {
            targets         : null,
            visitedTasks    : {}
        };

        var root                = this.getTaskStore().getRootNode(),
            result              = false,
            me                  = this,
            source              = this.getTaskById(sourceId),
            target              = this.getTaskById(targetId),
            visitedTasks        = ctx.visitedTasks,
            targets             = ctx.targets;

        if (!ctx.targetGroup) {
            ctx.targetGroup     = target.getTopParent(true);
        }

        var fromField       = ctx.fromField || (ctx.fromField = this.model.prototype.fromField),
            toField         = ctx.toField || (ctx.toField = this.model.prototype.toField),
            ignoreDepKey    = ctx.ignoreDepKey,
            addDepKey       = ctx.addDepKey;

        // get groups top elements based on their intersection
        var groups          = this.getGroupTopTasks(source.getTopParent(true), ctx.targetGroup),
            sourceTopParent = groups[0],
            targetTopParent = groups[1];

        if (sourceTopParent === source && targetTopParent === target && source.isLeaf() && target.isLeaf()) {
            return this.hasTransitiveDependency(sourceId, targetId, ignoreDepRecords);
        }

        // let's preserve key part calculated by ignoreDepRecords and addDepRecords since they will not change
        if (!ctx.hasOwnProperty('ignoreDepKey')) {
            ctx.ignoreDepKey    = ignoreDepKey    = ignoreDepRecords && this.getKeyByDeps(ignoreDepRecords, fromField, toField) || '';
            ctx.addDepKey       = addDepKey       = addDepRecords && this.getKeyByDeps(addDepRecords, fromField, toField) || '';
        }

        // calculate cache key for provided arguments
        var cacheKey        = sourceTopParent.getId() + '-' + targetTopParent.getId() + '-' + ignoreDepKey + '-' + addDepKey;

        if (this.isCachedResultAvailable('groupsHasTransitiveDependency', cacheKey)) {
            return this.methodsCache.groupsHasTransitiveDependency[cacheKey];
        }

        // if top target element has changed for this source group
        // then we need to regather "targets" hash
        if (targetTopParent !== ctx.targetTopParent) {
            ctx.targetTopParent     = targetTopParent;
            targets                 = ctx.targets = {};
            // collect children Ids into targets hash
            targetTopParent.cascadeBy(function (task) { targets[ task.getId() ] = true; });
        }

        var extraSuccessors     = ctx.extraSuccessors;

        // if list of dependencies to be created is provided let's
        // organize it as a hash containing successors list by task ids
        if (addDepRecords && !extraSuccessors) {
            extraSuccessors = ctx.extraSuccessors     = {};

            for (var i = 0, l = addDepRecords.length; i < l; i++) {
                var dep     = addDepRecords[i];
                var from    = dep.getSourceId && dep.getSourceId() || dep[fromField];

                extraSuccessors[from] = extraSuccessors[from] || [];
                extraSuccessors[from].push(dep);
            }
        }

        // for each source group task we check if any of its succeeding task is in "targets" hash
        sourceTopParent.cascadeBy(function (task) {
            if (task !== root) {
                var taskId      = task.getId();

                // data cycles protection
                if (visitedTasks[ taskId ]) return false;

                visitedTasks[ taskId ]  = true;

                var successors          = task.successors;

                // add successors to be added to existing successors
                if (extraSuccessors && extraSuccessors[taskId]) successors = successors.concat(extraSuccessors[taskId]);

                for (var i = 0, l = successors.length; i < l; i++) {
                    var dependency  = successors[i],
                        toId        = dependency.getTargetId && dependency.getTargetId() || dependency[toField];
                    // if succeeding task is not in ignore list
                    // and it's in "targets" then we found transitivity
                    // otherwise we go deeper
                    if ((!ignoreDepRecords || Ext.Array.indexOf(ignoreDepRecords, dependency) == -1) &&
                        (targets[toId] || me.groupsHasTransitiveDependency(toId, targetId, ignoreDepRecords, addDepRecords, ctx))) {
                        result  = true;
                        return false;
                    }
                }
            }
        });

        // update cache
        return this.setCachedResult('groupsHasTransitiveDependency', cacheKey, result);
    },


    /**
     * Validates a provided dependency and returns a corresponding error code or zero if no error was detected.
     * This method can validate either an existing {@link Gnt.model.Dependency} instance or a proposed (about to be created) link
     * that can be specified as source and target task identifiers plus the dependency type.
     *
     * If you subclass this class, you can provide your own version of this method.
     * Please note that this method is supposed to return a negative integer error code so
     * ensure that you choose some unused values for any new kind of validation.
     * Don't forget to call the parent implementation if you also want to check for cyclic dependencies etc.
     *
     * These scenarios are considered invalid:
     *
     * - a task linking to itself
     * - a dependency between a child and one of its parents
     * - transitive dependencies (this check is done only when {@link #transitiveDependencyValidation} is set to `True`), e.g. if A -> B, B -> C, then A -> C is not valid, or if A -> B, A -> C, then B -> C is not valid
     * - cyclic dependencies, e.g. if A -> B, B -> C, then C -> A is not valid
     *
     * **Note:** This method behavior depends on {@link #transitiveDependencyValidation} and {@link #strictDependencyValidation} option.
     * The first config enables so called _transitivity_ validation. And when {@link #strictDependencyValidation} is turned on,
     * the system tries to detect cycles (and transitivity if {@link #transitiveDependencyValidation} enabled) cases between groups of tasks.
     *
     * The method can be used either by providing a dependency as the first argument (then `toId` and `type` should be omitted):
     *
     *      // checking dependency record
     *      switch (dependencyStore.getDependencyError(dependency)) {
     *          case -3: case -8: case -5:
     *              alert('This dependency builds duplicating transitivity');
     *              break;
     *          case -4: case -7:
     *              alert('This is a cyclic dependency');
     *              break;
     *          ...
     *      }
     *
     * or by providing identifiers of the source and target tasks as well as the type of the dependency (if `type` is not provided it defaults to End-To-Start):
     *
     *      // check if 11 --> 15 dependency is between parent & child
     *      if (dependencyStore.getDependencyError(11, 15) == -9) {
     *          alert('This is a dependency between parent and its child');
     *      }
     *
     * @param {Gnt.model.Dependency/Mixed} dependencyOrFromId Either a dependency or the source task id
     * @param {Mixed} [toId] The target task id. Should be omitted if `dependencyOrFromId` is {@link Gnt.model.Dependency} instance.
     * @param {Number} [type] The type of the dependency. Should be omitted if `dependencyOrFromId` is {@link Gnt.model.Dependency} instance.
     * @param {Gnt.model.Dependency[]/Object[]} [dependenciesToAdd] If provided, validation will be done assuming that the specified records exist in the dependency store.
     * @param {Gnt.model.Dependency[]} [dependenciesToRemove]  If provided, validation will be done assuming that the specified records DO NOT exist in the dependency store.
     * @return {Number} Returns zero if dependency is valid.
     * Full list of possible values is:
     *
     *  - `0`  dependency is valid
     *  - `-1`  other error (wrong input data provided: empty source/target Id(s) or source Id equals target Id)
     *  - `-2`  source (or target) task is not found
     *  - `-3`  transitive dependency (returned only when {@link #transitiveDependencyValidation} is `True`)
     *  - `-4`  cyclic dependency
     *  - `-5`  transitive dependency (dependency being validated is part of larger transitive route) (returned only when {@link #transitiveDependencyValidation} is `True`)
     *  - `-7`  cyclic dependency between groups
     *  - `-8`  transitive dependency between groups (returned only when {@link #transitiveDependencyValidation} is `True`)
     *  - `-9`  dependency between parent and child
     *  - `-10` wrong dependency type
     *  - `-11` dependencies to/from parent tasks not allowed
     *  - `-12` dependencies to projects not allowed
     *  - `-13` dependencies to other project tasks not allowed
     */
    getDependencyError : function (dependencyOrFromId, toId, type, dependenciesToAdd, dependenciesToRemove, calledFromThisDepModel) {
        // `calledFromThisModel` is used when called from `isValid` method of depedency model
        var fromId, fromTask, toTask;

        var modelInput      = dependencyOrFromId instanceof Gnt.model.Dependency;

        // Normalize input
        if (modelInput) {
            fromId                  = dependencyOrFromId.getSourceId();
            fromTask                = this.getTaskById(fromId);

            // if dependency provided then `toId` and `type` arguments can be skipped
            dependenciesToAdd       = toId;
            dependenciesToRemove    = type;

            // if dependency being validated presented in dependenciesToAdd list
            if (dependenciesToAdd && Ext.Array.contains(dependenciesToAdd, dependencyOrFromId)) {
                // make list copy
                dependenciesToAdd   = Ext.Array.slice(dependenciesToAdd, 0);
                // and remove dependency from it
                Ext.Array.remove(dependenciesToAdd, dependencyOrFromId);
            }

            type                    = dependencyOrFromId.getType();
            toId                    = dependencyOrFromId.getTargetId();
            toTask                  = this.getTaskById(toId);

            // if we've been called with dependencies model as 1st arg (modelInput) and that dependency
            // is already in the dep store, this case is identical to called "isValid" method on the dependency record
            if (dependencyOrFromId.joined && dependencyOrFromId.joined.length) calledFromThisDepModel = dependencyOrFromId;
        } else {
            fromId          = dependencyOrFromId;
            fromTask        = this.getTaskById(fromId);
            toTask          = this.getTaskById(toId);

            if (type === undefined) {
                // get default dependency type from the dependency class
                var defaultType = this.model.getField(this.model.prototype.typeField).defaultValue;
                type            = defaultType !== undefined ? defaultType : this.model.Type.EndToStart;
            }
        }

        if (!calledFromThisDepModel && modelInput && !dependencyOrFromId.isValid()) {
            return -1;
        } else if (!fromId || !toId || fromId == toId) {
            return -1;
        }

        // Both tasks need to exist for the link to make sense
        if (!fromTask || !toTask) return -2;

        // check dependency type
        if (!this.isValidDependencyType(type)) return -10;

        // Also, not allowed to setup a link between a parent and its child
        if (fromTask.contains(toTask) || toTask.contains(fromTask)) return -9;

        var depsToIgnore;
        if (dependenciesToRemove || calledFromThisDepModel) {
            depsToIgnore    = [];
            // ignore dependency itself during transitivities/cycles search
            if (calledFromThisDepModel) depsToIgnore.push(calledFromThisDepModel);
            if (dependenciesToRemove) depsToIgnore    = depsToIgnore.concat(dependenciesToRemove);
        }

        // checking the presence of transitivity in forward direction (fromId -> toId) - prevents actual transitivity
        if (this.transitiveDependencyValidation) {
            if (this.hasTransitiveDependency(fromId, toId, depsToIgnore, dependenciesToAdd)) return -3;
        } else {
            // check if tasks are already linked directly
            if (this.areTasksLinkedForward(fromId, toId, depsToIgnore, dependenciesToAdd)) return -3;
        }
        // checking the presence of transitivity in backward direction (toId -> fromId) - prevents cycles
        if (this.hasTransitiveDependency(toId, fromId, depsToIgnore, dependenciesToAdd)) return -4;

        // checking the presence of transitivity between fromId-task and some of toId-task successors
        // or between some of fromId-task predecessors and toId-task
        // it detects cases when we have 1->2, 1->3 dependencies and validating 2->3 dependency
        // and when we have 2->3, 1->3 dependencies and validating 1->2 dependency
        if (this.transitiveDependencyValidation && this.isPartOfTransitiveDependency(fromId, toId, depsToIgnore, dependenciesToAdd)) return -5;

        // if strict dependencies validation mode enabled
        if (this.strictDependencyValidation) {
            // let's check if there is an opposite relation between the tasks parent-child stacks (to prevent cycle)
            if (this.groupsHasTransitiveDependency(toId, fromId, depsToIgnore, dependenciesToAdd)) return -7;
            // also check if there is some other relation of the same direction (to prevent transitivity)
            if (this.transitiveDependencyValidation && this.groupsHasTransitiveDependency(fromId, toId, depsToIgnore, dependenciesToAdd)) return -8;
        }

        if (!this.allowParentTaskDependencies && (!fromTask.isLeaf() || !toTask.isLeaf())) return -11;

        // project record itself cannot be linked w/ a dependency
        if (toTask.isProject || fromTask.isProject) {
            return -12;
        }

        // children of a project are connectible depending on "AllowDependencies" flag
        var toProject   = toTask.getProject(),
            fromProject = fromTask.getProject();

        if (toProject != fromProject) {
            if (toProject && !toProject.getAllowDependencies() || fromProject && !fromProject.getAllowDependencies()) {
                return -13;
            }
        }

        if (toTask.isReadOnly() || fromTask.isReadOnly()) {
            return -14;
        }

        return 0;
    },

    isValidDependencyType   : function (type) {
        if (this.allowedDependencyTypes) {
            var result  = false,
                model   = this.model;

            Ext.each(this.allowedDependencyTypes, function (name) {
                if (model.Type[name] == type) {
                    result = true;

                    return false;
                }
            });

            return result;
        }

        return true;
    },

    /**
     * Returns `true` if a dependency (or about to be created dependency) between two tasks is valid.
     *
     * **Please note,** If you subclass this class, that this method is just a wrapper over {@link #getDependencyError}
     * method so if you want to implement a custom validation please override {@link #getDependencyError}.
     * And don't forget to call the parent implementation if you also want the check for cyclic dependencies etc.
     *
     * These scenarios are considered invalid:
     *
     * - a task linking to itself
     * - a dependency between a child and one of its parents
     * - transitive dependencies, e.g. if A -> B, B -> C, then A -> C is not valid, or if A -> B, A -> C, then B -> C is not valid
     * - cyclic dependencies, e.g. if A -> B, B -> C, then C -> A is not valid
     *
     * **Note:** This method behavior depends on {@link #strictDependencyValidation} option.
     * When {@link #strictDependencyValidation} is turned on the system tries to detect cycles and transitivity cases between _groups of tasks_.
     *
     * Method can be used either by providing dependency in first argument (and then `toId` and `type` **should** be omitted):
     *
     *      // validating dependency record
     *      if (!dependencyStore.isValidDependency(dependency)) ...
     *
     * or by providing identifiers of source and target tasks and type of dependency (here `type` can be omitted as well if no further arguments are required):
     *
     *      // if 11 --> 15 dependency is valid
     *      if (dependencyStore.isValidDependency(11, 15)) {
     *          // let`s create it
     *          dependencyStore.add({ From: 11, To: 15 })
     *      }
     *
     * @param {Gnt.model.Dependency/Mixed} dependencyOrFromId Either a dependency or the source task id
     * @param {Mixed} [toId] The target task id. Should be omitted if `dependencyOrFromId` is {@link Gnt.model.Dependency} instance.
     * @param {Number} [type] The type of the dependency. Should be omitted if `dependencyOrFromId` is {@link Gnt.model.Dependency} instance.
     * @param {Gnt.model.Dependency[]/Object[]} [dependenciesToAdd] If provided, validation will be done supposing that specified records exist in the dependency store.
     * @param {Gnt.model.Dependency[]} [dependenciesToRemove]  If provided, validation will be done supposing that specified records DO NOT exist in the dependency store.
     * @return {Boolean}
     */
    isValidDependency : function (dependencyOrFromId, toId, type, dependenciesToAdd, dependenciesToRemove, calledFromThisDepModel) {
        return !this.getDependencyError(dependencyOrFromId, toId, type, dependenciesToAdd, dependenciesToRemove, calledFromThisDepModel);
    },


    /**
     * Returns true if there is a direct forward dependency between the two tasks.
     * Please see also {@link #areTasksLinked} method to check both forward and backward directions.
     *
     * @param {Mixed/Gnt.model.Task} fromTask The id of source task
     * @param {Mixed/Gnt.model.Task} toTask The id of target task
     *
     * @return {Boolean}
     */
    areTasksLinkedForward : function (fromTaskOrId, toTaskOrId, dependenciesToRemove, dependenciesToAdd) {
        var from        = fromTaskOrId instanceof Gnt.model.Task ? fromTaskOrId : this.getTaskById(fromTaskOrId);
        var to          = toTaskOrId instanceof Gnt.model.Task ? toTaskOrId : this.getTaskById(toTaskOrId);

        if (!from || !to) return false;

        var model       = this.model.prototype,
            fromField   = model.fromField,
            toField     = model.toField;

        var cacheKey    = from.getId() + '-' + to.getId() + '-' +
            (this.getKeyByDeps(dependenciesToRemove, fromField, toField) || '') + '-' +
            (this.getKeyByDeps(dependenciesToAdd, fromField, toField) || '');

        if (this.isCachedResultAvailable('areTasksLinkedForward', cacheKey)) {
            return this.methodsCache.areTasksLinkedForward[ cacheKey ];
        }

        var successors      = from.successors,
            predecessors    = to.predecessors,
            dep, i, l;
        // loop over source task successors and check if some of them is presented in target tasks predecessors
        for (i = 0, l = successors.length; i < l; i++) {
            dep             = successors[i];
            // ignore dependencies provided in dependenciesToRemove array
            if ((!dependenciesToRemove || !Ext.Array.contains(dependenciesToRemove, dep)) && Ext.Array.contains(predecessors, dep))
                return this.setCachedResult('areTasksLinkedForward', cacheKey, true);
        }

        // if provided list of dependencies that we must consider as existing in the store
        if (dependenciesToAdd) {
            var sourceId, targetId;

            // let's loop over it and check if link between task is presented there
            for (i = 0, l = dependenciesToAdd.length; i < l; i++) {
                dep         = dependenciesToAdd[i];
                sourceId    = dep.getSourceId && dep.getSourceId() || dep[fromField];
                targetId    = dep.getTargetId && dep.getTargetId() || dep[toField];

                if (sourceId == from.getId() && targetId == to.getId())
                    return this.setCachedResult('areTasksLinkedForward', cacheKey, true);
            }
        }

        return this.setCachedResult('areTasksLinkedForward', cacheKey, false);
    },


    /**
     * Returns true if there is a direct dependency between the two tasks. The dependency can be forward (from 1st task to 2nd)
     * or backward (from 2nd to 1st).
     *
     * @param {Mixed/Gnt.model.Task} id1 The id of 1st task
     * @param {Mixed/Gnt.model.Task} id2 The id of 2nd task
     *
     * @return {Boolean}
     */
    areTasksLinked : function (fromTaskOrId, toTaskOrId) {
        var from        = fromTaskOrId instanceof Gnt.model.Task ? fromTaskOrId : this.getTaskById(fromTaskOrId);
        var to          = toTaskOrId instanceof Gnt.model.Task ? toTaskOrId : this.getTaskById(toTaskOrId);

        if (!from || !to) return false;

        var cacheKey    = from.getId() + '-' + to.getId();

        if (this.isCachedResultAvailable('areTasksLinked', cacheKey)) {
            return this.methodsCache.areTasksLinked[ cacheKey ];
        }

        return this.setCachedResult('areTasksLinked', cacheKey, this.areTasksLinkedForward(from, to) || this.areTasksLinkedForward(to, from));
    },

    /**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     *
     * @param {String} id1 The id of 1st task
     * @param {String} id2 The id of 2nd task
     *
     * @return {Gnt.model.Dependency|undefined}
     */
    getByTaskIds: function (id1, id2) {
        var index = this.findBy(function (dependency) {

            var toId    = dependency.getTargetId(),
                fromId  = dependency.getSourceId();

            if ((fromId === id1 && toId === id2) || (fromId === id2 && toId === id1)) {
                return true;
            }
        });

        return this.getAt(index);
    },


    getTaskById : function (id) {
        var taskStore = this.getTaskStore();
        return taskStore && taskStore.getModelById(id) || null;
    },


    /**
     * Returns the source task of the dependency
     *
     * @param {Gnt.model.Dependency} dependency The dependency
     * @return {Gnt.model.Task} The source task of this dependency
     */
    getSourceTask : function(dependencyOrId) {
        var id = dependencyOrId instanceof Gnt.model.Dependency ? dependencyOrId.getSourceId() : dependencyOrId;
        return this.getTaskById(id);
    },

    /**
     * Returns the target task of the dependency
     * @param {Gnt.model.Dependency} dependency The dependency
     * @return {Gnt.model.Task} The target task of this dependency
     */
    getTargetTask : function(dependencyOrId) {
        var id = dependencyOrId instanceof Gnt.model.Dependency ? dependencyOrId.getTargetId() : dependencyOrId;
        return this.getTaskById(id);
    },


    /**
     * Returns the {@link Gnt.data.TaskStore} instance, to which this dependency store is attached.
     * @return {Gnt.data.TaskStore}
     */
    getTaskStore : function() {
        return this.taskStore;
    },

    /**
     * Sets the associated task store instance.
     *
     * @param {Gnt.data.TaskStore} store
     */
    setTaskStore : function(store) {
        // TODO: add taskstorechange event firing
        this.taskStore = store;
    }
});

/**

 @class Gnt.data.TaskStore
 @extends Ext.data.TreeStore

 A class representing the tree of tasks in the gantt chart. An individual task is represented as an instance of the {@link Gnt.model.Task} class. The store
 expects the data loaded to be hierarchical. Each parent node should contain its children in a property called 'children' (please note that this is different from the old 1.x
 version where the task store expected a flat data structure)

 Parent tasks
 ------------

 By default, when the start or end date of a task gets changed, its parent task(s) will optionally also be updated. Parent tasks always start at it earliest child and ends
 at the end date of its latest child. So be prepared to see several updates and possibly several requests to server. You can batch them with the {@link Ext.data.proxy.Proxy#batchActions} configuration
 option.

 Overall, this behavior can be controlled with the {@link #recalculateParents} configuration option (defaults to true).

 Cascading
 ---------

 In the similar way, when the start/end date of the task gets changed, gantt *can* update any dependent tasks, so they will start on the earliest date possible.
 This behavior is called "cascading" and is enabled or disabled using the {@link #cascadeChanges} configuration option.

 Integration notes
 ---------

 For details on data integration - please see [this guide](../#!/guide/gantt_data_integration).

 */
Ext.define('Gnt.data.TaskStore', {
    extend                  : 'Ext.data.TreeStore',

    requires                : [
        'Sch.util.Date',
        'Sch.patches.TreeStore',
        'Gnt.data.Linearizator',
        'Gnt.data.util.IdConsistencyManager',
        'Gnt.data.util.ModelPersistencyManager',
        'Gnt.model.Task',
        'Gnt.model.Project',
        'Gnt.data.Calendar',
        'Gnt.data.DependencyStore' // TODO: why do we depend only on Dependency store and not in Resource/Assignments stores as well?
    ],

    mixins                  : [
        'Gnt.patches.TaskStore',
        'Sch.data.mixin.FilterableTreeStore',
        'Sch.data.mixin.UniversalModelGetter',
        'Sch.data.mixin.CacheHintHelper',
        'Sch.data.mixin.EventStore',
        'Gnt.data.mixin.ProjectableStore'
    ],

    model                   : 'Gnt.model.Task',

    alias                   : 'store.gantt_taskstore',

    storeId                 : 'tasks',
    proxy                   : 'memory',

    /**
     * @cfg {String} typeProperty
     * The name of the property in a raw task data block which indicates the type of the task to be created from that raw data.
     * This is used for heterogeneous trees containing both task and project models (the value is set on the `typeProperty` of the DataReader).
     * For example, the data may look like this:
     *
     *      [{
     *          // TaskType provided so Gnt.model.Project instance will be created for the node
     *          TaskType    : 'Gnt.model.Project',
     *          Name        : 'Main Project',
     *          StartDate   : '2015-06-01',
     *          Duration    : 100,
     *          children    : [{
     *              // since TaskType is omitted the store model will be used for the node
     *              Name        : 'Task 1',
     *              StartDate   : '2015-06-01',
     *              Duration    : 10
     *              children    : [{
     *                  // since TaskType is omitted the store model will be used for the node
     *                  Name        : 'Sub-task 1'
     *                  StartDate   : '2015-06-01',
     *                  Duration    : 10,
     *                  leaf        : true
     *              }]
     *          }]
     *      }]
     *
     * The values should correspond to a valid {@link Gnt.model.Task Task} model class.
     */
    typeProperty            : 'TaskType',

    /**
     * @cfg {Gnt.data.CalendarManager} calendarManager A calendar manager instance.
     * If specified then the task store will use its {@link Gnt.data.Calendar project calendar}.
     */
    calendarManager         : null,

    /**
     * @cfg {Gnt.data.Calendar} calendar A {@link Gnt.data.Calendar calendar} instance to use for this task store. **Should be loaded prior the task store**.
     * This option can be also specified as the configuration option for the gantt panel. If not provided, a default calendar, containig the weekends
     * only (no holidays) will be created.
     *
     */
    calendar                : null,

    /**
     * @cfg {Gnt.data.DependencyStore} dependencyStore A `Gnt.data.DependencyStore` instance with dependencies information.
     * This option can be also specified as a configuration option for the gantt panel.
     */
    dependencyStore         : null,


    /**
     * @cfg {Gnt.data.ResourceStore} resourceStore A `Gnt.data.ResourceStore` instance with resources information.
     * This option can be also specified as a configuration option for the gantt panel.
     */
    resourceStore           : null,

    /**
     * @cfg {Gnt.data.AssignmentStore} assignmentStore A `Gnt.data.AssignmentStore` instance with assignments information.
     * This option can be also specified as a configuration option for the gantt panel.
     */
    assignmentStore         : null,

    /**
     * @cfg {Boolean} weekendsAreWorkdays This option will be translated to the {@link Gnt.data.Calendar#weekendsAreWorkdays corresponding option} of the calendar.
     *
     */
    weekendsAreWorkdays     : false,

    /**
     * @cfg {Boolean} cascadeChanges A boolean flag indicating whether a change in some task should be propagated to its depended tasks. Defaults to `false`.
     * This option can be also specified as the configuration option for the gantt panel.
     */
    cascadeChanges          : true,

    /**
     * @cfg {Boolean} batchSync true to batch sync request for 500ms allowing cascade operations, or any other task change with side effects to be batched into one sync call. Defaults to true.
     */
    batchSync               : true,

    /**
     * @cfg {Boolean} recalculateParents A boolean flag indicating whether a change in some task should update its parent task. Defaults to `true`.
     * This option can be also specified as the configuration option for the gantt panel.
     */
    recalculateParents      : true,

    /**
     * @cfg {Boolean} skipWeekendsDuringDragDrop A boolean flag indicating whether a task should be moved to the next earliest available time if it falls on non-working time,
     * during move/resize/create operations. Defaults to `true`.
     * This option can be also specified as a configuration option for the Gantt panel.
     */
    skipWeekendsDuringDragDrop  : true,

    /**
     * @cfg {Number} cascadeDelay If you usually have deeply nested dependencies, it might be a good idea to add a small delay
     * to allow the modified record to be refreshed in the UI right away and then handle the cascading
     */
    cascadeDelay                : 0,

    /**
     * @cfg {Boolean} moveParentAsGroup Set to `true` to move parent task together with its children, as a group. Set to `false`
     * to move only parent task itself. Note, that to enable drag and drop for parent tasks, one need to use the
     * {@link Gnt.panel.Gantt#allowParentTaskMove} option.
     */
    moveParentAsGroup           : true,

    /**
     * @cfg {Boolean} enableDependenciesForParentTasks Set to `true` to process the dependencies from/to parent tasks as any other dependency.
     * Set to `false` to ignore such dependencies and not cascade changes by them.
     *
     * Currently, support for dependencies from/to parent task is limited. Only the "start-to-end" and "start-to-start" dependencies
     * are supported. Also, if some task has incoming dependency from usual task and parent task, sometimes the dependency from
     * parent task can be ignored.
     *
     * Note, that when enabling this option requires the {@link Gnt.data.DependencyStore#strictDependencyValidation} to be set to `true` as well.
     * Otherwise it will be possible to create indirect cyclic dependnecies, which will cause "infinite recursion" exception.
     */
    enableDependenciesForParentTasks : true,

    /**
     * @cfg {Number} availabilitySearchLimit Maximum number of days to search for calendars common availability.
     * Used in various task calculations requiring to respect working time.
     * In these cases system tries to account working time as intersection of assigned resources calendars and task calendar.
     * This config determine a range intersectin will be searched in.
     * For example in case of task end date calculation system will try to find calendars intersection between task start date
     * and task start date plus `availabilitySearchLimit` days.
     */
    availabilitySearchLimit     : 1825, //5*365

    /**
     * @cfg {String} [cycleResolutionStrategy='cut'] Strategy to use to resolve cycles in dependent node sets.
     * Possible values are:
     * - "none"
     * - "exception"
     * - "cut"
     * Each value corresponds to a public function from (@link Gnt.data.linearizator.CycleResolvers}.
     */
    cycleResolutionStrategy     : 'cut',
    /**
     * @cfg {Boolean} [autoNormalizeNodes=true] Flag defining whether to automaticaly normalize nodes by calculating
     *  derivative data fields.
     */
    autoNormalizeNodes : true,

    /**
     * @event filter
     * Will be fired on the call to `filter` method
     * @param {Gnt.data.TaskStore} self This task store
     * @param {Object} args The arguments passed to `filter` method
     */

    /**
     * @event clearfilter
     * Will be fired on the call to `clearFilter` method
     * @param {Gnt.data.TaskStore} self This task store
     * @param {Object} args The arguments passed to `clearFilter` method
     */

    /**
    * @event beforecascade
    * Fires before a cascade operation is initiated
    * @param {Gnt.data.TaskStore} store The task store
    */

    /**
    * @event cascade
    * Fires when after a cascade operation has completed
    * @param {Gnt.data.TaskStore} store The task store
    * @param {Object} context A context object revealing details of the cascade operation, such as 'nbrAffected' - how many tasks were affected.
    */

    cascading                   : false,
    isFillingRoot               : false,
    isSettingRoot               : false,

    earlyStartDates             : null,
    earlyEndDates               : null,
    lateStartDates              : null,
    lateEndDates                : null,

    lastTotalTimeSpan           : null,

    suspendAutoRecalculateParents : 0,
    suspendAutoCascade            : 0,

    currentCascadeBatch         : null,
    batchCascadeLevel           : 0,


    fillTasksWithDepInfoCounter : 0,

    /**
     * @cfg {String} dependenciesCalendar A string, defining the calendar, that will be used when calculating the working time, skipped
     * by the dependencies {@link Gnt.model.Dependency#lagField lag}. Default value is `project` meaning main project calendar is used.
     * Other recognized values are: `source` - the calendar of dependency's source task is used, `target` - the calendar of target task.
     */
    dependenciesCalendar        : 'project',

    pendingDataUpdates          : null,

    /**
     * Will be fired on the call to `filter` method
     * @event filter
     * @param {Gnt.data.TaskStore} self This task store
     * @param {Object} args The arguments passed to `filter` method
     */

    /**
     * Will be fired on the call to `clearFilter` method
     * @event clearfilter
     * @param {Gnt.data.TaskStore} self This task store
     * @param {Object} args The arguments passed to `clearFilter` method
     */

    /**
     * @event beforecascade
     * Fires before a cascade operation is initiated
     * @param {Gnt.data.TaskStore} store The task store
     */

    /**
     * @event cascade
     * Fires when after a cascade operation has completed
     * @param {Gnt.data.TaskStore} store The task store
     * @param {Object} context A context object revealing details of the cascade operation, such as 'nbrAffected' - how many tasks were affected.
     */

    constructor : function (config) {
        config      = config || {};

        var calendar = config.calendar || this.calendar;

        if (!calendar) {

            var calendarConfig  = {};

            if (config.hasOwnProperty('weekendsAreWorkdays')) {
                calendarConfig.weekendsAreWorkdays = config.weekendsAreWorkdays;
            } else {
                if (this.self.prototype.hasOwnProperty('weekendsAreWorkdays') && this.self != Gnt.data.TaskStore) {
                    calendarConfig.weekendsAreWorkdays = this.weekendsAreWorkdays;
                }
            }

            var calendarManager = config.calendarManager || this.calendarManager;

            // if we have calendarManager specified
            if (calendarManager) {

                var me              = this;

                calendarManager = config.calendarManager = Ext.data.StoreManager.lookup(calendarManager);

                var projectCalendar = calendarManager.getProjectCalendar();

                if (projectCalendar) {
                    calendar        = projectCalendar;
                } else {
                    // wait till calendar manager set a project calendar and then use it
                    this.calendarManagerListeners   = calendarManager.on({
                        projectcalendarset  : function (manager, calendar) {
                            me.setCalendar(calendar, true);
                        },

                        destroyable         : true,
                        single              : true
                    });
                }
            }

            calendar = calendar && Ext.data.StoreManager.lookup(calendar) || new Gnt.data.Calendar(calendarConfig);
        }


        // If not provided, create default stores (which will be overridden by GanttPanel during instantiation

        var dependencyStore = config.dependencyStore || this.dependencyStore;
        dependencyStore = dependencyStore && Ext.data.StoreManager.lookup(dependencyStore) || Ext.create("Gnt.data.DependencyStore");
        delete config.dependencyStore;

        var resourceStore = config.resourceStore || this.resourceStore;
        resourceStore = resourceStore && Ext.data.StoreManager.lookup(resourceStore) || Ext.create("Gnt.data.ResourceStore");
        delete config.resourceStore;

        var assignmentStore = config.assignmentStore || this.assignmentStore;
        assignmentStore = assignmentStore && Ext.data.StoreManager.lookup(assignmentStore) || Ext.create("Gnt.data.AssignmentStore", {resourceStore : resourceStore});
        delete config.assignmentStore;

        if (calendar) {
            delete config.calendar;

            this.setCalendar(calendar, true, true);
        }

        // init cache for early/late dates
        this.resetEarlyDates(true);
        this.resetLateDates(true);

        this.pendingDataUpdates = {
            recalculateParents : {}
        };

        // Nodes should not be loaded before related stores are set, thus we postpone root loading
        // to the time when class is constructed and related stores are set
        // {{{ Initial root loading and superclass construction
        var configuredRoot = config.root || this.root;
        this.root = null;
        delete config.root;

        this.callParent([ config ]);

        this.setResourceStore(resourceStore);
        this.setAssignmentStore(assignmentStore);
        this.setDependencyStore(dependencyStore);

        configuredRoot && this.setRoot(configuredRoot);
        // }}}

        this.setupListeners();

        this.fillTasksWithDepInfo();

        var root = this.getRootNode();

        if (root && this.autoNormalizeNodes) {
            root.normalizeParent();
        }

        if (this.autoSync && this.batchSync) {
            // Prevent operations with side effects to create lots of individual server requests
            this.sync = Ext.Function.createBuffered(this.sync, 500);
        }

        this.initTreeFiltering();
    },

    setupListeners  : function () {
        this.on({
            nodeappend      : this.onMyNodeAdded,
            nodeinsert      : this.onMyNodeAdded,
            update          : this.onTaskUpdated,

            scope           : this
        });

        this.on({
            noderemove      : this.onTaskRemoved,
            nodemove        : this.onTaskMoved,
            write           : this.onTaskStoreWrite,
            sort            : this.onTasksSorted,
            load            : this.onTasksLoaded,
            rootchange      : this.onTasksLoaded,
            scope           : this,
            // This should guarantee that our listeners are run first since view should
            // only refresh after we've updated cached dependencies for each task (on store load, root change etc)
            priority        : 100
        });
    },

    // Overriden from EventStore mixin to turn off EventStore mixin's logic related to resource->events caching
    // which comes into play in abscence of assignment store
    createResourceEventsCache : Ext.emptyFn,

    // Overriden from EventStore mixin to provide Gantt model aware id consistency manager
    createIdConsistencyManager : function() {
        var me = this;
        return new Gnt.data.util.IdConsistencyManager({
            eventStore      : me,
            resourceStore   : me.getResourceStore(),
            assignmentStore : me.getAssignmentStore(),
            dependencyStore : me.getDependencyStore()
        });
    },

    // Overriden from EventStore mixin to provide Gantt model aware model persistency manager
    createModelPersistencyManager : function() {
        var me = this;
        return new Gnt.data.util.ModelPersistencyManager({
            eventStore      : me,
            resourceStore   : me.getResourceStore(),
            assignmentStore : me.getAssignmentStore(),
            dependencyStore : me.getDependencyStore()
        });
    },

    fillNode: function(node, newNodes) {

        // this flag will prevent the "autoTimeSpan" feature from reacting on individual "append" events, which happens a lot
        // before the "rootchange" event

        if (node.isRoot()) {
            this.isSettingRoot = true;
        }

        this.callParent(arguments);

        if (node.isRoot()) {
            this.isSettingRoot = false;
        }
    },

    onTasksLoaded : function () {
        var root = this.getRoot();

        this.fillTasksWithDepInfoCounter    = 1;

        this.fillTasksWithDepInfo();

        if (root && this.autoNormalizeNodes) {
            root.normalizeParent();
        }
    },

    load : function (options) {
        // Overridden to avoid reacting to the removing of all the records in the store
        this.un("noderemove", this.onTaskRemoved, this);

        // 5.0.1 Seems Ext is using regular "appendChild" method during store load, which triggers all the corresponding events
        // we don't want to react on those events during loading (recalculate parents, etc)
        this.un("nodeappend", this.onMyNodeAdded, this);
        this.un("update", this.onTaskUpdated, this);

        // Note, that gantt uses additional important override for `load` method for ExtJS 4.2.1 and below, inherited from
        // Sch.data.mixin.FilterableTreeStore
        this.callParent(arguments);

        this.on("noderemove", this.onTaskRemoved, this);
        this.on("nodeappend", this.onMyNodeAdded, this);
        this.on("update", this.onTaskUpdated, this);
    },


    // After the task store proxy is set we map provided "typeProperty"
    // to the reader being used
    setProxy : function () {
        this.callParent(arguments);

        if (this.typeProperty) {

            var me      = this,
                reader  = me.getProxy() && me.getProxy().getReader();

            // if user has not provided "typeProperty" directly to the reader
            if (reader && !reader.getTypeProperty()) {
                reader.setTypeProperty(me.typeProperty);
            }

        }
    },

    setRoot : function (rootNode) {
        var me                  = this;
        // Ext5 NOTE: we check this.count() since it might break loading of data from "root" config if we call getRoot() too early
        var oldRoot             = this.count() && this.getRoot();

        // this flag will prevent the "autoTimeSpan" feature from reacting on individual "append" events, which happens a lot
        // before the "rootchange" event
        this.isSettingRoot      = true;

        Ext.apply(rootNode, {
            calendar            : me.calendar,
            taskStore           : me,                 // TODO: this is probably not needed anymore
            dependencyStore     : me.dependencyStore, // TODO: this is probably not needed anymore

            // TODO: this is probably not working because phantom is set to true directly in superclass' setRoot() implementation
            // HACK Prevent tree store from trying to 'create' the root node
            phantom             : false,
            dirty               : false
        });

        var res                 = this.callParent(arguments);

        this.isSettingRoot      = false;

        // we reset taskStore property on the tasks of the old root when we set the new root
        oldRoot && oldRoot.cascadeBy(function (node) {
            node.setTaskStore(null);
        });

        return res;
    },


    /**
     * Returns a dependecy store instance this task store is associated with. See also {@link #setDependencyStore}.
     *
     * @return {Gnt.data.DependencyStore}
     */
    getDependencyStore : function () {
        return this.dependencyStore;
    },

    // TODO: this should be removed after dependency store will use normal caching mechanics like assignment store does
    fillTasksWithDepInfo : function () {
        if (!this.getRootNode()) return;

        var dependencyStore   = this.getDependencyStore();

        // do not iterate for the 1st call - since tasks already has these arrays set in the constructor
        if (this.fillTasksWithDepInfoCounter++ > 0) {
            this.forEachTaskUnordered(function (task) {
                task.successors     = [];
                task.predecessors   = [];
            });
        }

        if (dependencyStore) {
            dependencyStore.each(function (dependency) {
                var from    = dependency.getSourceTask(),
                    to      = dependency.getTargetTask();

                if (from && to) {
                    from.successors.push(dependency);
                    to.predecessors.push(dependency);
                }
            });
        }
    },


    /**
     * Sets the dependency store for this task store
     *
     * @param {Gnt.data.DependencyStore} dependencyStore
     */
    setDependencyStore : function (dependencyStore) {
        var me = this,
            oldStore = me.dependencyStore,
            listeners       = {
                add         : me.onDependencyAdd,
                update      : me.onDependencyUpdate,
                remove      : me.onDependencyDelete,
                scope       : me
            };

        if (me.dependencyStore) {
            me.dependencyStore.un(listeners);
            me.dependencyStore.setTaskStore(null);
            me.idConsistencyManager && me.idConsistencyManager.setDependencyStore(null);
            me.modelPersistencyManager && me.modelPersistencyManager.setDependencyStore(null);
        }

        me.dependencyStore = dependencyStore && Ext.StoreMgr.lookup(dependencyStore) || null;

        if (me.dependencyStore) {
            me.modelPersistencyManager && me.modelPersistencyManager.setDependencyStore(me.dependencyStore);
            me.idConsistencyManager && me.idConsistencyManager.setDependencyStore(me.dependencyStore);
            me.dependencyStore.setTaskStore(me);
            me.dependencyStore.on(listeners);
            me.fillTasksWithDepInfo(); // TODO: check if this is needed and remove if it's not (or refactor)
        }

        if ((oldStore || dependencyStore) && oldStore !== dependencyStore) {
            /**
             * @event dependencystorechange
             * Fires when new dependency store is set via {@link #setDependencyStore} method.
             * @param {Gnt.data.TaskStore}           this
             * @param {Gnt.data.DependencyStore|null} newAssignmentStore
             * @param {Gnt.data.DependencyStore|null} oldAssignmentStore
             */
            // Method might be called before class is fully constructed thus we check for observable mixin to be ready
            me.events && me.fireEvent('dependencystorechange', me, dependencyStore, oldStore);
        }
    },

    /**
     * Returns a resource store instance this task store is associated with. See also {@link #setResourceStore}.
     *
     * @return {Gnt.data.ResourceStore}
     */
    getResourceStore : function () {
        return this.resourceStore || null;
    },

    /**
     * Sets the resource store for this task store
     *
     * @param {Gnt.data.ResourceStore} resourceStore
     */
    setResourceStore : function (resourceStore) {
        var me = this,
            oldStore = me.resourceStore;

        if (me.resourceStore) {
            me.resourceStore.setTaskStore(null);
            me.idConsistencyManager && me.idConsistencyManager.setResourceStore(null);
            me.modelPersistencyManager && me.modelPersistencyManager.setResourceStore(null);
        }

        me.resourceStore = resourceStore && Ext.StoreMgr.lookup(resourceStore) || null;

        if (me.resourceStore) {
            me.modelPersistencyManager && me.modelPersistencyManager.setResourceStore(me.resourceStore);
            me.idConsistencyManager && me.idConsistencyManager.setResourceStore(me.resourceStore);
            me.resourceStore.setTaskStore(me);
            me.resourceStore.normalizeResources();
        }

        if ((oldStore || resourceStore) && (oldStore !== resourceStore)) {
           /**
             * @event resourcestorechange
             * Fires when new resource store is set via {@link #setResourceStore} method.
             * @param {Gnt.data.TaskStore}          this
             * @param {Gnt.data.ResourceStore|null} newResourceStore
             * @param {Gnt.data.ResourceStore|null} oldResourceStore
             */
            // Method might be called before class is fully constructed thus we check for observable mixin to be ready
            me.events && me.fireEvent('resourcestorechange', me, resourceStore, oldStore);
        }
    },


    /**
     * Returns an assignment store this task store is associated with. See also {@link #setAssignmentStore}.
     *
     * @return {Gnt.data.AssignmentStore}
     */
    getAssignmentStore : function(){
        return this.assignmentStore || null;
    },


    /**
     * Sets the assignment store for this task store
     *
     * @param {Gnt.data.AssignmentStore} assignmentStore
     */
    setAssignmentStore : function (assignmentStore) {
        var me = this,
            oldStore = me.assignmentStore,
            listeners = {
                add    : me.onAssignmentStructureMutation,
                update : me.onAssignmentMutation,
                remove : me.onAssignmentStructureMutation,
                scope  : me
            };

        if (me.assignmentStore) {
            me.assignmentStore.un(listeners);
            me.assignmentStore.setTaskStore(null);
            me.idConsistencyManager && me.idConsistencyManager.setAssignmentStore(null);
            me.modelPersistencyManager && me.modelPersistencyManager.setAssignmentStore(null);
        }

        me.assignmentStore = assignmentStore && Ext.StoreMgr.lookup(assignmentStore) || null;

        if (me.assignmentStore) {
            me.modelPersistencyManager && me.modelPersistencyManager.setAssignmentStore(me.assignmentStore);
            me.idConsistencyManager && me.idConsistencyManager.setAssignmentStore(me.assignmentStore);
            assignmentStore.setTaskStore(me);
            assignmentStore.on(listeners);
        }

        if ((oldStore || assignmentStore) && oldStore !== assignmentStore) {
            /**
             * @event assignmentstorechange
             * Fires when new assignment store is set via {@link #setAssignmentStore} method.
             * @param {Gnt.data.TaskStore}            this
             * @param {Gnt.data.AssignmentStore|null} newAssignmentStore
             * @param {Gnt.data.AssignmentStore|null} oldAssignmentStore
             */
            // Method might be called before class is fully constructed thus we check for observable mixin to be ready
            me.events && me.fireEvent('assignmentstorechange', me, assignmentStore, oldStore);
        }
    },


    /**
     * Call this method if you want to adjust tasks according to the calendar dates.
     * @param  {Gnt.modelTask/Gnt.modelTask[]} [tasks] Task or list of tasks to be adjusted. If omitted all tasks will be adjusted.
     * @param  {Function} callback Function to call on propagation changes completion or failure.
     */
    adjustToCalendar : function (tasks, callback) {
        var me = this;

        // reset early/late dates cache
        me.resetEarlyDates();
        me.resetLateDates();

        if (tasks instanceof Gnt.model.Task) {
            tasks.adjustToCalendar(callback);

        } else {

            if (Ext.isFunction(tasks)) {
                callback    = tasks;
                tasks       = [];
            }

            var root        = me.getRootNode(),
                doneNodes   = {};

            // if no tasks provided
            if (!Ext.isArray(tasks) || !tasks.length) {
                // get 1st level tasks
                tasks       = root && root.childNodes || [];
            }

            // loop over the tasks
            for (var i = 0, l = tasks.length; i < l; i++) {
                var node    = tasks[i];

                // check if the task is not processed yet
                if (!doneNodes[node.getId()]) {
                    // we will initiate propagation starting from the node
                    node.propagateChanges(function () {
                        // each node's child we adjust to calendar
                        node.cascadeBy(function (n) {
                            if (n !== root) n.adjustToCalendarWithoutPropagation();
                        });

                        return node;

                    }, function (cancel, affected) {
                        // remember tasks already processed as result of changes propagation
                        if (!cancel) Ext.apply(doneNodes, affected);

                        callback && callback.apply(this, arguments);
                    });
                }
            }
        }
    },

    /**
     * Call this method if you want to adjust the tasks according to the calendar dates.
     * @deprecated This method is internal. Please use {@link #adjustToCalendar} instead.
     * @private
     */
    renormalizeTasks : function (store, nodes, callback) {
        this.adjustToCalendar(nodes, callback);
    },

    /**
     * Returns a project calendar instance.
     *
     * @return {Gnt.data.Calendar}
     */
    getCalendar : function () {
        return this.calendar || null;
    },


    /**
     * Sets the calendar for this task store
     *
     * @param {Gnt.data.Calendar} calendar
     */
    setCalendar : function (calendar, doNotChangeTasks, suppressEvent) {
        var listeners = {
            calendarchange      : this.renormalizeTasks,

            scope               : this
        };

        if (this.calendar) {
            this.calendar.un(listeners);
        }

        this.calendar           = calendar;

        if (calendar) {
            calendar.on(listeners);

            var root                = this.getRootNode();

            if (root) {
                root.calendar       = calendar;
            }

            if (!doNotChangeTasks) {
                this.renormalizeTasks();
            }

            if (!suppressEvent) {
                this.fireEvent('calendarset', this, calendar);
            }
        }
    },


    /**
     * Returns the critical path(s) that can affect the end date of the project
     * @return {Array} paths An array of arrays (containing task chains)
     */
    getCriticalPaths: function () {
        // Grab task id's that don't have any "incoming" dependencies
        var root                = this.getRootNode(),
            finalTasks          = [],
            lastTaskEndDate     = new Date(0);

        // find the project end date
        root.cascadeBy(function (task) {
            lastTaskEndDate = Sch.util.Date.max(task.getEndDate(), lastTaskEndDate);
        });

        // find the tasks that ends on that date
        root.cascadeBy(function (task) {
            //                                                              do not include the parent tasks that has children
            //                                                              since their influence on the project end date is determined by its children
            if (lastTaskEndDate - task.getEndDate() === 0 && !task.isRoot() && !(!task.isLeaf() && task.childNodes.length)) {
                finalTasks.push(task);
            }
        });

        return Ext.Array.map(finalTasks, function (task) {
            return task.getCriticalPaths();
        });
    },

    onMyNodeAdded : function (parent, node) {
        if (!node.isRoot()) {
            if (this.lastTotalTimeSpan) {
                var span = this.getTotalTimeSpan();

                // if new task dates violates cached total range then let's reset getTotalTimeSpan() cache
                if (node.getEndDate() > span.end || node.getStartDate() < span.start) {
                    this.lastTotalTimeSpan = null;
                }
            }

            // if it's a latest task
            if (node.getEndDate() - this.getProjectEndDate() === 0) {
                this.resetLateDates();
            }

            if (!this.cascading && this.recalculateParents && !this.suspendAutoRecalculateParents) {
                if (this.updating) {
                    this.pendingDataUpdates.recalculateParents[node.getId()] = node;
                }
                else {
                    node.recalculateParents();
                }
            }
        }
    },


    onTaskUpdated : function (store, task, operation) {
        var prev = task.previous;

        if (this.lastTotalTimeSpan) {
            var span = this.getTotalTimeSpan();

            // if new task dates violates cached total range then let's reset the cache
            if (prev && (prev[ task.endDateField ] - span.end === 0 || prev[ task.startDateField ] - span.start === 0) ||
                (task.getEndDate() > span.end || task.getStartDate() < span.start))
            {
                this.lastTotalTimeSpan = null;
            }
        }

        if (!this.cascading && operation !== Ext.data.Model.COMMIT && prev) {

            var doRecalcParents = task.percentDoneField in prev;

            // Check if we should cascade this update to successors
            // We're only interested in cascading operations that affect the start/end dates
            if (
                task.startDateField in prev ||
                task.endDateField in prev   ||
                'parentId' in prev          ||
                task.effortField in prev    ||
                // if task has changed _from_ manually scheduled mode
                prev[ task.schedulingModeField ] === 'Manual' || prev[ task.manuallyScheduledField ]
            ) {

                var cascadeSourceTask = task;

                if (this.cascadeChanges && !this.suspendAutoCascade) {
                    // if we switched scheduling mode from manual then we'll call cascadeChangesForTask() for some of
                    // task predecessors (if any) to update task itself
                    if (prev[ cascadeSourceTask.schedulingModeField ] == 'Manual') {
                        var deps = cascadeSourceTask.getIncomingDependencies(true);

                        if (deps.length) {
                            cascadeSourceTask = deps[ 0 ].getSourceTask();
                        }
                    }

                    Ext.Function.defer(this.cascadeChangesForTask, this.cascadeDelay, this, [ cascadeSourceTask ]);
                } else {
                    // reset early/late dates cache
                    this.resetEarlyDates();
                    this.resetLateDates();
                }

                doRecalcParents = true;

            // if task scheduling turned to manual
            } else if ((prev[ task.schedulingModeField ] || task.manuallyScheduledField in prev) && task.isManuallyScheduled()) {
                // reset early/late dates cache
                this.resetEarlyDates();
                this.resetLateDates();
            }

            if (doRecalcParents && this.recalculateParents && !this.suspendAutoRecalculateParents) {
                if (this.updating) {
                    this.pendingDataUpdates.recalculateParents[task.getId()] = task;
                }
                else {
                    task.recalculateParents();
                }
            }
        }
    },

    onEndUpdate : function() {
        var me = this,
            toRecalculateParents = {},
            task, siblings;

        Ext.Object.each(me.pendingDataUpdates.recalculateParents, function(id, task) {
            task.parentNode && (toRecalculateParents[task.parentNode.getId()] = task.parentNode);
        });

        // Sorting lower depth first, but then pop()'ing to process deepest depth first
        toRecalculateParents = Ext.Array.sort(Ext.Object.getValues(toRecalculateParents), function(a, b) {
            return (a.data.depth > b.data.depth) ? 1 : ((a.data.depth < b.data.depth) ? -1 : 0);
        });

        while (toRecalculateParents.length > 0) {
            task = toRecalculateParents.pop();
            task.refreshCalculatedParentNodeData();
            task.recalculateParents();
        }

        me.pendingDataUpdates.recalculateParents = {};

        return me.callParent(arguments);
    },

    getEmptyCascadeBatch : function () {
        var me      = this;

        return {
            nbrAffected         : 0,
            affected            : {},

            visitedCounters     : {},

            addVisited          : function (task) {
                var internalId      = task.internalId;

                if (!this.visitedCounters[ internalId ]) {
                    this.visitedCounters[ internalId ]     = 1;
                } else {
                    this.visitedCounters[ internalId ]++;
                }
            },

            addAffected         : function (task, doNotAddParents) {
                var internalId      = task.internalId;

                if (this.affected[ internalId ]) {
                    // already added
                    return;
                } else {
                    this.affected[ internalId ]            = task;
                    this.nbrAffected++;
                }

                if (!me.cascading && this.nbrAffected > 1) {
                    me.fireEvent('beforecascade', me);
                    me.cascading = true;
                }

                if (!doNotAddParents) {
                    var byId        = this.affectedParentsbyInternalId;
                    var array       = this.affectedParentsArray;
                    var parent      = task.isLeaf() ? task.parentNode : task;

                    while (parent && !parent.data.root) {
                        if (byId[ parent.internalId ]) break;

                        byId[ parent.internalId ]   = parent;
                        array.push(parent);

                        this.addAffected(parent, true);

                        parent      = parent.parentNode;
                    }
                }
            },

            affectedParentsArray            : [],
            affectedParentsbyInternalId     : {},

            parentsStartDates               : {}
        };
    },


    // starts a `batched` cascade (can contain several cascades, combined in one `currentCascadeBatch` context
    // cascade batch may actually contain 0 cascades (if for example deps are invalid)
    startBatchCascade : function () {
        if (!this.batchCascadeLevel) {
            this.currentCascadeBatch = this.getEmptyCascadeBatch();

            this.suspendAutoRecalculateParents++;
            this.suspendAutoCascade++;
        }

        this.batchCascadeLevel++;

        return this.currentCascadeBatch;
    },


    endBatchCascade : function () {

        this.batchCascadeLevel--;

        if (!this.batchCascadeLevel) {
            this.suspendAutoRecalculateParents--;
            this.suspendAutoCascade--;

            var currentCascadeBatch     = this.currentCascadeBatch;
            this.currentCascadeBatch    = null;

            this.resetEarlyDates();
            this.resetLateDates();

            if (this.cascading) {
                this.cascading          = false;
                this.fireEvent('cascade', this, currentCascadeBatch);
            }
        }
    },


    /**
     * @deprecated
     *
     * Use {@link Gnt.model.Task#propagateChanges} instead.
     *
     * Cascade the updates to the *depended* tasks of given `task` (re-schedule them according to dependencies and constraints).
     *
     * Note, that source task of cascading is considered already having "stable" position, which will not be adjusted in any way.
     * Also, the cascading process is asynchronous (because of potential constraints violations).
     *
     * @param {Gnt.model.Task} sourceTask
     * @param {Function} callback A function to call after the casading has been completed.
     */
    cascadeChangesForTask : function (sourceTask, callback) {
        sourceTask.propagateChanges(Ext.emptyFn, callback, true);
    },


    removeTaskDependencies : function (task) {
        var dependencyStore     = this.dependencyStore,
            deps                = task.getAllDependencies(dependencyStore);
        if (deps.length) dependencyStore.remove(deps);
    },


    removeTaskAssignments : function (task) {
        var assignmentStore     = this.getAssignmentStore(),
            assignments         = task.getAssignments();
        if (assignments.length) assignmentStore.remove(assignments);
    },


    // TODO: constraints
    onTaskRemoved : function (store, removedNode, isMove) {
        var dependencyStore = this.getDependencyStore();
        var assignmentStore = this.getAssignmentStore();

        var taskDropped     = !removedNode.isReplace && !isMove;

        // remove dependencies associated with the task
        if (dependencyStore && taskDropped) {
            removedNode.cascadeBy(this.removeTaskDependencies, this);
        }


        // remove task assignments
        if (assignmentStore && taskDropped) {
            // Fire this event so UI can ignore the datachanged events possibly fired below
            assignmentStore.fireEvent('beforetaskassignmentschange', assignmentStore, removedNode.getId(), []);

            removedNode.cascadeBy(this.removeTaskAssignments, this);

            // Fire this event so UI can just react and update the row for the task
            assignmentStore.fireEvent('taskassignmentschanged', assignmentStore, removedNode.getId(), []);
        }

        var span        = this.getTotalTimeSpan();
        var startDate   = removedNode.getStartDate();
        var endDate     = removedNode.getEndDate();

        // if removed task dates were equal to total range then removing can affect total time span
        // so let's reset getTotalTimeSpan() cache
        if (endDate - span.end === 0 || startDate - span.start === 0) {
            this.lastTotalTimeSpan = null;
        }

        // mark task that it's no longer belong to the task store
        if (taskDropped) removedNode.setTaskStore(null);

        //if early/late dates are supported
        this.resetEarlyDates();
        this.resetLateDates();
    },

    onTaskMoved : function (task, oldParent, newParent, index) {
        var span        = this.getTotalTimeSpan();
        var startDate   = task.getStartDate();
        var endDate     = task.getEndDate();

        // if removed task dates were equal to total range then removing can affect total time span
        // so let's reset getTotalTimeSpan() cache
        if (endDate - span.end === 0 || startDate - span.start === 0) {
            this.lastTotalTimeSpan = null;
        }

        //if early/late dates are supported
        this.resetEarlyDates();
        this.resetLateDates();
    },

    // TODO: constraints
    onAssignmentMutation : function (assignmentStore, assignments) {
        var me      = this;

        Ext.each(assignments, function (assignment) {
            // Taskstore could be filtered etc.
            var t = assignment.getTask(me);
            if (t) {
                t.onAssignmentMutation(assignment);
            }
        });
    },


    // TODO: constraints
    onAssignmentStructureMutation : function (assignmentStore, assignments) {
        var me      = this;

        Ext.each(assignments, function (assignment) {
            var task  = assignment.getTask(me);

            if (task) {
                task.onAssignmentStructureMutation(assignment);
            }
        });
    },


    onDependencyUpdate : function (store, dependency, operation) {
        if (operation !== Ext.data.Model.COMMIT) {
            this.onDependencyAdd(store, dependency);
        }
    },


    onDependencyAdd: function (store, dependencies) {
        // reset early late dates cache
        this.resetEarlyDates();
        this.resetLateDates();

        // TODO: the following is very fragile code in case any constraint is violated (and we switch to async
        // execution) we should not propagate changes here, all changes should be propagated using corresponding
        // task/dependency model interface (linkTo/unlinkFrom etc).
        // -- Maxim

        // If cascade changes is activated, adjust the connected task start/end date
        if (this.cascadeChanges && !this.suspendAutoCascade) {
            var me    = this,
                tasks = [];

            if (Ext.isArray(dependencies)) {
                Ext.Array.forEach(dependencies, function(dependency) {
                    var source = dependency.getSourceTask();
                    source && tasks.push(source);
                });
                tasks.length && me.getRoot().propagateChanges(function() { return tasks; });
            }
            else {
                tasks = dependencies.getSourceTask();
                tasks && tasks.propagateChanges();
            }
        }
    },

    onDependencyDelete: function (store, dependencies) {
        // reset early late dates cache
        this.resetEarlyDates();
        this.resetLateDates();
    },

//
//    // @Ext 5 TODO
//
//    // pass "this" to filter function
//    getNewRecords: function() {
//        return Ext.Array.filter(this.tree.flatten(), this.filterNew, this);
//    },
//
//    // pass "this" to filter function
//    getUpdatedRecords: function() {
//        return Ext.Array.filter(this.tree.flatten(), this.filterUpdated, this);
//    },
//
//
//    // ignore root
//    // @OVERRIDE
//    filterNew: function(item) {
//        // only want phantom records that are valid
//        return item.phantom && item.isValid() && item != this.tree.root;
//    },
//
//
//    // ignore root
//    // @OVERRIDE
//    filterUpdated: function(item) {
//        // only want dirty records, not phantoms that are valid
//        return item.dirty && !item.phantom && item.isValid() && item != this.tree.root;
//    },
//
//

    // TODO: chieck if it's needed and remove it if it's not
    // When store has synced, we need to update phantom tasks which have now have a 'real' Id
    // and can be written to the backend
    onTaskStoreWrite : function(store, operation) {
        var me = this,
            records = operation.getRecords(),
            triggerNewSync;

        Ext.each(records, function(task) {
            Ext.each(task.childNodes, function(child) {
                if (child.phantom) {
                    triggerNewSync = true;
                    return false;
                }
            });
        });
        // In the case of autoSync, a new sync will be triggered after a parent node is 'realized',
        // since Ext JS then sets a new 'parentId' property on all the childNodes.
        if (triggerNewSync && !this.autoSync) {
            // Ext JS won't let you call sync inside a 'write' handler, need to defer the call
            // http://www.sencha.com/forum/showthread.php?283908-Store-quot-isSyncing-quot-true-inside-a-write-listener
            setTimeout(function() { me.sync(); }, 1);
        }
    },

    forEachTaskUnordered: function (fn, scope) {
        var root    = this.getRootNode();

        if (root) {
            root.cascadeBy(function(rec) {
                if (rec !== root) {
                    return fn.call(scope || this, rec);
                }
            });
        }
    },

    getTimeSpanForTasks : function(tasks) {
        var earliest = new Date(9999,0,1), latest = new Date(0);

        var compareFn = function(r) {
            var startDate = r.getStartDate();
            var endDate = r.getEndDate();

            if (startDate && startDate < earliest) {
                earliest = startDate;
            }

            // Ignore tasks without start date as they aren't rendered anyway
            if (startDate && endDate && endDate > latest) {
                latest = endDate;
            }
        };

        if (tasks) {
            if (!Ext.isArray(tasks)) tasks = [tasks];

            Ext.Array.each(tasks, compareFn);
        } else {
            this.forEachTaskUnordered(compareFn);
        }

        earliest    = earliest < new Date(9999,0,1) ? earliest : null;
        latest      = latest > new Date(0) ? latest : null;

        return {
            start   : earliest,
            end     : latest || (earliest && Ext.Date.add(earliest, Ext.Date.DAY, 1)) || null
        };
    },

    /**
     * Returns an object defining the earliest start date and the latest end date of all the tasks in the store.
     * Tasks without start date are ignored, tasks without end date use their start date (if any) + 1 day
     * @return {Object} An object with 'start' and 'end' Date properties.
     */
    getTotalTimeSpan : function() {
        if (this.lastTotalTimeSpan) return this.lastTotalTimeSpan;

        this.lastTotalTimeSpan = this.getTimeSpanForTasks();

        return this.lastTotalTimeSpan;
    },

    /**
     * Returns the project start date. This value is calculated (using {@link #getTotalTimeSpan} method) as an earliest start of all the tasks in the store.
     * **Note:** You can override this method to make alternative way of project start date calculation
     * (or for example to make this value configurable to store it in a database).
     * @return {Date} The project start date.
     */
    getProjectStartDate : function () {
        return this.getTotalTimeSpan().start;
    },

    /**
     * Returns the project end date. This value is calculated (using {@link #getTotalTimeSpan} method) as a latest end of all the tasks in the store.
     * @return {Date} The project end date.
     */
    getProjectEndDate : function () {
        return this.getTotalTimeSpan().end;
    },


    /**
     * Returns all projects kept in the store.
     * @return {Gnt.model.Project[]}
     */
    getProjects : function () {
        var root        = this.getRoot(),
            projects    = [],
            childNodes  = root.childNodes;

        for (var i = 0, l = childNodes.length; i < l; i++) {
            if (childNodes[i].isProject) {
                projects.push(childNodes[i]);
            }
        }

        return projects;
    },

    // Internal helper method
    getTotalTaskCount : function(ignoreRoot) {
        var count = ignoreRoot === false ? 1 : 0;

        this.forEachTaskUnordered(function() { count++; });
        return count;
    },

    /**
     * Returns an array of all the tasks in this store.
     *
     * @return {Gnt.model.Task[]} The tasks currently loaded in the store
     */
    toArray : function() {
        var tasks = [];

        this.getRootNode().cascadeBy(function(t) {
            tasks.push(t);
        });

        return tasks;
    },

    /**
     * Increase the indendation level of one or more tasks in the tree
     * @param {Gnt.model.Task/Gnt.model.Task[]} tasks The task(s) to indent
     */
    indent: function (nodes) {

        this.fireEvent('beforeindentationchange', this, nodes);

        // TODO: method should fail (and return false?) if passed nodes are from different parent nodes
        nodes       = Ext.isArray(nodes) ? nodes.slice() : [ nodes ];

        nodes.sort(function(a, b) { return a.data.index - b.data.index; });

        this.suspendEvents(true);

        Ext.each(nodes, function(node) { node.indent(); });

        this.resumeEvents();

        this.fireEvent('indentationchange', this, nodes);
    },


    /**
     * Decrease the indendation level of one or more tasks in the tree
     * @param {Gnt.model.Task/Gnt.model.Task[]} tasks The task(s) to outdent
     */
    outdent: function (nodes) {
        this.fireEvent('beforeindentationchange', this, nodes);

        // TODO method should fail (and return false?) if passed nodes are from different parent nodes
        nodes       = Ext.isArray(nodes) ? nodes.slice() : [ nodes ];

        nodes.sort(function(a, b) { return b.data.index - a.data.index; });
        this.suspendEvents(true);

        Ext.each(nodes, function(node) { node.outdent(); });

        this.resumeEvents();

        this.fireEvent('indentationchange', this, nodes);
    },

    /**
     * Returns the tasks associated with a resource
     * @param {Gnt.model.Resource} resource
     * @return {[Gnt.model.Task] the tasks assigned to this resource
     */
    getTasksForResource: function (resource) {
        return this.getEventsForResource(resource);
    },

    /**
     * Returns the resources associated with a task
     * @param {Gnt.model.Task} task
     * @return {[Gnt.model.Resource]}
     */
    getResourcesForTask : function (task) {
        return this.getResourcesForEvent(task);
    },

    // Event store adaptions (flat store vs tree store)

    forEachScheduledEvent : function (fn, scope) {
        scope  = scope || this;

        this.forEachTaskUnordered(function (event) {
            var eventStart = event.getStartDate(),
                eventEnd = event.getEndDate();

            if (eventStart && eventEnd) {
                return fn.call(scope, event, eventStart, eventEnd);
            }
        });
    },

    onTasksSorted : function() {
        // After sorting we need to reapply filters if store was previously filtered
        if (this.lastTreeFilter) {
            this.filterTreeBy(this.lastTreeFilter);
        }
    },

    /**
     * Appends a new task to the store
     * @param {Gnt.model.Task/Object} record The record to append to the store
     * @return {Gnt.model.Task} The appended record
     */
    append : function(record) {
        return this.getRootNode().appendChild(record);
    },

    resetEarlyDates : function (suppress) {
        this.earlyStartDates = {};
        this.earlyEndDates = {};
        if (!suppress) this.fireEvent('resetearlydates');
    },

    resetLateDates : function (suppress) {
        this.lateStartDates = {};
        this.lateEndDates = {};
        if (!suppress) this.fireEvent('resetlatedates');
    },

    /**
     * Returns Task by sequential number. See {@link Gnt.model.Task#getSequenceNumber} for details.
     *
     * @param {Number} number
     *
     * @return {Gnt.model.Task}
     */
    getBySequenceNumber : function(number) {
        return this.getRootNode().getBySequenceNumber(number);
    },

    destroy : function() {
        this.setCalendar(null);
        this.setAssignmentStore(null);
        this.setDependencyStore(null);
        this.setResourceStore(null);

        if (this.calendarManagerListeners) {
            this.calendarManagerListeners.destroy();
        }

        this.callParent(arguments);
    },


    moveSeveralTasks : function (taskConsumer) {
        // this will suspend auto-cascade and auto-recalculate parents
        var currentCascadeBatch             = this.startBatchCascade();

        var taskMovement;

        while (taskMovement = taskConsumer()) {
            var task            = taskMovement.task;

            // in case a parent task has no children it should be treated as a leaf
            if (task.isLeaf() || !task.childNodes.length) {
                // do not try to re-position manually scheduled tasks and the tasks, affected by cascading
                if (!currentCascadeBatch.affected[ task.internalId ]) {
                    // add child tasks to the cascade context as affected ones
                    // its not a cascade in previous meaning, but still can be seen as such,
                    // because parent task "pushes" date changes to its children
                    currentCascadeBatch.addAffected(task);

                    // this won't cascade because cascading is suspended
                    taskMovement.method && task[ taskMovement.method ].apply(task, taskMovement.args);

                    if (this.cascadeChanges) {
                        // cascading manually, saving affected tasks
                        this.cascadeChangesForTask(task);
                    }
                }

            } else {
                if (this.recalculateParents) currentCascadeBatch.addAffected(task);
            }
        }

        // will resume auto-cascade and auto-recalculate parents
        this.endBatchCascade();
    },


    linearWalkDependentTasks : function (sourceTaskList, processor, walkingSpecification) {
        var me = this;


        walkingSpecification = walkingSpecification || {
            self        : true,
            ancestors   : me.recalculateParents,
            descendants : me.moveParentAsGroup,
            successors  : me.cascadeChanges,
            cycles      : me.cycleResolutionStrategy
        };

        return Gnt.data.Linearizator.linearWalkBySpecification(
            sourceTaskList,
            processor,
            walkingSpecification
        );
    },


    getLinearWalkingSequenceForDependentTasks : function (sourceTaskList, walkingSpecification) {
        var result      = [];

        this.linearWalkDependentTasks(sourceTaskList, function (task, color, sourceSet, depsData) {
            result.push(Array.prototype.slice.call(arguments));
        }, walkingSpecification);

        return result;
    },

    // @override
    // ExtJS doesn't use getters in this method but we need to use them to take model projections into account.
    // We literally copied Ext.data.TreeStore.isVisible and replaced every node.data.* with node.get(*)
    isVisible   : function (node) {
        var parentNode = node.parentNode,
            visible = node.get('visible'),
            root = this.getRoot();
        while (visible && parentNode) {
            visible = parentNode.get('expanded') && parentNode.get('visible');
            parentNode = parentNode.parentNode;
        }

        return visible && !(node === root && !this.getRootVisible());
    }

}, function() {
    this.override(Sch.data.mixin.FilterableTreeStore.prototype.inheritables() || {});
});

/**
@class Gnt.data.ResourceStore
@extends Sch.data.ResourceStore

A class representing the collection of the resources - {@link Gnt.model.Resource} records.

*/

Ext.define('Gnt.data.ResourceStore', {

    requires    : [
        'Gnt.model.Resource'
    ],

    extend      : 'Sch.data.ResourceStore',


    storeId     : 'resources',
    model       : 'Gnt.model.Resource',
    alias       : 'store.gantt_resourcestore',


    /**
     * @property {Gnt.data.TaskStore} taskStore The task store to which this resource store is associated.
     * Usually is configured automatically, by the task store itself.
     */
    taskStore   : null,

    proxy       : 'memory',

    constructor : function (config) {

        this.callParent([config]);

        this.on({
            load            : this.normalizeResources,
            remove          : this.onResourceRemoved,

            // Our internal listeners should be ran before any client listeners
            priority        : 100
        });
    },


    normalizeResources : function () {
        // scan through all resources and re-assign the "calendarId" property to get the listeners in place
        this.each(function (resource) {
            if (!resource.normalized) {
                var calendarId      = resource.getCalendarId();

                if (calendarId) resource.setCalendarId(calendarId, true);

                resource.normalized     = true;
            }
        });
    },

    // Performance optimization possibility: Assignment store datachange will cause a full refresh
    // so removing a resource will currently cause 2 refreshes. Not critical since this is not a very common use case
    onResourceRemoved : function(store, resources) {
        var assignmentStore = this.getAssignmentStore();

        Ext.Array.each(resources, function(resource) {
            assignmentStore.removeAssignmentsForResource(resource);
        });
    },

    /**
     * Returns the associated task store instance.
     *
     * @return {Gnt.data.TaskStore|null}
     */
    getTaskStore : function() {
        return this.taskStore;
    },

    /**
     * Sets associated task store instance
     *
     * @param {Gnt.data.TaskStore} store
     */
    setTaskStore : function(store) {
        this.taskStore = store;
    },

    /**
     * Returns the associated assignment store instance.
     *
     * @return {Gnt.data.AssignmentStore|null}
     */
    getAssignmentStore : function() {
        var taskStore = this.getTaskStore();
        return taskStore && taskStore.getAssignmentStore() || null;
    },

    /**
     * Returns the associated dependency store
     *
     * @return {Gnt.data.DependencyStore|null}
     */
    getDependencyStore : function() {
        var taskStore = this.getTaskStore();
        return taskStore && taskStore.getDependencyStore() || null;
    }
});

/**
 * @class Gnt.data.AssignmentStore
 * @extends Schdata.AssignmentStore
 *
 * A class representing a collection of assignments between tasks in the {@link Gnt.data.TaskStore} and resources
 * in the {@link Gnt.data.ResourceStore}.
 *
 * Contains a collection of {@link Gnt.model.Assignment} records.
 */
Ext.define('Gnt.data.AssignmentStore', {
    extend      : 'Sch.data.AssignmentStore',

    requires    : [
        'Gnt.model.Assignment'
    ],

    model       : 'Gnt.model.Assignment',
    alias       : 'store.gantt_assignmentstore',

    storeId     : 'assignments',
    proxy       : 'memory',

    // Overriden from Sch.data.AssignmentStore due to the logic required is handled by the Gantt codebase
    attachToEventStore    : Ext.emptyFn,
    attachToResourceStore : Ext.emptyFn,

    /**
     * Returns the associated task store instance.
     *
     * @return {Gnt.data.TaskStore}
     */
    getTaskStore : function() {
        return this.getEventStore();
    },

    /**
     * Sets associated event store instance
     *
     * @parem {Gnt.data.TaskStore} store
     */
    setTaskStore : function(store) {
        return this.setEventStore(store);
    },


    /**
     * Maps over event assignments.
     *
     * @param {Gnt.model.Task|Mixed} task
     * @param {Function} [fn=Ext.identityFn]
     * @param {Function} [filterFn=Ext.returnTrue]
     * @return {[Mixed]}
     */
    mapAssignmentsForTask : function(task, fn, filterFn) {
        return this.mapAssignmentsForEvent(task, fn, filterFn);
    },

    /**
     * Returns all assignments for a given task.
     *
     * @param {Gnt.model.Task|Mixed} task
     * @return {[Gnt.model.Assignment]}
     */
    getAssignmentsForTask : function(task) {
        return this.getAssignmentsForEvent(task);
    },

    /**
     * Removes all assignments for given event
     *
     * @param {Gnt.model.Task|Mixed} task
     */
    removeAssignmentsForTask : function(task) {
        return this.removeAssignmentsForEvent(task);
    },

    /**
     * Returns all resources assigned to a task.
     *
     * @param {Gnt.model.Task|Mixed} task
     * @return {[Gnt.model.Resource]}
     */
    getResourcesForTask : function(task) {
        return this.getResourcesForEvent(task);
    },

    /**
     * Returns all tasks assigned to a resource
     *
     * @param {Gnt.model.Resource|Mixed} resource
     * @return {[Gnt.model.Task]}
     */
    getTasksForResource : function(resource) {
        return this.getEventsForResource(resource);
    },

    /**
     * Creates and adds assignment record for a given task and a resource.
     *
     * @param {Gnt.model.Task|Mixed} evnt
     * @param {Gnt.model.Resource|Mixed} resource
     * @return {Gnt.model.Assignment}
     */
    assignTaskToResource : function(task, resource, units) {
        return this.assignEventToResource(task, resource, function(assignment) {
            assignment.setUnits(units);
            return assignment;
        });
    },

    /**
     * Removes assignment record for a given event and a resource.
     *
     * @param {Gnt.model.Task|Mixed} evnt
     * @param {Gnt.model.Resource|Mixed} resource
     * @return {Gnt.model.Assignment}
     */
    unassignTaskFromResource : function(task, resource) {
        return this.unassignEventFromResource(task, resource);
    },

    /**
     * Checks whether a task is assigned to a resource.
     *
     * @param {Gnt.model.Task|Mixed} evnt
     * @param {Gnt.model.Resource|Mixed} resource
     * @param {Function} [fn] Function which will resieve assignment record if one present
     * @return {Boolean}
     */
    isTaskAssignedToResource : function(task, resource, fn) {
        return this.isEventAssignedToResource(task, resource, fn);
    },

    /**
     * Returns assignment record for given task and resource
     *
     * @param {Gnt.model.Task} event
     * @param {Gnt.model.Resource} resource
     * @return {Gnt.model.Assignment|null}
     */
    getAssignmentForTaskAndResource : function(task, resource) {
        return this.getAssignmentForEventAndResource(task, resource);
    }
});

/**
@class Gnt.data.CrudManager

A class implementing a central collection of all data stores related to the Gantt chart.
It allows you to load all stores in a single server request and persist all of their changes in one request as well. This
 helps you use a transactional 'all-or-nothing' approach to saving your data.
This class uses AJAX as a transport mechanism and JSON as the encoding format.

# Gantt stores

The class supports all the Gantt specific stores: resources, assignments, dependencies, calendars and tasks.
For these stores, the class has separate configs ({@link #resourceStore}, {@link #assignmentStore}, {@link #dependencyStore}, {@link #taskStore})
to register them. The class can also grab them from the task store (this behavior can be changed using {@link #addRelatedStores} config).

    var taskStore = Ext.create('Gnt.data.TaskStore', {
        calendarManager : calendarManager,
        resourceStore   : resourceStore,
        dependencyStore : dependencyStore,
        assignmentStore : assignmentStore
    });

    var crudManager = Ext.create('Gnt.data.CrudManager', {
        autoLoad        : true,
        // We specify TaskStore only. The rest stores will be taken from it.
        taskStore       : taskStore,
        transport       : {
            load    : {
                url     : 'php/read.php'
            },
            sync    : {
                url     : 'php/save.php'
            }
        }
    });


# Calendars

The CrudManager class supports bulk loading of project calendars.
To do this, the {@link #calendarManager} config has to be specified or it can be specified on a {@link Gnt.data.TaskStore#calendarManager task store}
(while having {@link #addRelatedStores} is enabled).

    var calendarManager   = Ext.create('Gnt.data.CalendarManager', {
        calendarClass   : 'Gnt.data.calendar.BusinessTime'
    });

    ...

    var taskStore     = Ext.create('MyTaskStore', {
        // taskStore calendar will automatically be set when calendarManager gets loaded
        calendarManager : calendarManager,
        resourceStore   : resourceStore,
        dependencyStore : dependencyStore,
        assignmentStore : assignmentStore
    });

    var crudManager   = Ext.create('Gnt.data.CrudManager', {
        autoLoad        : true,
        taskStore       : taskStore,
        transport       : {
            load    : {
                url     : 'php/read.php'
            },
            sync    : {
                url     : 'php/save.php'
            }
        }
    });

# AJAX request configuration

To configure AJAX request parameters please take a look at the {@link #transport} config.

    var crudManager = Ext.create('Sch.data.CrudManager', {
        autoLoad        : true,
        taskStore       : taskStore,
        transport       : {
            load    : {
                url         : 'php/read.php',
                // use GET request
                method      : 'GET',
                // pass request JSON in "rq" parameter
                paramName   : 'rq',
                // extra HTTP request parameters
                params      : {
                    foo     : 'bar'
                }
            },
            sync    : {
                url     : 'php/save.php'
            }
        }
    });


# Extra stores

Along with the Gantt specific stores any number of additional stores can be specified
using {@link #stores} config on a construction step or {@link #addStore} method in the runtime:

    var crudManager = Ext.create('Gnt.data.CrudManager', {
        // extra stores
        stores          : [ 'departments', 'messages' ],
        taskStore       : taskStore,
        transport       : {
            load    : {
                url     : 'php/read.php'
            },
            sync    : {
                url     : 'php/save.php'
            }
        }
    });

    // append 'documents' store
    crudManager.addStore('documents');

    // now when we registered all the stores let's load them
    crudManager.load();

* **Note:** Any extra stores provided in {@link #stores} config will be loaded **before** the gantt specific stores.
If for some reason you need to change that loading order you should use {@link #addStore} method:

    // append store3 to the end so it will be loaded last
    crudManager.addStore(store3);

*/
Ext.define('Gnt.data.CrudManager', {
    extend              : 'Sch.crud.AbstractManager',

    mixins              : ['Sch.crud.encoder.Json', 'Sch.crud.transport.Ajax'],

    /**
     * @cfg {Gnt.data.CalendarManager/Object} calendarManager A calendar manager instance or its descriptor.
     */
    calendarManager     : null,
    /**
     * @cfg {Gnt.data.TaskStore/String/Object} taskStore Tasks store or its descriptor or its identifier.
     */
    taskStore           : null,
    /**
     * @cfg {Gnt.data.DependencyStore/Object} dependencyStore A store with dependencies or its descriptor.
     */
    dependencyStore     : null,
    /**
     * @cfg {Gnt.data.ResourceStore/Object} resourceStore A store with resources or its descriptor.
     */
    resourceStore       : null,
    /**
     * @cfg {Gnt.data.AssignmentStore/Object} assignmentStore A store with assignments or its descriptor.
     */
    assignmentStore     : null,

    /**
     * @cfg {Boolean} addRelatedStores
     * When set to `true` this class will try to get the {@link #calendarManager}, {@link #dependencyStore}, {@link #resourceStore} and {@link #assignmentStore} stores from
     * the specified {@link #taskStore} instance.
     */
    addRelatedStores    : true,

    constructor : function (config) {
        config  = config || {};

        var calendarManager = config.calendarManager || this.calendarManager,
            taskStore       = config.taskStore || this.taskStore,
            assignmentStore = config.assignmentStore || this.assignmentStore,
            resourceStore   = config.resourceStore || this.resourceStore,
            dependencyStore = config.dependencyStore || this.dependencyStore,
            // list of stores to add
            stores          = [];

        // retrieve stores registered on the provided taskStore
        if (taskStore && config.addRelatedStores !== false) {
            var extracted   = this.getTaskStoreInfo(taskStore, config);

            calendarManager = calendarManager || extracted.calendarManager;
            assignmentStore = assignmentStore || extracted.assignmentStore;
            resourceStore   = resourceStore || extracted.resourceStore;
            dependencyStore = dependencyStore || extracted.dependencyStore;
        }

        // calendars go first in the stores loading order
        if (calendarManager) {
            // Call this early manually to be able to add listeners before calling the superclass constructor
            this.mixins.observable.constructor.call(this, config);

            this.addCalendarManager(calendarManager, stores);
        }

        // ..then resources, assignments, dependencies and finally tasks
        if (resourceStore) stores.push(resourceStore);
        if (assignmentStore) stores.push(assignmentStore);
        if (dependencyStore) stores.push(dependencyStore);
        if (taskStore) stores.push(taskStore);

        if (stores.length) {
            var syncSequence   = [];

            // For applying sync results we have a different order:
            // calendars -> resources -> tasks -> assignments -> dependencies
            if (calendarManager) syncSequence.push(calendarManager);
            if (resourceStore) syncSequence.push(resourceStore);
            if (taskStore) syncSequence.push(taskStore);
            if (assignmentStore) syncSequence.push(assignmentStore);
            if (dependencyStore) syncSequence.push(dependencyStore);

            if (syncSequence.length) {
                config.syncApplySequence    = (config.syncApplySequence || config.stores || []).concat(syncSequence);
            }

            var _stores = config.stores || this.stores;
            if (_stores && !Ext.isArray(_stores)) _stores = [_stores];

            // all the Gantt related stores will go after the user defined stores (specified in config.stores)
            config.stores = (_stores || []).concat(stores);
        }

        this.callParent([ config ]);

        // make sure we have properties set to proper stores descriptors
        this.calendarManager    = this.getStoreDescriptor(calendarManager);
        this.resourceStore      = this.getStoreDescriptor(resourceStore);
        this.assignmentStore    = this.getStoreDescriptor(assignmentStore);
        this.dependencyStore    = this.getStoreDescriptor(dependencyStore);
        this.taskStore          = this.getStoreDescriptor(taskStore);
    },


    getTaskStoreInfo : function (taskStore, config) {
        if (!(taskStore instanceof Ext.data.AbstractStore)) {
            if (typeof taskStore == 'string') {
                taskStore   = Ext.data.StoreManager.get(taskStore);
            } else {
                taskStore   = taskStore.store;
            }
        }

        var result          = {},
            calendarManager = config.calendarManager,
            assignmentStore = config.assignmentStore,
            resourceStore   = config.resourceStore,
            dependencyStore = config.dependencyStore;

        if (!calendarManager) result.calendarManager = taskStore.calendarManager;
        if (!assignmentStore) result.assignmentStore = taskStore.getAssignmentStore();
        if (!resourceStore) result.resourceStore = taskStore.getResourceStore();
        if (!dependencyStore) result.dependencyStore = taskStore.getDependencyStore();

        return result;
    },


    addCalendarManager : function (calendarManager, stores) {
        var store, descriptor;

        if (calendarManager instanceof Ext.data.AbstractStore) {
            store       = calendarManager;
            descriptor  = { store : calendarManager };

        } else if (typeof calendarManager == 'object') {
            store       = calendarManager.store;
            descriptor  = calendarManager;

        } else {
            calendarManager = Ext.data.StoreManager.get(calendarManager);
            store           = calendarManager;
            descriptor      = { store : calendarManager };
        }

        var model   = (store.getModel && store.getModel() || store.model).prototype;

        // register calendar manager sub-stores being kept in "Days" field
        if (!descriptor.stores) {
            descriptor.stores  = [{
                storeId     : model.daysField,
                idProperty  : model.idProperty
            }];
        }

        this.calendarManager    = descriptor;

        // on calendar manager data get loaded we gonna set the project calendar
        store.on('load', this.onCalendarManagerLoad, this);

        this.mon(store, {
            dayadd          : this.onStoreChange,
            dayupdate       : this.onStoreChange,
            dayremove       : this.onStoreChange,
            daybulkremove   : this.onStoreChange,
            scope           : this
        });

        stores.push(descriptor);
    },


    onCalendarManagerLoad : function (store) {
        var projectCalendar     = store.getProjectCalendar(),
            oldCalendarId       = projectCalendar && projectCalendar.getCalendarId(),
            newCalendarId       = store.metaData && store.metaData.projectCalendar;

        // if project calendar has changed
        if (oldCalendarId != newCalendarId) {
            store.setProjectCalendar(newCalendarId);
        }
    },


    applyLoadResponse : function () {
        // let's ignore calendars events during data loading since we don't want tasks to get moved after stores loading
        var cm  = this.getCalendarManager();
        cm && cm.suspendCalendarsEvents();

        this.callParent(arguments);

        cm && cm.resumeCalendarsEvents();
    },


    /**
     * Returns the calendar manager bound to the crud manager.
     * @return {Gnt.data.CalendarManager} The calendar manager bound to the crud manager.
     */
    getCalendarManager : function () {
        return this.calendarManager && this.calendarManager.store;
    },

    /**
     * Returns the resource store bound to the crud manager.
     * @return {Gnt.data.ResourceStore} The resource store bound to the crud manager.
     */
    getResourceStore : function () {
        return this.resourceStore && this.resourceStore.store;
    },

    /**
     * Returns the dependency store bound to the crud manager.
     * @return {Gnt.data.DependencyStore} The dependency store bound to the crud manager.
     */
    getDependencyStore : function () {
        return this.dependencyStore && this.dependencyStore.store;
    },

    /**
     * Returns the assignment store bound to the crud manager.
     * @return {Gnt.data.AssignmentStore} The assignment store bound to the crud manager.
     */
    getAssignmentStore : function () {
        return this.assignmentStore && this.assignmentStore.store;
    },

    /**
     * Returns the task store bound to the crud manager.
     * @return {Gnt.data.TaskStore} The task store bound to the crud manager.
     */
    getTaskStore : function () {
        return this.taskStore && this.taskStore.store;
    },


    prepareUpdated : function (list, stores, storeInfo) {
        if (list[0] instanceof Gnt.model.Task) {
            // Root should not be updated since the gantt doesn't modify this (though Ext JS might)
            list = Ext.Array.filter(list, function(node) { return !node.isRoot(); });

            var result  = this.callParent([list, stores, storeInfo]);

            // if resetIdsBeforeSync mode is enabled and we deal with tasks
            // we need to reset ids for tasks segments as well
            if (this.resetIdsBeforeSync) {
                var segmentsField   = list[0].segmentsField,
                    proto           = Ext.ClassManager.get(list[0].segmentClassName).prototype,
                    idProperty      = proto.idProperty,
                    phantomIdField  = proto.phantomIdField;

                for (var i = 0; i < result.length; i++) {
                    var segmentsData    = result[i][segmentsField];
                    if (segmentsData) {
                        for (var j = 0; j < segmentsData.length; j++) {
                            var segment = segmentsData[j];
                            if (segment[phantomIdField]) delete segment[idProperty];
                        }
                    }
                }
            }

            return result;
        }

        return this.callParent(arguments);
    },


    prepareAdded : function (list) {
        var result  = this.callParent(arguments);

        // if resetIdsBeforeSync mode is enabled and we deal with tasks
        // we need to reset ids for tasks segments as well
        if (this.resetIdsBeforeSync && list[0] instanceof Gnt.model.Task) {
            var segmentsField   = list[0].segmentsField,
                idProperty      = Ext.ClassManager.get(list[0].segmentClassName).prototype.idProperty;

            for (var i = 0; i < result.length; i++) {
                var segmentsData    = result[i][segmentsField];
                if (segmentsData) {
                    for (var j = 0; j < segmentsData.length; j++) {
                        delete segmentsData[j][idProperty];
                    }
                }
            }
        }

        return result;
    },


    applyChangesToTask : function (record, changes) {
        // apply changes to segments
        if (changes.hasOwnProperty(record.segmentsField)) {

            var segments        = record.getSegments(),
                segmentsField   = record.segmentsField,
                phantomIdField  = segments && segments[0].phantomIdField,
                idProperty      = segments && segments[0].idProperty,
                segmentsChanges = changes[segmentsField];

            // loop over transferred segments if any
            if (segmentsChanges && segmentsChanges.length) {

                for (var i = segmentsChanges.length - 1; i >= 0; i--) {
                    // get transferred segment change
                    var segmentChange   = segmentsChanges[i],
                        phantomId       = segmentChange[phantomIdField],
                        id              = segmentChange[idProperty],
                        segment         = null;

                    // let's find corresponding segment to update
                    for (var j = 0; j < segments.length; j++) {
                        segment     = segments[j];

                        // we detect it using either phantom or real id
                        if ((segment.get(phantomIdField) == phantomId) || (segment.getId() == id)) {
                            // let's apply transferred changes to found segment
                            this.applyChangesToRecord(segment, segmentChange);
                            break;
                        }
                    }
                }

                // need to get rid of "Segments" field since we already loaded segments changes
                // (otherwise the task will do a simple setSegments() call)
                delete changes[segmentsField];
            }
        }
    },


    applyChangesToRecord : function (record, changes, stores) {
        // if we deal with a task let's call special applyChangesToTask method before
        // it will apply changes to the task segments (if they passed)
        if (record instanceof Gnt.model.Task) {
            this.ignoreUpdates++;

            this.applyChangesToTask.apply(this, arguments);

            this.ignoreUpdates--;
        }

        this.callParent(arguments);
    }
});

/**
@class Gnt.template.Template
@extends Ext.XTemplate

Base class of all UI task templates. Subclass this class to implement your own UI template.
*/
Ext.define("Gnt.template.Template", {
    extend      : 'Ext.XTemplate',

    isLegacyIE  : Ext.isIE8m,

    getInnerTpl : Ext.emptyFn,

    innerTpl    : null,

    dependencyTerminalMarkup : '<div class="sch-gantt-terminal sch-gantt-terminal-start"></div><div class="sch-gantt-terminal sch-gantt-terminal-end"></div>',

    constructor : function (cfg) {
        Ext.apply(this, cfg);

        var side = cfg.rtl ? 'right' : 'left';
        var inner = this.getInnerTpl(cfg) || '';

        this.callParent([
                 '<div class="sch-event-wrap {ctcls} ' + Ext.baseCSSPrefix + 'unselectable" style="' + side + ':{offset}px">',
                    '<tpl if="isRollup">',
                        inner,
                    '<tpl else>',
                        (cfg.leftLabel ? '<div class="sch-gantt-labelct sch-gantt-labelct-left"><label class="sch-gantt-label sch-gantt-label-left">{leftLabel}</label></div>' : ''),
                        (cfg.rightLabel ? '<div class="sch-gantt-labelct sch-gantt-labelct-right" style="left:{width}px"><label class="sch-gantt-label sch-gantt-label-right">{rightLabel}</label></div>' : ''),
                        (cfg.topLabel ? '<div class="sch-gantt-labelct sch-gantt-labelct-top"><label class="sch-gantt-label sch-gantt-label-top">{topLabel}</label></div>' : ''),
                        inner,
                        (cfg.bottomLabel ? '<div class="sch-gantt-labelct sch-gantt-labelct-bottom"><label class="sch-gantt-label sch-gantt-label-bottom">{bottomLabel}</label></div>' : ''),
                    '</tpl>',
                '</div>',
            {
                disableFormats  : true
            }
        ]);
    }
});

/**
@class Gnt.template.Task
@extends Ext.XTemplate

Template class used to render a regular leaf task.
*/
Ext.define("Gnt.template.Task", {
    extend      : 'Gnt.template.Template',

    /**
     * @cfg {String} innerTpl The template defining the inner visual markup for the task.
     */
    innerTpl : '<div class="sch-gantt-progress-bar" style="width:{progressBarWidth}px;{progressBarStyle}" unselectable="on">&#160;</div>',

    getInnerTpl : function (cfg) {
        var side = cfg.rtl ? 'right' : 'left';

        return '<div id="' + cfg.prefix + '{id}" class="sch-gantt-item sch-gantt-task-bar {cls}" unselectable="on" style="width:{width}px;{style}">'+
            '<tpl if="isRollup">' +
            '<tpl else>' +
                '<tpl if="segments">' +
                    '<div class="sch-gantt-segment-connector"></div>' +
                '</tpl>'+

                ((cfg.resizeHandles === 'both' || cfg.resizeHandles === 'left') ? '<div class="sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-start"></div>' : '') +

                '<tpl for="segments">' +
                    '<div id="' + cfg.prefix + '{parent.Id}-segment-{[xindex-1]}" class="sch-gantt-task-segment {cls}" style="left:{left}px;width:{width}px;{style}"' +
                    ' data-segmentIndex="{[xindex-1]}">' +
                        this.innerTpl +
                        ((cfg.resizeHandles === 'both' || cfg.resizeHandles === 'right') ? '<div class="sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-end"></div>' : '') +
                    '</div>' +
                '</tpl>' +
                this.innerTpl +

                ((cfg.resizeHandles === 'both' || cfg.resizeHandles === 'right') ? '<div class="sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-end"></div>' : '') +

                (cfg.enableProgressBarResize ? '<div style="' + side + ':{progressBarWidth}px" class="sch-gantt-progressbar-handle"></div>': '') +

                // Left / Right terminals
                (cfg.enableDependencyDragDrop ? this.dependencyTerminalMarkup : '') +

            '</tpl>'+
        '</div>';
    }
});

/**
@class Gnt.template.Milestone
@extends Ext.XTemplate

Class used to render a milestone task.
*/
Ext.define("Gnt.template.Milestone", {
    extend : 'Gnt.template.Template',

    /**
     * @cfg {String} innerTpl The template defining the inner visual markup for the milestone task.
     * Please note that this markup may be different depending on the browser used.
     */
    innerTpl :  (Ext.isIE8m ?
        ('<div style="border-width:{[Math.floor(values.side*0.7)]}px;{style}" class="sch-gantt-milestone-diamond-top {cls}" unselectable="on"></div>' +
         '<div style="border-width:{[Math.floor(values.side*0.7)]}px;{style}" class="sch-gantt-milestone-diamond-bottom {cls}" unselectable="on"></div>') :

        ('<img style="{[values.print ? "height:" + values.side + "px;border-left-width:" + values.side + "px" : ""]};{style}" src="' + Ext.BLANK_IMAGE_URL + '" class="sch-gantt-milestone-diamond {cls}" unselectable="on"/>')),

    getInnerTpl : function (cfg) {
        return '<div ' + (this.isLegacyIE ? 'style="width:{[Math.floor(values.side*0.7)]}px"' : '') + ' id="' + cfg.prefix + '{id}" class="sch-gantt-item sch-gantt-milestone-diamond-ct">' +
            this.innerTpl +

            '<tpl if="isRollup">' +
            '<tpl else>' +
            // Milestone diamond, 2 elements for old IE
            // Dependency terminals
            (cfg.enableDependencyDragDrop ? this.dependencyTerminalMarkup : '') +
           '</tpl>' +

        '</div>';
    }
});
/**
@class Gnt.template.ParentTask
@extends Ext.XTemplate

Class used to render a parent task.
*/
Ext.define("Gnt.template.ParentTask", {
    extend : 'Gnt.template.Template',

    /**
     * @cfg {String} innerTpl The template defining the inner visual markup for the task.
     */
    innerTpl    : '<div class="sch-gantt-progress-bar" style="width:{progressBarWidth}px;{progressBarStyle}">&#160;</div>'+
        '<div class="sch-gantt-parenttask-arrow sch-gantt-parenttask-leftarrow"></div>' +
        '<div class="sch-gantt-parenttask-arrow sch-gantt-parenttask-rightarrow"></div>',

    getInnerTpl : function(cfg) {
        return '<div id="' + cfg.prefix + '{id}" class="sch-gantt-item sch-gantt-parenttask-bar {cls}" style="width:{width}px; {style}">'+
                    this.innerTpl +
                    // Left / Right terminals
                    ((cfg.enableDependencyDragDrop && cfg.allowParentTaskDependencies) ? this.dependencyTerminalMarkup : '') +
                '</div>';

    }
});

Ext.define("Gnt.template.RollupTask", {
    extend      : 'Ext.XTemplate',

    isLegacyIE  : Ext.isIE8m,

    tplConfig   : null,

    constructor : function (cfg) {

        Ext.apply(this, cfg);

        var tpl = [
            '<div class="sch-rollup-wrap">',
                '<tpl for=".">',
                    '{[values.tpl.apply(values)]}',
                '</tpl>',
            '</div>'
        ];

        this.tplConfig = Ext.apply(this.tplConfig || {}, {
            disableFormats  : true,
            applyRollup     : this.applyRollup
        });

        this.callParent(tpl.concat([this.tplConfig]));
    }
});
/*
@class Gnt.Tooltip
@extends Ext.ToolTip
@private

Internal plugin showing task start/end/duration information for a single task.
*/
Ext.define("Gnt.Tooltip", {
    extend      : 'Ext.ToolTip',
    alias       : 'widget.gantt_task_tooltip',

    requires    : ['Ext.Template'],

    mixins      : ['Gnt.mixin.Localizable'],

    /*
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - startText       : 'Starts: ',
            - endText         : 'Ends: ',
            - durationText    : 'Duration:'
     */

    /*
     * @cfg {String} mode Either "startend" - showing start date and end date, or "duration" to show start date and duration
     */
    mode            : 'startend',


    cls             : 'sch-tip',

    height          : 40,

    autoHide        : false,
    anchor          : 'b-tl',
    maskOnDisable   : false,

    /*
     * @cfg {Ext.Template} startEndTemplate An HTML snippet used for the tooltip display in "startend" mode. During rendering, it will receive a data object
     * containing "startText", "endText" and "task" (the entire task) properties.
     */
    startEndTemplate : null,

    /*
     * @cfg {Ext.Template} durationTemplate An HTML snippet used for the tooltip display in "duration" mode. During rendering, it will receive a data object
     * containing "startText", "duration", "unit" and "task" (the entire task) properties.
     */
    durationTemplate : null,

    initComponent : function() {
        this.rtl = this.gantt.rtl;

        if (this.mode === 'startend' && !this.startEndTemplate) {
            this.startEndTemplate = new Ext.Template(
            '<div class="sch-timetipwrap {cls}">' +
                '<table cellpadding="0" cellspacing="0">' +
                    '<tr><td class="sch-gantt-tip-desc">' + this.L('startText') + '</td><td class="sch-gantt-tip-value">{startText}</td></tr>' +
                    '<tr><td class="sch-gantt-tip-desc">' + this.L('endText') + '</td><td class="sch-gantt-tip-value">{endText}</td></tr>' +
                '</table>' +
            '</div>'
            ).compile();
        }

        if (this.mode === 'duration' && !this.durationTemplate) {
            this.durationTemplate = new Ext.Template(
                '<div class="sch-timetipwrap {cls}">',
                '<table cellpadding="0" cellspacing="0">' +
                    '<tr><td class="sch-gantt-tip-desc">' + this.L('startText') + '</td><td class="sch-gantt-tip-value"> {startText}</td></tr>',
                    '<tr><td class="sch-gantt-tip-desc">' + this.L('durationText') + '</td><td class="sch-gantt-tip-value"> {duration} {unit}' + '</td></tr>',
                '</table>' +
                '</div>'
            ).compile();
        }

        this.callParent(arguments);
    },



    update : function (start, end, valid, taskRecord) {
        var content;
        if (this.mode === 'duration') {
            content = this.getDurationContent(start, end, valid, taskRecord);
        } else {
            content = this.getStartEndContent(start, end, valid, taskRecord);
        }
        this.callParent([content]);
    },


    // private
    getStartEndContent : function(start, end, valid, taskRecord) {
        var gantt       = this.gantt,
            startText   = gantt.getFormattedDate(start),
            endText     = startText;

        if (end - start > 0) {
            endText = gantt.getFormattedEndDate(end, start);
        }

        var retVal = {
            cls         : valid ? 'sch-tip-ok' : 'sch-tip-notok',
            startText   : startText,
            endText     : endText,
            task        : taskRecord
        };

        return this.startEndTemplate.apply(retVal);
    },


    getDurationContent : function(start, end, valid, taskRecord) {
        var unit        = taskRecord.getDurationUnit() || Sch.util.Date.DAY;
        var duration    = taskRecord.calculateDuration(start, end, unit);

        return this.durationTemplate.apply({
            cls         : valid ? 'sch-tip-ok' : 'sch-tip-notok',
            startText   : this.gantt.getFormattedDate(start),
            duration    : parseFloat(Ext.Number.toFixed(duration, 1)),
            unit        : Sch.util.Date.getReadableNameOfUnit(unit, duration > 1),
            task        : taskRecord
        });
    },


    show : function(el, xPos) {
        if (el && (el.dom || el.className)) {
            this.setTarget(el);
        }

        this.callParent([]);

        // Must do this after callParent where rendering takes place
        if (xPos !== undefined) {
            this.setX(xPos);
        }
    }
});

/**
 * @class Gnt.feature.TaskDragDrop
 * @extends Ext.dd.DragZone
 * @private
 *
 * Internal plugin enabling drag and drop for tasks
 */
Ext.define("Gnt.feature.TaskDragDrop", {
    extend : "Ext.dd.DragZone",

    requires : [
        'Gnt.Tooltip',
        'Ext.dd.StatusProxy'
    ],

    /**
     * @cfg {Boolean} useTooltip `false` to not show a tooltip while dragging
     */
    useTooltip      : true,

    /**
     * @cfg {Object} tooltipConfig A custom config object to apply to the {@link Gnt.Tooltip} instance.
     */
    tooltipConfig   : null,

    /**
     * @cfg {Function} validatorFn An empty function by default.
     * Provide to perform custom validation on the item being dragged.
     * This function is called during the drag and drop process and also after the drop is made.
     * @param {Ext.data.Model} record The record being dragged
     * @param {Date} date The date corresponding to the current start date
     * @param {Number} duration The duration of the item being dragged, in minutes
     * @param {Ext.EventObject} e The event object
     * @return {Boolean} true if the drop position is valid, else false to prevent a drop
     */
    validatorFn     : function (record, date, duration, e) { return true; },

    /**
     * @cfg {Object} validatorFnScope
     * The scope for the validatorFn, defaults to the gantt view instance
     */
    validatorFnScope : null,

    /**
     * @cfg {Boolean} showExactDropPosition When enabled, the task being dragged always "snaps" to the exact start date / duration that it will have after being drop.
     */
    showExactDropPosition : false,

    // has to be set to `false` - we'll register the gantt view in the ScrollManager manually
    containerScroll : false,

    dropAllowed     : "sch-gantt-dragproxy",
    dropNotAllowed  : "sch-gantt-dragproxy",

    // cached value of the validity of the drop position
    valid           : false,

    // Reference to the gantt view
    gantt           : null,

    // Don't seem to need these
    onDragEnter     : Ext.emptyFn,
    onDragOut       : Ext.emptyFn,

    tip             : null,

    constructor : function (el, config) {
        config          = config || {};
        Ext.apply(this, config);

        // Drag drop won't work in IE8 if running in an iframe
        // https://www.assembla.com/spaces/bryntum/tickets/712#/activity/ticket:
        if (Ext.isIE && (Ext.isIE8 || Ext.ieVersion < 9) && window.top !== window) {
            Ext.dd.DragDropManager.notifyOccluded = true;
        }

        this.proxy      = this.proxy || new Ext.dd.StatusProxy({
            shadow               : false,
            dropAllowed          : "sch-gantt-dragproxy",
            dropNotAllowed       : "sch-gantt-dragproxy",

            // HACK, we want the proxy inside the gantt chart, otherwise drag drop breaks in fullscreen mode
            ensureAttachedToBody : Ext.emptyFn
        });

        this.gantt.rtl && this.proxy.addCls('sch-rtl');

        var me          = this,
            gantt       = me.gantt;

        if (me.useTooltip) {
            me.tip      = new Gnt.Tooltip(Ext.apply({
                cls   : 'gnt-dragdrop-tip',
                gantt : gantt
            }, me.tooltipConfig));
        }

        me.callParent([ el, Ext.apply(config, { ddGroup : gantt.id + '-task-dd' }) ]);

        me.scroll       = false;
        me.isTarget     = true;
        me.ignoreSelf   = false;

        // Stop task drag and drop when a resize handle, a terminal or a parent task is clicked
        me.addInvalidHandleClass('sch-resizable-handle');
        me.addInvalidHandleClass(Ext.baseCSSPrefix + 'resizable-handle');
        me.addInvalidHandleClass('sch-gantt-terminal');
        me.addInvalidHandleClass('sch-gantt-progressbar-handle');
        me.addInvalidHandleClass('sch-rollup-task');

        gantt.ownerCt.el.appendChild(this.proxy.el);

        gantt.on({
            destroy : me.destroy,
            scope   : me
        });
    },


    destroy : function () {
        if (this.tip) {
            this.tip.destroy();
        }
        this.callParent(arguments);
    },

    // On receipt of a mousedown event, see if it is within a draggable element.
    // Return a drag data object if so. The data object can contain arbitrary application
    // data, but it should also contain a DOM element in the ddel property to provide
    // a proxy to drag.
    getDragData : function (e) {
        var g                   = this.gantt;
        var taskNode            = e.getTarget(g.eventSelector);

        if (taskNode && !e.getTarget('.sch-gantt-baseline-item')) {
            var segmentNode         = e.getTarget('.sch-gantt-task-segment');
            var sourceTask          = g.resolveTaskRecord(taskNode);
            var segmentIndex;
            var sourceNode, minDate, maxDate;

            if (sourceTask.isReadOnly()) {
                return null;
            }

            // Check if we're dragging a split-task segment
            if (segmentNode) {
                segmentIndex = parseInt(segmentNode.getAttribute('data-segmentIndex'), 10);

                // Dragging the first segment means move the entire task
                if (segmentIndex === 0) {
                    sourceNode = taskNode;
                } else {
                    sourceNode = segmentNode;
                }
            } else {
                sourceNode     = taskNode;
            }

            var isMilestone         = sourceTask.isMilestone(),
                constrainingRegion;

            // If we're dragging any segment except the first one (which moves the entire task)
            if (segmentIndex > 0) {
                sourceTask = sourceTask.getSegment(segmentIndex);
            }

            if (g.fireEvent('beforetaskdrag', g, sourceTask, e) === false) {
                return null;
            }

            var xy                  = e.getXY();

            var copy                = sourceNode.cloneNode(true),
                increment           = this.showExactDropPosition ? 0 : g.getSnapPixelAmount(),
                origXY              = Ext.fly(sourceNode).getXY();

            var offsets             = [ xy[ 0 ] - origXY[ 0 ], xy[ 1 ] - origXY[ 1 ] ];

            copy.id                 = Ext.id();
            var height              = Ext.fly(sourceNode).getHeight();
            var width               = Ext.fly(sourceNode).getWidth();
            var heightAdjust        = 0;

            // Height needs to be hardcoded since the copied task bar is put in the drag proxy
            Ext.fly(copy).setHeight(height - heightAdjust);

            if (Ext.isIE8m && isMilestone) {
                Ext.fly(copy).setSize(height + 5, height + 5);
            }

            if (!g.rtl) {
                copy.style.left = -offsets[0] + 'px';
            }
            else {
                copy.style.left = width - offsets[0] + 'px';
            }

            // BEGIN CONSTRAINING PROXY ELEMENT

            if (segmentIndex > 0) {
                var previousSibling     = sourceTask.getPrevSegment();
                var nextSibling         = sourceTask.getNextSegment();
                minDate                 = Sch.util.Date.max(previousSibling.getEndDate(), g.timeAxis.getStart());
                maxDate                 = nextSibling ? Sch.util.Date.min(nextSibling.getStartDate(), g.timeAxis.getEnd()) : g.timeAxis.getEnd();

                // Limit the dragging to the sibling segments (if any)
                constrainingRegion      = { left : g.getCoordinateFromDate(minDate, false) + offsets[0], right : g.getCoordinateFromDate(maxDate, false) - width + offsets[0] };
            } else {
                constrainingRegion = Ext.fly(g.findItemByChild(sourceNode)).getRegion();
            }

            this.constrainTo(
                constrainingRegion,
                Ext.fly(sourceNode).getRegion(),
                offsets[ 0 ],
                offsets[ 1 ]
            );

            // EOF CONSTRAINING PROXY ELEMENT

            this.valid = false;

            if (increment >= 1) {
                this.setXConstraint(this.leftConstraint, this.rightConstraint, increment);
            }

            return {
                sourceNode  : sourceNode,
                repairXY    : origXY,
                offsets     : offsets,
                ddel        : copy,
                record      : sourceTask,
                duration    : Sch.util.Date.getDurationInMinutes(sourceTask.getStartDate(), sourceTask.getEndDate()),

                sourceDate  : g.getDateFromCoordinate(xy[ 0 ]),
                minDate     : minDate,
                maxDate     : maxDate,
                origStart   : sourceTask.getStartDate(),
                start       : null
            };
        }
        return null;
    },

    // @OVERRIDE
    autoOffset : function (x, y) {
        this.setDelta(0, 0);
    },

    // @OVERRIDE
    setXConstraint : function (iLeft, iRight, iTickSize) {
        this.leftConstraint = iLeft;
        this.rightConstraint = iRight;

        this.minX = iLeft;
        this.maxX = iRight;
        if (iTickSize) {
            this.setXTicks(this.initPageX, iTickSize);
        }

        this.constrainX = true;
    },

    // @OVERRIDE
    setYConstraint : function (iUp, iDown, iTickSize) {
        this.topConstraint = iUp;
        this.bottomConstraint = iDown;

        this.minY = iUp;
        this.maxY = iDown;
        if (iTickSize) {
            this.setYTicks(this.initPageY, iTickSize);
        }

        this.constrainY = true;
    },

    constrainTo : function (constrainingRegion, elRegion, offsetX, offsetY) {
        this.resetConstraints();

        this.initPageX  = constrainingRegion.left + offsetX;
        this.initPageY  = elRegion.top + offsetY;

        this.setXConstraint(constrainingRegion.left, constrainingRegion.right, this.xTickSize);
        this.setYConstraint(elRegion.top - 1, elRegion.top - 1, this.yTickSize);
    },


    onDragOver : function (e) {
        var data        = this.dragData,
            task        = data.record,
            gantt       = this.gantt;

        if (!data.hidden) {
            Ext.fly(data.sourceNode).hide();
            data.hidden = true;
        }

        var timeDiff    = gantt.getDateFromCoordinate(e.getXY()[ 0 ]) - data.sourceDate;
        var realStart   = new Date(data.origStart - 0 + timeDiff);
        var proxyEl     = this.proxy.el;
        var newStart;

        if (data.minDate) {
            realStart = Sch.util.Date.constrain(new Date(data.origStart - 0 + timeDiff), data.minDate, data.maxDate);
        }

        // the time diff method can be used for continuous time axis only
        // fallback to proxy element position resolving for filtered time axis
        if (gantt.timeAxis.isContinuous()) {
            newStart        = gantt.timeAxis.roundDate(realStart, gantt.snapRelativeToEventStartDate ? data.origStart : false);
        } else {
            // Adjust x position for certain task types
            var x           = proxyEl.getX() + (gantt.rtl ? proxyEl.getWidth() : 0) + gantt.getXOffset(task) - data.offsets[ 0 ];
            newStart        = gantt.getDateFromXY([ x, 0 ], 'round');
        }

        if (this.showExactDropPosition && gantt.taskStore.skipWeekendsDuringDragDrop) {
            var el              = Ext.fly(data.ddel.id);
            var offsetX         = 0;
            var afterDropStart  = task.skipNonWorkingTime(newStart, !task.isMilestone());

            if (realStart.getTime() != afterDropStart.getTime()) {
                offsetX         = gantt.timeAxisViewModel.getDistanceBetweenDates(realStart, afterDropStart);
            }

            var newEnd          = task.recalculateEndDate(afterDropStart);

            if (realStart > gantt.timeAxis.getStart()) {
                el.setWidth(gantt.timeAxisViewModel.getDistanceBetweenDates(
                        afterDropStart,
                        Sch.util.Date.min(newEnd, gantt.timeAxis.getEnd()))
                );

                if (offsetX) {
                    proxyEl.setX(proxyEl.getX() + offsetX);
                }
            }
        }

        if (!newStart || newStart - data.start === 0) return;

        data.start      = newStart;

        this.valid      = this.validatorFn.call(
            this.validatorFnScope || gantt,
            task,
            newStart,
            data.duration,
            e
        ) !== false;

        if (this.tip) {
            var end = task.calculateEndDate(newStart, task.getDuration(), task.getDurationUnit());

            this.updateTip(task, newStart, end, this.valid);
        }
    },


    startDrag : function() {
        var ScrollManager               = Ext.dd.ScrollManager;

        this.gantt.el.ddScrollConfig    = {
            // this line required for ExtJS 4.2.1 only in 4.2.2 increment will be read from ScrollManager itself if missing
            increment       : ScrollManager.increment,
            hthresh         : ScrollManager.hthresh,
            // disable the vertical container scroll while dragging the task
            vthresh         : -1
        };

        return this.callParent(arguments);
    },


    endDrag : function() {
        // remove previous constraints for container scroll
        delete this.gantt.el.ddScrollConfig;

        return this.callParent(arguments);
    },


    onStartDrag : function () {
        var rec = this.dragData.record;
        var tip = this.tip;

        if (tip) {
            tip.enable();
            tip.show(this.proxy.el);

            this.updateTip(rec, rec.getStartDate(), rec.getEndDate());
        }

        this.gantt.fireEvent('taskdragstart', this.gantt, rec);
    },


    updateTip : function (record, start, end, isValid) {
        isValid     = isValid !== false;

        if (record.isMilestone() && start - Ext.Date.clearTime(start, true) === 0) {
            start   = Sch.util.Date.add(start, Sch.util.Date.MILLI, -1);
            end     = Sch.util.Date.add(end, Sch.util.Date.MILLI, -1);
        }

        this.tip.update(start, end, isValid, record);
    },


    // Override, get rid of weird highlight fx in default implementation
    afterRepair : function () {
        Ext.fly(this.dragData.sourceNode).show();
        if (this.tip) {
            this.tip.hide();
        }
        this.dragging = false;
    },

    // Provide coordinates for the proxy to slide back to on failed drag.
    // This is the original XY coordinates of the draggable element.
    getRepairXY : function () {
        this.gantt.fireEvent('aftertaskdrop', this.gantt);
        return this.dragData.repairXY;
    },

    onDragDrop : function (e, id) {
        var me          = this,
            target      = me.cachedTarget || Ext.dd.DragDropMgr.getDDById(id),
            dragData    = me.dragData,
            gantt       = me.gantt,
            task        = dragData.record,
            start       = dragData.start,
            doFinalize  = true;

        dragData.ddCallbackArgs = [ target, e, id ];

        if (this.tip) {
            this.tip.disable();
        }

        if (this.valid && start && task.getStartDate() - start !== 0) {
            dragData.finalize   = function () { me.finalize.apply(me, arguments); };

            // Allow implementor to take control of the flow, by returning false from this listener,
            // to show a confirmation popup etc.
            doFinalize          = gantt.fireEvent('beforetaskdropfinalize', gantt, dragData, e) !== false;
        }

        if (doFinalize) {
            this.finalize(this.valid);
        }
    },

    finalize    : function (updateRecords) {
        var me          = this,
            dragData    = this.dragData,
            gantt       = this.gantt,
            task        = dragData.record,
            start       = dragData.start,
            previousStartDate,
            currentStartDate;
            //wasChanged  = false;

        if (updateRecords) {
            // TODO: remove commented
            // Done this way since it might be dropped on a holiday, and then gets bumped back to its original value
            //gantt.taskStore.on('update', function () { wasChanged = true; }, null, { single : true });
            previousStartDate = task.getStartDate();

            task.setStartDate(start, true, gantt.taskStore.skipWeekendsDuringDragDrop, function(cancelChanges, affectedTasks) {

                currentStartDate = task.getStartDate();

                if (previousStartDate < currentStartDate || previousStartDate > currentStartDate) {
                    gantt.fireEvent('taskdrop', gantt, task);
                    // For our good friend IE9, the pointer cursor gets stuck without the defer
                    if (Ext.isIE9) {
                        me.proxy.el.setStyle('visibility', 'hidden');
                        Ext.Function.defer(me.onValidDrop, 10, me, dragData.ddCallbackArgs);
                    } else {
                        me.onValidDrop.apply(me, dragData.ddCallbackArgs);
                    }

                } else {
                    me.onInvalidDrop.apply(me, dragData.ddCallbackArgs);
                }

                gantt.fireEvent('aftertaskdrop', gantt, task);
            });
        } else {
            me.onInvalidDrop.apply(me, dragData.ddCallbackArgs);
            gantt.fireEvent('aftertaskdrop', gantt, task);
        }
    },

    // HACK: Override for IE, if you drag the task bar outside the window or iframe it crashes (missing e.target)
    // https://www.assembla.com/spaces/bryntum/tickets/716
    onInvalidDrop : function(target, e, id) {
        if (Ext.isIE && !e) {
            e = target;
            target = target.getTarget() || document.body;
        }

        return this.callParent([target, e, id]);
    }
});


/*
 * @class Gnt.feature.DependencyDragZone
 * @extends Ext.util.Observable
 * @private
 * Internal drag zone class for dependency drag drop.
 */
Ext.define("Gnt.feature.DependencyDragZone", {
    extend : 'Ext.dd.DragZone',

    mixins: {
        observable:  'Ext.util.Observable'
    },

    rtl                    : null,
    useLineProxy           : null,
    terminalSelector       : null,
    ganttView              : null,
    fromText               : null,
    toText                 : null,
    startText              : null,
    endText                : null,
    toolTipTpl             : null,

    constructor : function(el, config) {
        this.mixins.observable.constructor.call(this, config);

        this.callParent(arguments);
    },

    initLineProxy : function (sourceEl, isStart) {
        var lpEl = this.lineProxyEl = this.lineProxyEl || this.el.createChild({ cls : 'sch-gantt-connector-proxy' });
        var adjust = Ext.isIE9m ? 0 : 4;
        var side = this.rtl ? (isStart ? 'r' : 'l') : (isStart ? 'l' : 'r');
        var scroll    = this.ganttView.getScroll();

        lpEl.alignTo(sourceEl, side, [isStart ? -adjust : adjust, 0]);

        Ext.apply(this, {
            containerTop    : this.el.getTop(),
            containerLeft   : this.el.getLeft(),
            startXY         : lpEl.getXY(),
            startScrollLeft : scroll.left,
            startScrollTop  : scroll.top
        });
    },

    onDrag : function(e, t) {
        if (this.useLineProxy) {
            this.updateLineProxy(e.getXY());
        }
    },

    updateLineProxy : function (xy) {
        var lineProxy = this.lineProxyEl,
            scroll    = this.ganttView.getScroll(),
            diffX = xy[0] - this.startXY[0] + scroll.left - this.startScrollLeft,
            diffY = xy[1] - this.startXY[1] + scroll.top - this.startScrollTop,
            newHeight = Math.max(1, Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) - 2),
            // Calculate new angle relative to start XY
            rad = Math.atan2(diffY, diffX) - (Math.PI / 2),
            styleBlob;

        if (Ext.isIE9m) {
            var cos = Math.cos(rad),
                sin = Math.sin(rad),
                matrixString = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod="auto expand", M11 = ' + cos + ', M12 = ' + (-sin) + ', M21 = ' + sin + ', M22 = ' + cos + ')',
                scrollValueTop,
                scrollValueLeft;

            if (scroll.top !== this.startScrollTop) {
                scrollValueTop = this.startScrollTop - this.containerTop;
            } else {
                scrollValueTop = scroll.top - this.containerTop;
            }

            if (scroll.left !== this.startScrollLeft) {
                scrollValueLeft = this.startScrollLeft - this.containerLeft;
            } else {
                scrollValueLeft = scroll.left - this.containerLeft;
            }

            styleBlob = {
                "height"     : newHeight + 'px',
                "top"        : Math.min(0, diffY) + this.startXY[1] + scrollValueTop + (diffY < 0 ? 2 : 0) + 'px',
                "left"       : Math.min(0, diffX) + this.startXY[0] + scrollValueLeft + (diffX < 0 ? 2 : 0) + 'px',
                "filter"     : matrixString,
                "-ms-filter" : matrixString
            };
        } else {
            var rotateString = 'rotate(' + rad + 'rad)';

            styleBlob = {
                "height"            : newHeight + 'px',
                "-o-transform"      : rotateString,
                "-webkit-transform" : rotateString,
                "-ms-transform"     : rotateString,
                "-moz-transform"    : rotateString,
                "transform"         : rotateString
            };
        }

        lineProxy.setStyle(styleBlob);
    },

    
    onStartDrag : function () {

        this.el.addCls('sch-gantt-dep-dd-dragging');
        this.proxy.el.addCls('sch-dd-dependency-proxy');

        this.fireEvent('dndstart', this);

        if (this.useLineProxy) {
            var dd = this.dragData;
            this.initLineProxy(dd.sourceNode, dd.isStart);
            this.lineProxyEl.show();
        }
    },
    
    // On receipt of a mousedown event, see if it is within a draggable element.
    // Return a drag data object if so. The data object can contain arbitrary application
    // data, but it should also contain a DOM element in the ddel property to provide
    // a proxy to drag.
    getDragData : function (e) {
        var sourceNode = e.getTarget(this.terminalSelector);

        if (sourceNode) {
            var sourceTaskRecord = this.ganttView.resolveTaskRecord(sourceNode);
            if (this.fireEvent('beforednd', this, sourceTaskRecord) === false) {
                return null;
            }

            var isStart = !!sourceNode.className.match('sch-gantt-terminal-start');

            var tplData = {
                fromLabel       : this.fromText,
                fromTaskName    : Ext.String.htmlEncode(sourceTaskRecord.getName()),
                fromSide        : isStart ? this.startText : this.endText,
                toLabel         : this.toText,
                toTaskName      : '',
                toSide          : ''
            };

            var ddel = Ext.core.DomHelper.createDom({ html : this.toolTipTpl.apply(tplData) }).firstChild;

            return {
                fromId     : sourceTaskRecord.getId() || sourceTaskRecord.internalId,
                tplData    : tplData,
                isStart    : isStart,
                repairXY   : Ext.fly(sourceNode).getXY(),
                ddel       : ddel,
                sourceNode : Ext.fly(sourceNode).up(this.ganttView.eventSelector)
            };
        }
        return false;
    },

    // Override, get rid of weird highlight fx in default implementation
    afterRepair : function () {
        this.el.removeCls('sch-gantt-dep-dd-dragging');

        this.dragging = false;
        this.fireEvent('afterdnd', this);
    },

    onMouseUp   : function () {
        this.el.removeCls('sch-gantt-dep-dd-dragging');

        if (this.lineProxyEl) {
            var duration = Ext.isIE9m ? 0 : 400;
            var el = this.lineProxyEl;

            el.animate({
                to       : { height : 0 },
                duration : duration,
                callback : function() {
                    Ext.destroy(el);
                }
            });

            this.lineProxyEl = null;
        }
    },


    // Provide coordinates for the proxy to slide back to on failed drag.
    // This is the original XY coordinates of the draggable element.
    getRepairXY : function () {
        return this.dragData.repairXY;
    },

    destroy : function () {
        Ext.destroy(this.lineProxyEl);

        this.callParent(arguments);
    }
});


/*
 * @class Gnt.feature.DependencyDropZone
 * @extends Ext.util.Observable
 * @private
 * Internal drop zone class for dependency drag drop.
 */
Ext.define("Gnt.feature.DependencyDropZone", {
    extend : 'Ext.dd.DropZone',

    mixins: {
        observable:  'Ext.util.Observable'
    },

    terminalSelector : null,
    dependencyStore  : null,
    toText           : null,
    startText        : null,
    endText          : null,
    ganttView        : null,

    constructor : function(el, config) {
        this.mixins.observable.constructor.call(this, config);

        this.callParent(arguments);
    },

    getTargetFromEvent : function (e) {
        return e.getTarget(this.terminalSelector);
    },

    // On entry into a target node, highlight that node.
    onNodeEnter        : function (target, dd, e, data) {
        Ext.fly(target).addCls('sch-gantt-terminal-drophover');
    },

    // On exit from a target node, unhighlight that node.
    onNodeOut          : function (target, dd, e, data) {
        Ext.fly(target).removeCls('sch-gantt-terminal-drophover');

        // Clear the proxy text showing the target task
        this.toolTipTpl.overwrite(dd.proxy.el.down('.sch-dd-dependency'), data.tplData);

    },

    onNodeOver : function (target, dd, e, data) {
        var targetRecord = this.ganttView.resolveTaskRecord(target),
            targetId = targetRecord.getId() || targetRecord.internalId,
            isTargetStart = target.className.match('sch-gantt-terminal-start');

        var tplData = {};

        Ext.apply(tplData, {
           toLabel      : this.toText,
           toTaskName   : Ext.String.htmlEncode(targetRecord.getName()),
           toSide       :  isTargetStart ? this.startText : this.endText
        }, data.tplData);

        this.toolTipTpl.overwrite(dd.proxy.el.down('.sch-dd-dependency'), tplData);

        var type = this.resolveType(data.isStart, target);

        if (this.dependencyStore.isValidDependency(data.fromId, targetId, type)) {
            return this.dropAllowed;
        } else {
            return this.dropNotAllowed;
        }
    },

    onNodeDrop : function (target, dd, e, data) {
        var type = this.resolveType(data.isStart, target),
            retVal,
            targetRec = this.ganttView.resolveTaskRecord(target),
            targetId = targetRec.getId() || targetRec.internalId;

        this.el.removeCls('sch-gantt-dep-dd-dragging');

        retVal = this.dependencyStore.isValidDependency(data.fromId, targetId, type);

        if (retVal) {
            this.fireEvent('drop', this, data.fromId, targetId, type);
        }
        this.fireEvent('afterdnd', this);

        return retVal;
    },

    resolveType : function (isFromStart, target) {
        var DepType = Gnt.model.Dependency.Type,
            isToStart = target.className.match('sch-gantt-terminal-start');

        if (isFromStart  && isToStart)  return DepType.StartToStart;
        if (isFromStart  && !isToStart) return DepType.StartToEnd;
        if (!isFromStart && isToStart)  return DepType.EndToStart;

        return DepType.EndToEnd;
    }
});

/**
 * @class Gnt.feature.DependencyDragDrop
 * @extends Ext.util.Observable
 * @private
 * Internal class managing the interaction of setting up new dependencies using drag and drop between dependency terminals.
 */
Ext.define("Gnt.feature.DependencyDragDrop", {
    extend : 'Ext.util.Observable',

    mixins : {
        localizable : 'Gnt.mixin.Localizable'
    },

    requires : [
        'Gnt.feature.DependencyDragZone',
        'Gnt.feature.DependencyDropZone',
        'Ext.XTemplate'
    ],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - fromText    : 'From: <strong>{0},</strong> {1},<br/>',
     - toText      : 'To: <strong>{0},</strong> {1},',
     - startText   : 'Start',
     - endText     : 'End'
     */

    /**
     * @cfg {Boolean} useLineProxy True to display a line while dragging
     */
    useLineProxy     : true,

    /**
     * @cfg {Object} dragZoneConfig
     * A custom config object used to configure the Ext.dd.DragZone instance.
     */
    dragZoneConfig  : null,

    /**
     * @cfg {Object} dropZoneConfig
     * A custom config object used to configure the Ext.dd.DropZone instance.
     */
    dropZoneConfig  : null,


    /**
     * @cfg {Object} toolTipTpl
     * A custom config object to configure the template for the drag tooltip.
     */
    toolTipTpl  : [
        '<div class="sch-dd-dependency">',
        '<table><tbody>',
        '<tr>',
        '<td><span class="sch-dd-dependency-from">{fromLabel}:</span></td>',
        '<td><span class="sch-dd-dependency-from-name">{fromTaskName}</span> - {fromSide}</td>',
        '</tr>',
        '<tr>',
        '<td><span class="sch-dd-dependency-to">{toLabel}:</span></td>',
        '<td><span class="sch-dd-dependency-to-name">{toTaskName}</span> - {toSide}</td>',
        '</tr>',
        '</tbody></table>',
        '</div>'
    ],

    // private, the terminal CSS selector
    terminalSelector : '.sch-gantt-terminal',
    el               : null,
    rtl              : null,
    ddGroup          : null,
    ganttView        : null,
    dependencyStore  : null,

    /**
     * @event beforednd
     * Fires before a drag and drop operation is initiated, return false to cancel it
     * @param {Gnt.feature.DependencyDragDrop} dnd The drag and drop instance
     * @param {Ext.data.Model} fromRecord The task record
     */

    /**
     * @event dndstart
     * Fires when a drag and drop operation starts
     * @param {Gnt.feature.DependencyDragDrop} dnd The drag and drop instance
     */

    /**
     * @event drop
     * Fires after a drop has been made on a receiving terminal
     * @param {Gnt.feature.DependencyDragDrop} dnd The drag and drop instance
     * @param {Mixed} fromId The source dependency task record id
     * @param {Mixed} toId The target dependency task record id
     * @param {Number} type The dependency type, see {@link Gnt.model.Dependency} for more information about possible values.
     */

    /**
     * @event afterdnd
     * Always fires after a dependency drag and drop operation
     * @param {Gnt.feature.DependencyDragDrop} dnd The drag and drop instance
     */

    constructor : function (config) {

        var view = config.ganttView;

        Ext.apply(this, config);

        this.ddGroup = view.id + '-sch-dependency-dd';

        // Lazy setup
        this.el.on('mousemove', this.doSetup, this, { single : true });

        this.callParent(arguments);
    },

    doSetup : function () {
        var me = this;

        // The drag zone behaviour
        this.dragZone = new Gnt.feature.DependencyDragZone(this.el, Ext.apply({
            rtl                    : this.rtl,
            terminalSelector       : this.terminalSelector,
            useLineProxy           : this.useLineProxy,
            ddGroup                : this.ddGroup,
            ganttView              : this.ganttView,
            startText              : this.L('startText'),
            endText                : this.L('endText'),
            fromText               : this.L('fromText'),
            toText                 : this.L('toText'),
            toolTipTpl             : Ext.XTemplate.getTpl(this, 'toolTipTpl')
        }, this.dragZoneConfig));


        this.relayEvents(this.dragZone, [
            'beforednd',
            'dndstart',
            'afterdnd'
        ]);

        this.dropZone = Ext.create("Gnt.feature.DependencyDropZone", this.el, Ext.apply({
            rtl              : this.rtl,
            terminalSelector : this.terminalSelector,
            ddGroup          : this.ddGroup,
            ganttView        : this.ganttView,
            dependencyStore  : this.dependencyStore,

            startText        : this.L('startText'),
            endText          : this.L('endText'),
            toText           : this.L('toText'),
            toolTipTpl       : Ext.XTemplate.getTpl(this, 'toolTipTpl')
        }, this.dropZoneConfig));

        this.relayEvents(this.dropZone, ['drop', 'afterdnd']);

        this.configureAllowedSourceTerminals();


        if (this.dependencyStore.allowedDependencyTypes) {
            // Define the allowed targets at drag start time
            this.dragZone.on('dndstart', this.configureAllowedTargetTerminals, this);
        } else {
            // Allow all types
            this.el.addCls(['sch-gantt-terminal-allow-target-start', 'sch-gantt-terminal-allow-target-end']);
        }
    },

    configureAllowedSourceTerminals : function () {
        var allowed = this.dependencyStore.allowedDependencyTypes;
        var classes = ['sch-gantt-terminal-allow-source-start', 'sch-gantt-terminal-allow-source-end'];

        if (allowed) {
            classes = [];

            if (Ext.Array.indexOf(allowed, 'EndToEnd') > -1 || Ext.Array.indexOf(allowed, 'EndToStart') > -1 ) {
                classes.push('sch-gantt-terminal-allow-source-end');
            }

            if (Ext.Array.indexOf(allowed, 'StartToStart') > -1 || Ext.Array.indexOf(allowed, 'StartToEnd') > -1) {
                classes.push('sch-gantt-terminal-allow-source-start');
            }
        }

        this.el.addCls(classes);
    },


    configureAllowedTargetTerminals : function () {
        var allowed = this.dependencyStore.allowedDependencyTypes;
        var classes = [];

        this.el.removeCls(['sch-gantt-terminal-allow-target-start', 'sch-gantt-terminal-allow-target-end']);

        if (Ext.Array.contains(allowed, 'EndToEnd') || Ext.Array.contains(allowed, 'StartToEnd')) {
            classes.push('sch-gantt-terminal-allow-target-end');
        }

        if (Ext.Array.contains(allowed, 'StartToStart') || Ext.Array.contains(allowed, 'EndToStart')) {
            classes.push('sch-gantt-terminal-allow-target-start');
        }

        this.el.addCls(classes);
    },


    destroy : function () {
        if (this.dragZone) {
            this.dragZone.destroy();
        }

        if (this.dropZone) {
            this.dropZone.destroy();
        }
    }
});

/**
* @class Gnt.feature.DragCreator
* @private
*
* An internal class which shows a drag proxy while clicking and dragging.
* Create a new instance of this plugin
*/
Ext.define("Gnt.feature.DragCreator", {
    requires : [
        'Ext.Template',
        'Sch.util.DragTracker',
        'Gnt.Tooltip'
    ],

    constructor : function (config) {
        Ext.apply(this, config || {});

        this.init();
    },

    /**
    * @cfg {Boolean} disabled true to start disabled
     */
    disabled: false,

    /**
    * @cfg {Boolean} showDragTip true to show a time tooltip when dragging to create a new event
    */
    showDragTip: true,

    /**
     * @cfg {Object} tooltipConfig A custom config object to apply to the {@link Gnt.Tooltip} instance.
     */
    tooltipConfig   : null,

    /**
    * @cfg {Number} dragTolerance Number of pixels the drag target must be moved before dragging is considered to have started. Defaults to 2.
    */
    dragTolerance: 2,

    /**
    * @cfg {Ext.Template} template The HTML template shown when dragging to create new items
    */

    /**
    * @cfg {Function} validatorFn An empty function by default.
    * Provide to perform custom validation on the item being created.
    * @param {Ext.data.Model} record the resource for which the task is being created
    * @param {Date} startDate
    * @param {Date} endDate
    * @param {Event} e The event object
    * @return {Boolean} isValid True if the creation event is valid, else false to cancel
    */
    validatorFn: Ext.emptyFn,

    /**
    * @cfg {Object} validatorFnScope
    * The scope for the validatorFn
    */
    validatorFnScope: null,

    /**
    * Enable/disable the plugin
    * @param {Boolean} disabled True to disable this plugin
    */
    setDisabled: function (disabled) {
        this.disabled = disabled;
        if (this.dragTip) {
            this.dragTip.setDisabled(disabled);
        }
    },

    getProxy : function() {
        if (!this.proxy) {
            // Attach this element to the nested gantt panel element (view el is cleared by refreshes)
            this.proxy = this.template.append(this.ganttView.ownerCt.el, {}, true);
        }
        return this.proxy;
    },

    // private
    onBeforeDragStart: function (e) {
        var s = this.ganttView,
            t = e.getTarget('.' + s.timeCellCls, 2);

        if (t) {
            var record = s.resolveTaskRecord(t);
            var dateTime = s.getDateFromDomEvent(e);

            if (!this.disabled && !record.isReadOnly() && !record.getStartDate() && !record.getEndDate() && s.fireEvent('beforedragcreate', s, record, dateTime, e) !== false) {

                e.stopEvent();

                // Save record if the user ends the drag outside the current row
                this.record = record;

                // Start time of the task to be created
                this.originalStart = dateTime;

                // Constrain the dragging within the current row schedule area
                this.rowRegion = s.getScheduleRegion(this.record, this.originalStart);

                // Save date constraints
                this.dateConstraints = s.getDateConstraints(this.resourceRecord, this.originalStart);

                // TODO apply xStep or yStep to drag tracker
                return true;
            }
        }
        return false;
    },

    // private
    onDragStart: function () {
        var me = this,
            view = me.ganttView,
            proxy = me.getProxy();

        me.start = me.originalStart;
        me.end = me.start;

        me.rowBoundaries = {
            top : me.rowRegion.top,
            bottom : me.rowRegion.bottom
        };

        proxy.setBox({
            top : me.rowBoundaries.top,
            right : me.tracker.startXY[0],
            bottom : me.rowBoundaries.bottom,
            left : me.tracker.startXY[0]
        });

        proxy.show();

        me.ganttView.fireEvent('dragcreatestart', me.ganttView);

        if (me.showDragTip) {
            me.dragTip.update(me.start, me.end, true, this.record);
            me.dragTip.enable();
            me.dragTip.show(proxy);
        }
    },

    // private
    onDrag: function (e) {
        var me = this,
            view = me.ganttView,
            dragRegion = me.tracker.getRegion().constrainTo(me.rowRegion),
            dates = view.getStartEndDatesFromRegion(dragRegion, 'round');

        if (!dates) {
            return;
        }

        me.start = dates.start || me.start;
        me.end = dates.end || me.end;

        var dc = me.dateConstraints;

        if (dc) {
            me.end = Sch.util.Date.constrain(me.end, dc.start, dc.end);
            me.start = Sch.util.Date.constrain(me.start, dc.start, dc.end);
        }

        me.valid = this.validatorFn.call(me.validatorFnScope || me, this.record, me.start, me.end, e) !== false;

        if (me.showDragTip) {
            me.dragTip.update(me.start, me.end, me.valid, this.record);
        }

        Ext.apply(dragRegion, me.rowBoundaries);

        this.getProxy().setBox(dragRegion);
    },

    // private
    onDragEnd   : function (e) {
        var me      = this,
            view    = me.ganttView,
            doFinalize  = false;

        me.createContext = {
            start          : me.start,
            end            : me.end,
            e              : e,
            record         : me.record,
            finalize       : function () {
                me.finalize.apply(me, arguments);
            }
        };

        if (me.showDragTip) {
            me.dragTip.disable();
        }

        if (!me.start || !me.end || (me.end < me.start)) {
            me.valid = false;
        }

        if (me.valid) {
            doFinalize = view.fireEvent('beforedragcreatefinalize', me, me.createContext, e) !== false;
        }

        if (doFinalize) {
            me.finalize(me.valid);
        }
    },

    finalize    : function (doCreate) {
        var me      = this,
            context = me.createContext,
            view    = me.ganttView;

        if (doCreate) {
            context.record.setStartEndDate(context.start, context.end, context.record.getTaskStore().skipWeekendsDuringDragDrop);
            view.fireEvent('dragcreateend', view, context.record, context.e);
        }

        me.proxy.hide();

        view.fireEvent('afterdragcreate', view);
    },

    // private
    init: function () {
        var gv = this.ganttView,
            gridViewBodyEl = gv.el,
            bind = Ext.Function.bind;

        this.lastTime = new Date();
        this.template = this.template || Ext.create("Ext.Template",
            '<div class="sch-gantt-dragcreator-proxy"></div>',
            {
                compiled : true,
                disableFormats : true
            }
        );

        gv.on({
            destroy: this.onGanttDestroy,
            scope: this
        });

        this.tracker = new Sch.util.DragTracker({
            el : gridViewBodyEl,
            tolerance: this.dragTolerance,
            onBeforeStart: bind(this.onBeforeDragStart, this),
            onStart: bind(this.onDragStart, this),
            onDrag: bind(this.onDrag, this),
            onEnd: bind(this.onDragEnd, this)
        });

        if (this.showDragTip) {
            this.dragTip = new Gnt.Tooltip(Ext.apply({
                mode    : 'duration',
                cls     : 'sch-gantt-dragcreate-tip',
                gantt   : gv
            }, this.tooltipConfig));
        }
    },

    onGanttDestroy: function () {
        if (this.dragTip) {
            this.dragTip.destroy();
        }

        if (this.tracker) {
            this.tracker.destroy();
        }

        if (this.proxy) {
            Ext.destroy(this.proxy);
            this.proxy = null;
        }
    }
});

/**
 * @class Gnt.feature.LabelEditor
 * @protected
 * @extends Ext.Editor
 *
 * Internal class used by the Gantt chart internals allowing inline editing of the task labels.
 */
Ext.define("Gnt.feature.LabelEditor", {
    extend : "Ext.Editor",

    /**
     * @cfg {String} labelPosition Identifies which side of task this editor is used for. Possible values: 'left', 'right', 'top' or 'bottom'.
     * @property
     */
    labelPosition : '',

    constructor     : function (ganttView, config) {
        this.ganttView = ganttView;
        this.ganttView.on('afterrender', this.onGanttRender, this);

        Ext.apply(this, config);

        if (this.labelPosition === 'left') {
            this.alignment = 'r-r';
        } else if (this.labelPosition === 'right') {
            this.alignment = 'l-l';
        }

        this.delegate = '.sch-gantt-label-' + this.labelPosition;

        this.callParent([config]);
    },

    // Programmatically enter edit mode
    edit            : function (record) {
        var eventEl = this.ganttView.getElementFromEventRecord(record);

        if (eventEl) {
            var wrap = eventEl.up(this.ganttView.eventWrapSelector);
            var pnl, old;

            this.record = record;

            if (!this.rendered) {
                this.render(this.ganttView.getSecondaryCanvasEl());
            }

            // HACK: Ext grid panel observes focus events handling in the grid element and messes up
            // the focusing in IE, we work around it
            if (Ext.isIE) {
                pnl = this.ganttView.up('panel');
                old = pnl.handleFocusEnter;

                pnl.handleFocusEnter = Ext.emptyFn;
            }

            this.startEdit(wrap.down(this.delegate), this.dataIndex ? record.get(this.dataIndex) : '');

            // HACK continued
            if (Ext.isIE) {
                pnl.handleFocusEnter = old;
            }
        }
    },

    triggerEvent    : 'dblclick',

    // private, must be supplied
    delegate        : null,

    // private, must be supplied
    dataIndex       : null,
    shadow          : false,
    completeOnEnter : true,
    cancelOnEsc     : true,
    ignoreNoChange  : true,

    onGanttRender : function (ganttView) {

        if (!this.field.width) {
            this.autoSize = 'width';
        }

        this.on({
            beforestartedit : function (editor, el, value) {
                return ganttView.fireEvent('labeledit_beforestartedit', ganttView, this.record, value, editor);
            },
            beforecomplete  : function (editor, value, original) {
                return ganttView.fireEvent('labeledit_beforecomplete', ganttView, value, original, this.record, editor);
            },
            complete        : function (editor, value, original) {
                this.record.set(this.dataIndex, value);
                ganttView.fireEvent('labeledit_complete', ganttView, value, original, this.record, editor);
            },
            scope           : this
        });

        ganttView.el.on(this.triggerEvent, function (e, t) {
            this.edit(ganttView.resolveTaskRecord(t));
        }, this, {
            delegate : this.delegate
        });
    }
});

/**
* @class Gnt.feature.ProgressBarResize
*
* Internal plugin enabling resizing of a task progress bar, configure this feature using the {@link Gnt.panel.Gantt#progressBarResizeConfig} config setting.
*/
Ext.define("Gnt.feature.ProgressBarResize", {
    requires    : [
        'Ext.ToolTip',
        'Ext.resizer.Resizer'
    ],

    constructor : function(config) {
        Ext.apply(this, config || {});
        var g = this.ganttView;

        g.on({
            destroy : this.cleanUp,
            scope   : this
        });

        g.el.on('mousedown', this.onMouseDown, this, { delegate: '.sch-gantt-progressbar-handle' });

        this.callParent(arguments);
    },

    /**
    * @cfg {Boolean} useTooltip false to not show a tooltip while resizing. Defaults to true.
    */
    useTooltip  : true,

    /**
    * @cfg {Number} increment
    * The increment in percent to use during a progress element resize
    */
    increment   : 10,

    tip         : null,
    resizable   : null,
    ganttView   : null,

    onMouseDown: function (e, t) {
        var g = this.ganttView,
            rec = g.resolveTaskRecord(t);

        if (g.fireEvent('beforeprogressbarresize', g, rec) !== false) {
            var progBar = Ext.fly(t).prev('.sch-gantt-progress-bar');

            e.stopEvent();

            progBar.addCls('active');

            this.resizable = this.createResizable(progBar, rec, e);
            g.fireEvent('progressbarresizestart', g, rec);

            // If the mouse isn't moved after mousedown, no resize event will be fired by the Ext.Resizable. Handle this case manually
            Ext.getBody().on('mouseup', this.onBodyMouseUp, this, { single : true, delay : 1 });
        }
    },

    // private
    createResizable: function (el, taskRecord, e) {
        var t = e.getTarget(),
            rtl = this.ganttView.rtl,
            taskEl = el.up(this.ganttView.eventSelector),
            taskWidth = taskEl.getWidth() - 2*this.ganttView.eventBorderWidth,
            widthIncrement = taskWidth * this.increment / 100;

        var rz = Ext.create('Ext.resizer.Resizer', {
            target          : el,
            taskRecord      : taskRecord,
            handles         : rtl ? 'w' : 'e',
            minWidth        : 0,
            maxWidth        : taskWidth,
            minHeight       : 1,
            widthIncrement  : widthIncrement,
            listeners       : {
                resizedrag  : this.partialResize,
                resize      : this.afterResize,
                scope       : this
            }
        });
        rz.resizeTracker.onMouseDown(e, rz[rtl ? 'west' : 'east'].dom);

        taskEl.addCls('sch-gantt-resizing');

        if (this.useTooltip) {
            this.tip = Ext.create("Ext.ToolTip", {
                autoHide    : false,
                anchor      : 'b',
                html        : '%'
            });

            this.tip.setTarget(el);
            this.tip.update(taskRecord.getPercentDone() + '%');

            this.tip.show();
        }

        return rz;
    },

    // private
    partialResize: function (rz, newWidth) {
        var percent = Math.round(newWidth * 100 / (rz.maxWidth * this.increment)) * this.increment;

        if (this.tip) {
            this.tip.body.update(percent + '%');
        }
    },

    // private
    afterResize: function (rz, w, h, e) {
        var rec = rz.taskRecord;

        if (this.tip) {
            this.tip.destroy();
            this.tip = null;
        }

        var old = rz.taskRecord.getPercentDone();

        if (Ext.isNumber(w)) {
            var percent = Math.round(w * 100 / (rz.maxWidth * this.increment)) * this.increment;

            // Constrain between 0-100
            percent = Math.min(100, Math.max(0, percent));

            rz.taskRecord.setPercentDone(percent);
        }

        if (old === rz.taskRecord.getPercentDone()) {
            // Value didn't change, manually refresh the row
            this.ganttView.refreshNode(this.ganttView.indexOf(rz.taskRecord));
        }

        // Destroy resizable
        rz.destroy();
        this.resizable = null;

        this.ganttView.fireEvent('afterprogressbarresize', this.ganttView, rec);
    },

    // If the new percent done is the same as the old, no resize event will be fired by the Ext.Resizable. Handle this case manually
    onBodyMouseUp : function() {
        if (this.resizable) {
            this.afterResize(this.resizable);
        }
    },

    cleanUp: function () {
        if (this.tip) {
            this.tip.destroy();
        }
    }
});

/**
 @class Gnt.feature.TaskResize
 @extends Ext.util.Observable

 A plugin enabling the task resizing feature. Generally there's no need to manually create it,
 it can be activated with the {@link Gnt.panel.Gantt#resizeHandles} option of the gantt panel and configured with the {@link Gnt.panel.Gantt#resizeConfig}.


 */
Ext.define("Gnt.feature.TaskResize", {

    requires : [
        'Ext.resizer.Resizer',
        'Gnt.Tooltip'
    ],

    constructor : function(config) {
        Ext.apply(this, config);
        var g = this.ganttView;

        g.on({
            destroy : this.cleanUp,
            scope   : this
        });

        g.mon(g.el, 'mousedown', this.onMouseDown, this, { delegate : '.sch-resizable-handle' });

        this.callParent(arguments);
    },

    /**
     * @cfg {Boolean} showDuration true to show the duration instead of the end date when resizing a task
     */
    showDuration : true,

    /**
     * @type {Boolean} showExactResizePosition true to see exact task length during resizing
     */
    showExactResizePosition : false,

    /**
     * @cfg {Boolean} useTooltip `False` to not show a tooltip while resizing
     */
    useTooltip : true,

    /**
     * @cfg {Object} tooltipConfig A custom config object to apply to the {@link Gnt.Tooltip} instance.
     */
    tooltipConfig   : null,

    /**
     * @cfg {Function} validatorFn An empty function by default.
     * Provide to perform custom validation on the item being resized.
     * @param {Ext.data.Model} record The task being resized
     * @param {Date} startDate
     * @param {Date} endDate
     * @param {Event} e The event object
     * @return {Boolean} isValid True if the creation event is valid, else false to cancel
     */
    validatorFn : Ext.emptyFn,

    /**
     * @cfg {Object} validatorFnScope
     * The scope for the validatorFn
     */
    validatorFnScope : null,

    taskRec     : null,
    taskEl      : null,
    isStart     : null,
    ganttView   : null,
    resizable   : null,

    onMouseDown : function(e, t) {
        var ganttView   = this.ganttView;
        var segmentNode = e.getTarget('.sch-gantt-task-segment');
        var taskNode    = e.getTarget(ganttView.eventSelector);
        var taskRecord  = ganttView.resolveTaskRecord(taskNode);

        // Check if we're resizing a split-task segment
        if (segmentNode) {
            taskNode   = segmentNode;
            taskRecord = taskRecord.getSegment( parseInt(segmentNode.getAttribute('data-segmentIndex'), 10) );
        }

        var isResizable = taskRecord.isResizable();

        // Don't trigger on right clicks
        if (e.button !== 0 || isResizable === false || typeof isResizable === 'string' && !taskNode.className.match(isResizable)) {
            return;
        }

        // Allow observers to abort the resize operation
        if (ganttView.fireEvent('beforetaskresize', ganttView, taskRecord, e) === false) {
            return;
        }

        e.stopEvent();

        this.taskEl  = Ext.get(taskNode);
        this.taskRec = taskRecord;
        this.isStart = !!t.className.match('sch-resizable-handle-start');

        ganttView.el.on({
            mousemove   : this.onMouseMove,
            mouseup     : this.onMouseUp,
            scope       : this,
            single      : true
        });
    },

    // private
    onMouseMove : function(e, t) {
        var g               = this.ganttView,
            record          = this.taskRec,
            taskEl          = this.taskEl,
            rtl             = g.rtl,
            isStart         = this.isStart,
            isWest          = (rtl && !isStart) || (!rtl && isStart),
            widthIncrement  = g.getSnapPixelAmount(),
            currentWidth    = taskEl.getWidth(),
            maxWidth,
            sibling;

        // Not all zoom levels support perfect snapping (e.g. in Month view we cannot snap to days)
        widthIncrement = Math.max(1, widthIncrement);

        var resizerConfig = {
                otherEdgeX      : isWest ? taskEl.getRight() : taskEl.getLeft(),
                target          : taskEl,
                record          : record,
                isStart         : isStart,
                isWest          : isWest,
                handles         : isWest ? 'w' : 'e',
                minHeight       : 1,
                minWidth        : widthIncrement,
                widthIncrement  : widthIncrement,
                listeners       : {
                    resizedrag  : this.partialResize,
                    resize      : this.afterResize,
                    scope       : this
                }
            };

        if (record instanceof Gnt.model.TaskSegment && (sibling = this.taskEl.next('.sch-gantt-task-segment'))) {
            // Segment tasks in a split-task are constrained horizontally to the following segment border
            resizerConfig.maxWidth  = rtl ? sibling.getRight() - taskEl.getRight() : sibling.getLeft() - taskEl.getLeft();
        }

        // Normal tasks, and last segment in a split-task are constrained to the row element
        resizerConfig.constrainRegion         = taskEl.up(g.getItemSelector()).getRegion();

        taskEl.addCls('sch-gantt-resizing');

        this.ganttView.fireEvent('taskresizestart', this.ganttView, this.taskRec);

        // Since percent complete indicator uses fixed amount of pixels, we need to switch
        // it to use % during the resize operation (visual indication only)
        var progressBarEl = taskEl.down('.sch-gantt-progress-bar');

        if (progressBarEl) {
            progressBarEl.setWidth(100 * progressBarEl.getWidth() / taskEl.getWidth() + '%');
        }

        this.resizable = Ext.create('Ext.resizer.Resizer', resizerConfig);

        // HACK calling private method
        this.resizable.resizeTracker.onMouseDown(e, this.resizable[isWest ? 'west' : 'east'].dom);

        if (this.useTooltip) {

            if(!this.tip) {
                this.tip = Ext.create("Gnt.Tooltip", Ext.apply({
                    mode    : this.showDuration ? 'duration' : 'startend',
                    gantt   : this.ganttView
                }, this.tooltipConfig));
            } else {
                this.tip.enable();
            }

            this.tip.show(taskEl, e.getX() - 15);
            this.tip.update(record.getStartDate(), record.getEndDate(), true, record);

            // Catch case of user not moving the mouse at all
            Ext.getBody().on('mouseup', function(){ this.tip.disable(); }, this, { single : true });
        }
    },

    onMouseUp : function(e, t) {
        var g = this.ganttView;

        g.el.un({
            mousemove   : this.onMouseMove,
            mouseup     : this.onMouseUp,
            scope       : this,
            single      : true
        });
    },

    // private
    partialResize : function (resizer, newWidth, oldWidth, e) {
        var ganttView   = this.ganttView,
            isWest      = resizer.isWest,
            task        = resizer.record,
            cursorDate;

        // we need actual date under cursor
        if (isWest) {
            cursorDate = ganttView.getDateFromCoordinate(resizer.otherEdgeX - Math.min(newWidth, this.resizable.maxWidth), !this.showExactResizePosition ? 'round' : null);
        } else {
            cursorDate = ganttView.getDateFromCoordinate(resizer.otherEdgeX + Math.min(newWidth, this.resizable.maxWidth), !this.showExactResizePosition ? 'round' : null);
        }

        if (!cursorDate || resizer.date-cursorDate === 0) {
            return;
        }

        var start, end, newDate;

        if (this.showExactResizePosition) {
            var adjustedDate = ganttView.timeAxis.roundDate(cursorDate, ganttView.snapRelativeToEventStartDate ? task.getStartDate() : false);
            adjustedDate    = task.skipNonWorkingTime(adjustedDate, !task.isMilestone());

            var target = resizer.target.el,
                exactWidth;

            if (isWest) {
                start       = task.skipNonWorkingTime(adjustedDate, !task.isMilestone());
                newDate     = start;

                exactWidth    = ganttView.timeAxisViewModel.getDistanceBetweenDates(start, task.getEndDate());
                target.setWidth(exactWidth);

                var offsetX = ganttView.timeAxisViewModel.getDistanceBetweenDates(cursorDate, start);
                target.setX(target.getX() + offsetX);
            } else {
                // to calculate endDate properly we have to clone task and set endDate
                var clone = Gnt.util.Data.cloneModelSet([task])[0];
                var taskStore = task.getTaskStore();
                clone.setTaskStore(taskStore);
                clone.setCalendar(task.getCalendar());

                clone.setEndDateWithoutPropagation(adjustedDate, false, taskStore.skipWeekendsDuringDragDrop);

                end = clone.getEndDate();
                newDate     = end;

                exactWidth    = ganttView.timeAxisViewModel.getDistanceBetweenDates(task.getStartDate(), end);
                target.setWidth(exactWidth);
            }
        } else {
            start = resizer.isStart ? cursorDate : resizer.record.getStartDate();
            end   = resizer.isStart ? resizer.record.getEndDate() : cursorDate;
            newDate     = cursorDate;
        }

        resizer.date = newDate;

        ganttView.fireEvent('partialtaskresize', ganttView, task, start, end, resizer.el, e);

        if (this.useTooltip) {
            var valid = this.validatorFn.call(this.validatorFnScope || this, task, start, end) !== false;
            this.tip.update(start, end, valid, task);
        }
    },

    // private
    afterResize : function (resizer, w, h, e) {
        if (this.useTooltip) {
            this.tip.disable();
        }
        var me          = this,
            record      = resizer.record,
            oldStart    = record.getStartDate(),
            oldEnd      = record.getEndDate(),
            start       = resizer.isStart ? resizer.date : oldStart,
            end         = resizer.isStart ? oldEnd : resizer.date,
            ganttView   = me.ganttView,
            modified    = false,
            doFinalize  = true;

        me.resizeContext    = {
            record          : record,
            start           : start,
            end             : end,
            oldStart        : record.getStartDate(),
            finalize        : function() { me.finalize.apply(me, arguments); }
        };

        if (start && end && // Input sanity check
            (start - oldStart || end - oldEnd) && // Make sure start OR end changed
            me.validatorFn.call(me.validatorFnScope || me, record, start, end, e) !== false) {

            doFinalize  = ganttView.fireEvent('beforetaskresizefinalize', me, me.resizeContext, e) !== false;
            modified    = true;

        } else {
            ganttView.refreshKeepingScroll();
        }

        if (doFinalize) {
            me.finalize(modified);
        }
    },

    finalize    : function (updateRecord) {
        var me           = this,
            view         = me.ganttView,
            context      = me.resizeContext,
            record       = context.record,
            rowTask      = record.task || record, // Make sure we tell the view to resize a record in its store, and not a segment
            skipWeekends = view.taskStore.skipWeekendsDuringDragDrop,
            previousDate,
            newDate;

        if (updateRecord) {
            // start <= end is "normal" case
            // start > end is case when task should be resized to 0
            if (context.start - context.oldStart !== 0) {

                previousDate    = record.getStartDate();
                newDate         = context.start <= context.end ? context.start : context.end;

                record.setStartDate(newDate, false, skipWeekends, function(cancelChanges, affectedTasks) {
                    newDate     = record.getStartDate();
                    if (!(newDate < previousDate || newDate > previousDate)) {
                        view.refreshNode(view.store.indexOf(rowTask));
                    }
                    view.fireEvent('aftertaskresize', view, rowTask);
                });

            } else {

                previousDate    = record.getEndDate();
                newDate         = context.start <= context.end ? context.end : context.start;

                record.setEndDate(newDate, false, skipWeekends, function(cancelChanges, affectedTasks) {
                    newDate     = record.getEndDate();
                    if (!(newDate < previousDate || newDate > previousDate)) {
                        view.refreshNode(view.store.indexOf(rowTask));
                    }
                    view.fireEvent('aftertaskresize', view, rowTask);
                });
            }

        } else {
            view.refreshNode(view.store.indexOf(rowTask));
            view.fireEvent('aftertaskresize', view, rowTask);
        }

        // Destroy resizable
        me.resizable.destroy();
        me.resizeContext = null;
    },

    cleanUp : function() {
        if (this.tip) {
            this.tip.destroy();
        }
    }
});

/**
@class Gnt.feature.WorkingTime
@extends Sch.plugin.Zones

A simple subclass of the {@link Sch.plugin.Zones} which highlights holidays/weekends on the gantt chart. 
Generally, there's no need to instantiate it manually, it can be activated with the {@link Gnt.panel.Gantt#highlightWeekends} configuration option.

{@img gantt/images/plugin-working-time.png}

Note, that the holidays/weekends will only be shown when the resolution of the time axis is weeks or less.

*/
Ext.define("Gnt.feature.WorkingTime", {
    extend : 'Sch.plugin.Zones',
    
    requires : [
        'Ext.data.Store',
        'Sch.model.Range'
    ],
    
    expandToFitView : true,

    /**
     * @cfg {Gnt.data.Calendar} calendar The calendar to extract the holidays from
     */
    calendar : null,
    

    init : function (ganttPanel) {
        if (!this.calendar) {
            Ext.Error.raise("Required attribute 'calendar' missed during initialization of 'Gnt.feature.WorkingTime'");
        }

        this.bindCalendar(this.calendar);
        
        Ext.apply(this, {
            store : new Ext.data.Store({
                model       : 'Sch.model.Range'
            })
        });
        
        this.callParent(arguments);
        
        ganttPanel.on('viewchange', this.onViewChange, this);
        
        // timeAxis should be already fully initialized at this point
        this.onViewChange();
    },

    bindCalendar : function(calendar) {
        var listeners = {
            datachanged     : this.refresh,
            update          : this.refresh,

            scope           : this,
            delay           : 1
        };
        
        if (this.calendar) {
            this.calendar.un(listeners);
        }

        if (calendar) {
            calendar.on(listeners);
        }

        this.calendar = calendar;
    },
    
    onViewChange : function () {
        var DATE    = Sch.util.Date;
        
        if (DATE.compareUnits(this.timeAxis.unit, DATE.WEEK) > 0) {
            this.setDisabled(true);
        } else {
            this.setDisabled(false);
            
            this.refresh();
        }
    },

    
    refresh : function() {
        var view        = this.schedulerView;
        
        this.store.removeAll(true);
        
        this.store.add(this.calendar.getHolidaysRanges(view.timeAxis.getStart(), view.timeAxis.getEnd(), true));
    },

    destroy : function() {
        this.bindCalendar(null);

        this.callParent(arguments);
    }
});
/**
@class Gnt.plugin.ProjectLines
@extends Sch.plugin.Lines

A simple subclass of the {@link Sch.plugin.Lines} which sets project lines on the gantt chart.
Generally, there's no need to instantiate it manually, it can be activated with the {@link Gnt.panel.Gantt#showProjectLines} configuration option.

It uses the task store to populate own store with {@link Gnt.model.ProjectLine} instances.

 */
Ext.define("Gnt.plugin.ProjectLines", {
    extend              : 'Sch.plugin.Lines',
    alias               : 'plugin.gantt_projectlines',

    requires            : [
        'Gnt.model.ProjectLine',
        'Ext.data.Store'
    ],

    innerTpl            : '<span class="sch-gantt-project-line-text">{Text}</span>',

    showHeaderElements  : true,

    /**
     * @cfg {Gnt.data.taskStore} taskStore The task store to extract projects from
     */
    taskStore           : null,

    /**
     * @cfg {String} linesFor
     * Specifies what project dates should be used to build lines. Might be:
     *
     * - `start` - to build lines for project start dates
     * - `end` - to build lines for project end dates
     * - `both` - to build lines for both project start and end dates
     */
    linesFor            : 'both',

    allRemoved          : false,

    init : function (ganttPanel) {
        this.taskStore  = this.taskStore || ganttPanel.getTaskStore();

        this.bindTaskStore(this.taskStore);

        if (!this.store) {
            this.store  = new Ext.data.Store({
                model   : 'Gnt.model.ProjectLine'
            });
        }

        this.callParent(arguments);

        ganttPanel.on('viewchange', this.onViewChange, this);

        // timeAxis should be already fully initialized at this point
        this.onViewChange();
    },

    bindTaskStore : function (taskStore) {
        var listeners       = {
            datachanged     : this.onDataChanged,
            update          : this.onUpdate,
            scope           : this,
            delay           : 1
        };

        if (this.taskStore) {
            this.taskStore.un(listeners);
        }

        if (taskStore) {
            taskStore.on(listeners);
        }

        this.taskStore = taskStore;
    },


    onDataChanged : function (store) {
        this.refresh();
    },


    onUpdate : function (store, record, operation) {
        if (record && record.isProject && operation == Ext.data.Model.EDIT) {

            var projectId = record.modified && record.modified.Id || record.getId();

            // re-create the project related lines
            this.store.remove(this.getProjectLines(projectId));
            this.store.add(this.retrieveProjectLines(record));
        }
    },


    onViewChange : function () {
        this.refresh();
    },


    loadStore : function () {
        this.store.removeAll(true);

        this.store.add(this.retrieveProjectLines());
    },


    refresh : function() {
        this.loadStore();
    },


    getProjectLines : function (projectId) {
        var result = [];

        this.store.each(function (line) {
            if (line.get('ProjectId') == projectId) result.push(line);
        });

        return result;
    },


    /**
     * @protected
     * @method prepareProjectStartLine Prepares a record that corresponds to a project start date.
     * @param  {Gnt.model.Project} project Project
     * @return {Object} Object representing the record to be added to the store
     */
    prepareProjectStartLine : function (project) {
        return {
            Date        : project.getStartDate(),
            Text        : 'Start of: ' + project.getName(),
            Cls         : 'sch-gantt-project-line-start sch-gantt-project-line-' + project.getId(),
            ProjectId   : project.getId()
        };
    },

    /**
     * @protected
     * @method prepareProjectEndLine Prepares a record that corresponds to a project end date.
     * @param  {Gnt.model.Project} project Project
     * @return {Object} Object representing the record to be added to the store
     */
    prepareProjectEndLine : function (project) {
        return {
            Date        : project.getEndDate(),
            Text        : 'End of: ' + project.getName(),
            Cls         : 'sch-gantt-project-line-end sch-gantt-project-line-' + project.getId(),
            ProjectId   : project.getId()
        };
    },


    retrieveProjectLines : function (project) {
        var me              = this,
            projects        = Ext.isArray(project) ? project : project && [project] || this.taskStore.getProjects(),
            projectLines    = [],
            linesFor    = me.linesFor;

        for (var i = 0; i < projects.length; i++) {
            linesFor != 'end' && projectLines.push( me.prepareProjectStartLine(projects[i]) );
            linesFor != 'start' && projectLines.push( me.prepareProjectEndLine(projects[i]) );
        }

        return projectLines;
    },


    destroy : function() {
        this.bindTaskStore(null);
        this.callParent(arguments);
    }
});
/**

 @class Gnt.plugin.DependencyEditor
 @extends Ext.form.Panel

 {@img gantt/images/dependency-editor.png}

 A plugin (ptype = 'gantt_dependencyeditor') which shows the dependency editor panel, when a user double-clicks a dependency line or arrow.

 To customize the fields created by this plugin, override the `buildFields` method.

 You can add it to your gantt chart like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {

        plugins             : [
            Ext.create("Gnt.plugin.DependencyEditor", {
                // default value
                hideOnBlur      : true
            })
        ],
        ...
    })


 */
Ext.define("Gnt.plugin.DependencyEditor", {
    extend        : "Ext.form.Panel",
    alias         : 'plugin.gantt_dependencyeditor',
    // ptype isn't filled automatically, because we do not extend AbstractPlugin
    ptype           : 'gantt_dependencyeditor',
    mixins        : ['Ext.AbstractPlugin', 'Gnt.mixin.Localizable'],
    lockableScope : 'top',

    // 1. We don't use header at all, 2. IE8 takes the use of a header personal and dies in Ext 4.2.1. http://www.sencha.com/forum/showthread.php?271770-4.2.1-getFramingInfoCls-broken-in-IE8
    header        : false,

    requires : [
        'Ext.util.Filter',
        'Ext.form.field.Display',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Gnt.model.Dependency',
        'Ext.data.ArrayStore'
    ],

    /**
     * @cfg {Boolean} hideOnBlur True to hide this panel if a click is detected outside the panel (defaults to true)
     */
    hideOnBlur : true,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - fromText            : 'From',
     - toText              : 'To',
     - typeText            : 'Type',
     - lagText             : 'Lag',
     - endToStartText      : 'Finish-To-Start',
     - startToStartText    : 'Start-To-Start',
     - endToEndText        : 'Finish-To-Finish',
     - startToEndText      : 'Start-To-Finish'
     */

    /**
     * @cfg {Boolean} showLag True to show the lag editor
     */
    showLag : false,

    border     : false,
    width      : 260,
    frame      : true,
    labelWidth : 60,

    /**
     * @cfg {String} triggerEvent
     * The event upon which the editor shall be shown. Defaults to 'dependencydblclick'.
     */
    triggerEvent : 'dependencydblclick',

    /**
     * @cfg {Boolean} constrain Pass `true` to enable the constraining - ie editor panel will not exceed the document edges. This option will disable the animation
     * during the expansion. Default value is `false`.
     */
    constrain : false,

    initComponent : function () {
        Ext.apply(this, {
            defaults : {
                width : 240
            },

            floating : true,
            hideMode : 'offsets'
        });

        this.callParent(arguments);

        this.addCls('sch-gantt-dependencyeditor');
    },

    getState    : function () {
        if (this.rendered) {
            return this.callParent(arguments);
        }
    },

    init : function (cmp) {
        cmp.on(this.triggerEvent, this.onDependencyDblClick, this);
        cmp.on('afterrender', this.onGanttRender, this, { delay : 50 });

        this.gantt = cmp;
        this.taskStore = cmp.getTaskStore();

        // Add fields late, when we have access to taskStore
        this.add(this.buildFields());
    },

    onGanttRender : function () {
        this.render(Ext.getBody());

        // Collapse after render, otherwise rendering is messed up
        this.collapse(Ext.Component.DIRECTION_TOP, true);
        this.hide();

        if (this.hideOnBlur) {
            // Hide when clicking outside panel
            this.on({
                show : function () {
                    this.mon(Ext.getBody(), {
                        click : this.onMouseClick,
                        scope : this
                    });
                },

                hide : function () {
                    this.mun(Ext.getBody(), {
                        click : this.onMouseClick,
                        scope : this
                    });
                },

                delay : 50
            });
        }
    },

    /**
     * Expands the editor
     * @param {Gnt.model.Dependency} dependencyRecord The record to show in the editor panel
     * @param {Array} xy the coordinates where the window should be shown
     */
    show : function (dependencyRecord, xy) {
        this.dependencyRecord   = dependencyRecord;

        // Load form panel fields
        this.getForm().loadRecord(dependencyRecord);
        this.fromLabel.setValue(Ext.String.htmlEncode(this.dependencyRecord.getSourceTask().getName()));
        this.toLabel.setValue(Ext.String.htmlEncode(this.dependencyRecord.getTargetTask().getName()));

        if (this.typeField) {
            var dependencyStore = this.taskStore && this.taskStore.getDependencyStore(),
                allowedTypes    = dependencyStore && dependencyStore.allowedDependencyTypes;

            // filter out disabled dependency types
            this.typeField.store.filter();

            // if number of allowed dependency types is less 2 we won't allow to edit this field
            this.typeField.setReadOnly(allowedTypes && allowedTypes.length < 2);
        }

        this.callParent([]);
        this.el.setXY(xy);

        this.expand(!this.constrain);

        if (this.constrain) {
            this.doConstrain(Ext.util.Region.getRegion(Ext.getBody()));
        }
    },


    /**
     * This method is being called during form initialization. It should return an array of fields, which will be assigned to the `items` property.
     * @return {Array}
     */
    buildFields : function () {
        var me              = this,
            dependencyStore = this.taskStore && this.taskStore.getDependencyStore(),
            depClass        = Gnt.model.Dependency;

        var fields = [
            this.fromLabel  = new Ext.form.DisplayField({
                fieldLabel : this.L('fromText')
            }),

            this.toLabel    = new Ext.form.DisplayField({
                fieldLabel : this.L('toText')
            }),

            this.typeField  = this.buildTypeField()
        ];

        if (this.showLag) {
            fields.push(
                this.lagField = new Ext.form.NumberField({
                    name       : dependencyStore ? dependencyStore.model.prototype.lagField : depClass.prototype.lagField,
                    fieldLabel : this.L('lagText')
                })
            );
        }

        return fields;
    },

    onDependencyDblClick : function (depView, record, e, t) {
        if (record != this.dependencyRecord) {
            this.show(record, e.getXY());
        }
    },

    filterAllowedTypes : function (record) {
        var dependencyStore     = this.taskStore && this.taskStore.getDependencyStore();

        if (!dependencyStore || !dependencyStore.allowedDependencyTypes) return true;

        var allowed     = dependencyStore.allowedDependencyTypes;
        var depType     = dependencyStore.model.Type;

        for (var i = 0, l = allowed.length; i < l; i++) {
            var type    = depType[allowed[i]];
            if (record.getId() == type) return true;
        }

        return false;
    },

    buildTypeField : function () {
        var depClass        = this.taskStore ? this.taskStore.getDependencyStore().model : Gnt.model.Dependency;
        var depType         = depClass.Type;

        this.typesFilter    = new Ext.util.Filter({
            filterFn    : this.filterAllowedTypes,
            scope       : this
        });

        var store           = new Ext.data.ArrayStore({
            fields      : [
               { name : 'id', type : 'int' },
               'text'
            ],
            data        : [
                [   depType.EndToStart,     this.L('endToStartText')     ],
                [   depType.StartToStart,   this.L('startToStartText')   ],
                [   depType.EndToEnd,       this.L('endToEndText')       ],
                [   depType.StartToEnd,     this.L('startToEndText')     ]
            ]
        });

        store.filter(this.typesFilter);

        return new Ext.form.field.ComboBox({
            name            : depClass.prototype.typeField,
            fieldLabel      : this.L('typeText'),
            triggerAction   : 'all',
            queryMode       : 'local',
            editable        : false,
            valueField      : 'id',
            displayField    : 'text',
            store           : store
        });
    },

    onMouseClick  : function (e) {
        if (
            this.collapsed || e.within(this.getEl()) ||
                // ignore the click on the menus and combo-boxes (which usually floats as the direct child of <body> and
                // leaks through the `e.within(this.getEl())` check
                e.getTarget('.' + Ext.baseCSSPrefix + 'layer') ||

                // if clicks should be ignored for any other element - it should have this class
                e.getTarget('.sch-ignore-click')
            ) {
            return;
        }

        this.collapse();
    },

    // Always hide drag proxy on collapse
    afterCollapse : function () {
        delete this.dependencyRecord;

        // Currently the header is kept even after collapse, so need to hide the form completely
        this.hide();

        this.callParent(arguments);

        if (this.hideOnBlur) {
            // Hide when clicking outside panel
            this.mun(Ext.getBody(), 'click', this.onMouseClick, this);
        }
    }
});

/**
@class Gnt.plugin.TaskContextMenu
@extends Ext.menu.Menu

Plugin (ptype = 'gantt_taskcontextmenu') for showing a context menu when right clicking a task:

{@img gantt/images/context-menu.png}

You can add it to your gantt chart like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        plugins             : [
            Ext.create("Gnt.plugin.TaskContextMenu")
        ],
        ...
    })


To customize the content of the menu, subclass this plugin and provide your own implementation of the `createMenuItems` method.
You can also customize various handlers for menu items, like `addTaskAbove`, `deleteTask` etc. For example:

    Ext.define('MyProject.plugin.TaskContextMenu', {
        extend     : 'Gnt.plugin.TaskContextMenu',

        createMenuItems : function () {
            return this.callParent().concat({
                text        : 'My handler',

                handler     : this.onMyHandler,
                scope       : this
            });

            this.on('beforeshow', this.onMyBeforeShow, this);
        },

        onMyHandler : function () {
            // the task on which the right click have occured
            var task        = this.rec;

            ...
        },

        onMyBeforeShow : function() {
            // Allow delete only based on some condition
            var isDeleteAllowed = this.rec.get('AllowDelete');

            this.down('#deleteTask').setVisible(isDeleteAllowed);
        }
    });

    var gantt = Ext.create('Gnt.panel.Gantt', {
        selModel : new Ext.selection.TreeModel({ ignoreRightMouseSelection : false }),
        plugins             : [
            Ext.create("MyProject.plugin.TaskContextMenu")
        ],
        ...
    })

Note that when using right click to show the menu you should set the 'ignoreRightMouseSelection' to false on your selection model (as seen in the source above).

*/
Ext.define("Gnt.plugin.TaskContextMenu", {
    extend                  : 'Ext.menu.Menu',
    alias                   : 'plugin.gantt_taskcontextmenu',
    // ptype isn't filled automatically, because we do not extend AbstractPlugin
    ptype                   : 'gantt_taskcontextmenu',
    mixins                  : ['Ext.AbstractPlugin', 'Gnt.mixin.Localizable'],
    lockableScope           : 'top',

    requires                : ['Gnt.model.Task'],

    plain                   : true,

    /**
     * @cfg {String/String[]} triggerEvent
     * The event(s) upon which the menu shall be shown. Might be provided as an array of multiple event names.
     * Defaults to 'itemcontextmenu' and 'containercontextmenu', meaning the menu is shown when right-clicking a row or task bar
     * and when right-clicking an empty area in the grid.
     * You can change this to 'taskcontextmenu' if you want the menu to be shown only when right clicking a task bar.
     */
    triggerEvent            : ['itemcontextmenu', 'containercontextmenu'],

    hideEvent               : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - newTaskText         : 'New task'
     - deleteTask          : 'Delete task(s)'
     - editLeftLabel       : 'Edit left label'
     - editRightLabel      : 'Edit right label'
     - add                 : 'Add...'
     - deleteDependency    : 'Delete dependency...'
     - addTaskAbove        : 'Task above'
     - addTaskBelow        : 'Task below'
     - addMilestone        : 'Milestone'
     - addSubtask          : 'Sub-task'
     - addSuccessor        : 'Successor'
     - addPredecessor      : 'Predecessor'
     - splitTask           : 'Split task'
     */

    grid                    : null,

    /**
     * @property {Gnt.model.Task} rec The task model, for which the menu was activated
     */
    rec                     : null,

    triggerEventXY          : null,
    lastHighlightedItem     : null,

    taskEditorInjected      : false,

    config                  : {
        /**
         * @cfg {Number} splitDuration Split duration to be used when "Split task" menu item is called.
         * Set this to zero to enable automatic split duration calculation depending on active zoom level.
         * In this mode the split duration is calculated as a clicked tick duration restricted by
         * {@link #minSplitDuration} and {@link #maxSplitDuration} values.
         */
        splitDuration           : 0,
        /**
         * @cfg {String} splitDurationUnit Split duration unit to be used when "Split task" menu item is called
         * See {@link #splitDuration} for details.
         */
        splitDurationUnit       : 'd',

        /**
         * @cfg {Number} maxSplitDuration Maximum allowed split duration (use {@link #maxSplitDurationUnit} to define unit for this value).
         * The value is used upon automatic split duration calculation is enabled (see {@link #splitDuration} for details).
         */
        maxSplitDuration        : 1,
        /**
         * @cfg {String} maxSplitDurationUnit Maximum allowed split duration unit.
         * See {@link #maxSplitDuration} for details.
         */
        maxSplitDurationUnit    : 'd',

        /**
         * @cfg {Number} minSplitDuration Minimum allowed split duration (use {@link #minSplitDurationUnit} to define unit for this value).
         * The value is used upon automatic split duration calculation is enabled (see {@link #splitDuration} for details).
         */
        minSplitDuration        : 1,
        /**
         * @cfg {String} minSplitDurationUnit Minimum allowed split duration unit.
         * See {@link #minSplitDuration} for details.
         */
        minSplitDurationUnit    : 'h'
    },

    getState    : function () {
        if (this.rendered) {
            return this.callParent(arguments);
        }
    },


    isNotProject : function (task) {
        return task && !task.isProject;
    },


    /**
     * This method is being called during plugin initialization. Override if you need to customize the items in the menu.
     * The method should return an array of menu items, which will be used as the value of the `items` property.
     *
     * Each menu item is decorated with an itemId property for testability.
     *
     * @return {Array}
     */
    createMenuItems : function () {

        var me = this;

        return [
            {
                handler      : this.deleteTask,
                requiresTask : true,
                itemId       : 'deleteTask',
                text         : this.L('deleteTask')
            },
            {
                handler         : this.editLeftLabel,
                requiresTask    : true,
                itemId          : 'editLeftLabel',
                text            : this.L('editLeftLabel'),
                isValidAction   : function () {
                    return me.grid.getSchedulingView().getLeftEditor();
                }
            },
            {
                handler         : this.editRightLabel,
                requiresTask    : true,
                itemId          : 'editRightLabel',
                text            : this.L('editRightLabel'),
                isValidAction   : function () {
                    return me.grid.getSchedulingView().getRightEditor();
                }
            },
            {
                handler      : this.toggleMilestone,
                requiresTask : true,
                itemId       : 'toggleMilestone',
                text         : this.L('convertToMilestone'),
                isValidAction : this.isNotProject
            },
            {
                handler       : this.splitTask,
                requiresTask  : true,
                itemId        : 'splitTask',
                isValidAction : function(task, triggerDomEvent) {
                    return task &&
                           task.getStartDate() &&
                           task.getEndDate() &&
                          !task.isMilestone() &&
                           task.isLeaf() &&
                           triggerDomEvent &&
                           triggerDomEvent.getTarget('.sch-gantt-task-bar');
                },
                text         : this.L('splitTask')
            },
            {
                text   : this.L('add'),
                itemId : 'addTaskMenu',
                menu   : {
                    plain : true,
                    defaults : { scope : this },
                    items : [
                        {
                            handler      : this.addTaskAboveAction,
                            requiresTask : true,
                            itemId       : 'addTaskAbove',
                            text         : this.L('addTaskAbove')
                        },
                        {
                            handler      : this.addTaskBelowAction,
                            itemId       : 'addTaskBelow',
                            text         : this.L('addTaskBelow')
                        },
                        {
                            handler      : this.addMilestone,
                            itemId       : 'addMilestone',
                            requiresTask : true,
                            text         : this.L('addMilestone')
                        },
                        {
                            handler      : this.addSubtask,
                            requiresTask : true,
                            itemId       : 'addSubtask',
                            text         : this.L('addSubtask')
                        },
                        {
                            handler      : this.addSuccessor,
                            requiresTask : true,
                            itemId       : 'addSuccessor',
                            text         : this.L('addSuccessor'),
                            isValidAction : this.isNotProject
                        },
                        {
                            handler      : this.addPredecessor,
                            requiresTask : true,
                            itemId       : 'addPredecessor',
                            text         : this.L('addPredecessor'),
                            isValidAction : this.isNotProject
                        }
                    ]
                }
            },
            {
                text         : this.L('deleteDependency'),
                requiresTask : true,
                itemId       : 'deleteDependencyMenu',

                isValidAction : function(task) {
                    return task && task.getAllDependencies().length > 0;
                },

                menu : {
                    plain : true,

                    listeners : {
                        beforeshow : this.populateDependencyMenu,

                        // highlight dependencies on mouseover of the menu item
                        mouseover  : this.onDependencyMouseOver,

                        // unhighlight dependencies on mouseout of the menu item
                        mouseleave : this.onDependencyMouseOut,

                        scope      : this
                    }
                }
            }
        ];
    },


    // backward compat
    buildMenuItems  : function () {
        this.items = this.createMenuItems();
    },


    initComponent : function () {
        var triggerEvent    = this.triggerEvent,
            hideEvent       = this.hideEvent;

        this.defaults       = this.defaults || {};
        this.defaults.scope = this;

        if (triggerEvent) {
            if (!Ext.isArray(triggerEvent)) {
                triggerEvent = [ triggerEvent ];
            }
        }

        this.triggerEvent   = triggerEvent;

        if (hideEvent) {
            if (!Ext.isArray(hideEvent)) {
                hideEvent   = [ hideEvent ];
            }
        }

        // In IE task context menu cannot be blured on click in scheduling area,
        // because we prevent row focusing to avoid loosing scroll position
        // (in Sch.mixin.TimelinePanel.patchNavigationModel method).
        // So we help to do it by hiding the menu on "itemclick" event
        // TODO: get rid of this after IE focusing issue is solved
        if (Ext.isIE) {
            hideEvent       = hideEvent || [];
            hideEvent.push('itemclick');
        }

        this.hideEvent      = hideEvent;

        this.buildMenuItems();

        this.callParent(arguments);
    },


    init : function (grid) {
        this.grid = grid;
        this.bindTriggerEvent();
        this.bindHideEvent();
    },


    bindTriggerEvent : function () {
        var triggerEvent    = this.triggerEvent,
            grid            = this.grid || this.getCmp();

        if (triggerEvent) {
            for (var i = triggerEvent.length - 1; i >= 0; i--) {
                grid.on(triggerEvent[i], this.onTriggerEvent, this);
            }
        }
    },


    bindHideEvent : function () {
        var hideEvent   = this.hideEvent,
            grid        = this.grid || this.getCmp();

        if (hideEvent) {
            for (var i = hideEvent.length - 1; i >= 0; i--) {
                grid.on(hideEvent[i], this.onHideEvent, this);
            }
        }
    },

    onHideEvent : function () {
        this.hide();
    },

    populateDependencyMenu : function (menu) {
        // HACK http://www.sencha.com/forum/showthread.php?296359-Disabled-Menuitem-still-shows-its-menu&p=1082213#post1082213
        if (menu.up('menuitem').isDisabled()) return false;

        var grid            = this.grid,
            taskStore       = grid.getTaskStore(),
            dependencies    = this.rec.getAllDependencies(),
            depStore        = grid.dependencyStore;

        menu.removeAll();

        if (!dependencies.length) return false;

        var taskId      = this.rec.getId() || this.rec.internalId;

        Ext.Array.forEach(dependencies, function (dependency) {
            var fromId  = dependency.getSourceId(),
                task    = taskStore.getModelById(fromId == taskId ? dependency.getTargetId() : fromId);

            if (task) {
                menu.add({
                    depId   : dependency.getId(),
                    text    : Ext.util.Format.ellipsis(Ext.String.htmlEncode(task.getName()), 30),
                    scope   : this,
                    handler : function (menuItem) {
                        depStore.remove(depStore.getModelById(menuItem.depId));
                    }
                });
            }
        }, this);
    },


    onDependencyMouseOver : function (menu, item, e) {
        if (item) {
            var schedulingView = this.grid.getSchedulingView();

            if (this.lastHighlightedItem) {
                schedulingView.unhighlightDependency(this.lastHighlightedItem.depId);
            }

            this.lastHighlightedItem = item;

            schedulingView.highlightDependency(item.depId);
        }
    },


    onDependencyMouseOut : function (menu, e) {
        if (this.lastHighlightedItem) {
            this.grid.getSchedulingView().unhighlightDependency(this.lastHighlightedItem.depId);
        }
    },


    onTriggerEvent : function () {
        var context     = this.getTriggerEventContext.apply(this, arguments);

        this.activateMenu(context.record, context.e);
    },

    getTriggerEventContext : function () {
        var result  = {};

        // loop over arguments forward searching for the task
        for (var i = 0, l = arguments.length - 1; i <= l; i++) {
            if (arguments[i] instanceof Gnt.model.Task) {
                result.record = arguments[i];
                break;
            }
        }

        // loop over arguments backward searching for the event
        for (i = arguments.length - 1; i >= 0; i--) {
            if (arguments[i] instanceof Ext.EventObjectImpl) {
                result.e    = arguments[i];
                break;
            }
        }

        return result;
    },


    activateMenu : function (rec, e) {
        // Do not show menu for the root node of task store and in readonly mode of the gantt chart
        if (this.grid.isReadOnly() || this.grid.taskStore.getRootNode() === rec) {
            return;
        }

        e.stopEvent();

        this.rec = rec;
        this.triggerEventXY = e.getXY();
        this.configureMenuItems(e);

        this.showAt(e.getXY());

        // force the menu focusing
        // w/o this the menu will never hide when clicking other grid rows
        this.focus();
    },


    addTaskEditorEntry : function () {
        this.insert(0, {
            text            : this.L('taskInformation'),
            itemId          : 'taskEditor',
            requiresTask    : true,
            handler         : function () {
                this.grid.getTaskEditor(this.rec).showTask(this.rec);
            },
            isValidAction   : function (task) {
                return this.grid.getTaskEditor(task);
            },
            scope           : this
        });

        // remember that we added the entry
        this.taskEditorInjected = true;
    },


    setTaskEditorEntryLabel : function (task) {
        var taskEditor = this.down('#taskEditor');

        if (task && taskEditor) {
            taskEditor.setText(task.isProject ? this.L('projectInformation') : this.L('taskInformation'));
        }
    },


    configureMenuItems : function (triggerEvent) {

        var rec      = this.rec;

        if (this.grid.getTaskEditor()) {
            if (!this.taskEditorInjected) this.addTaskEditorEntry();

            // set proper task editor menu entry title
            this.setTaskEditorEntryLabel(rec);
        }

        Ext.Array.forEach(this.query('menuitem'), function (item) {
            if (item.requiresTask) {
                item.setDisabled(!rec);
            }

            if (item.isValidAction) {
                item.setDisabled(!item.isValidAction.call(item.scope || item, rec, triggerEvent));
            }
        });

        var toggleMilestone = this.down('#toggleMilestone');

        if (rec && toggleMilestone) {
            toggleMilestone.setText(rec.isMilestone() ? this.L('convertToRegular') : this.L('convertToMilestone'));
        }
    },


    copyTask : function (original) {
        var model = this.grid.getTaskStore().model;

        var newTask = new model({
            leaf : true
        });

        newTask.setPercentDone(0);
        newTask.setName(this.L('newTaskText', this.texts));
        newTask.set(newTask.startDateField, (original && original.getStartDate()) || null);
        newTask.set(newTask.endDateField, (original && original.getEndDate()) || null);
        newTask.set(newTask.durationField, (original && original.getDuration()) || null);
        newTask.set(newTask.durationUnitField, (original && original.getDurationUnit()) || 'd');
        return newTask;
    },


    // Actions follow below
    // ---------------------------------------------

    /**
     * Handler for the "add task above" menu item
     */
    addTaskAbove : function (newTask) {
        var task = this.rec;

        if (task) {
            task.addTaskAbove(newTask);
        } else {
            this.grid.taskStore.getRootNode().appendChild(newTask);
        }
    },

    /**
     * Handler for the "add task below" menu item
     */
    addTaskBelow : function (newTask) {
        var task = this.rec;

        if (task) {
            task.addTaskBelow(newTask);
        } else {
            this.grid.taskStore.getRootNode().appendChild(newTask);
        }
    },

    /**
     * Handler for the "delete task" menu item
     */
    deleteTask : function () {
        var selModel = this.grid.getSelectionModel();

        selModel.selected.each(function(task) { task.parentNode ? task.parentNode.removeSubtask(task) : task.remove(); });
    },

    /**
     * Handler for the "edit left label" menu item
     */
    editLeftLabel : function () {
        this.grid.getSchedulingView().editLeftLabel(this.rec);
    },

    /**
     * Handler for the "edit right label" menu item
     */
    editRightLabel : function () {
        this.grid.getSchedulingView().editRightLabel(this.rec);
    },


    /**
     * Handler for the "add task above" menu item
     */
    addTaskAboveAction : function () {
        this.addTaskAbove(this.copyTask(this.rec));
    },


    /**
     * Handler for the "add task below" menu item
     */
    addTaskBelowAction : function () {
        this.addTaskBelow(this.copyTask(this.rec));
    },


    /**
     * Handler for the "add subtask" menu item
     */
    addSubtask : function () {
        var task = this.rec;
        task.addSubtask(this.copyTask(task));
    },

    /**
     * Handler for the "add successor" menu item
     */
    addSuccessor : function () {
        var task = this.rec;
        task.addSuccessor(this.copyTask(task));
    },

    /**
     * Handler for the "add predecessor" menu item
     */
    addPredecessor : function () {
        var task = this.rec;
        task.addPredecessor(this.copyTask(task));
    },


    /**
     * Handler for the "add milestone" menu item
     */
    addMilestone : function () {
        var task = this.rec,
            newTask = this.copyTask(task);

        task.addTaskBelow(newTask);
        newTask.setStartEndDate(task.getEndDate(), task.getEndDate());
    },

    /**
     * Handler for the "Convert to milestone" menu item
     */
    toggleMilestone : function () {
        if (this.rec.isMilestone()) {
            this.rec.convertToRegular();
        } else {
            this.rec.convertToMilestone();
        }
    },

    /**
     * @protected
     * Returns a date for the task splitting.
     * Returns start date of the tick being clicked if the tick duration is less than {@link #maxSplitDuration} or {@link #maxSplitDuration} is zero.
     * When the tick duration is greater than {@link #maxSplitDuration} returns `context.date` rounded based on active time axis resolution unit.
     *
     * Override this method if you want to implement another way of a split date receiving.
     * See also: {@link #getSplitDuration}, {@link #getSplitDurationUnit}.
     * @param  {Object}                 context             Split call context
     * @param  {Gnt.model.Task}         context.task        Task being split
     * @param  {Array}                  context.pos         Click position. Array containing [x, y] coordinates of mouse click.
     * @param  {Date}                   context.date        Date corresponding to the click position.
     * @param  {Sch.model.TimeAxisTick} context.tick        Time axis tick corresponding to the click position.
     * @param  {Sch.data.TimeAxis}      context.timeAxis    Time axis instance.
     * @return {Date}      Returns a date to be used to split.
     */
    getSplitDate : function (context) {
        var task        = context.task,
            date        = context.date,
            tick        = context.tick,
            timeAxis    = context.timeAxis,
            maxDuration = this.getMaxSplitDuration(),
            result;

        if (tick) {
            result      = tick.getStartDate();
            // we use tick duration if it's less than maximal allowed split size
            if (maxDuration) {
                maxDuration = task.getUnitConverter().convertDurationToMs(maxDuration, this.getMaxSplitDurationUnit());

                if (maxDuration < tick.getEndDate() - tick.getStartDate()) result = null;
            }
        }

        // otherwise round clicked datetime relative to task start using active time axis resolution unit
        return result || timeAxis.roundDate(date, task.getStartDate());
    },

    /**
     * @protected
     * Returns a duration for the task splitting.
     * Returns duration of the tick being clicked constrained by {@link #minSplitDuration} and {@link #maxSplitDuration} values.
     * Override this method if you want to implement another way of a split date receiving.
     * See also: {@link #getSplitDate}, {@link #getSplitDurationUnit}.
     * @param  {Object}                 context             Split call context
     * @param  {Gnt.model.Task}         context.task        Task being split
     * @param  {Array}                  context.pos         Click position. Array containing [x, y] coordinates of mouse click.
     * @param  {Date}                   context.date        Date corresponding to the click position.
     * @param  {Sch.model.TimeAxisTick} context.tick        Time axis tick corresponding to the click position.
     * @param  {Sch.data.TimeAxis}      context.timeAxis    Time axis instance.
     * @return {Number}      Returns split duration.
     */
    getSplitDuration : function (context) {
        if (this.splitDuration) return this.splitDuration;

        var task    = context.task,
            pos     = context.pos,
            date    = context.date,
            tick    = context.tick;

        if (tick) {
            // let's get tick length in MS as initial duration
            var result      = task.calculateDuration(tick.getStartDate(), tick.getEndDate(), Sch.util.Date.MILLI),
                converter   = task.getUnitConverter(),
                minDuration = this.getMinSplitDuration(),
                maxDuration = this.getMaxSplitDuration();

            // if we have to constrain duration
            if (minDuration || maxDuration) {
                if (maxDuration) {
                    result = Math.min(result, converter.convertDurationToMs(maxDuration, this.getMaxSplitDurationUnit()));
                }
                if (minDuration) {
                    result = Math.max(result, converter.convertDurationToMs(minDuration, this.getMinSplitDurationUnit()));
                }
            }

            // turn duration to proper duration unit
            return converter.convertMSDurationToUnit(result, this.getSplitDurationUnit(task, pos, date, tick));
        }
    },

    /**
     * @protected
     * Returns a duration unit for the task splitting.
     * Returns {@link #splitDurationUnit} when {@link #splitDuration} provided or `ms`.
     * Override this method if you want to implement another way of the split date receiving.
     * See also: {@link #getSplitDate}, {@link #getSplitDuration}.
     * @param  {Object}                 context             Split call context
     * @param  {Gnt.model.Task}         context.task        Task being split
     * @param  {Array}                  context.pos         Click position. Array containing [x, y] coordinates of mouse click.
     * @param  {Date}                   context.date        Date corresponding to the click position.
     * @param  {Sch.model.TimeAxisTick} context.tick        Time axis tick corresponding to the click position.
     * @param  {Sch.data.TimeAxis}      context.timeAxis    Time axis instance.
     * @return {String}      Returns split duration unit.
     */
    getSplitDurationUnit : function (context) {
        // if we have constant "splitDuration" set then we use "splitDurationUnit"
        // otherwise let's use milliseconds
        return this.splitDuration ? this.splitDurationUnit : Sch.util.Date.MILLI;
    },

    /**
     * Handler for the "Split task" menu item
     */
    splitTask : function () {
        var me          = this,
            view        = me.grid.getSchedulingView(),
            cursorDate  = view.getDateFromX(me.triggerEventXY[0]),
            timeAxis    = view.timeAxis;

        var context     = {
            task        : me.rec,
            pos         : me.triggerEventXY,
            date        : cursorDate,
            timeAxis    : timeAxis,
            tick        : timeAxis.getAt(Math.floor(timeAxis.getTickFromDate(cursorDate)))
        };

        context.task.split(me.getSplitDate(context), me.getSplitDuration(context), me.getSplitDurationUnit(context));
    }
});

/**
 @private

 @class Gnt.plugin.exporter.mixin.DependencyPainter

 This mixin class handles the rendering of dependencies for the exporters.

 */

Ext.define ('Gnt.plugin.exporter.mixin.DependencyPainter', {

    taskBoxes           : null,

    dependencyPainter   : null,

    dependenciesHtml    : '',

    ganttView           : null,

    initDependencyPainter : function () {
        var me  = this;

        me.dependencyPainter    = me.normalView.dependencyView.painter;
        me.ganttView            = me.dependencyPainter.ganttView;
        me.taskBoxes            = {};
    },


    getLineCoordinates : function () {
        var me  = this;
        // redirect to real painter method
        return me.dependencyPainter.getLineCoordinates.apply(me.dependencyPainter, arguments);
    },


    renderDependencies : function (dependencies) {
        var me              = this;

        me.dependenciesHtml = me.normalView.dependencyView.lineTpl.apply( me.getDependencyTplData(dependencies) );
    },


    fillTaskBox : function (task) {
        var me      = this,
            painter = me.normalView.dependencyView.painter;

        if (task.hasIncomingDependencies() || task.hasOutgoingDependencies()) {

            var bodyTop;

            // HACK: bufferedRenderer.bodyTop is used inside of real DependencyPainter
            // but it breaks dependency position in our painter so we set it to zero
            if (me.ganttView.bufferedRenderer) {
                bodyTop     = me.ganttView.bufferedRenderer.bodyTop;
                me.ganttView.bufferedRenderer.bodyTop = 0;
            }

            me.taskBoxes[task.getId()] = painter.getTaskBox(task);

            // restore original bodyTop value
            if (me.ganttView.bufferedRenderer) me.ganttView.bufferedRenderer.bodyTop = bodyTop;
        }
    },


    getRenderData : function (dependency) {
        var me          = this,
            fromTask    = dependency.getSourceTask(),
            toTask      = dependency.getTargetTask();

        if (fromTask && toTask) {
            return {
                fromBox : me.taskBoxes[fromTask.getId()],
                toBox   : me.taskBoxes[toTask.getId()]
            };
        }
    },


    getDependencyTplData : function (dependencyRecords) {
        dependencyRecords   = dependencyRecords || this.normalView.dependencyView.store.getRange();

        return this.dependencyPainter.getDependencyTplData.call(this, dependencyRecords);
    }

});
/**
 @class Gnt.plugin.exporter.MultiPage
 @extends Sch.plugin.exporter.MultiPage

 This class extracts pages in a vertical and horizontal order.

 The exporterId of this exporter is `multipage`
 */

Ext.define('Gnt.plugin.exporter.MultiPage', {

    extend              : 'Sch.plugin.exporter.MultiPage',

    mixins              : ['Gnt.plugin.exporter.mixin.DependencyPainter'],

    depsTopOffset       : 0,

    normalGridOffset    : 0,


    /**
     * @protected
     * Collects the normal grid row and its taskBoxes.
     * @param  {Element} item The normal grid row
     * @param  {Ext.data.Model} recordIndex Index of the record corresponding to the row.
     * @return {Object} Object keeping reference to the cloned row element and its height.
     */
    collectNormalRow : function (item, recordIndex) {
        var me  = this,
            row = me.callParent(arguments);

        me.fillTaskBox(row.record);

        return row;
    },

    setComponent : function () {
        var me  = this;
        me.callParent(arguments);
        me.initDependencyPainter();
    },

    onRowsCollected : function () {
        var me  = this;

        me.renderDependencies();

        me.depsTopOffset    = 0;
        me.normalGridOffset = 0;

        me.callParent(arguments);
    },

    commitPage : function (pageData) {
        var me      = this;

        me.callParent(arguments);

        // on next page dependencies will be shifted vertically based on this page height
        me.depsTopOffset -= pageData.rowsHeight;
    },

    startPage : function (pattern, newColumnPage) {
        var me = this;

        me.normalGridOffset = pattern.normalGridOffset;

        if (newColumnPage) {
            me.depsTopOffset    = 0;
        }

        me.callParent(arguments);
    },


    /**
     * @protected
     * Builds a page frame, a DOM-"skeleton" for a future pages.
     * @param  {Number} colIndex Zero based index of page column to build frame for.
     * @param  {Number} offset   Proper normal grid offset for the page column.
     * @return {Ext.dom.Element} Column page frame.
     */
    buildPageFrame : function (colIndex, offset) {
        var me  = this;

        var copy = me.callParent(arguments);

        // remember locked/normal grids visibility
        copy.normalHidden = me.normalGrid.hidden;
        copy.lockedHidden = me.lockedGrid.hidden;

        return copy;
    },


    /**
     * @protected
     * Performs last changes to {@link #getCurrentPage the current page} being extracted before it's pushed into {@link #extractedPages} array.
     * This function will add dependencies to the output fragment.
     * @param {Object} [config] Optional configuration object.
     * @return {Ext.dom.Element} element Element holding the page.
     */
    preparePageToCommit : function () {
        var me          = this,
            frag        = me.callParent(arguments),
            depsCt      = frag.select('.sch-dependencyview-ct').first(),
            splitter    = frag.select('.' + Ext.baseCSSPrefix + 'splitter').first(),
            pageFrame   = me.pageFrames[me.columnPageIndex-1],
            get = function (s) {
                var el = frag.select('#' + s).first();
                return el && el.dom;
            };

        if (splitter) {
            if (pageFrame.lockedHidden) {
                splitter.hide();
            }
            else {
                splitter.setHeight('100%');
            }
        }

        if (!pageFrame.normalHidden) {
            depsCt.dom.innerHTML = me.dependenciesHtml;

            // move the dependencies div to match the position of the dependency lines
            depsCt.applyStyles({
                top : me.depsTopOffset + 'px'
                // left    : me.normalGridOffset + 'px'
            });

            var normalGrid  = me.normalGrid,
                id          = normalGrid.getView().id;

            var normalView  = get(id);
            if (normalView) {
                var tableWidth = normalGrid.el.down(me.tableSelector).getWidth();

                // hiding dependencies
                normalView.style.width      = tableWidth + 'px';
                // remove scrollbars
                normalView.style.overflow   = 'hidden';
            }
        }

        if (!pageFrame.lockedHidden) {
            var lockedView  = get( me.lockedView.id );

            if (lockedView) {
                // remove scrollbars
                lockedView.style.overflow   = 'hidden';
            }
        }

        return frag;
    }

});

/**
 @class Gnt.plugin.exporter.MultiPageVertical
 @extends Sch.plugin.exporter.MultiPageVertical

 This class extracts pages in a vertical order. It fits all locked columns and the timeaxis on a single page and will generate
 new pages vertically down for the rows.

 The exporterId of this exporter is `multipagevertical`

 To adjust column widths for specific export cases the function {@link #fitLockedColumnWidth} can be overridden.

 */


Ext.define('Gnt.plugin.exporter.MultiPageVertical', {

    extend          : 'Sch.plugin.exporter.MultiPageVertical',

    mixins          : ['Gnt.plugin.exporter.mixin.DependencyPainter'],

    depsTopOffset   : 0,


    /**
     * @protected
     * Collects the normal grid row and its taskBoxes.
     * @param  {Element} item The normal grid row
     * @param  {Ext.data.Model} recordIndex Index of the record corresponding to the row.
     * @return {Object} Object keeping reference to the cloned row element and its height.
     */
    collectNormalRow : function (item, recordIndex) {
        var me  = this,
            row = me.callParent(arguments);

        me.fillTaskBox(row.record);

        return row;
    },

    setComponent : function () {
        var me  = this;
        me.callParent(arguments);
        me.initDependencyPainter();
    },

    onRowsCollected : function () {
        var me  = this;

        me.renderDependencies();
        me.depsTopOffset    = 0;

        me.callParent(arguments);
    },

    commitPage : function (pageData) {
        var me      = this;

        me.callParent(arguments);

        // on next page dependencies will be shifted vertically based on this page height
        me.depsTopOffset -= pageData.rowsHeight;
    },


    /**
     * @protected
     * Performs last changes to {@link #getCurrentPage the current page} being extracted before it's pushed into {@link #extractedPages} array.
     * This function will add dependencies to the output fragment.
     * @param {Object} [config] Optional configuration object.
     * @return {Ext.dom.Element} element Element holding the page.
     */
    preparePageToCommit : function () {
        var me          = this,
            frag        = me.callParent(arguments),
            depsCt      = frag.select('.sch-dependencyview-ct').first(),
            splitter    = frag.select('.' + Ext.baseCSSPrefix + 'splitter').first(),
            get = function (s) {
                var el = frag.select('#' + s).first();
                return el && el.dom;
            };

        depsCt.dom.innerHTML = me.dependenciesHtml;

        //move the dependencies div to match the position of the dependency lines
        depsCt.applyStyles({
            top     : me.depsTopOffset + 'px',
            left    : '0px'
        });

        splitter && splitter.setHeight('100%');

        // hiding dependencies
        var normalGrid  = me.normalGrid,
            tableWidth = normalGrid.el.down(me.tableSelector).getWidth(),
            id          = normalGrid.getView().id;

        var normalView  = get(id);

        normalView.style.width = tableWidth + 'px';
        //remove scrollbar
        normalView.style.overflow = 'hidden';

        var lockedView  = get( me.lockedView.id );
        //remove scrollbar
        lockedView.style.overflow = 'hidden';

        return frag;
    }

});
/**
 @class Gnt.plugin.exporter.SinglePage
 @extends Sch.plugin.exporter.SinglePage

 This class extracts all scheduler data to fit in a single page.

 The exporterId of this exporter is `singlepage`
 */


Ext.define('Gnt.plugin.exporter.SinglePage', {

    extend : 'Sch.plugin.exporter.SinglePage',

    mixins : ['Gnt.plugin.exporter.mixin.DependencyPainter'],

    setComponent : function () {
        this.callParent(arguments);
        this.initDependencyPainter();
    },


    /**
     * @protected
     * Collects the normal grid row and its taskBoxes.
     * @param  {Element} item The normal grid row
     * @param  {Ext.data.Model} recordIndex Index of the record corresponding to the row.
     * @return {Object} Object keeping reference to the cloned row element and its height.
     */
    collectNormalRow : function (item, recordIndex) {
        var me  = this,
            row = me.callParent(arguments);

        me.fillTaskBox(row.record);

        return row;
    },

    onRowsCollected : function () {
        var me  = this;

        me.renderDependencies();

        this.callParent(arguments);
    },

    /**
     * @protected
     * Performs last changes to {@link #getCurrentPage the current page} being extracted before it's pushed into {@link #extractedPages} array.
     * This function will add dependencies to the output fragment.
     * @param {Object} [config] Optional configuration object.
     * @return {Ext.dom.Element} element Element holding the page.
     */
    preparePageToCommit : function () {
        var me          = this,
            frag        = me.callParent(arguments),
            depsCt      = frag.select('.sch-dependencyview-ct').first(),
            splitter    = frag.select('.' + Ext.baseCSSPrefix + 'splitter').first();

        depsCt.dom.innerHTML = me.dependenciesHtml;

        //move the dependencies div to match the position of the dependency lines
        depsCt.applyStyles({
            top     : '0px',
            left    : '0px'
        });

        splitter && splitter.setHeight('100%');

        // hiding dependencies
        var normalGrid  = me.component.normalGrid,
            tableWidth = normalGrid.el.down(me.tableSelector).getWidth(),
            id          = normalGrid.getView().id,
            el          = frag.select('#' + id).first().dom;

        el.style.width = tableWidth + 'px';

        return frag;
    }

});

/**
@class Gnt.plugin.Export
@extends Sch.plugin.Export

A plugin (ptype = 'gantt_export') for generating PDF/PNG out of a Gantt panel. NOTE: This plugin will make an Ajax request to the server, POSTing
 the HTML to be exported. The {@link #printServer} url must therefore be on the same domain as your application.

#Configuring/usage

To use this plugin, add it to your Gantt as any other plugin. It is also required to have [PhantomJS][1] and [Imagemagick][2]
installed on the server. The complete process of setting up a backend for this plugin can be found in the readme file inside export examples
as well as on our [blog][3]. Note that export is currently not supported if your view (or store) is buffered.

    var gantt = Ext.create('Sch.panel.Gantt', {
        ...

        plugins         : [
            Ext.create('Gnt.plugin.Export', {
                // default values
                printServer: 'server.php'
            })
        ]
    });

Gantt will be extended with three new methods:

* {@link #setFileFormat}, which allows setting the format to which panel should be exported. Default format is `pdf`.

* {@link #showExportDialog}, which shows export settings dialog

        gantt.showExportDialog();

* {@link #doExport} which actually performs the export operation using {@link #defaultConfig} or provided config object :

        gantt.doExport(
            {
                format: "A5",
                orientation: "landscape",
                range: "complete",
                showHeader: true,
                exporterId: 'singlepage'
            }
        );

#Export options

In the current state, plugin gives few options to modify the look and feel of the generated document/image throught a dialog window :

{@img scheduler/images/export_dialog.png}

If no changes are made to the form, the {@link #defaultConfig} will be used.

##Export Range

This setting controls the timespan visible on the exported document/image. Three options are available here :

{@img scheduler/images/export_dialog_ranges.png}

###Complete schedule

Whole current timespan will be visible on the exported document.

###Date range

User can select the start and end dates (from the total timespan of the panel) visible on the exported document/image.

{@img scheduler/images/export_dialog_ranges_date.png}

###Current view

Timespan of the exported document will be set to the currently visible part of the time axis. User can control
the width of the time column and height of row.

{@img scheduler/images/export_dialog_ranges_current.png}

##Paper Format

This combo gives control of the size of the generated PDF document by choosing one from a list of supported ISO paper sizes : (`A5`, `A4`, `A3`, `Letter`).
Generated PDF has a fixed DPI value of 72. Dafault format is `A4`.

{@img scheduler/images/export_dialog_format.png}

##Orientation

This setting defines the orientation of the generated document.

{@img scheduler/images/export_dialog_orientation.png}

Default option is the `portrait` (horizontal) orientation :

{@img scheduler/images/export_dialog_portrait.png}

Second option is the `landscape` (vertical) orientation :

{@img scheduler/images/export_dialog_landscape.png}


##Custom export styling
A special "sch-export" CSS class is added to the body of the exported pages so that you can have special
styles in your exported chart.

[1]: http://www.phantomjs.org
[2]: http://www.imagemagick.org
[3]: http://bryntum.com/blog

*/
Ext.define('Gnt.plugin.Export', {
    extend              : 'Sch.plugin.Export',

    alias               : 'plugin.gantt_export',
    alternateClassName  : 'Gnt.plugin.PdfExport',

    requires            : [
        'Gnt.plugin.exporter.SinglePage',
        'Gnt.plugin.exporter.MultiPage',
        'Gnt.plugin.exporter.MultiPageVertical'
    ],

    buildExporters : function () {
        return [
            'Gnt.plugin.exporter.SinglePage',
            'Gnt.plugin.exporter.MultiPage',
            'Gnt.plugin.exporter.MultiPageVertical'
        ];
    },

    //override added to turn off vertical resizer in the dialog
    showExportDialog    : function() {
        this.exportDialogConfig.scrollerDisabled = true;

        this.callParent(arguments);
    }

});

/**
@class Gnt.plugin.Printable
@extends Sch.plugin.Printable

A plugin (ptype = 'gantt_printable') for printing the content of an Ext Gantt panel. Please note that this will not generate a picture perfect
 printed version, due to various limitations in the browser print implementations. If you require a high quality print, you should use the Export plugin instead and first export to PDF.

You can add it to your gantt chart like any other plugin and it will add a new method `print` to the gantt panel itself:

    var gantt = Ext.create('Gnt.panel.Gantt', {
    
        plugins             : [
            Ext.create("Gnt.plugin.Printable")
        ],
        ...
    })

    gantt.print();

*/
Ext.define("Gnt.plugin.Printable", {
    extend : "Sch.plugin.Printable",
    alias  : 'plugin.gantt_printable',

    getGridContent : function(gantt) {
        var ganttView  = gantt.getSchedulingView();

        ganttView._print = true;

        var retVal     = this.callParent(arguments),
            depView    = ganttView.dependencyView,
            tplData    = depView.painter.getDependencyTplData(ganttView.dependencyStore.getRange()),
            depHtml    = '<div class="' + depView.getDependencyCanvas().dom.className + '">' + depView.lineTpl.apply(tplData) + '</div>',
            normalRows = retVal.normalRows;

        //highlight critical path
        if (Ext.select('.sch-gantt-critical-chain').first()){

            var el = Ext.DomHelper.createDom({
                tag     : 'div',
                html    : depHtml
            }).cloneNode(true);

            el = Ext.get(el);

            var elRows = Ext.DomHelper.createDom({
                tag: 'div',
                html: normalRows
            }).cloneNode(true);

            elRows = Ext.get(elRows);

            var paths = ganttView.getCriticalPaths(),
                ds = ganttView.dependencyStore,
                t,i,l, depRecord;

            //Simplified critical path highlighting
            Ext.each(paths, function(tasks) {
                for (i = 0, l = tasks.length; i < l; i++) {
                    t = tasks[i];
                    this.highlightTask(t, gantt, elRows);

                    if (i < (l - 1)) {
                        depRecord = ds.getAt(ds.findBy(function(dep) {
                            return dep.getTargetId() === (t.getId() || t.internalId) && dep.getSourceId() === (tasks[i+1].getId() || tasks[i+1].internalId);
                        }));
                        this.highlightDependency(depRecord, el, depView);
                    }
                }
            }, this);

            normalRows = elRows.dom.innerHTML;
            depHtml = el.dom.innerHTML;
        }

        retVal.normalRows = depHtml + normalRows;

        delete ganttView._print;

        return retVal;
    },

    highlightTask: function(task, gantt, containerEl){
        var el = gantt.getSchedulingView().getElementFromEventRecord(task),
            elId = el.id;

            if (el) {
                containerEl.select('#'+elId).first().parent('tr').addCls('sch-gantt-task-highlighted');
            }
    },

    highlightDependency: function(rec, containerEl, depView){
        var id = rec instanceof Ext.data.Model ? rec.internalId : rec;

        return containerEl.select('.sch-dep-' + id).addCls(depView.selectedCls);
    }
});
/*
 * @class Gnt.view.DependencyPainter
 * @extends Ext.util.Observable
 * @private
 * Internal class handling the drawing of inter-task dependencies.
 */
Ext.define("Gnt.view.DependencyPainter", {

    ganttView       : null,
    rowHeight       : null,
    arrowOffset     : 8,
    lineWidth       : 2,
    xOffset         : 6,

    constructor: function (cfg) {
        cfg = cfg || {};

        Ext.apply(this, cfg);
    },

    setRowHeight : function(height) {
        this.rowHeight = height;
    },

    getTaskBox: function (task) {
        var DT          = Sch.util.Date,
            taskStart   = task.getStartDate(),
            taskEnd     = task.getEndDate(),
            view        = this.ganttView,
            isBuffered  = view.bufferedRenderer,
            viewStart   = view.timeAxis.getStart(),
            viewEnd     = view.timeAxis.getEnd();

        // Assure task is:
        //      - not inside a collapsed parent task
        //      - fully scheduled
        //      - intersecting current view date range
        if (!task.isVisible() ||
            !taskStart ||
            !taskEnd ||
            !DT.intersectSpans(taskStart, taskEnd, viewStart, viewEnd)) {
            return null;
        }

        // Assure task is:
        //      - not filtered out
        if (view.store.indexOf(task) < 0) {
            var taskStore = view.taskStore;

            // If for any reason, a task is not part of the view flat store, and buffering is not enabled
            // we should not draw anything
            if (!isBuffered) {
                return null;
            }

            // Query the current filter to know if the task is truly filtered out of the current view
            if (taskStore.isTreeFiltered() && !taskStore.lastTreeFilter.filter.call(taskStore.lastTreeFilter.scope || taskStore, task)) {
                return null;
            }
        }

        var offsets,
            start       = view.getXFromDate(DT.max(taskStart, viewStart)),
            end         = view.getXFromDate(DT.min(taskEnd, viewEnd)),
            rowNode     = view.getNodeByRecord(task);

        if (rowNode || isBuffered) {
            var xOffset         = view.getXOffset(task),
                top, bottom,
                isMilestone     = task.isMilestone(),
                rendered        = true;

            if (start > xOffset) {
                start -= xOffset;
            }
            end += xOffset;

            var viewEl          = view.el;                                        // HACK: Reading private properties
            var viewElScrollTop = view.getScroll().top - (view.bufferedRenderer ? view.bufferedRenderer.bodyTop : 0);

            if (rowNode) {
                var eventNodes = view.getElementsFromEventRecord(task),
                    eventNode  = eventNodes.length && eventNodes[0];
                // eventNode could be null if we are trying to paint dependencies for a non rendered task
                if (!eventNode) return null;

                offsets     = Ext.fly(eventNode).getOffsetsTo(viewEl);
                top         = offsets[1] + viewElScrollTop + (isMilestone && Ext.isIE8 ? 3 : 0);
                bottom      = top + Ext.fly(eventNode).getHeight();

                if (isMilestone) {
                    end       +=1;
                }
            } else {
                // View is buffered, and task element is not in DOM - try to project a reasonable box
                var nodes           = view.all.elements;
                var firstInView     = view.store.getAt(view.all.startIndex);

                if (task.isAbove(firstInView)) {
                    rowNode     = nodes[view.all.startIndex];
                    offsets     = Ext.fly(rowNode).getOffsetsTo(viewEl);
                    offsets[1]  -= view.getRowHeight();     // Make sure it's off screen
                } else {
                    rowNode     = nodes[view.all.endIndex];
                    offsets     = Ext.fly(rowNode).getOffsetsTo(viewEl);
                    offsets[1]  += view.getRowHeight();     // Make sure it's off screen
                }

                top     = offsets[1] + viewElScrollTop;
                bottom  = top + this.rowHeight;

                rendered = false;
            }

            return {
                top         : top,
                end         : end,
                bottom      : bottom,
                start       : start,
                rendered    : rendered
            };
        }
    },

    getRenderData : function(dependency) {
        var fromTask = dependency.getSourceTask(),
            toTask = dependency.getTargetTask();

        // When indenting, Ext JS might request a refresh of the node before it exists in the view properly
        // (task might not belong to a treeStore in this situation) so we should handle this case and not try to draw
        // if the task is currently being moved around in the task tree
        if (!fromTask || !fromTask.getTreeStore() || !toTask || !toTask.getTreeStore()) return null;

        var fromBox = this.getTaskBox(fromTask);
        var toBox = this.getTaskBox(toTask);
        var view = this.ganttView;

        if (view.bufferRender && fromBox && !fromBox.rendered && toBox && !toBox.rendered) {

            // Make sure the path between the tasks intersect current table chunk
            var firstInView    = view.store.getAt(view.all.startIndex);
            var lastInView     = view.store.getAt(view.all.endIndex);

            if ((fromTask.isAbove(firstInView) && toTask.isAbove(firstInView)) ||
                (lastInView.isAbove(fromTask) && lastInView.isAbove(toTask)))
            {
                return null;
            }
        }

        return {
            fromBox : fromBox,
            toBox   : toBox
        };
    },

    getDependencyTplData: function (dependencyRecords) {
        var me = this,
            view = me.ganttView;

        // Normalize input
        if (dependencyRecords instanceof Ext.data.Model) {
            dependencyRecords = [dependencyRecords];
        }

        if (dependencyRecords.length === 0 || view.store.getCount() === 0) {
            return;
        }

        var depData = [],
            coords, fromBox, toBox, dependency;

        for (var i = 0, l = dependencyRecords.length; i < l; i++) {
            dependency = dependencyRecords[i];

            var data = this.getRenderData(dependency);

            if (data) {
                fromBox = data.fromBox;
                toBox = data.toBox;

                if (fromBox && toBox) {
                    coords = me.getLineCoordinates(fromBox, toBox, dependency);

                    if (coords) {
                        depData.push({
                            dependency      : dependency,
                            id              : dependency.internalId,
                            cls             : dependency.getCls(),
                            lineCoordinates : coords
                        });
                    }
                }
            }
        }

        return depData;
    },

    getLineCoordinates: function (fromBox, toBox, dependency) {
        var startSide, endSide,
            startXY     = [0, fromBox.top - 1 + ((fromBox.bottom - fromBox.top) / 2)],
            endXY       = [0, toBox.top - 1 + ((toBox.bottom - toBox.top) / 2)],
            targetBelow = endXY[1] > startXY[1],
            DepType     = dependency.self.Type,
            offset      = this.arrowOffset + this.xOffset,
            type        = dependency.getType(),
            coords      = [],
            targetIsMilestone = dependency.getTargetTask().isMilestone(),
            xPoint, targetX, turningPointY;

        switch (type) {
            case DepType.StartToEnd:
                startXY[0]  = fromBox.start;
                endXY[0]    = toBox.end + offset;
                startSide = 'l';
                endSide = 'r';
                break;

            case DepType.StartToStart:
                startXY[0]  = fromBox.start;
                endXY[0]    = toBox.start - offset;
                startSide = 'l';
                endSide = 'l';
                break;

            case DepType.EndToStart:
                startXY[0]  = fromBox.end;
                endXY[0]    = toBox.start - offset;
                startSide = 'r';
                endSide = 'l';
                break;

            case DepType.EndToEnd:
                startXY[0]  = fromBox.end;
                endXY[0]    = toBox.end + offset;
                startSide = 'r';
                endSide = 'r';
                break;

            default:
                throw 'Invalid dependency type: ' + dependency.getType();
        }

        coords.push(startXY);

        var x2 = startXY[0] + (startSide === 'r' ? this.xOffset : -this.xOffset);

        if (targetBelow && type === DepType.EndToStart && fromBox.end < (toBox.start + 5)) {
            // 2 lines
            xPoint = Math.min(toBox.start, toBox.end) + this.xOffset;

            coords.push([ xPoint, startXY[1] ]);
            coords.push([ xPoint, toBox.top - this.arrowOffset - (targetIsMilestone ? 2 : 0) ]);
        }
        else if (startSide !== endSide && ((startSide === 'r' && x2 > endXY[0]) || (startSide === 'l' && x2 < endXY[0]))) {
            // 5 lines
            targetX = toBox[endSide === 'l' ? 'start' : 'end'];
            turningPointY = endXY[1] + (targetBelow ? -1 : 1) * (this.rowHeight / 2);

            coords.push([ x2, startXY[1] ]);
            coords.push([ x2, turningPointY ]);
            coords.push([ endXY[0], turningPointY ]);
            coords.push(endXY);

            coords.push([targetX + (endXY[0] < targetX ? -this.arrowOffset : this.arrowOffset) - (targetIsMilestone && endSide === 'l' && !Ext.isIE8m ? 2 : 0), endXY[1]]);
        } else {
            // 3 lines
            targetX = toBox[endSide === 'l' ? 'start' : 'end'];

            if (startSide === 'r') {
                xPoint = Math.max(x2, endXY[0]);
            } else {
                xPoint = Math.min(x2, endXY[0]);
            }
            coords.push([ xPoint, startXY[1]]);
            coords.push([ xPoint, endXY[1]]);

            coords.push([targetX + (xPoint < targetX ? -this.arrowOffset : this.arrowOffset) - (targetIsMilestone && endSide === 'l' ? 2 : 0), endXY[1]]);
        }

        var lineCoords = [];

        for (var i = 0; i < coords.length - 1; i++) {
            lineCoords.push({
                x1 : coords[i][0],
                y1 : coords[i][1],
                x2 : coords[i+1][0],
                y2 : coords[i+1][1]
            });
        }

        return lineCoords;
    }
});

/**
 * @class Gnt.view.Dependency
 * @extends Ext.util.Observable
 * Internal class handling the dependency related functionality.
 */
Ext.define("Gnt.view.Dependency", {
    extend      : "Ext.util.Observable",

    requires    : [
        'Ext.XTemplate',
        'Gnt.feature.DependencyDragDrop',
        'Gnt.view.DependencyPainter'
    ],

    /**
     * @cfg {Number} lineWidth
     * The number of pixels for the line width (supported values are 1 or 2 pixels), defaults to 1.
     */
    lineWidth       : 1,

    /**
     * @cfg {Object} dragZoneConfig
     * A custom config object to pass on to configure the Ext.dd.DragZone instance used when creating new dependencies
     */
    dragZoneConfig  : null,

    /**
     * @cfg {Object} dropZoneConfig
     * A custom config object to pass on to configure the Ext.dd.DropZone instance used when creating new dependencies
     */
    dropZoneConfig  : null,

    /**
     * @cfg {String} dependencyPainterClass
     * @protected
     * The class used to determine how the dependencies are painted. Override this to your own custom class to take control over the
     * painting.
     */
    dependencyPainterClass      : "Gnt.view.DependencyPainter",

    ganttView       : null,
    painter         : null,
    taskStore       : null,
    store           : null,
    dnd             : null,
    lineTpl         : null,
    renderTimer     : null,

    enableDependencyDragDrop    : true,

    renderAllDepsBuffered       : false,

    dependencyCls               : 'sch-dependency',
    selectedCls                 : 'sch-dependency-selected',

    /**
     * @event beforednd
     * Fires before a drag and drop operation is initiated, return false to cancel it
     * @param {Gnt.view.Dependency} The dependency view instance
     * @param {HTMLNode} node The node that's about to be dragged
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event dndstart
     * Fires when a dependency drag and drop operation starts
     * @param {Gnt.view.Dependency} The dependency view instance
     */

    /**
     * @event drop
     * Fires after a drop has been made on a receiving terminal
     * @param {Gnt.view.Dependency} The dependency view instance
     * @param {Mixed} fromId The source dependency record id
     * @param {Mixed} toId The target dependency record id
     * @param {Number} type The dependency type, see {@link Gnt.model.Dependency} for more information
     */

    /**
     * @event afterdnd
     * Always fires after a dependency drag and drop operation
     * @param {Gnt.view.Dependency} view The dependency view instance
     */

    /**
     * @event dependencyclick
     * Fires after clicking on a dependency line/arrow
     * @param {Gnt.view.Dependency} view The dependency view instance
     * @param {Gnt.model.Dependency} record The dependency record
     * @param {Ext.EventObject} event The event object
     * @param {HTMLElement} target The clicked DOM element
     */

    /**
     * @event dependencycontextmenu
     * Fires after right clicking on a dependency line/arrow
     * @param {Gnt.view.Dependency} view The dependency view instance
     * @param {Gnt.model.Dependency} record The dependency record
     * @param {Ext.EventObject} event The event object
     * @param {HTMLElement} target The clicked DOM element
     */

    /**
     * @event dependencydblclick
     * Fires after double clicking on a dependency line/arrow
     * @param {Gnt.view.Dependency} view The dependency view instance
     * @param {Gnt.model.Dependency} record The dependency record
     * @param {Ext.EventObject} event The event object
     * @param {HTMLElement} target The clicked DOM element
     */

    /**
     * @event refresh
     * Fires after the view has fully rendered all the dependencies in the underlying store
     * @param {Gnt.view.Dependency} view The dependency view instance
     */

    // private
    constructor: function (cfg) {
        this.callParent(arguments);

        var ganttView = this.ganttView;

        if (ganttView.bufferedRenderer) {
            // when buffered view is scrolled this is one of two events that fire
            // probably only one reliable way do know when we should render deps
            ganttView.on({
                itemadd : this.renderAllDependenciesBuffered,
                scope   : this
            });
        }

        ganttView.on({
            refresh         : this.renderAllDependenciesBuffered,
            itemupdate      : this.onTaskUpdated,
            scope           : this
        });

        this.bindTaskStore(ganttView.getTaskStore());
        this.bindDependencyStore(cfg.store);

        if (!this.lineTpl) {
            var rtl = this.rtl;
            var side = rtl ? 'right' : 'left';

            this.lineTpl = new Ext.XTemplate(
                '<tpl for=".">' +
                    (
                        '<tpl for="lineCoordinates">' +
                            // lineCls can be used to style the dependency lines
                            '<div class="{0} {[ parent.dependency.isHighlighted ? "{1}" : "" ]} {[values.x1==values.x2 ? "sch-dependency-line-v" : "sch-dependency-line-h"]} {lineCls} sch-dep-{parent.id} {0}-line {[this.getSuffixedCls(parent.cls, "-line")]}" ' +
                            'style="' + side + ':{[Math.min(values.x1, values.x2)]}px;top:{[Math.min(values.y1, values.y2)]}px;' +
                            'width:{[Math.abs(values.x1-values.x2)+' + this.lineWidth + ']}px;' +
                            'height:{[Math.abs(values.y1-values.y2)+' + this.lineWidth + ']}px">' +
                            '</div>' +
                        '</tpl>' +
                        '<div style="' + side + ':{[values.lineCoordinates[values.lineCoordinates.length - 1].x2]}px;top:{[values.lineCoordinates[values.lineCoordinates.length - 1].y2]}px" ' +
                            'class="{0}-arrow-ct {0} {[ values.dependency.isHighlighted ? "{1}" : "" ]} sch-dep-{id} {[this.getSuffixedCls(values.cls, "-arrow-ct")]}">' +
                            '<img src="' + Ext.BLANK_IMAGE_URL + '" class="{0}-arrow {0}-arrow-{[this.getArrowDirection(values.lineCoordinates)]} {[this.getSuffixedCls(values.cls, "-arrow")]}" />' +
                        '</div>'
                    ).replace(/\{0\}/g, this.dependencyCls).replace(/\{1\}/g, this.selectedCls) +
                '</tpl>',
                {
                    disableFormats : true,
                    getArrowDirection: function (coords) {
                        var lastXY = coords[coords.length - 1];

                        if (lastXY.y2 < lastXY.y1) return 'up';

                        if (lastXY.x1 === lastXY.x2) {
                            return 'down';
                        } else if ((!rtl && lastXY.x1 > lastXY.x2) || (rtl && lastXY.x1 < lastXY.x2)) {
                            return 'left';
                        } else {
                            return 'right';
                        }
                    },

                    getSuffixedCls : function (cls, suffix) {
                        if (cls && cls.indexOf(' ') != -1)
                            return cls.replace(/^\s*(.*)\s*$/, '$1').split(/\s+/).join(suffix + ' ') + suffix;
                        else
                            return cls + suffix;
                    }
                }
            );
        }

        this.painter = Ext.create(this.dependencyPainterClass, Ext.apply({
            rowHeight   : ganttView.getRowHeight(),
            ganttView   : ganttView
        }, cfg));

        if (this.enableDependencyDragDrop) {
            this.dnd = Ext.create("Gnt.feature.DependencyDragDrop", {
                el              : ganttView.getEl(),
                rtl             : ganttView.rtl,
                ganttView       : ganttView,
                dragZoneConfig  : this.dragZoneConfig,
                dropZoneConfig  : this.dropZoneConfig,
                dependencyStore : this.store
            });

            this.dnd.on('drop', this.onDependencyDrop, this);
            this.relayEvents(this.dnd, ['beforednd', 'dndstart', 'afterdnd', 'drop']);
        }

        if (ganttView.rendered) {
            this.renderAllDependenciesBuffered();
        }

        this.initDependencyListeners();
    },

    initDependencyListeners : function() {
        var me = this;

        me.ganttView.mon(me.ganttView.getEl(), {
            dblclick    : me.onDependencyClick,
            click       : me.onDependencyClick,
            contextmenu : me.onDependencyClick,
            scope       : me,
            delegate    : '.' + me.dependencyCls
        });
    },

    createDependencyCanvas : function(nodeContainerEl) {
        // Setup our own container element
        return Ext.fly(nodeContainerEl).insertFirst({
            cls : 'sch-dependencyview-ct ' + (this.lineWidth === 1 ? ' sch-dependencyview-thin ' : '')
        });
    },

    getDependencyCanvas : function() {
        var me = this,
            nodeContainer = me.ganttView.getNodeContainer() || me.ganttView.scrollerEl,
            canvasEl = nodeContainer && Ext.fly(nodeContainer).child('div.sch-dependencyview-ct');

        if (nodeContainer && !canvasEl) {
            canvasEl = me.createDependencyCanvas(nodeContainer);
        }

        return canvasEl;
    },

    bindDependencyStore : function (store) {
        this.depStoreListeners = {
            // For filtering, server write etc
            refresh         : this.renderAllDependenciesBuffered,
            clear           : this.renderAllDependenciesBuffered,

            load            : this.renderAllDependenciesBuffered,

            add             : this.onDependencyAdd,
            update          : this.onDependencyUpdate,
            remove          : this.onDependencyDelete,

            scope           : this
        };

        store.on(this.depStoreListeners);

        this.store = store;
    },

    unBindDependencyStore : function () {
        if (this.depStoreListeners) {
            this.store.un(this.depStoreListeners);
        }
    },

    bindTaskStore : function (taskStore) {

        this.taskStoreListeners = {
            cascade             : this.onTaskStoreCascade,

            noderemove          : this.renderAllDependenciesBuffered,
            nodeinsert          : this.renderAllDependenciesBuffered,
            nodeappend          : this.renderAllDependenciesBuffered,
            nodemove            : this.renderAllDependenciesBuffered,

            nodeexpand          : this.renderAllDependenciesBuffered,
            nodecollapse        : this.renderAllDependenciesBuffered,

            sort                : this.renderAllDependenciesBuffered,

            scope               : this
        };

        taskStore.on(this.taskStoreListeners);

        this.taskStore = taskStore;
    },

    onTaskStoreCascade : function(store, cascadeContext) {
        if (cascadeContext && cascadeContext.nbrAffected > 0) {
            this.renderAllDependenciesBuffered();
        }
    },

    unBindTaskStore : function (taskStore) {
        taskStore       = taskStore || this.taskStore;

        if (!taskStore) return;

        if (this.ganttViewListeners) {
            this.ganttView.un(this.ganttViewListeners);
        }

        taskStore.un(this.taskStoreListeners);
    },

    onDependencyClick : function(e, t) {
        var rec = this.getRecordForDependencyEl(t);
        this.fireEvent('dependency' + e.type, this, rec, e, t);
    },

    /**
     * Highlight the elements representing a particular dependency
     * @param {Mixed} record Either the id of a record or a record in the dependency store
     */
    highlightDependency: function (record) {
        if (!(record instanceof Ext.data.Model)) {
            record = this.getDependencyRecordByInternalId(record);
        }

        if (record) {
            record.isHighlighted    = true;

            this.getElementsForDependency(record).addCls(this.selectedCls);
        }
    },


    /**
     * Remove highlight of the elements representing a particular dependency
     * @param {Mixed} record Either the id of a record or a record in the dependency store
     */
    unhighlightDependency: function (record) {
        if (!(record instanceof Ext.data.Model)) {
            record = this.getDependencyRecordByInternalId(record);
        }

        if (record) {
            record.isHighlighted    = false;

            this.getElementsForDependency(record).removeCls(this.selectedCls);
        }
    },


    /**
     * Retrieve the elements representing a particular dependency
     * @param {Gnt.model.Dependency} rec the record in the dependency store
     * @return {Ext.CompositeElementLite/Ext.CompositeElement/false}
     */
    getElementsForDependency: function (rec) {
        var me = this,
            id = rec instanceof Ext.data.Model ? rec.internalId : rec,
            containerEl = me.getDependencyCanvas();

        return containerEl && containerEl.select('.sch-dep-' + id);
    },

    // private
    depRe: new RegExp('sch-dep-([^\\s]+)'),


    getDependencyRecordByInternalId : function(id) {
        return this.store.getModelByInternalId(id);
    },

    // private
    getRecordForDependencyEl: function (t) {
        var m = t.className.match(this.depRe),
            rec = null;

        if (m && m[1]) {
            var recordId = m[1];

            rec = this.getDependencyRecordByInternalId(recordId);
        }

        return rec;
    },


    renderAllDependenciesBuffered : function () {
        var me              = this,
            containerEl;

        var hiddenParent    = me.ganttView.up("{isHidden()}");

        // if view el is hidden, postpone the paint until next time it's shown
        if (hiddenParent) {
            clearTimeout(me.renderTimer);
            me.renderTimer  = null;

            hiddenParent.on('show', me.renderAllDependenciesBuffered, me, { single : true });
            return;
        }

        // Check if rendering is already scheduled
        if (me.renderTimer) return;

        containerEl = me.getDependencyCanvas();

        me.renderTimer    = setTimeout(function () {
            me.renderTimer  = null;

            if (!me.ganttView.isDestroyed) me.renderAllDependencies();
        }, 0);
    },

    /**
     * Renders all the dependencies for the current view
     */
    renderAllDependencies : function() {
        var me = this,
            containerEl = me.getDependencyCanvas();

        // component has been destroyed already
        if (!containerEl) return;

        me.renderDependencies(this.store.data.items, true);
        me.fireEvent('refresh', this);
    },

    /**
     * Returns all the elements representing the rendered dependencies
     * @return {Ext.CompositeElementLite/Ext.CompositeElement/false}
     */
    getDependencyElements : function() {
        var me = this,
            containerEl = me.getDependencyCanvas();

        return containerEl && containerEl.select('.' + me.dependencyCls);
    },

    renderDependencies: function (dependencyRecords, full) {
        var me          = this,
            containerEl = me.getDependencyCanvas(),
            tplData;

        if (!containerEl) return;

        if (dependencyRecords && !Ext.isArray(dependencyRecords)) {
            dependencyRecords = [dependencyRecords];
        }

        if (dependencyRecords && dependencyRecords.length > 0){
            tplData = me.painter.getDependencyTplData(dependencyRecords);
            me.lineTpl[full ? 'overwrite' : 'append'](containerEl, tplData);
        } else if (full) {
            // Clear all
            containerEl.update();
        }
    },


    renderTaskDependencies: function (tasks) {
        var toDraw  = [];

        if (tasks instanceof Ext.data.Model) {
            tasks = [tasks];
        }

        for (var i = 0, n = tasks.length; i < n; i++) {
            toDraw = toDraw.concat(tasks[i].getAllDependencies());
        }
        this.renderDependencies(toDraw);
    },

    onDependencyUpdate: function (store, depRecord) {

        this.removeDependencyElements(depRecord, false);

        // Draw new dependencies for the event
        this.renderDependencies(depRecord);
    },



    onDependencyAdd: function (store, depRecords) {
        // Draw added dependencies
        this.renderDependencies(depRecords);
    },

    removeDependencyElements: function (record, animate) {
        if (animate !== false) {
            this.getElementsForDependency(record).fadeOut({ remove: true });
        } else {
            this.getElementsForDependency(record).remove();
        }
    },

    onDependencyDelete: function (store, depRecords) {
        Ext.Array.each(depRecords, function (depRecord) {
            this.removeDependencyElements(depRecord);
        }, this);
    },

    dimEventDependencies: function (eventId) {
        var me = this,
            containerEl = me.getDependencyCanvas();

        containerEl && containerEl.select(me.depRe + eventId).setOpacity(0.2);
    },

    // private
    clearSelectedDependencies : function() {
        var me = this,
            containerEl = me.getDependencyCanvas();

        containerEl.select('.' + me.selectedCls).removeCls(me.selectedCls);

        me.store.each(function (dependency) {
            dependency.isHighlighted    = false;
        });
    },


    onTaskUpdated: function (task) {
        if (!this.taskStore.cascading && (!task.previous || task.startDateField in task.previous || task.endDateField in task.previous)) {
            this.updateDependencies(task);
        }
    },


    updateDependencies: function (tasks) {
        if (tasks instanceof Ext.data.Model) {
            tasks = [ tasks ];
        }

        var me      = this;

        Ext.each(tasks, function (task) {
            Ext.each(task.getAllDependencies(), function (dependency) {
                me.removeDependencyElements(dependency, false);
            });
        });

        // Draw new dependencies for the task
        this.renderTaskDependencies(tasks);
    },


    onNewDependencyCreated : function () {
    },


    onDependencyDrop: function (plugin, fromId, toId, type) {
        var me = this,
            taskStore = me.taskStore,
            fromTask;

        fromTask = taskStore && taskStore.getModelById(fromId);
        fromTask && fromTask.linkTo(toId, type, null, Ext.Function.bind(me.onNewDependencyCreated, me));
    },

    destroy: function () {
        if (this.dnd) {
            this.dnd.destroy();
        }

        this.unBindTaskStore();

        this.unBindDependencyStore();
    },

    setRowHeight : function(height, preventRefresh) {
        this.rowHeight = height;
        this.painter.setRowHeight(height);

        if (!preventRefresh) {
            this.renderAllDependencies();
        }
    }
});

/**

@class Gnt.view.Gantt
@extends Sch.view.TimelineGridView

A view of the gantt panel. Use the {@link Gnt.panel.Gantt#getSchedulingView} method to get its instance from gantt panel.

*/
Ext.define("Gnt.view.Gantt", {
    extend : "Sch.view.TimelineGridView",

    alias : ['widget.ganttview'],

    requires : [
        'Ext.dd.ScrollManager',
        'Gnt.view.Dependency',
        'Gnt.model.Task',
        'Gnt.template.Task',
        'Gnt.template.ParentTask',
        'Gnt.template.Milestone',
        'Gnt.template.RollupTask',
        'Gnt.feature.TaskDragDrop',
        'Gnt.feature.ProgressBarResize',
        'Gnt.feature.TaskResize',
        'Sch.view.Horizontal'
    ],

    uses : [
        'Gnt.feature.LabelEditor',
        'Gnt.feature.DragCreator'
    ],

    mixins : [
        'Sch.mixin.FilterableTreeView'
    ],

    _cmpCls : 'sch-ganttview',

    barMargin : 4,

    scheduledEventName : 'task',

    trackOver           : false,
    toggleOnDblClick    : false,

    // private
    eventSelector : '.sch-gantt-item',

    eventWrapSelector : '.sch-event-wrap',


    progressBarResizer  : null,
    taskResizer         : null,
    taskDragDrop        : null,
    dragCreator         : null,
    dependencyView      : null,

    resizeConfig            : null,
    createConfig            : null,
    dragDropConfig          : null,
    progressBarResizeConfig : null,

    /**
     * @cfg {Object} dependencyViewConfig
     * A config object to apply to internal instance of the {@link Gnt.view.Dependency}. Inner properties like {@link Gnt.view.Dependency#dragZoneConfig} and {@link Gnt.view.Dependency#dropZoneConfig}
     * will be applied to the dependency drag- and dropzone instances respectively.
     */
    dependencyViewConfig    : null,

    externalGetRowClass     : null,

    /**
     * @cfg {Number} outsideLabelsGatherWidth Defines width of special zone outside (before and after) of visible area within which tasks will be still rendered into DOM.
     * This is used to render partially visible labels of invisible tasks bordering with visible area.
     *
     * Increase this value to see long labels, set to 0 if you want to hide labels of invisible tasks completely.
     */
    outsideLabelsGatherWidth : 200,

    // Task click-events --------------------------
    /**
     * @event taskclick
     * Fires when a task is clicked
     *
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The task record
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event taskdblclick
     * Fires when a task is double clicked
     *
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The task record
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event taskcontextmenu
     * Fires when contextmenu is activated on a task
     *
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The task record
     * @param {Ext.EventObject} e The event object
     */

    // Resizing events start --------------------------
    /**
     * @event beforetaskresize
     * Fires before a resize starts, return false to stop the execution
     *
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The task about to be resized
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event taskresizestart
     * Fires when resize starts
     *
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The task about to be resized
     */

    /**
     * @event partialtaskresize
     * Fires during a resize operation and provides information about the current start and end of the resized event
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     *
     * @param {Gnt.model.Task} taskRecord The task being resized
     * @param {Date} startDate The start date of the task
     * @param {Date} endDate The end date of the task
     * @param {Ext.Element} element The element being resized
     */

    /**
     * @event aftertaskresize
     * Fires after a succesful resize operation
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The task that has been resized
     */

    // Task progress bar resizing events start --------------------------
    /**
     * @event beforeprogressbarresize
     * Fires before a progress bar resize starts, return false to stop the execution
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The record about to be have its progress bar resized
     */

    /**
     * @event progressbarresizestart
     * Fires when a progress bar resize starts
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The record about to be have its progress bar resized
     */

    /**
     * @event afterprogressbarresize
     * Fires after a succesful progress bar resize operation
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord record The updated record
     */

    // Dnd events start --------------------------
    /**
     * @event beforetaskdrag
     * Fires before a task drag drop is initiated, return false to cancel it
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The task record that's about to be dragged
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event taskdragstart
     * Fires when a dnd operation starts
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The record being dragged
     */

    /**
     * @event beforetaskdropfinalize
     * Fires before a succesful drop operation is finalized. Return false to finalize the drop at a later time.
     * To finalize the operation, call the 'finalize' method available on the context object. Pass `true` to it to accept drop or false if you want to cancel it
     * NOTE: you should **always** call `finalize` method whether or not drop operation has been canceled
     * @param {Mixed} view The gantt view instance
     * @param {Object} dragContext An object containing 'record', 'start', 'finalize' properties.
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event beforetaskresizefinalize
     * Fires before a succesful resize operation is finalized. Return false to finalize the resize at a later time.
     * To finalize the operation, call the 'finalize' method available on the context object. Pass `true` to it to accept drop or false if you want to cancel it
     * NOTE: you should **always** call `finalize` method whether or not drop operation has been canceled
     * @param {Mixed} view The gantt view instance
     * @param {Object} resizeContext An object containing 'record', 'start', 'end', 'finalize' properties.
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event beforedragcreatefinalize
     * Fires before a succesful create operation is finalized. Return false to finalize creating at a later time.
     * To finalize the operation, call the 'finalize' method available on the context object. Pass `true` to it to accept drop or false if you want to cancel it
     * NOTE: you should **always** call `finalize` method whether or not drop operation has been canceled
     * @param {Mixed} view The gantt view instance
     * @param {Object} createContext An object containing 'record', 'start', 'end', 'finalize' properties.
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event taskdrop
     * Fires after a succesful drag and drop operation
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The dropped record
     */

    /**
     * @event aftertaskdrop
     * Fires after a drag and drop operation, regardless if the drop valid or invalid
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     */

    // Label editors events --------------------------
    /**
     * @event labeledit_beforestartedit
     * Fires before editing is started for a field
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The task record
     */

    /**
     * @event labeledit_beforecomplete
     * Fires after a change has been made to a label field, but before the change is reflected in the underlying field.
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Mixed} value The current field value
     * @param {Mixed} startValue The original field value
     * @param {Gnt.model.Task} taskRecord The affected record
     */

    /**
     * @event labeledit_complete
     * Fires after editing is complete and any changed value has been written to the underlying field.
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Mixed} value The current field value
     * @param {Mixed} startValue The original field value
     * @param {Gnt.model.Task} taskRecord The affected record
     */

    // Dependencies events--------------------------
    /**
     * @event beforedependencydrag
     * Fires before a dependency drag operation starts (from a "task terminal"). Return false to prevent this operation from starting.
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} taskRecord The source task record
     */

    /**
     * @event dependencydragstart
     * Fires when a dependency drag operation starts
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     */

    /**
     * @event dependencydrop
     * Fires when a dependency drag drop operation has completed successfully and a new dependency has been created.
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     * @param {Gnt.model.Task} fromRecord The source task record
     * @param {Gnt.model.Task} toRecord The destination task record
     * @param {Number} type The dependency type
     */

    /**
     * @event afterdependencydragdrop
     * Always fires after a dependency drag-drop operation
     * @param {Gnt.view.Gantt} gantt The gantt view instance
     */

    // Drag create events start --------------------------
    /**
     * @event beforedragcreate
     * Fires before a drag create operation starts, return false to prevent the operation
     * @param {Gnt.view.Gantt} gantt The gantt view
     * @param {Gnt.model.Task} task The task record being updated
     * @param {Date} date The date of the drag start point
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event dragcreatestart
     * Fires before a drag starts, return false to stop the operation
     * @param {Gnt.view.Gantt} view The gantt view
     */

    /**
     * @event dragcreateend
     * Fires after a successful drag-create operation
     * @param {Gnt.view.Gantt} view The gantt view
     * @param {Gnt.model.Task} task The updated task record
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event afterdragcreate
     * Always fires after a drag-create operation
     * @param {Gnt.view.Gantt} view The gantt view
     */
    // Drag create events end --------------------------


    /**
     * @event scheduleclick
     * Fires after a click on the schedule area
     * @param {Gnt.view.Gantt} ganttView The gantt view object
     * @param {Date} clickedDate The clicked date
     * @param {Number} rowIndex The row index
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event scheduledblclick
     * Fires after a doubleclick on the schedule area
     * @param {Gnt.view.Gantt} ganttView The gantt view object
     * @param {Date} clickedDate The clicked date
     * @param {Number} rowIndex The row index
     * @param {Ext.EventObject} e The event object
     */

    /**
     * @event schedulecontextmenu
     * Fires after a context menu click on the schedule area
     * @param {Gnt.view.Gantt} ganttView The gantt view object
     * @param {Date} clickedDate The clicked date
     * @param {Number} rowIndex The row index
     * @param {Ext.EventObject} e The event object
     */

    constructor : function (config) {
        config = config || {};

        if (config) {
            this.externalGetRowClass = config.getRowClass;

            delete config.getRowClass;
        }

        this.callParent(arguments);

        this.on('boxready', this.onMyBoxReady, this);
        this.initTreeFiltering();
    },

    onRender : function () {
        this.configureLabels();
        this.setupGanttEvents();
        this.setupTemplates();
        this.callParent(arguments);
    },

    onMyBoxReady : function() {
        if (Ext.supports.Touch && this.getNodeContainer()) {
            // Need to move the dependency container to the right place in the DOM to get it synced when
            // the virtual scroller is scrolling
            this.getDependencyView().getDependencyCanvas().insertBefore(this.getNodeContainer());
        }
    },

    /**
     * Returns the associated dependency store
     * @return {Gnt.data.TaskStore}
     */
    getDependencyStore : function () {
        return this.dependencyStore;
    },


    configureFeatures : function () {
        if (this.enableProgressBarResize !== false) {
            this.progressBarResizer = Ext.create("Gnt.feature.ProgressBarResize", Ext.apply({
                ganttView: this
            }, this.progressBarResizeConfig || {}));

            this.on({
                beforeprogressbarresize : this.onBeforeTaskProgressBarResize,
                progressbarresizestart  : this.onTaskProgressBarResizeStart,
                afterprogressbarresize  : this.onTaskProgressBarResizeEnd,
                scope                   : this
            });
        }

        if (this.resizeHandles !== 'none') {

            this.taskResizer = Ext.create("Gnt.feature.TaskResize", Ext.apply({
                ganttView           : this,
                validatorFn         : this.resizeValidatorFn || Ext.emptyFn,
                validatorFnScope    : this
            }, this.resizeConfig || {}));

            this.on({
                beforedragcreate    : this.onBeforeDragCreate,
                beforetaskresize    : this.onBeforeTaskResize,
                taskresizestart     : this.onTaskResizeStart,
                aftertaskresize     : this.onTaskResizeEnd,
                scope: this
            });
        }

        if (this.enableTaskDragDrop) {
            // Seems we cannot use the gantt view el for the drag zone, it crashes IE9 in some cases.
            // See https://www.assembla.com/spaces/bryntum/tickets/716

            this.taskDragDrop = Ext.create("Gnt.feature.TaskDragDrop", this.ownerCt.el, Ext.apply({
                gantt               : this,
                validatorFn         : this.dndValidatorFn || Ext.emptyFn,
                validatorFnScope    : this
            }, this.dragDropConfig));

            this.on({
                beforetaskdrag  : this.onBeforeTaskDrag,
                taskdragstart   : this.onDragDropStart,
                aftertaskdrop   : this.onDragDropEnd,
                scope: this
            });
        }

        if (this.enableDragCreation) {
            this.dragCreator = Ext.create("Gnt.feature.DragCreator", Ext.apply({
                ganttView           : this,
                validatorFn         : this.createValidatorFn || Ext.emptyFn,
                validatorFnScope    : this
            }, this.createConfig));
        }
    },

    /**
     * Returns the template for the task. Override this template method to supply your own custom UI template for a certain type of task.
     *
     * @template
     * @protected
     * @param {Gnt.model.Task} task The task to get template for.
     * @param {Boolean} isBaseline True to return the template for a baseline version of the task.
     * @return {Gnt.template.Template} Template for the task.
     */
    getTemplateForTask : function (task, isBaseline) {
        if (task.isMilestone(isBaseline)) {
            return this.milestoneTemplate;
        }
        if (task.isLeaf()) {
            return this.eventTemplate;
        }
        return this.parentEventTemplate;
    },

    refreshParentNode : function (record) {
        var parent = record.parentNode;
        if (parent) {
            this.refreshNode(parent);
        }
    },

    refreshChildNodes : function (record, skipRecord) {
        var me  = this;

        record.cascadeBy(function (child) {
            if (!skipRecord || child !== record) me.refreshNode(child);
        });
    },

    setShowRollupTasks : function (show) {

        this.showRollupTasks = show;

        var parentNodes = {};

        this.taskStore.getRootNode().cascadeBy(function (node) {

            if (node.getRollup()) {
                var parentNode = node.parentNode;

                parentNodes[parentNode.internalId] = parentNode;
            }
        });

        for (var id in parentNodes) {
            var index = this.store.indexOf(parentNodes[id]);

            if (index >= 0) {
                this.refreshNode(index);
            }
        }
    },

    //Todo combine generic parts this function with columnRenderer
    getRollupRenderData : function(parentModel){

        var rollupData = [];

        var ta = this.timeAxis,
            viewStart = ta.getStart(),
            viewEnd = ta.getEnd();

        for (var i = 0; i < parentModel.childNodes.length; i++) {

            var taskModel = parentModel.childNodes[i];

            if (taskModel.getRollup()) {

                var taskStart = taskModel.getStartDate(),
                    taskEnd = taskModel.getEndDate() || Sch.util.Date.add(taskStart, taskModel.getDurationUnit() || Sch.util.Date.DAY, 1);

                if (Sch.util.Date.intersectSpans(taskStart, taskEnd, viewStart, viewEnd)) {

                   var data = {}, isMileStone = taskModel.isMilestone();

                   data.isRollup = true;
                   data.id = 'rollup_' + taskModel.getId();

                    var endsOutsideView = taskEnd > viewEnd,
                        startsInsideView = Sch.util.Date.betweenLesser(taskStart, viewStart, viewEnd),
                        taskStartX = Math.floor(this.getXFromDate(startsInsideView ? taskStart : viewStart)),
                        taskEndX = Math.floor(this.getXFromDate(endsOutsideView ? viewEnd : taskEnd)),
                        itemWidth = isMileStone ? 0 : taskEndX - taskStartX;

                    data.offset = (isMileStone ? (taskEndX || taskStartX) - this.getXOffset(taskModel) : taskStartX);

                    data.tpl = isMileStone ? this.milestoneTemplate : this.eventTemplate;

                    data.cls = taskModel.getCls();
                    data.ctcls = '';

                    data.record = taskModel;

                    if (isMileStone) {
                        data.side = Ext.isIE8m ? Math.round(0.3 * this.getRowHeight()) : Math.round(0.5 * this.getRowHeight());
                        data.ctcls += " sch-gantt-milestone";
                    } else {
                        data.width = Math.max(1, itemWidth);

                        if (endsOutsideView) {
                            data.ctcls += ' sch-event-endsoutside ';
                        }

                        if (!startsInsideView) {
                            data.ctcls += ' sch-event-startsoutside ';
                        }

                        data.ctcls += " sch-gantt-task";
                    }

                    data.cls += " sch-rollup-task";

                    rollupData.push(data);
                }
            }
        }

        return rollupData;
    },

    getLabelRenderData : function (taskModel) {
        var lField = this.leftLabelField,
            rField = this.rightLabelField,
            tField = this.topLabelField,
            bField = this.bottomLabelField,
            renderData = {};

        if (lField) {
            renderData.leftLabel = Ext.util.Format.htmlEncode(lField.renderer.call(lField.scope || this, taskModel.data[lField.dataIndex], taskModel));
        }

        if (rField) {
            renderData.rightLabel = Ext.util.Format.htmlEncode(rField.renderer.call(rField.scope || this, taskModel.data[rField.dataIndex], taskModel));
        }

        if (tField) {
            renderData.topLabel = Ext.util.Format.htmlEncode(tField.renderer.call(tField.scope || this, taskModel.data[tField.dataIndex], taskModel));
        }

        if (bField) {
            renderData.bottomLabel = Ext.util.Format.htmlEncode(bField.renderer.call(bField.scope || this, taskModel.data[bField.dataIndex], taskModel));
        }

        return renderData;
    },

    // private
    columnRenderer    : function (value, meta, taskModel) {
        var taskStart   = taskModel.getStartDate(),
            ta          = this.timeAxis,
            D           = Sch.util.Date,
            tplData     = {},
            cellResult  = '',
            ctcls       = '',
            viewStart   = ta.getStart(),
            viewEnd     = ta.getEnd(),
            isMilestone = taskModel.isMilestone(),
            isLeaf      = taskModel.isLeaf(),
            isProject   = taskModel.isProject,
            isReadOnly  = taskModel.isReadOnly(),
            labelsRenderDataPrepared = false,
            userData, startsInsideView, endsOutsideView;

        if (taskStart) {
            var taskEnd         = taskModel.getEndDate() || D.add(taskStart, taskModel.getDurationUnit() || D.DAY, 1),
                tick            = ta.getAt(0),
                // milliseconds per pixel ratio
                msPerPx         = (tick.getEndDate() - tick.getStartDate()) / this.timeAxisViewModel.getTickWidth(),
                timeDelta       = msPerPx * this.outsideLabelsGatherWidth,
                // if task belongs to the visible time span
                doRender        = D.intersectSpans(taskStart, taskEnd, viewStart, viewEnd),
                renderBuffer    = this.outsideLabelsGatherWidth > 0,
                // if task belongs to the buffered zone before/after visible time span
                renderAfter     = renderBuffer && D.intersectSpans(taskStart, taskEnd, viewEnd, new Date(viewEnd.getTime() + timeDelta)),
                renderBefore    = renderBuffer && D.intersectSpans(taskStart, taskEnd, new Date(viewStart.getTime() - timeDelta), viewStart);

            // if task belongs to the visible time span
            // or belongs to the buffered zone before/after visible time span
            if (doRender || renderAfter || renderBefore) {
                endsOutsideView     = taskEnd > viewEnd;
                startsInsideView    = D.betweenLesser(taskStart, viewStart, viewEnd);

                var taskStartX, taskEndX, itemWidth;

                // regular case ..task intersects visible time span
                if (doRender) {
                    taskStartX  = Math.floor(this.getXFromDate(startsInsideView ? taskStart : viewStart));
                    taskEndX    = Math.floor(this.getXFromDate(endsOutsideView ? viewEnd : taskEnd));
                    itemWidth   = isMilestone ? 0 : taskEndX - taskStartX;
                // task belongs to the buffered zone before/after visible time span
                } else {
                    startsInsideView = true;
                    itemWidth = 0;

                    if (renderAfter) {
                        taskStartX  = Math.floor(this.getXFromDate(viewEnd) + (taskStart - viewEnd) / msPerPx);
                    } else {
                        taskStartX  = Math.floor(this.getXFromDate(viewStart) - (viewStart - taskEnd) / msPerPx);
                    }
                }

                var taskOffset = isMilestone ? (taskEndX || taskStartX) - this.getXOffset(taskModel) : taskStartX;

                // if task is partially hidden progress bar should be rendered accordingly
                // eg. task is halfway done and rendered only half of the task
                // progress bar in this case should be hidden (width is 0)
                var percentDone = Math.min(taskModel.getPercentDone() || 0, 100) / 100,
                    percentDoneAtDate,
                    percentDoneX,
                    progressBarWidth;

                var parts   = taskModel.getSegments(),
                    segments;

                // if task is split
                if (parts) {
                    var percentDoneDuration = 0,
                        partsNumber         = parts.length,
                        i, part;

                    // since task is fragmented we cannot use just: (taskEnd - taskStart) * percentDone
                    // we have to get sum of all parts instead
                    for (i = 0; i < partsNumber; i++) {
                        part                = parts[i];
                        percentDoneDuration += (part.getEndDate() - part.getStartDate()) * percentDone;
                    }

                    segments    = [];

                    var partStartX, partEndX, partStartDate, partEndDate;

                    for (i = 0; i < partsNumber; i++) {

                        part            = parts[i];

                        var segment     = {},
                            segmentCls  = part.getCls() || '';

                        partEndDate     = part.getEndDate() || taskModel.getStartDate();
                        partStartDate   = part.getStartDate();

                        // if this segment starts in the visible area
                        if (D.betweenLesser(partStartDate, viewStart, viewEnd)) {
                            partStartX      = Math.floor(this.getXFromDate( partStartDate ));

                            // if it ends in visible area as well
                            if (D.betweenLesser(partEndDate, viewStart, viewEnd)) {
                                partEndX    = Math.floor(this.getXFromDate( partEndDate ));
                            } else {
                                partEndX    = Math.floor(this.getXFromDate( viewEnd ));
                            }

                        // if its start is invisible
                        } else {
                            partStartX  = Math.floor(this.getXFromDate( viewStart ));

                            // if end is visible
                            if (D.betweenLesser(partEndDate, viewStart, viewEnd)) {
                                partEndX    = Math.floor(this.getXFromDate( partEndDate ));

                            // if both ends are invisible lets move them outside of visible area
                            } else if (partStartDate > viewEnd && partEndDate > viewEnd) {
                                partStartX  = partEndX = Math.floor(this.getXFromDate( viewEnd )) + 100;
                            } else if (partStartDate < viewStart && partEndDate < viewStart) {
                                partStartX  = partEndX = Math.floor(this.getXFromDate( viewStart )) - 100;

                            // if segment start before view start and ends after view end
                            } else {
                                partEndX    = Math.floor(this.getXFromDate( viewEnd ));
                            }
                        }


                        segment.left    = partStartX - taskStartX;
                        segment.width   = partEndX - partStartX;

                        if (!percentDoneAtDate) {

                            percentDoneDuration     -= (partEndDate - partStartDate);

                            if (percentDoneDuration <= 0) {

                                percentDoneAtDate   = D.add(partEndDate, D.MILLI, percentDoneDuration);

                                // mark part that has progress bar slider
                                segmentCls          += ' sch-segment-in-progress';

                                percentDoneX        = Math.floor(this.getXFromDate(percentDoneAtDate));

                                // get progress bar size for this part
                                segment.progressBarWidth    = Math.min(Math.abs(percentDoneX - partStartX), segment.width);

                            // all parts before the time span that has "percentDoneAtDate" have 100% percent done
                            } else {
                                segment.progressBarWidth    = part.width;
                            }

                        // all parts after the time span that has "percentDoneAtDate" have zero percent done
                        } else {
                            segment.progressBarWidth        = 0;
                        }

                        segment.percentDone   = percentDone * 100;

                        Ext.apply(segment, part.data);

                        segment.cls             = segmentCls;
                        segment.SegmentIndex    = i;

                        segments.push(segment);
                    }

                    segments[0].cls                 += ' sch-gantt-task-segment-first';
                    segments[partsNumber - 1].cls   += ' sch-gantt-task-segment-last';

                // if task is NOT split
                } else {

                    // picks date between task start and end according to percentDone value
                    percentDoneAtDate = new Date((taskEnd - taskStart) * percentDone + taskStart.getTime());

                    if (percentDoneAtDate < viewStart) {
                        percentDoneAtDate = viewStart;
                    } else if (percentDoneAtDate > viewEnd) {
                        percentDoneAtDate = viewEnd;
                    }

                }

                percentDoneX = Math.floor(this.getXFromDate(percentDoneAtDate));

                // what if rtl?
                // in case task is rendered outside of view and has width 0, we should also set progress bar
                // width to 0 or progress bar will be visible as a 1px width vertical lines
                progressBarWidth = Math.min(Math.abs(percentDoneX - taskStartX), itemWidth);

                // Data provided to the Task XTemplate is composed in these steps
                //
                // 1. Get the default data from the Task Model
                // 2. Apply internal rendering properties: id, sizing, position etc
                // 3. Allow user to add extra properties at runtime using the eventRenderer template method
                tplData = Ext.apply({}, {
                    // Core properties
                    id               : taskModel.internalId + '-x-x',
                    offset           : taskOffset,
                    width            : Math.max(1, itemWidth),
                    ctcls            : '',
                    cls              : '',
                    print            : this._print,
                    record           : taskModel,
                    percentDone      : percentDone * 100,
                    progressBarWidth : Math.max(0, progressBarWidth - 2*this.eventBorderWidth),
                    segments         : segments
                }, taskModel.data);

                // Get data from user "renderer"
                userData = this.eventRenderer.call(this.eventRendererScope || this, taskModel, tplData, taskModel.store) || {};

                // Labels

                Ext.apply(tplData, this.getLabelRenderData(taskModel));

                labelsRenderDataPrepared = true;

                Ext.apply(tplData, userData);

                var dataCls = ' sch-event-resizable-' + taskModel.getResizable();

                if (isMilestone) {
                    tplData.side = Math.round((this.enableBaseline ? 0.4 : 0.5) * this.getRowHeight());
                    ctcls += " sch-gantt-milestone";
                } else {
                    tplData.width = Math.max(1, itemWidth);

                    if (endsOutsideView) {
                        ctcls += ' sch-event-endsoutside ';
                    }

                    if (!startsInsideView) {
                        ctcls += ' sch-event-startsoutside ';
                    }

                    if (isLeaf) {
                        ctcls += " sch-gantt-task";
                    } else {
                        ctcls += " sch-gantt-parent-task";
                    }

                    if (isReadOnly) {
                        ctcls += " sch-gantt-task-readonly";
                    }
                }

                if (isProject) {
                    ctcls += " sch-gantt-project-task";
                }

                if (taskModel.dirty)                    dataCls += ' sch-dirty ';
                if (taskModel.isDraggable() === false)  dataCls += ' sch-event-fixed ';

                dataCls += taskModel.isSegmented() ? ' sch-event-segmented ' :  ' sch-event-notsegmented ';

                tplData.cls = (tplData.cls || '') + (taskModel.getCls() || '') + dataCls;
                tplData.ctcls += ' ' + ctcls;

                if (this.showRollupTasks) {

                    var rollupData = this.getRollupRenderData(taskModel);

                    if (rollupData.length > 0) {
                        cellResult += this.rollupTemplate.apply(rollupData);
                    }
                }

                cellResult += this.getTemplateForTask(taskModel).apply(tplData);
            }
        }

        // if baselines enabled
        if (this.enableBaseline) {

            // userData might be not initialized if we do not render the task bar (unscheduled or out of visible span)
            if (!userData) {
                userData    = this.eventRenderer.call(this, taskModel, tplData, taskModel.store) || {};
            }

            // render baseline bar
            cellResult += this.baselineRenderer(taskModel, userData, viewStart, viewEnd, labelsRenderDataPrepared);
        }

        return cellResult;
    },


    baselineRenderer : function (taskModel, userData, viewStart, viewEnd, labelsRenderDataPrepared) {
        var D                   = Sch.util.Date,
            taskBaselineStart   = taskModel.getBaselineStartDate(),
            taskBaselineEnd     = taskModel.getBaselineEndDate();

        if (taskBaselineStart && taskBaselineEnd && D.intersectSpans(taskBaselineStart, taskBaselineEnd, viewStart, viewEnd)) {
            var endsOutsideView             = taskBaselineEnd > viewEnd;
            var startsInsideView            = D.betweenLesser(taskBaselineStart, viewStart, viewEnd);

            var isBaselineMilestone     = taskModel.isBaselineMilestone(),
                baseStartX              = Math.floor(this.getXFromDate(startsInsideView ? taskBaselineStart : viewStart)),
                baseEndX                = Math.floor(this.getXFromDate(endsOutsideView ? viewEnd : taskBaselineEnd)),
                baseWidth               = Math.max(1, isBaselineMilestone ? 0 : baseEndX - baseStartX),
                baseTpl                 = this.getTemplateForTask(taskModel, true),
                data                    = {
                    progressBarStyle : userData.baseProgressBarStyle || '',
                    // Putting 'base-' as suffix ('-base') conflicts with task element id creating rules where
                    // task element id is [commonprefix]-(task.internalId)-(resource.internalId)-(partnum)
                    id               : 'base-' + taskModel.internalId,
                    // TODO this should use same rendering as the regular task
                    progressBarWidth : Math.min(100, taskModel.getBaselinePercentDone()) * baseWidth / 100,
                    percentDone      : taskModel.getBaselinePercentDone(),
                    offset           : isBaselineMilestone ? (baseEndX || baseStartX) - this.getXOffset(taskModel, true) : baseStartX,
                    print            : this._print,
                    width            : Math.max(1, baseWidth),
                    baseline         : true
                };

            var ctcls                   = '';

            if (isBaselineMilestone) {
                data.side               = Math.round(0.40 * this.getRowHeight());
                ctcls                   = "sch-gantt-milestone-baseline sch-gantt-baseline-item";
            } else if (taskModel.isLeaf()) {
                ctcls                   = "sch-gantt-task-baseline sch-gantt-baseline-item";
            } else {
                ctcls                   = "sch-gantt-parenttask-baseline sch-gantt-baseline-item";
            }

            if (endsOutsideView) {
                ctcls                   += ' sch-event-endsoutside ';
            }

            if (!startsInsideView) {
                ctcls                   += ' sch-event-startsoutside ';
            }

            // HACK, a bit inconsistent. 'basecls' should probably end up on the task el instead of the wrapper.
            data.ctcls                  = ctcls + ' ' + (userData.basecls || '');

            if (!labelsRenderDataPrepared) {
                Ext.apply(data, this.getLabelRenderData(taskModel));
            }

            return baseTpl.apply(data);
        }

        return '';
    },


    setupTemplates : function () {

        var tplCfg = {
            leftLabel                : this.leftLabelField,
            rightLabel               : this.rightLabelField,
            topLabel                 : this.topLabelField,
            bottomLabel              : this.bottomLabelField,
            prefix                   : this.eventPrefix,
            resizeHandles            : this.resizeHandles,
            enableDependencyDragDrop : this.enableDependencyDragDrop !== false,
            allowParentTaskDependencies : this.allowParentTaskDependencies !== false,
            enableProgressBarResize  : this.enableProgressBarResize,
            rtl                      : this.rtl
        };

        var config;

        if (!this.eventTemplate) {
            config = this.taskBodyTemplate ? Ext.apply({ innerTpl : this.taskBodyTemplate }, tplCfg) : tplCfg;
            this.eventTemplate = Ext.create("Gnt.template.Task", config);
        }

        if (!this.parentEventTemplate) {
            config = this.parentTaskBodyTemplate ? Ext.apply({ innerTpl : this.parentTaskBodyTemplate }, tplCfg) : tplCfg;
            this.parentEventTemplate = Ext.create("Gnt.template.ParentTask", config);
        }

        if (!this.milestoneTemplate) {
            config = this.milestoneBodyTemplate ? Ext.apply({ innerTpl : this.milestoneBodyTemplate }, tplCfg) : tplCfg;
            this.milestoneTemplate = Ext.create("Gnt.template.Milestone", config);
        }

        if (!this.rollupTemplate) {
            this.rollupTemplate = Ext.create("Gnt.template.RollupTask", tplCfg);
        }

    },

    /**
     * Wrapper function returning the dependency manager instance
     * @return {Gnt.view.Dependency} dependencyManager The dependency manager instance
     */
    getDependencyView : function () {
        return this.dependencyView;
    },


    /**
     * Returns the associated task store
     * @return {Gnt.data.TaskStore}
     */
    getTaskStore     : function () {
        return this.taskStore;
    },

    // private
    initDependencies : function () {

        if (this.dependencyStore) {
            var me = this,
                dv = Ext.create("Gnt.view.Dependency", Ext.apply({
                    containerEl              : me.el,
                    ganttView                : me,
                    enableDependencyDragDrop : me.enableDependencyDragDrop,
                    allowParentTaskDependencies : me.allowParentTaskDependencies,
                    store                    : me.dependencyStore,
                    rtl                      : me.rtl
                }, this.dependencyViewConfig));

            dv.on({
                beforednd     : me.onBeforeDependencyDrag,
                dndstart      : me.onDependencyDragStart,
                drop          : me.onDependencyDrop,
                afterdnd      : me.onAfterDependencyDragDrop,
                scope         : me
            });

            me.dependencyView = dv;

            me.relayEvents(dv, [
            /**
             * @event dependencyclick
             * Fires after clicking on a dependency line/arrow
             * @param {Gnt.view.Dependency} view The dependency view instance
             * @param {Gnt.model.Dependency} record The dependency record
             * @param {Ext.EventObject} event The event object
             * @param {HTMLElement} target The target of this event
             */
                'dependencyclick',

            /**
             * @event dependencycontextmenu
             * Fires after right clicking on a dependency line/arrow
             * @param {Gnt.view.Dependency} view The dependency view instance
             * @param {Gnt.model.Dependency} record The dependency record
             * @param {Ext.EventObject} event The event object
             * @param {HTMLElement} target The target of this event
             */
                'dependencycontextmenu',

            /**
             * @event dependencydblclick
             * Fires after double clicking on a dependency line/arrow
             * @param {Gnt.view.Dependency} view The dependency view instance
             * @param {Gnt.model.Dependency} record The dependency record
             * @param {Ext.EventObject} event The event object
             * @param {HTMLElement} target The target of this event
             */
                'dependencydblclick'
            ]);
        }
    },

    // private
    setupGanttEvents : function () {
        var taskStore = this.taskStore;

        if (this.toggleParentTasksOnClick) {
            this.on({
                taskclick : function (view, model) {

                    if (!model.isLeaf() && (!taskStore.isTreeFiltered() || taskStore.allowExpandCollapseWhileFiltered)) {
                        var me = this;

                        // Since row is being repainted in the DOM, no native 'dblclick' event will be fired
                        // We need to detect this case and fake it
                        var dblClickHandler = function() {
                            this.fireEvent.apply(this, ['taskdblclick'].concat(Array.prototype.slice.apply(arguments)));
                        };

                        this.on('taskclick', dblClickHandler);

                        // Remove listener after 300ms
                        setTimeout(function() {
                            me.un('taskclick', dblClickHandler);
                        }, 300);

                        model.isExpanded() ? model.collapse() : model.expand();
                    }
                }
            });
        }
    },

    // private
    configureLabels  : function () {

        var defaults = {
            renderer  : function (v) {
                return v;
            },
            dataIndex : undefined
        };

        Ext.Array.forEach(['left', 'right', 'top', 'bottom'], function(pos) {

            var field = this[pos+'LabelField'];

            if (field) {
                if (Ext.isString(field)) {
                    field = this[pos + 'LabelField'] = { dataIndex : field };
                }
                Ext.applyIf(field, defaults);

                // Initialize editor (if defined)
                if (field.editor) {
                    field.editor = Ext.create("Gnt.feature.LabelEditor", this, {
                        labelPosition : pos,
                        field         : field.editor,
                        dataIndex     : field.dataIndex
                    });
                }
            }
        }, this);

        this.on('labeledit_beforestartedit', this.onBeforeLabelEdit, this);
    },

    // private
    onBeforeTaskDrag : function (p, record) {
        return !this.readOnly && record.isDraggable() !== false && (this.allowParentTaskMove || record.isLeaf());
    },

    onDragDropStart : function () {
        if (this.tip) {
            // HACK tip disable doesn't work in Ext 5.1
            // http://www.sencha.com/forum/showthread.php?296286-Ext.Tooltip-disable-doesn-t-work-in-5.1&p=1081931#post1081931
            this.tip.on('beforeshow', this.falseReturningFn);
        }
    },

    falseReturningFn : function() { return false; },

    onDragDropEnd : function () {
        if (this.tip) {
            this.tip.un('beforeshow', this.falseReturningFn);
        }
    },

    onTaskProgressBarResizeStart : function () {
        if (this.tip) {
            this.tip.hide();
            this.tip.disable();
        }
    },

    onTaskProgressBarResizeEnd : function () {
        if (this.tip) {
            this.tip.enable();
        }
    },

    onTaskResizeStart : function () {
        if (this.tip) {
            this.tip.hide();
            this.tip.disable();
        }

        // TODO review for Ext 5.1.
        // While resizing a task, we don't want the scroller to interfere
        if (this.scrollManager) {
            this.scrollManager.scroller.setDisabled(true);
        }
    },

    onTaskResizeEnd    : function () {
        if (this.tip) {
            this.tip.enable();
        }

        // TODO review for Ext 5.1.
        // While resizing a task, we don't want the scroller to interfere
        if (this.scrollManager) {
            this.scrollManager.scroller.setDisabled(false);
        }
    },

    // private
    onBeforeDragCreate : function () {
        return !this.readOnly;
    },

    // private
    onBeforeTaskResize : function (view, task) {
        return !this.readOnly && task.getSchedulingMode() !== 'EffortDriven';
    },

    onBeforeTaskProgressBarResize : function () {
        return !this.readOnly;
    },

    onBeforeLabelEdit : function () {
        return !this.readOnly;
    },

    onBeforeEdit : function () {
        return !this.readOnly;
    },

    afterRender : function () {
        this.initDependencies();
        this.callParent(arguments);

        this.el.on('mousemove', this.configureFeatures, this, { single : true });

        Ext.dd.ScrollManager.register(this.el);
    },

    resolveTaskRecord : function (el) {
        var node = this.findItemByChild(el);

        if (node) {
            return this.getRecord(this.findItemByChild(el));
        }
        return null;
    },

    resolveEventRecord : function (el) {
        return this.resolveTaskRecord(el);
    },

    resolveEventRecordFromResourceRow: function (el) {
        return this.resolveTaskRecord(el);
    },

    /**
     * Highlights a task and optionally any dependent tasks. Highlighting will add the `sch-gantt-task-highlighted`
     * class to the task row element.
     *
     * @param {Mixed} task Either a task record or the id of a task
     * @param {Boolean} highlightDependentTasks `true` to highlight the depended tasks. Defaults to `true`
     *
     */
    highlightTask : function (task, highlightDependentTasks) {
        if (!(task instanceof Ext.data.Model)) {
            task = this.taskStore.getModelById(task);
        }

        if (task) {
            task.isHighlighted = true;

            var el = this.getRow(task);
            if (el) {
                Ext.fly(el).addCls('sch-gantt-task-highlighted');
            }

            if (highlightDependentTasks !== false) {
                for (var i = 0, l = task.successors.length; i < l; i++) {
                    var dep     = task.successors[ i ];

                    this.highlightDependency(dep);
                    this.highlightTask(dep.getTargetTask(), highlightDependentTasks);
                }
            }
        }
    },


    /**
     * Un-highlights a task and optionally any dependent tasks.
     *
     * @param {Mixed} task Either a task record or the id of a task
     * @param {Boolean} includeSuccessorTasks `true` to also highlight successor tasks. Defaults to `true`
     *
     */
    unhighlightTask : function (task, includeSuccessorTasks) {
        if (!(task instanceof Ext.data.Model)) {
            task = this.taskStore.getModelById(task);
        }

        if (task) {
            task.isHighlighted = false;

            var el = this.getRow(task);
            if (el) {
                Ext.fly(el).removeCls('sch-gantt-task-highlighted');
            }

            if (includeSuccessorTasks !== false) {
                for (var i = 0, l = task.successors.length; i < l; i++) {
                    var dep     = task.successors[ i ];

                    this.unhighlightDependency(dep);
                    this.unhighlightTask(dep.getTargetTask(), includeSuccessorTasks);
                }
            }
        }
    },


    getRowClass : function (task) {
        var cls = '';

        if (task.isHighlighted) cls = 'sch-gantt-task-highlighted';

        if (this.externalGetRowClass) cls += ' ' + (this.externalGetRowClass.apply(this, arguments) || '');

        return cls;
    },


    // private
    clearSelectedTasksAndDependencies : function () {
        this.getDependencyView().clearSelectedDependencies();
        this.el.select('.sch-gantt-task-highlighted').removeCls('sch-gantt-task-highlighted');

        this.taskStore.getRootNode().cascadeBy(function (task) {
            task.isHighlighted = false;
        });
    },


    /**
     * Returns the critical path(s) that can affect the end date of the project
     * @return {Array} paths An array of arrays (containing task chains)
     */
    getCriticalPaths : function () {
        return this.taskStore.getCriticalPaths();
    },


    /**
     * Highlights the critical path(s) that can affect the end date of the project.
     */
    highlightCriticalPaths : function () {
        // First clear any selected tasks/dependencies
        this.clearSelectedTasksAndDependencies();

        var paths   = this.getCriticalPaths(),
            dm      = this.getDependencyView(),
            t, i, l, depRecord;

        Ext.Array.forEach(paths, function (tasks) {
            for (i = 0, l = tasks.length; i < l; i++) {
                t = tasks[i];
                this.highlightTask(t, false);

                if (i < l - 1) {

                    for (var j = 0, m = t.predecessors.length; j < m; j++) {
                        if (t.predecessors[j].getSourceId() == tasks[i + 1].getId()) {
                            depRecord = t.predecessors[j];
                            break;
                        }
                    }

                    dm.highlightDependency(depRecord);
                }
            }
        }, this);

        this.addCls('sch-gantt-critical-chain');
    },


    /**
     * Removes the highlighting of the critical path(s).
     */
    unhighlightCriticalPaths : function () {
        this.removeCls('sch-gantt-critical-chain');

        this.clearSelectedTasksAndDependencies();
    },


    //private
    getXOffset               : function (task, isBaseline) {
        var offset      = 0;

        if (task.isMilestone(isBaseline)) {
            // For milestones, the offset should be half the square diagonal
            offset      = Math.floor(this.getRowHeight() * Math.sqrt(2) / 4) - 2;
        }

        return offset;
    },

    //private
    onDestroy                : function () {
        if (this.dependencyView) {
            this.dependencyView.destroy();
        }

        if (this.rendered) Ext.dd.ScrollManager.unregister(this.el);

        this.callParent(arguments);
    },

    /**
     * Convenience method wrapping the dependency manager method which highlights the elements representing a particular dependency
     * @param {Mixed} record Either the id of a record or a record in the dependency store
     */
    highlightDependency : function (record) {
        this.dependencyView.highlightDependency(record);
    },

    /**
     * Convenience method wrapping the dependency manager method which unhighlights the elements representing a particular dependency
     * @param {Mixed} depId Either the id of a record or a record in the dependency store
     */
    unhighlightDependency  : function (record) {
        this.dependencyView.unhighlightDependency(record);
    },


    // private
    onBeforeDependencyDrag : function (dm, sourceTask) {
        return this.fireEvent('beforedependencydrag', this, sourceTask);
    },

    // private
    onDependencyDragStart  : function (dm) {
        this.fireEvent('dependencydragstart', this);

        if (this.tip) {
            this.tip.disable();
        }

        this.preventOverCls = true;
    },

    onDependencyDrop          : function (dm, fromId, toId, type) {
        this.fireEvent('dependencydrop', this, this.taskStore.getModelById(fromId), this.taskStore.getModelById(toId), type);
    },

    // private
    onAfterDependencyDragDrop : function () {
        this.fireEvent('afterdependencydragdrop', this);

        // Enable tooltip after drag again
        if (this.tip) {
            this.tip.enable();
        }

        this.preventOverCls = false;
    },

    /**
     * Returns the editor defined for the left task field
     * @return {Gnt.feature.LabelEditor} editor The editor
     */
    getLeftEditor : function () {
        return this.leftLabelField && this.leftLabelField.editor;
    },

    /**
     * Returns the editor defined for the right task field
     * @return {Gnt.feature.LabelEditor} editor The editor
     */
    getRightEditor : function () {
        return this.rightLabelField && this.rightLabelField.editor;
    },

    /**
     * Returns the editor defined for the top task field
     * @return {Gnt.feature.LabelEditor} editor The editor
     */
    getTopEditor : function () {
        return this.topLabelField && this.topLabelField.editor;
    },

    /**
     * Returns the editor defined for the bottom task field
     * @return {Gnt.feature.LabelEditor} editor The editor
     */
    getBottomEditor : function () {
        return this.bottomLabelField && this.bottomLabelField.editor;
    },

    /**
     * Programmatically activates the editor for the left field
     * @param {Gnt.model.Task} record The task record
     */
    editLeftLabel : function (record) {
        var ed = this.getLeftEditor();
        if (ed) {
            ed.edit(record);
        }
    },

    /**
     * Programmatically activates the editor for the right field
     * @param {Gnt.model.Task} record The task record
     */
    editRightLabel : function (record) {
        var ed = this.getRightEditor();
        if (ed) {
            ed.edit(record);
        }
    },

    /**
     * Programmatically activates the editor for the top field
     * @param {Gnt.model.Task} record The task record
     */
    editTopLabel : function (record) {
        var ed = this.getTopEditor();
        if (ed) {
            ed.edit(record);
        }
    },

    /**
     * Programmatically activates the editor for the bottom field
     * @param {Gnt.model.Task} record The task record
     */
    editBottomLabel : function (record) {
        var ed = this.getBottomEditor();
        if (ed) {
            ed.edit(record);
        }
    },

    // deprecated
    getDependenciesForTask : function (record) {
        return record.getAllDependencies();
    },

    // Performance tweak, preventing extra layout cycles
    // @OVERRIDE
    //onAdd                          : function () {
    //    Ext.suspendLayouts();
    //    this.callParent(arguments);
    //    Ext.resumeLayouts();
    //},

    // Performance tweak, preventing extra layout cycles
    // @OVERRIDE
    //onRemove                       : function () {
    //    Ext.suspendLayouts();
    //    this.callParent(arguments);
    //    Ext.resumeLayouts();
    //},

    // @OVERRIDE
    // Preventing extra reflows due to the expensive re-layout performed by the superclass
    onUpdate                       : function (store, record, operation) {
        //Ext.suspendLayouts();
        this.callParent(arguments);
        //Ext.resumeLayouts();

        if (operation == Ext.data.Model.EDIT) {
            var prev = record.previous;

            if (prev) {
                // The code below will handle the redraw when user does "setRollup" on some task
                // However generally the parent tasks are refreshed at the end of the cascading in the `onAfterCascade` method
                // of the Gnt.panel.Gantt
                if (record.rollupField in prev || record.getRollup()) {
                    this.refreshParentNode(record);
                }

                // Refresh the project tasks when its readOnly status changes
                if (record.isProject && record.readOnlyField in prev) {
                    this.refreshChildNodes(record, true);
                }
            }
        }
    },


    handleScheduleEvent : function (e) {
        var t = e.getTarget('.' + this.timeCellCls, 3);

        if (t) {
            var rowNode = this.findRowByChild(t);

            if (e.type.indexOf('pinch') >= 0) {
                    this.fireEvent('schedule' + e.type, this, e);
            } else {
                this.fireEvent('schedule' + e.type, this, this.getDateFromDomEvent(e, 'floor'), this.indexOf(rowNode), e);
            }
        }
    },


    /**
     *  Scrolls a task record into the viewport.
     *  This method will also expand all relevant parent nodes to locate the event.
     *
     *  @param {Gnt.model.Task} taskRec, the task record to scroll into view
     *  @param {Boolean/Object} highlight, either `true/false` or a highlight config object used to highlight the element after scrolling it into view
     *  @param {Boolean/Object} animate, either `true/false` or an animation config object used to scroll the element
     */
    scrollEventIntoView : function (taskRec, highlight, animate, callback, scope) {
        scope = scope || this;

        var me = this;
        var taskStore = this.taskStore;

        var basicScroll = function (el, scrollHorizontally) {

            // HACK
            // After a time axis change, the header is resized and Ext JS TablePanel reacts to the size change.
            // Ext JS reacts after a short delay, so we cancel this task to prevent Ext from messing up the scroll sync
            me.up('panel').scrollTask.cancel();

            me.scrollElementIntoView(el, scrollHorizontally, animate);

            if (highlight) {
                if (typeof highlight === "boolean") {
                    el.highlight();
                } else {
                    el.highlight(null, highlight);
                }
            }

            // XXX callback will be called too early, need to wait for scroll & highlight to complete
            callback && callback.call(scope);
        };

        // Make sure the resource is expanded all the way up first.
        if (!taskRec.isVisible()) {
            taskRec.bubble(function (node) {
                node.expand();
            });
        }

        var targetEl;

        var startDate = taskRec.getStartDate();
        var endDate = taskRec.getEndDate();
        var isScheduled = Boolean(startDate && endDate);

        if (isScheduled) {
            var timeAxis = this.timeAxis;

            // If task is not in the currently viewed time span, change time span
            if (!timeAxis.dateInAxis(startDate) || !timeAxis.dateInAxis(endDate)) {
                var range = timeAxis.getEnd() - timeAxis.getStart();

                timeAxis.setTimeSpan(new Date(startDate.getTime() - range / 2), new Date(endDate.getTime() + range / 2));
            }
            targetEl = this.getElementFromEventRecord(taskRec);
        } else {
            // No date information in the task, scroll to row element instead
            targetEl = this.getNode(taskRec);

            if (targetEl) {
                targetEl = Ext.fly(targetEl).down(this.getCellSelector());
            }
        }

        if (targetEl) {
            basicScroll(targetEl, isScheduled);
        } else {
            if (this.bufferedRenderer) {

                Ext.Function.defer(function () {
                    me.bufferedRenderer.scrollTo(taskStore.getIndexInTotalDataset(taskRec), false, function () {
                        // el should be present now
                        var targetEl = me.getElementFromEventRecord(taskRec);

                        if (targetEl) {
                            basicScroll(targetEl, true);
                        } else {
                            callback && callback.call(scope);
                        }
                    });

                }, 10);
            }
        }
    },

    setRowHeight : function (height) {
        this.getDependencyView().setRowHeight(height, true);

        this.callParent(arguments);
    }
});

/**

 @class Gnt.view.ResourceHistogram
 @extends Sch.view.TimelineGridView

 A view of the resource histogram panel. Use the {@link Gnt.panel.ResourceHistogram#getSchedulingView} method to get its instance from gantt panel.

 */
 Ext.define('Gnt.view.ResourceHistogram', {
    extend                  : 'Sch.view.TimelineGridView',

    alias                   : 'widget.resourcehistogramview',

    requires    : [
        'Ext.XTemplate',
        'Ext.util.Format',
        'Sch.util.Date'
    ],

    _cmpCls                 : 'gnt-resourcehistogramview',

    scheduledEventName      : 'bar',

    // private
    eventSelector           : '.gnt-resourcehistogram-bar',

    barTpl                  : null,

    barRenderer             : Ext.emptyFn,
    limitLineRenderer       : Ext.emptyFn,
    lineRenderer            : Ext.emptyFn,

    lineTpl                 : null,
    limitLineTpl            : null,

     // private cls properties
    _barCls                 : 'gnt-resourcehistogram-bar',
    _limitLineCls           : 'gnt-resourcehistogram-limitline',
    _limitLineVerticalCls   : 'gnt-resourcehistogram-limitline-vertical',
    _lineCls                : 'gnt-resourcehistogram-line',

    barCls                  : null,
    limitLineCls            : null,
    lineCls                 : null,


    limitLineWidth          : 1,

    rowHeight               : 60,

    showLimitLinesThreshold : 10,
    showVerticalLimitLines  : true,

    labelMode               : false,

    labelPercentFormat      : '0',

    labelUnitsFormat        : '0.0',
    histogram               : null,
    unitHeight              : null,
    availableRowHeight      : null,

     /**
      * @event barclick
      * Fires when a histogram bar is clicked
      *
      * @param {Gnt.view.ResourceHistogram} view The histogram panel view.
      * @param {Object} context Object containing a description of the clicked bar.
      * @param {Gnt.model.Resource} context.resource The resource record.
      * @param {Date} context.startDate Start date of corresponding period.
      * @param {Date} context.endDate End date of corresponding period.
      * @param {Number} context.allocationMS Resource allocation time in milliseconds.
      * @param {Number} context.totalAllocation Resource allocation (in percents).
      * @param {Gnt.model.Assignment[]} context.assignments List of resource assignments for the corresponding period.
      * @param {Ext.EventObject} e The event object
      */

     /**
      * @event bardblclick
      * Fires when a histogram bar is double clicked
      *
      * @param {Gnt.view.ResourceHistogram} view The histogram panel view.
      * @param {Object} context Object containing description of clicked bar.
      * @param {Gnt.model.Resource} context.resource The resource record.
      * @param {Date} context.startDate Start date of corresponding period.
      * @param {Date} context.endDate End date of corresponding period.
      * @param {Number} context.allocationMS Resource allocation time in milliseconds.
      * @param {Number} context.totalAllocation Resource allocation (in percents).
      * @param {Gnt.model.Assignment[]} context.assignments List of resource assignments for the corresponding period.
      * @param {Ext.EventObject} e The event object
      */

     /**
      * @event barcontextmenu
      * Fires when contextmenu is activated on a histogram bar
      *
      * @param {Gnt.view.ResourceHistogram} view The histogram panel view.
      * @param {Object} context Object containing description of clicked bar.
      * @param {Gnt.model.Resource} context.resource The resource record.
      * @param {Date} context.startDate Start date of corresponding period.
      * @param {Date} context.endDate End date of corresponding period.
      * @param {Number} context.allocationMS Resource allocation time in milliseconds.
      * @param {Number} context.totalAllocation Resource allocation (in percents).
      * @param {Gnt.model.Assignment[]} context.assignments List of resource assignments for the corresponding period.
      * @param {Ext.EventObject} e The event object
      */

    initComponent : function (config) {

        if (this.barCls) {
            this.eventSelector = '.' + this.barCls;
        }

        // bar template
        if (!this.barTpl) {
            this.barTpl = new Ext.XTemplate(
                '<tpl for=".">',
                    '<div id="{id}" class="gnt-resourcehistogram-bar '+ (this.barCls || '') +' {cls}" gnt-bar-index="{index}" style="left:{left}px;top:{top}px;height:{height}px;width:{width}px">',
                        '<tpl if="text !== \'\'">',
                            '<span class="gnt-resourcehistogram-bar-text" style="bottom:' + Math.floor(this.rowHeight/2) + 'px">{text}</span>',
                        '</tpl>',
                    '</div>',
                '</tpl>'
            );
        }

        // scale line template
        if (!this.lineTpl) {
            this.lineTpl = new Ext.XTemplate(
                '<tpl for=".">',
                    '<div class="gnt-resourcehistogram-line '+ (this.lineCls || '') +' {cls}" style="top:{top}px;"></div>',
                '</tpl>'
            );
        }

        // limit line template
        if (!this.limitLineTpl) {
            this.limitLineTpl = new Ext.XTemplate(
                '<tpl for=".">',
                    '<div class="gnt-resourcehistogram-limitline '+ (this.limitLineCls || '') +' {cls}" style="left:{left}px;top:{top}px;width:{width}px;height:{height}px"></div>',
                '</tpl>'
            );
        }

        this.callParent(arguments);

        // calculate pixels per scale step
        this.unitHeight = this.getAvailableRowHeight() / (this.scaleMax - this.scaleMin + this.scaleStep);
    },

    // histogram scale lines renderer
    renderLines : function () {
        return this.lineTpl.apply(this.prepareLines());
    },

    // prepare data for scale lines renderer
    prepareLines : function () {
        var scaleMin    = this.scaleMin,
            scaleMax    = this.scaleMax,
            value       = scaleMin,
            labelStep   = this.scaleLabelStep,
            rowHeight   = this.getAvailableRowHeight(),
            tplData     = [],
            lineCls     = this._lineCls,
            cls         = lineCls + 'min';

        var line, userData;

        // if scale point array specified
        if (this.scalePoints) {

            for (var i = 0, l = this.scalePoints.length; i < l; i++) {
                var point   = this.scalePoints[i];

                line        = {
                    value   : point.value,
                    top     : point.top || Math.round(rowHeight - this.unitHeight * (point.value - scaleMin)),
                    cls     : point.cls + (point.label ? ' '+lineCls+'-label' : '') + (i === 0 ? ' '+lineCls+'-min' : (i == l ? ' '+lineCls+'-max' : ''))
                };

                // call user provided function to modify the data
                userData    = this.lineRenderer(tplData, line);

                tplData.push(Ext.apply(line, userData));
            }

        // otherwise we have to calculate line top-coordinates
        } else {
            // loop from scaleMin up to scaleMax
            while (value <= scaleMax) {

                line        = {
                    value   : value,
                    top     : Math.round(rowHeight - this.unitHeight * (value - scaleMin)),
                    cls     : cls
                };

                // call user provided function to modify the data
                userData    = this.lineRenderer(tplData, line);

                tplData.push(Ext.apply(line, userData));

                // increment by scale step size
                value   += this.scaleStep;

                cls     = value % labelStep ? '' : lineCls+'-label';

                if (value == scaleMax) cls += ' '+lineCls+'-max';
            }

            // ensure that we have scaleMax as last tplData element (we can step over it for some stepSize values)
            if (tplData.length && tplData[tplData.length - 1].value !== scaleMax) {
                line        = {
                    value   : scaleMax,
                    top     : Math.round(rowHeight - this.unitHeight * (scaleMax - scaleMin)),
                    cls     : (scaleMax % labelStep ? '' : lineCls+'-label') + ' '+lineCls+'-max'
                };

                // call user provided function to modify the data
                userData    = this.lineRenderer(tplData, line);

                tplData.push(Ext.apply(line, userData));
            }
        }

        return tplData;
    },

    renderLimitLines : function (data) {
        return this.limitLineTpl.apply(this.prepareLimitLines(data));
    },

    getLimitLinesConnector : function (from, to) {
        return {
            left    : from.right,
            width   : 1,
            top     : Math.min(from.top, to.top),
            height  : Math.abs(from.top - to.top) + this.limitLineWidth,
            cls     : this._limitLineCls + '-top' + ' ' + this._limitLineVerticalCls
        };
    },

    pushLimitLine : function (tplData, line, toMerge) {
        var prev    = tplData[tplData.length - 1];

        // if we had cached lines too small to display
        if (toMerge) {
            // let's lengthen the previous line (if any) right coordinate
            if (prev) {
                prev.width  = toMerge.right - prev.left;
                prev.right  = toMerge.right;
            } else {
                line.left   = toMerge.left;
                line.width  = line.right - toMerge.left;
            }
        }

        if (prev && this.showVerticalLimitLines) {
            // if previous line is invisible get rid of it
            if (!prev.visible) tplData.pop();

            tplData.push(this.getLimitLinesConnector(prev, line));
        }

        // call user provided function to modify the data
        var userData    = this.limitLineRenderer(tplData, line, toMerge);

        tplData.push(Ext.apply(line, userData));
    },

    prepareLimitLines : function (data) {
        if (!data) return;

        var tplData     = [],
            scaleMin    = this.scaleMin,
            scaleMax    = this.scaleMax,
            scaleStep   = this.scaleStep,
            scaleUnit   = this.scaleUnit,
            rowHeight   = this.getAvailableRowHeight(),
            lineCls     = this._limitLineCls,
            maxWidth    = this.getTimeAxisViewModel() && this.getTimeAxisViewModel().getTotalWidth(),
            toMerge,
            line,
            prev;

        for (var i = 0, l = data.length; i < l; i++) {

            // get allocation in scale units
            var allocation  = this.calendar.convertMSDurationToUnit(data[i].allocationMS, scaleUnit);

            var visible     = true;
            // if the line doesn't fit into row height
            if (allocation * this.unitHeight > rowHeight) {
                allocation  = scaleMax + scaleStep;
                visible     = false;

            } else if (allocation <= 0) {
                allocation  = 0;
                visible     = false;
            }

            var left    = data[i].startDate && this.getXFromDate(data[i].startDate, true) || 0;
            var right   = data[i].endDate && this.getXFromDate(data[i].endDate, true) || maxWidth;

            // interval may start before timeaxis start
            if (left < 0) left = 0;
            if (right < 0) right = maxWidth;

            line        = {
                left    : left,
                width   : right - left,
                right   : right,
                top     : '',
                height  : 0,
                cls     : '',
                visible : visible
            };

            // get top-position based on max possible allocation
            line.top    = Math.round(rowHeight - (allocation - scaleMin) * this.unitHeight);

            if (visible) {
                line.cls += ' '+lineCls+'-top';
            }

            prev        = tplData[tplData.length - 1] || toMerge;

            // check if line size is less than threshold
            var small   = line.width <= this.showLimitLinesThreshold;

            // if the line has the same allocation as the previous one
            // or it's a small invisible line -> then we merge it w/ the previous line
            if (prev && (line.top == prev.top || (small && !visible))) {

                prev.width  = right - prev.left;
                prev.right  = right;
                // reset cached line
                line        = null;

                // if we have a pushed line we simply skip small line(s) after it
                if (tplData[tplData.length - 1]) {
                    toMerge = null;
                // if we enlarged "toMerge" line and its width got greater than threshold
                } else if (toMerge.width > this.showLimitLinesThreshold) {
                    this.pushLimitLine(tplData, toMerge);
                    // reset cached line since we just pushed it
                    toMerge = null;
                }

            // if the line is small and visible we'll try to merge it w/ next lines and approximate its top coordinate
            } else if (small && visible) {

                // if the previous line was also too small
                if (toMerge) {
                    var width = toMerge.width + line.width;
                    // merge both lines and approximate average top level
                    toMerge.top     = Math.round(line.top * line.width/width + toMerge.top * toMerge.width/width);
                    toMerge.width   = right - toMerge.left;
                    toMerge.right   = right;
                // remember this line hoping to merge w/ the next line
                } else {
                    toMerge     = line;
                }

                // if merged line width is greater than threshold
                if (toMerge.width > this.showLimitLinesThreshold) {
                    this.pushLimitLine(tplData, toMerge);
                    // reset cached lines since we just pushed them
                    line = toMerge = null;
                }

            // if the current line is large enough to display
            } else {
                this.pushLimitLine(tplData, line, toMerge);
                // reset cached lines since we just pushed them
                line = toMerge = null;
            }

        }

        line && this.pushLimitLine(tplData, line, toMerge);

        // make sure we don't have invisible line in the last item
        prev    = tplData[tplData.length - 1];
        if (prev && !prev.visible) tplData.pop();

        return tplData;
    },

    renderBars : function (data, resourceId) {
        return this.barTpl.apply(this.prepareBars(data, resourceId));
    },

    prepareBars : function (data, resourceId) {
        if (!data) return;

        // loop over periods that we have for the resource
        var tplData     = [],
            rowHeight   = this.getAvailableRowHeight(),
            barCls      = this._barCls,
            scaleUnit       = this.scaleUnit,
            scaleUnitName   = Sch.util.Date.getShortNameOfUnit(scaleUnit),
            scaleMin        = this.scaleMin,
            scaleMax        = this.scaleMax,
            scaleStep       = this.scaleStep,
            scaleMaximum    = scaleMax + scaleStep,
            tplItem,
            allocation;

        for (var i = 0, l = data.length; i < l; i++) {

            // if resource is allocated
            if (data[i].totalAllocation) {

                // get allocation in units (hours by default)
                allocation  = this.calendar.convertMSDurationToUnit(data[i].allocationMS, scaleUnit);

                tplItem     = {
                    id      : resourceId + '-' + i,
                    index   : i,
                    left    : this.getXFromDate(data[i].startDate, true),
                    width   : this.getXFromDate(data[i].endDate, true) - this.getXFromDate(data[i].startDate, true),
                    height  : rowHeight,
                    top     : 0,
                    text    : '',
                    cls     : ''
                };

                // if label has to be shown
                if (this.labelMode) {
                    // what type of label requested
                    switch (this.labelMode) {
                        case 'percent'  :
                            tplItem.text = Ext.util.Format.number(data[i].totalAllocation, this.labelPercentFormat) + '%';
                            break;

                        case 'units'    :
                            tplItem.text = Ext.util.Format.number(allocation,  this.labelUnitsFormat) + scaleUnitName;
                            break;

                        // custom template
                        default         :
                            tplItem.text = this.labelMode.apply({
                                allocation  : allocation,
                                percent     : data[i].totalAllocation
                            });
                    }
                }

                // if the bar fits in row height
                if (allocation <= scaleMaximum) {
                    tplItem.height  = allocation >= scaleMin ? Math.round((allocation - scaleMin) * this.unitHeight) : 0;
                    tplItem.top     = rowHeight - tplItem.height;
                // if bar is higher than row height
                } else {
                    // add class to indicate it
                    tplItem.cls     += ' '+barCls+'-partofbar';
                }

                // overworking (allocation > 100%)
                if (data[i].totalAllocation > 100 || data[i].totalOverAllocationMS > 0) {
                    tplItem.cls     += ' '+barCls+'-overwork';
                }

                // get user provided data
                var userData    = this.barRenderer(resourceId, data[i], tplItem);

                // if CSS classes provided combine them w/ the panel defined ones
                if (userData && userData.cls) {
                    userData.cls    = tplItem.cls + ' ' + userData.cls;
                }

                tplItem = Ext.apply(tplItem, userData);

                tplData.push(tplItem);
            }
        }

        return tplData;
    },


    getAvailableRowHeight : function () {
        if (this.availableRowHeight) return this.availableRowHeight;

        this.availableRowHeight    = this.rowHeight - this.cellTopBorderWidth - this.cellBottomBorderWidth;

        return this.availableRowHeight;
    },

    resolveEventRecord : function (el) {
        var node = this.findItemByChild(el);
        if (node) {
            var resource = this.getRecord(node);
            if (resource) {
                var result = {
                    resource    : resource
                };
                var data    = this.histogram.allocationData[resource.getId()];
                var index   = el.getAttribute('gnt-bar-index');
                var bar     = data.bars[index];
                if (bar) {
                    result.startDate        = bar.startDate;
                    result.endDate          = bar.endDate;
                    result.assignments      = bar.assignments;
                    result.allocationMS     = bar.allocationMS;
                    result.totalAllocation  = bar.totalAllocation;
                }

                return result;
            }
        }
        return null;
    },

    resolveEventRecordFromResourceRow : function (el) {
        return this.resolveEventRecord(el);
    },

    getDataForTooltipTpl : function (record) {
        return record;
    }

});

/**

@class Gnt.column.Scale
@extends Ext.grid.column.Template

A Column used to to display a vertical coordinate axis (numeric scale). This column is used by the {@link Gnt.panel.ResourceHistogram ResourceHistogram} panel.

Usage example:

    var histogram = Ext.create('Gnt.panel.ResourceHistogram', {
        taskStore           : taskStore,
        resourceStore       : resourceStore,
        startDate           : new Date(2010, 0, 11),
        endDate             : new Date(2010, 0, 21),
        renderTo            : Ext.getBody(),
        columns             : [
            {
                flex      : 1,
                dataIndex : 'Name'
            },
            {
                xtype           : 'scalecolumn'
            }
        ]
    });

#Defining the scale

The column supports two configuration modes for the numeric scale. The first one is incremental and the second one is using a fixed set of points.

#Incremental approach

To use this approach you must define the following parameters: {@link #scaleMin}, {@link #scaleMax}, {@link #scaleStep}.
Based on them, the column will build scale points taking the {@link #scaleMin} value as a start value and the {@link #scaleMax} as the last scale point.
Values between {@link #scaleMin} and {@link #scaleMax} will be calculated as:

    valueN = scaleMin + N * scaleStep

Normally this approach is meant to be used for linear scales.

#Fixed set of points

As an option to the earlier approach, you can use the {@link #scalePoints} config. This config can be used to specify an array af scale points.
The array should contain objects describing the scale points, having the following properties:

 - `value`   Scale point value. **This property is required**.
 - `label`   Label for the scale point
 - `cls`     CSS class for corresponding scale point.

For example:

    var scaleColumn = new Gnt.column.Scale({
        scalePoints : [
            {
                value   : 0
            },
            {
                value   : 1,
                label   : 'Day',
                cls     : 'dayend'
            },
            {
                value   : 0.5
            }
        ]
    });

*/
Ext.define('Gnt.column.Scale', {

    extend              : 'Ext.grid.column.Template',

    alias               : 'widget.scalecolumn',

    tpl                 : null,

    sortable            : false,

    /**
     * @cfg {Object[]} scalePoints An array of scale points. Each point should be represented as an object containing the following properties:
     *
     * - `value`   Scale point value **(required)**.
     * - `label`   Label for the scale point
     * - `cls`     CSS class for corresponding scale point.
     */
    scalePoints         : null,

    /**
     * @cfg {Number} scaleStep Defines the interval between two adjacent scale points.
     *
     * **Also,** this value is used as the margin between the top scale line (defined by {@link #scaleMax} option) and the top border of the cell.
     */
    scaleStep           : 2,

    /**
     * @cfg {Number} scaleLabelStep Defines the interval between the scale points with labels.
     * By default the scale values are used for the labels. To use custom labels please use the {@link #scalePoints} config.
     */
    scaleLabelStep      : 4,

    /**
     * @cfg {Number} scaleMin Minimum scale point value.
     */
    scaleMin            : 0,

    /**
     * @cfg {Number} scaleMax Maximum scale point value.
     */
    scaleMax            : 24,

    width               : 40,

    availableHeight     : 48,

    scaleCellCls        : 'gnt-scalecolumn',

    initComponent : function () {

        this.tdCls = (this.tdCls || '') + ' ' + this.scaleCellCls;

        if (!this.tpl) {
            this.tpl = new Ext.XTemplate(
                '<div class="'+this.scaleCellCls+'-wrap" style="height:{scaleHeight}px;">',
                    '<tpl for="scalePoints">',
                        '<tpl if="label !== \'\'">',
                            '<span class="'+this.scaleCellCls+'-label-line {cls}" style="top:{top}px"><span class="'+this.scaleCellCls+'-label">{label}</span></span>',
                        '<tpl else>',
                            '<span class="'+this.scaleCellCls+'-line {cls}" style="top:{top}px"></span>',
                        '</tpl>',
                    '</tpl>',
                '</div>'
            );
        }

        this.setAvailableHeight(this.availableHeight, true);

        this.callParent(arguments);
    },

    setAvailableHeight : function (height, initial) {
        this.availableHeight    = height;

        // if no ready scalePoints array specified
        if (!this.scalePoints) {

            this.scaleStepHeight    = this.availableHeight / (this.scaleMax - this.scaleMin + this.scaleStep);

            // build scale point based on min/max/step size params
            this.scalePoints = this.buildScalePoints();

        // if scale points array provided
        } else {
            if (initial) {
                this.scalePoints.sort(function (a, b) { return a.value > b.value ? 1 : -1; });

                this.scaleMin       = this.scalePoints[0].value;
                this.scaleMax       = this.scalePoints[this.scalePoints.length - 1].value;
                this.scaleStep      = (this.scaleMax - this.scaleMin) / 10;
            }

            this.scaleStepHeight    = this.availableHeight / (this.scaleMax - this.scaleMin + this.scaleStep);

            // let's fill it with calculated 'top' coordinates
            this.updateScalePointsTops();
        }
    },

    defaultRenderer : function (value, meta, record) {
        var data = {
            record      : Ext.apply({}, record.data, record.getAssociatedData()),
            scaleHeight : this.availableHeight,
            scalePoints : this.scalePoints
        };

        return this.tpl.apply(data);
    },

    buildScalePoints : function () {
        var minValue        = this.scaleMin,
            value           = minValue,
            step            = this.scaleStep,
            labelStep       = this.scaleLabelStep,
            stepHeight      = this.scaleStepHeight,
            availableHeight = this.availableHeight,
            scaleCellCls    = this.scaleCellCls,
            // additional css class for scaleMin point
            cls             = scaleCellCls+'-min',
            result          = [];

        // shorthand
        var makePoint   = function (value, label, cls) {
            return {
                top     : Math.round(availableHeight - (value - minValue) * stepHeight),
                value   : value,
                label   : label != 'undefined' ? label : '',
                cls     : cls || ''
            };
        };

        // push scale points starting from scaleMin
        while (value < this.scaleMax) {

            result.push( makePoint(value, value % labelStep || value === minValue ? '' : value, cls) );

            cls = '';

            value += step;
        }

        // push scaleMax point
        result.push( makePoint(this.scaleMax, this.scaleMax, scaleCellCls+'-max') );

        return result;
    },

    updateScalePointsTops : function () {
        var stepHeight      = this.scaleStepHeight,
            availableHeight = this.availableHeight,
            point;

        for (var i = 0, l = this.scalePoints.length; i < l; i++) {
            point       = this.scalePoints[i];
            point.top   = Math.round(availableHeight - point.value * stepHeight);
        }
    }
});

/**
@class Gnt.field.mixin.TaskField

A mixin with common functionality for all fields used to edit {@link Gnt.model.Task} information.

*/
Ext.define('Gnt.field.mixin.TaskField', {
    extend                  : 'Ext.Mixin',

    taskField               : '',
    getTaskValueMethod      : '',
    setTaskValueMethod      : '',

    isTaskField             : true,

    /**
     * @cfg {Gnt.model.Task} task Task being edited. Field will apply all it's value changes directly to this task (if {@link #instantUpdate} is `true`).
     */
    task                    : null,

    /**
     * @cfg {Gnt.data.TaskStore} taskStore Task store should provided if task being edited is not in any task store yet and thus does not have a calendar.
     * In such case we'll retrieve a calendar from the task store (project calendar).
     */
    taskStore               : null,

    /**
     * @cfg {Number} suppressTaskUpdate A number flag, when greater than 0 prevents task updates.
     */
    suppressTaskUpdate      : 0,

    /**
     * @cfg {Boolean} highlightTaskUpdates When set to `true`, field will highlight itself when its value is changed due to changes in some other field.
     * For example when changing the end date of the task, its duration will change as well and will highlight itself.
     */
    highlightTaskUpdates    : true,

    /**
     * @cfg {String} highlightColor A color to use when highlighting the field. See {@link #highlightTaskUpdates} option.
     */
    highlightColor          : '#009900',

    lastHighlight           : 0,

    /**
     * @cfg {Boolean} instantUpdate Set to `false` to prevent automatic applying changes to task on each {@link #setValue} call.
     * To apply changes manually one can use {@link #applyChanges} method.
     */
    instantUpdate           : true,

    mixinConfig             : {

        before  : {
            constructor : 'beforeConstructed',
            destroy     : 'beforeDestroyed'
        },

        after   : {
            constructor : 'afterConstructed'
        }

    },


    beforeConstructed : function () {
        this.setSuppressTaskUpdate(true);
    },


    afterConstructed : function () {
        this.task && this.setTask(this.task);
        this.setSuppressTaskUpdate(false);
    },


    beforeDestroyed : function () {
        this.destroyTaskListener();
    },


    /**
     * Binds task to the field.
     * @param {Gnt.model.Task} task Task to bind.
     */
    setTask : function (task) {
        if (!task) return;

        this.destroyTaskListener();

        this.updateReadOnly(task);

        this.task = task;

        task.on('taskupdated', this.onTaskUpdateProcess, this);

        // we need calendar to be assigned to task or task should be part of taskStore with
        // assigned calendar, if we dont`t have it lets imitate it by binding task to provided taskStore
        if (!task.getCalendar(true) && !task.getTaskStore(true)) {

            task.taskStore = task.getTaskStore(true) || this.taskStore;

            if (!task.taskStore) throw 'Configuration issue: Gnt.data.taskStore instance should be provided.';
            if (!task.getCalendar(true) && !task.taskStore.getCalendar()) throw 'Configuration issue: Gnt.data.Calendar instance should be provided.';
        }

        this.setSuppressTaskUpdate(true);
        this.onSetTask(task);
        this.setSuppressTaskUpdate(false);
    },


    onSetTask : function (task) {
        task = task || this.task;

        this.setValue(this.getTaskValue(task));
    },


    setSuppressTaskUpdate : function (inc) {
        inc ? this.suppressTaskUpdate++ : this.suppressTaskUpdate--;
    },


    getSuppressTaskUpdate : function () {
        return this.suppressTaskUpdate;
    },


    updateReadOnly : function (task) {
        if (!this.disabled && !this.forceReadOnly) {
            if (this.editable === false) {
                // let's take into account Task.isEditable() result
                if (!task.isEditable(task[this.taskField])) {
                    this.setReadOnly(true);
                // when editable is false `readOnly` should be set to `true`
                } else if (this.inputEl) {
                    this.setReadOnly(false);
                    this.inputEl.dom.readOnly = true;
                }

            } else {
                // let's take into account Task.isEditable() result
                this.setReadOnly(!task.isEditable(task[this.taskField]));
            }
        }
    },


    onTaskUpdateProcess : function (task, initiator) {
        if (initiator !== this) {
            var prev    = this.getValue();

            // update field editability
            this.updateReadOnly(task);

            this.setSuppressTaskUpdate(true);
            if (this.onTaskUpdate) {
                this.onTaskUpdate(task, initiator);
            } else {
                this.onSetTask(task);
            }
            this.setSuppressTaskUpdate(false);

            if (this.highlightTaskUpdates) {
                var curr    = this.getValue(),
                    isDate  = Ext.isDate(prev);

                if (isDate && (prev - curr !== 0) || (!isDate && String(prev) !== String(curr))) {
                    this.highlightField();
                }
            }
        }
    },

    highlightField : function (color, options) {
        if (this.rendered && (new Date() - this.lastHighlight > 1000)) {
            this.lastHighlight = new Date();
            this.inputEl.highlight(color || this.highlightColor, options || { attr : 'color' });
        }
    },

    destroyTaskListener : function () {
        if (this.task) {
            this.task.un('taskupdated', this.onTaskUpdateProcess, this);
        }
    },


    callTaskMethod : function (task, method, args) {
        task    = task || this.task;

        return task[method].apply(task, args);
    },


    getTaskValue : function (task) {
        return this.callTaskMethod(task, this.getTaskValueMethod, Ext.Array.slice(arguments, 1));
    },

    setTaskValue : function (task) {
        return this.callTaskMethod(task, this.setTaskValueMethod, Ext.Array.slice(arguments, 1));
    },


    /**
     * This method applies the changes from the field to the bound task or to the task provided as 1st argument.
     * If {@link #instantUpdate} option is enabled this method is called automatically after any change in the field.
     *
     * @param {Gnt.model.Task} [toTask] The task to apply the changes to. If not provided, changes will be applied to the last bound task
     * (with {@link #task} config option or {@link #setTask) method)
     */
    applyChanges : function (toTask) {
        toTask = toTask || this.task;

        this.setTaskValue(toTask, this.getValue());

        toTask.fireEvent('taskupdated', toTask, this);
    }

});

/**
@class Gnt.field.EndDate
@extends Ext.form.field.Date

A specialized field for editing the task end date value. This class inherits from the `Ext.form.field.Date` field
and any of its configuration options can be used. You can find this field used in the {@link Gnt.widget.TaskForm}
and in the {@link Gnt.column.StartDate} classes but you can also use it in your own components.
See "Using field standalone" in the documentation of {@link Gnt.field.StartDate}.

This field must be bound to a {@link Gnt.model.Task task} instance, which is used for date value processing
(calendars, holidays etc).

#Task interaction

By default the field instantly applies all changes to the bound task. This can be turned off with the {@link #instantUpdate} option.

#Using field standalone

Please refer to {@link Gnt.field.StartDate} for details.

* **Note**, that the value displayed in the field can be different from the value in the data model when editing milestones
or when the date does not contain any time information (hours/minutes etc). This is because in our component, an end date represents a distinct point
on the timeaxis. For example: if from a user perspective, a task starts at 2013/01/01 and ends at 2013/01/02 -
this means that the task actually ends at 2013/01/02 23:59:59.9999. In the task model we store
2013/01/03 00:00:00, but in the field we show 2013/01/02. See also {@link #adjustMilestones}.

*/
Ext.define('Gnt.field.EndDate', {

    extend              : 'Ext.form.field.Date',

    requires            : ['Sch.util.Date'],

    mixins              : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],

    alias               : 'widget.enddatefield',

    /**
     * @cfg {Boolean} adjustMilestones When set to `true`, the start/end dates of the milestones will be adjusted -1 day *during rendering and editing*. The task model will still hold the raw unmodified date.
     */
    adjustMilestones    : true,

    /**
     * @cfg {Boolean} keepDuration Pass `true` to keep the duration of the task ("move" the task), `false` to change the duration ("resize" the task).
     */
    keepDuration        : false,

    taskField           : 'endDateField',
    getTaskValueMethod  : 'getEndDate',
    setTaskValueMethod  : 'setEndDate',

    /**
     * @cfg {Boolean} validateStartDate When set to `true`, the field will validate a "startDate <= endDate" condition and will not allow user to save invalid value.
     * Set it to `false` if you use different validation mechanism.
     */
    validateStartDate   : true,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - endBeforeStartText : 'End date is before start date'
     */

    constructor : function (config) {
        config      = config || {};

        if (config.task && !config.value) config.value = this.getTaskValue(config.task);

        this.callParent([ config ]);
    },

    rawToValue : function (rawValue) {
        if (!rawValue) return null;

        return this.visibleToValue(this.parseDate(rawValue));
    },

    valueToRaw : function (value) {
        if (!value) return value;

        return Ext.Date.format(this.valueToVisible(value), this.format);
    },

    valueToVisible : function (value, task) {
        task = task || this.task;

        return task.getDisplayEndDate(this.format, this.adjustMilestones, value, true);
    },

    visibleToValue : function (value) {
        if (value && this.task) {

            if (!Ext.Date.formatContainsHourInfo(this.format) && value - Ext.Date.clearTime(value, true) === 0) {
                // the standard ExtJS date picker will only allow to choose the date, not time
                // we set the time of the selected date to the latest availability hour for that date
                // in case the date has no availbility intervals we use the date itself
                value = this.task.getCalendar().getCalendarDay(value).getAvailabilityEndFor(value) ||
                    Sch.util.Date.add(value, Sch.util.Date.DAY, 1);
            }

        } else {
            value = null;
        }

        return value;
    },

    // @OVERRIDE
    getErrors : function (value) {
        var errors = this.callParent(arguments);

        if (errors && errors.length) {
            return errors;
        }

        if (this.validateStartDate) {
            value = this.rawToValue(value);
            if (this.task && value) {
                if (value < this.task.getStartDate()) {
                    return [this.L('endBeforeStartText')];
                }
            }
        }

        return [];
    },

    // @OVERRIDE
    onExpand : function () {
        var value = this.valueToVisible(this.getValue());

        if (!this.isValid()) {
            value = this.getRawValue();
            if (value) {
                value = Ext.Date.parse(value, this.format);
            }
        }

        this.picker.setValue(Ext.isDate(value) ? value : new Date());
    },

    // @OVERRIDE
    onSelect : function (picker, pickerDate) {
        // if we display the date with hours, then we (probably) want to keep the task end date's hour/minutes
        // after selecting the date from the picker. In the same time picker will clear the time portion
        // so we need to restore it from original date
        // see also: http://www.bryntum.com/forum/viewtopic.php?f=9&t=4294
        var originalDate    = this.getTaskValue();

        if (Ext.Date.formatContainsHourInfo(this.format) && originalDate) {
            pickerDate.setHours(originalDate.getHours());
            pickerDate.setMinutes(originalDate.getMinutes());
        }

        var me          = this;
        var oldValue    = me.getValue();
        var newValue    = this.visibleToValue(pickerDate);
        var rawValue    = Ext.Date.format(pickerDate, this.format);

        if (oldValue != newValue) {
            if (this.getErrors(rawValue).length > 0) {
                me.setRawValue(rawValue);
                // don`t know if we need to fire in this case
                //me.fireEvent('select', me, newValue);
                me.collapse();
                me.validate();
            } else {
                me.setValue(newValue, true);
                me.fireEvent('select', me, newValue);
                me.collapse();
            }
        }
    },

    /**
     * This method applies the changes from the field to the bound task or to the task provided as 1st argument.
     * If {@link #instantUpdate} option is enabled this method is called automatically after any change in the field.
     *
     * @param {Gnt.model.Task} [toTask] The task to apply the changes to. If not provided, changes will be applied to the last bound task
     * (with {@link #task} config option or {@link #setTask) method)
     */
    applyChanges : function (toTask, silent) {
        toTask          = toTask || this.task;

        var taskStore   = toTask.getTaskStore(true) || this.taskStore;

        if (this.value) {
            this.setTaskValue(toTask, this.value, this.keepDuration, taskStore.skipWeekendsDuringDragDrop);
        } else {
            this.setTaskValue(toTask, null);
        }

        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        if (!silent) toTask.fireEvent('taskupdated', toTask, this);
    },

    setVisibleValue : function (value) {
        this.setValue(this.rawToValue(Ext.Date.format(value, this.format)));
    },

    getVisibleValue : function () {
        if (!this.getValue()) return null;
        return Ext.Date.parse(this.valueToRaw(this.getValue()), this.format);
    },

    /**
     * Sets the value of the field.
     *
     * **Note**, that this method accept the actual end date value, as it is stored in the data model.
     * The displayed value can be different, when date does not contain time information or when editing milestones.
     *
     * @param {Date} value New value of the field.
     */
    setValue : function (value, forceUpdate) {
        this.callParent([ value ]);

        if ((forceUpdate || this.instantUpdate) && !this.getSuppressTaskUpdate() && this.task) {

            // invoke all the Task magic
            // pass "true" as a second argument to not fire "taskupdated"
            this.applyChanges(null, true);

            // potentially value can be changed during applyChanges() call
            // because of skipping holidays
            // so let`s check it after call and set final value again
            var endDate = this.getTaskValue();
            if (endDate - this.getValue() !== 0) {
                this.callParent([ endDate ]);
            }

            // we did not fire "taskupdated" in "applyChanges" so we fire it here
            this.task.fireEvent('taskupdated', this.task, this);
        }
    },

    /**
     * Returns the value of the field.
     *
     * **Note**, that this method returns the actual end date value, as it is stored in the data model.
     * The displayed value can be different, when date does not contain time information or when editing milestones.
     *
     * @return {Date}
     */
    getValue : function () {
        return this.value;
    },

    /*
     * We overrode 'getValue' method and broke default 'checkChange' method.
     * This fix is required for validation on-the-fly (as user type).
     * https://www.assembla.com/spaces/bryntum/tickets/1361
     */
    checkChange: function() {
        if (!this.suspendCheckChange) {
            var me = this,
                // we use raw value since 'getValue' method doesn't fir this goal after override
                newVal = me.rawToValue((me.inputEl ? me.inputEl.getValue() : me.rawValue || '')),
                oldVal = me.lastValue;

            if (!me.isEqual(newVal, oldVal) && !me.isDestroyed) {
                me.lastValue = newVal;
                me.fireEvent('change', me, newVal, oldVal);
                me.onChange(newVal, oldVal);
            }
        }
    },

    // @private
    // it's called in editor.completeEdit()
    assertValue : function () {
        var me          = this,
            oldRaw      = me.rawValue,
            newRaw      = me.getRawValue(),
            oldValue    = me.getValue(),
            newValue    = me.rawToValue(newRaw),
            focusTask   = me.focusTask;

        if (focusTask) {
            focusTask.cancel();
        }

        if ((oldRaw != newRaw) || (newValue - oldValue !== 0)) {
            // set value only if field is valid
            if (!me.validateOnBlur || me.isValid()) {
                // at this point `setValue` should apply any changes from the field to the task
                // even if `instantUpdate` is disabled
                me.setValue(newValue, true);
            }
        }
    },

    // @OVERRIDE
    beforeBlur : function () {
        this.assertValue();
    }
});

/**

@class Gnt.field.StartDate
@extends Ext.form.field.Date

A specialized field for editing the task start date value. This class inherits from the `Ext.form.field.Date` field
so any of its configuration options can be used. You can find this field in {@link Gnt.widget.TaskForm}
and in {@link Gnt.column.StartDate} but you can use it in your own components as well (see "Using field standalone" below).

This field requires to be bound to {@link Gnt.model.Task task} instance, which is used for date value processing
(calendars, holidays etc).

#Task interacting

By default field instantly applies all changes to the bound task. This can be turned off with the {@link #instantUpdate} option.

#Using field standalone

To use this field standalone you have to provide {@link Gnt.model.Task task} instance to it. You can make it by two ways:

 - Set the {@link #task} configuration option at field constructing step. Like this:

        var startDateField = Ext.create('Gnt.field.StartDate', {
            task : someTask
        });

 - Or by calling {@link #setTask} method after field was created. Like this:

        startDateField.setTask(someTask);

* **Note:** If task does not belong to any {@link Gnt.data.TaskStore} you also **have to** specify {@link #taskStore} config option for this field otherwise it won't work:

        // some task not inserted in the task store yet
        var someTask    = new Gnt.model.Task({ ... })

        var startDateField = Ext.create('Gnt.field.StartDate', {
            task        : someTask,
            // need to provide a task store instance in this case
            taskStore   : taskStore
        });

* **Note**, that value displayed in the field can be different from the value in the task model when editing milestones.
Please refer to {@link #adjustMilestones} for details.

*/
Ext.define('Gnt.field.StartDate', {
    extend              : 'Ext.form.field.Date',

    requires            : ['Sch.util.Date'],

    mixins              : ['Gnt.field.mixin.TaskField'],

    alias               : 'widget.startdatefield',

    /**
     * @cfg {Boolean} adjustMilestones When set to `true`, the start/end dates of the milestones will be adjusted -1 day *during rendering and editing*. The task model will still hold unmodified date.
     */
    adjustMilestones    : true,

    /**
     * @cfg {Boolean} keepDuration Pass `true` to keep the duration of the task ("move" the task), `false` to change the duration ("resize" the task).
     */
    keepDuration        : true,

    taskField           : 'startDateField',
    getTaskValueMethod  : 'getStartDate',
    setTaskValueMethod  : 'setStartDate',

    isBaseline          : false,

    constructor : function (config) {
        config      = config || {};

        if (config.task && !config.value) config.value = this.getTaskValue(config.task);

        this.callParent([ config ]);
    },

    // @OVERRIDE
    rawToValue : function (rawValue) {
        if (!rawValue) return null;

        return this.visibleToValue(this.parseDate(rawValue));
    },

    // @OVERRIDE
    valueToRaw : function (value) {
        if (!value) return value;

        return Ext.Date.format(this.valueToVisible(value), this.format);
    },

    valueToVisible : function (value, task) {
        task = task || this.task;

        return task.getDisplayStartDate(this.format, this.adjustMilestones, value, true, this.isBaseline);
    },

    visibleToValue : function (value) {
        var task = this.task;

        // Special treatment of milestone task dates
        if (task && value) {
            var isMidnight = !this.lastValue || this.lastValue - Ext.Date.clearTime(this.lastValue, true) === 0;

            if (this.adjustMilestones && task.isMilestone(this.isBaseline) && value - Ext.Date.clearTime(value, true) === 0 && isMidnight) {

                // the standard ExtJS date picker will only allow to choose the date, not time
                // we set the time of the selected date to the earliest availability hour for that date
                // in case the date has no availbility intervals we use the date itself

                value   = task.getCalendar().getCalendarDay(value).getAvailabilityEndFor(value) || value;

            }
        }

        return value;
    },

    // @OVERRIDE
    onExpand: function () {
        var value = this.valueToVisible(this.getValue());

        if (!this.isValid()) {
            value = this.getRawValue();
            if (value) {
                value = Ext.Date.parse(value, this.format);
            }
        }

        this.picker.setValue(Ext.isDate(value) ? value : new Date());
    },

    // @OVERRIDE
    onSelect: function (picker, pickerDate) {
        // if we display the date with hours, then we (probably) want to keep the task end date's hour/minutes
        // after selecting the date from the picker. In the same time picker will clear the time portion
        // so we need to restore it from original date
        // see also: http://www.bryntum.com/forum/viewtopic.php?f=9&t=4294
        var originalDate    = this.getTaskValue();

        if (Ext.Date.formatContainsHourInfo(this.format) && originalDate) {
            pickerDate.setHours(originalDate.getHours());
            pickerDate.setMinutes(originalDate.getMinutes());
        }

        var me          = this,
            rawValue    = Ext.Date.format(pickerDate, this.format),
            oldValue    = me.getValue(),
            newValue    = this.visibleToValue(pickerDate),
            errors      = this.getErrors(rawValue);

        if (oldValue != newValue) {
            if (errors && errors.length) {
                me.setRawValue(rawValue);
                // unsure if we need to fire 'select' in this case
                //me.fireEvent('select', me, newValue);
                me.collapse();
                me.validate();
            } else {
                me.setValue(newValue);
                me.fireEvent('select', me, newValue);
                me.collapse();
            }
        }
    },

    /**
     * This method applies the changes from the field to the bound task or to the task provided as 1st argument.
     * If {@link #instantUpdate} option is enabled this method is called automatically after any change in the field.
     *
     * @param {Gnt.model.Task} [toTask] The task to apply the changes to. If not provided, changes will be applied to the last bound task
     * (with {@link #task} config option or {@link #setTask) method)
     */
    applyChanges : function (toTask, silent) {
        toTask          = toTask || this.task;

        var taskStore   = toTask.getTaskStore(true) || this.taskStore;

        // invoke all the Task magic
        this.setTaskValue(toTask, this.value, this.keepDuration, taskStore.skipWeekendsDuringDragDrop);

        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        if (!silent) toTask.fireEvent('taskupdated', toTask, this);
    },

    setVisibleValue : function (value) {
        this.setValue(this.rawToValue(Ext.Date.format(value, this.format)));
    },

    getVisibleValue : function () {
        if (!this.getValue()) return null;
        return Ext.Date.parse(this.valueToRaw(this.getValue()), this.format);
    },

    // @OVERRIDE
    /**
     * Sets the value of the field.
     *
     * **Note**, that this method accept the actual start date value, as it is stored in the data model.
     * The displayed value can be different, when editing milestones.
     *
     * @param {Date} value New value of the field.
     */
    setValue : function (value, forceUpdate) {
        this.callParent([ value ]);

        var task        = this.task;

        if ((forceUpdate || this.instantUpdate) && !this.getSuppressTaskUpdate() && task && task.taskStore && value) {
            // apply changes to task
            this.applyChanges(null, true);

            // potentially value can be changed during setStartDate() call
            // because of skipping holidays
            // so let`s check it after call and set final value again
            var startDate = this.getTaskValue();

            if (startDate - this.getValue() !== 0) {
                this.callParent([ startDate ]);
            }

            task.fireEvent('taskupdated', task, this);
        }
    },

    // @OVERRIDE
    /**
     * Returns the value of the field.
     *
     * **Note**, that this method returns the actual start date value, as it is stored in the data model.
     * The displayed value can be different, when editing milestones.
     *
     * @return {Date}
     */
    getValue : function () {
        return this.value;
    },

    /*
     * We overrode 'getValue' method and broke default 'checkChange' method.
     * This fix is required for validation on-the-fly (as user type).
     * https://www.assembla.com/spaces/bryntum/tickets/1361
     */
    checkChange: function() {
        if (!this.suspendCheckChange) {
            var me = this,
                // we use raw value since 'getValue' method doesn't fir this goal after override
                newVal = me.rawToValue((me.inputEl ? me.inputEl.getValue() : Ext.valueFrom(me.rawValue, ''))),
                oldVal = me.lastValue;

            if (!me.isEqual(newVal, oldVal) && !me.isDestroyed) {
                me.lastValue = newVal;
                me.fireEvent('change', me, newVal, oldVal);
                me.onChange(newVal, oldVal);
            }
        }
    },

    // @private
    // it's called in editor.completeEdit()
    assertValue : function () {
        var me          = this,
            oldRaw      = me.rawValue,
            newRaw      = me.getRawValue(),
            oldValue    = me.getValue(),
            newValue    = me.rawToValue(newRaw),
            focusTask   = me.focusTask;

        if (focusTask) {
            focusTask.cancel();
        }

        // AND changed to OR because raw values check always return false and values check seem to be enough
        if ((oldRaw != newRaw) || (newValue - oldValue !== 0)) {
            // set value only if field is valid
            if (!me.validateOnBlur || me.isValid()) {
                // at this point `setValue` should apply any changes from the field to the task
                // even if `instantUpdate` is disabled
                me.setValue(newValue, true);
            }
        }
    },

    // @OVERRIDE
    beforeBlur : function () {
        this.assertValue();
    }
});

/**
@class Gnt.field.Duration
@extends Ext.form.field.Number

A specialized field allowing a user to also specify duration unit when editing the duration value.
This class inherits from the standard Ext JS "number" field, so any usual `Ext.form.field.Number`
configs can be used (like `minValue/maxValue` etc).



*/
Ext.define('Gnt.field.Duration', {
    extend                  : 'Ext.form.field.Number',

    requires                : ['Gnt.util.DurationParser'],

    mixins                  : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],

    alias                   : 'widget.durationfield',
    alternateClassName      : 'Gnt.widget.DurationField',

    disableKeyFilter        : true,
    allowExponential        : false,
    minValue                : 0,


    /**
     * @cfg {String} durationUnit The default duration unit to use when editing the value.
     * This is usually being set automatically, using the `DurationUnit` field of the task.
     */
    durationUnit            : 'h',

    /**
     * @cfg {String} invalidText Text shown when field value cannot be parsed to valid duration.
     * If you want to change the text for all instances of this class please use {@link #l10n l10n} instead.
     */
    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - invalidText : 'Invalid duration value'
     */

    /**
     * @cfg {Boolean} useAbbreviation When set to `true` the field will use short names of unit durations
     * (as returned by {@link Sch.util.Date#getShortNameOfUnit})
     */
    useAbbreviation         : false,

    getDurationUnitMethod   : 'getDurationUnit',
    setTaskValueMethod      : 'setDuration',
    getTaskValueMethod      : 'getDuration',

    taskField               : 'durationField',

    durationParser          : null,
    durationParserConfig    : null,

    constructor : function (config) {
        var me = this;

        Ext.apply(this, config);

        this.durationParser = new Gnt.util.DurationParser(Ext.apply({
            // Since we're reusing the NumberField's parsing of numbers, we have to pass this on to the parser
            // to avoid having the same definitions in the parser too
            parseNumberFn   : function() { return me.parseValue.apply(me, arguments); },
            allowDecimals   : this.decimalPrecision > 0

        }, this.durationParserConfig));

        this.callParent(arguments);

        this.invalidText = this.L('invalidText');
    },

    onSetTask : function () {
        this.durationUnit = this.task[this.getDurationUnitMethod]();

        var value = this.getTaskValueMethod ? this.getTaskValue() : this.task.get(this.task[this.taskField]);

        this.setValue(value);

        this.setSpinUpEnabled(value == null || value < this.maxValue, true);
        this.setSpinDownEnabled(value > this.minValue, true);
    },

    rawToValue : function (rawValue) {
        var parsed  = this.parseDuration(rawValue);

        if (!parsed) return null;

        this.durationUnit    = parsed.unit;

        return parsed.value != null ? parsed.value : null;
    },

    valueToVisible : function (value, durationUnit) {
        if (Ext.isNumber(value)) {
            var valueInt    = parseInt(value, 10),
                valueFixed  = Ext.Number.toFixed(value, this.decimalPrecision);

            return String(valueInt == valueFixed ? valueInt : valueFixed).replace('.', this.decimalSeparator) + ' ' +
                Sch.util.Date[ this.useAbbreviation ? 'getShortNameOfUnit' : 'getReadableNameOfUnit' ](durationUnit || this.durationUnit, value !== 1);
        }

        return '';
    },

    valueToRaw : function (value) {
        return this.valueToVisible(value, this.durationUnit, this.decimalPrecision, this.useAbbreviation);
    },

    parseDuration : function (value) {
        if (value == null) {
            return null;
        }

        var duration = this.durationParser.parse(value);

        if (!duration) {
            return null;
        }

        duration.unit = duration.unit || this.durationUnit;

        return duration;
    },


    /**
     * Returns an object, representing the current value of the field:

    {
        value   : ... // duration value,
        unit    : ... // duration unit
    }

     * @return {Object}
     */
    getDurationValue : function () {
        return this.parseDuration(this.getRawValue());
    },


    getErrors : function (value) {
        var parsed;

        if (value) {
            parsed   = this.parseDuration(value);

            if (!parsed) {
                return [ this.L('invalidText') ];
            }

            value   = parsed.value;
        }

        return this.callParent(arguments);
    },


    // @OVERRIDE
    checkChange : function () {
        if (!this.suspendCheckChange) {
            var me = this,
                newVal = me.getDurationValue(),
                oldVal = me.lastValue;

            var isDifferent = newVal && !oldVal || !newVal && oldVal || newVal && oldVal &&
                (newVal.value != oldVal.value || newVal.unit != oldVal.unit);

            if (isDifferent && !me.isDestroyed) {
                me.lastValue = newVal;
                me.fireEvent('change', me, newVal, oldVal);
                me.onChange(newVal, oldVal);
            }
        }
    },

    // @OVERRIDE
    getValue : function () {
        return this.value;
    },


    /**
     * This method applies the changes from the field to the bound task or to the task provided as 1st argument.
     * If {@link #instantUpdate} option is enabled this method is called automatically after any change in the field.
     *
     * @param {Gnt.model.Task} [toTask] The task to apply the changes to. If not provided, changes will be applied to the last bound task
     * (with {@link #task} config option or {@link #setTask) method)
     */
    applyChanges : function (toTask) {
        toTask = toTask || this.task;

        this.setTaskValue(toTask, this.getValue(), this.durationUnit);

        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        toTask.fireEvent('taskupdated', toTask, this);
    },

    // @OVERRIDE
    setValue : function (value, forceUpdate) {
        var val                 = value;

        if (Ext.isObject(value)) {
            this.durationUnit   = value.unit;
            val                 = value.value;
        }

        this.callParent([ val ]);

        if ((forceUpdate || this.instantUpdate) && !this.getSuppressTaskUpdate() && this.task) {
            // apply changes to task
            this.applyChanges();
        }
    },

    // @private
    // it's called in editor.completeEdit()
    assertValue : function () {
        var me      = this,
            oldVal  = me.getValue(),
            oldUnit = me.durationUnit,
            newVal  = me.getDurationValue();

        if (this.isValid()) {
            var isDifferent = /*newVal && !oldVal ||*/ !newVal && oldVal || newVal &&
                (newVal.value != oldVal || newVal.unit != oldUnit);

            if (isDifferent) {
                // at this point `setValue` should apply any changes from the field to the task
                // even if `instantUpdate` is disabled
                me.setValue(newVal, true);
            }
        }
    },

    // @OVERRIDE
    beforeBlur : function () {
        this.assertValue();
    },

    onSpinUp: function() {
        var me = this;

        if (!me.readOnly) {
            var value   = me.getValue() || 0;

            me.setSpinValue(Ext.Number.constrain(value + me.step, me.minValue, me.maxValue));
        }
    },

    onSpinDown: function() {
        var me = this;

        if (!me.readOnly) {
            var value   = me.getValue() || 0;

            me.setSpinValue(Ext.Number.constrain(value - me.step, me.minValue, me.maxValue));
        }
    }
});

/**
@class Gnt.field.Effort
@extends Gnt.field.Duration

A specialized field, allowing a user to also specify a duration unit when editing the effort value.
This class inherits from the {@link Gnt.field.Duration} field, which inherits from `Ext.form.field.Number` so any regular {@link Ext.form.field.Number} configs can be used (like `minValue/maxValue` etc).

*/
Ext.define('Gnt.field.Effort', {
    extend                  : 'Gnt.field.Duration',

    requires                : ['Gnt.util.DurationParser'],

    alias                   : 'widget.effortfield',
    alternateClassName      : 'Gnt.widget.EffortField',

    mixins                  : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - invalidText : 'Invalid value'
     */

    taskField               : 'effortField',
    getDurationUnitMethod   : 'getEffortUnit',
    setTaskValueMethod      : 'setEffort',
    getTaskValueMethod      : 'getEffort',

    applyChanges : function (toTask) {
        toTask = toTask || this.task;

        this.setTaskValue(toTask, this.getValue() || null, this.durationUnit);

        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        toTask.fireEvent('taskupdated', toTask, this);
    }
});

/**

 A specialized field, allowing a user to also specify task manually scheduled value.
 This class inherits from the standard Ext JS "checkbox" field, so any usual `Ext.form.field.Checkbox` configs can be used.

 @class Gnt.field.ManuallyScheduled
 @extends Ext.form.field.Checkbox

 */
Ext.define('Gnt.field.ManuallyScheduled', {
    extend                  : 'Ext.form.field.Checkbox',

    mixins                  : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],

    alias                   : 'widget.manuallyscheduledfield',

    alternateClassName      : ['Gnt.widget.ManuallyScheduledField'],

    taskField               : 'manuallyScheduledField',
    setTaskValueMethod      : 'setManuallyScheduled',
    getTaskValueMethod      : 'isManuallyScheduled',

    valueToVisible : function (value) {
        return value ? this.L('yes') : this.L('no');
    },

    getValue : function () {
        return this.value;
    },

    setValue : function (value) {
        this.callParent([ value ]);

        if (this.instantUpdate && !this.getSuppressTaskUpdate() && this.task) {
            // apply changes to task
            this.applyChanges();
        }
    }
});

/*
@class Gnt.field.ReadOnly
@extends Ext.form.field.Checkbox

A specialized field allowing a user to switch a task to readonly mode.

*/
Ext.define('Gnt.field.ReadOnly', {
    extend                  : 'Ext.form.field.Checkbox',
    mixins                  : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],
    alias                   : 'widget.readonlyfield',
    alternateClassName      : ['Gnt.widget.ReadOnlyField'],

    taskField               : 'readOnlyField',
    setTaskValueMethod      : 'setReadOnly',
    getTaskValueMethod      : 'isReadOnly',
    instantUpdate           : true,

    valueToVisible : function (value) {
        return value ? this.L('yes') : this.L('no');
    },

    getValue : function () {
        return this.value;
    },

    setValue : function (value) {

        this.callParent([ value ]);

        if (this.instantUpdate && !this.getSuppressTaskUpdate() && this.task) {
            // apply changes to task
            this.applyChanges();
        }
    }
});

/**

A specialized field, allowing a user to also specify task scheduling mode value.
This class inherits from the standard Ext JS "combo" field, so any usual `Ext.form.field.ComboBox` configs can be used.

The value of this field can be one of the following strings: `Normal`, `FixedDuration`,
`EffortDriven`, `DynamicAssignment`.

@class Gnt.field.SchedulingMode
@extends Ext.form.field.ComboBox

*/
Ext.define('Gnt.field.SchedulingMode', {
    extend                  : 'Ext.form.field.ComboBox',

    mixins                  : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],

    alias                   : 'widget.schedulingmodefield',

    alternateClassName      : 'Gnt.widget.SchedulingmodeField',

    taskField               : 'schedulingModeField',
    setTaskValueMethod      : 'setSchedulingMode',
    getTaskValueMethod      : 'getSchedulingMode',

    /**
     * @cfg {String} pickerAlign The align for combo-box's picker.
     */
    pickerAlign             : 'tl-bl?',

    /**
     * @cfg {Boolean} matchFieldWidth Whether the picker dropdown's width should be explicitly set to match the width of the field. Defaults to true.
     */
    matchFieldWidth         : true,

    editable                : false,

    forceSelection          : true,

    triggerAction           : 'all',

    constructor : function (config) {
        config  = config || {};

        if (!config.store) this.initStore(config);
        this.callParent([ config ]);
        this.on('change', this.onFieldChange, this);
    },

    initStore : function (config) {
        var me = this;

        config.store = me.getDefaultSchedulingModes();
    },

    getDefaultSchedulingModes : function () {
        var me = this;

        return [
            [ 'Normal',             me.L('Normal') ],
            [ 'FixedDuration',      me.L('FixedDuration') ],
            [ 'EffortDriven',       me.L('EffortDriven') ],
            [ 'DynamicAssignment',  me.L('DynamicAssignment') ]
        ];
    },

    // will be used in the column's renderer
    valueToVisible : function (value, task) {
        var me              = this,
            displayTplData  = [];

        var record = this.findRecordByValue(value);

        if (record) {
            displayTplData.push(record.data);
        } else if (Ext.isDefined(me.valueNotFoundText)) {
            displayTplData.push(me.valueNotFoundText);
        }

        return me.displayTpl.apply(displayTplData);
    },

    getValue : function () {
        return this.value;
    },

    onFieldChange : function (value) {
        if (this.instantUpdate && !this.getSuppressTaskUpdate() && this.task && this.value) {
            // apply changes to task
            this.applyChanges();
        }
    }

});

/**
@class Gnt.field.Calendar
@extends Ext.form.field.ComboBox

A specialized field allowing a user to select particular calendar for a task.
This class inherits from the standard Ext JS "combo box" field, so any standard `Ext.form.field.ComboBox`
configs can be used.
*/

Ext.define('Gnt.field.Calendar', {
    extend                  : 'Ext.form.field.ComboBox',

    requires                : ['Ext.data.Store', 'Gnt.model.Calendar', 'Gnt.data.Calendar'],

    mixins                  : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],

    alias                   : 'widget.calendarfield',
    alternateClassName      : 'Gnt.widget.CalendarField',

    taskField               : 'calendarIdField',
    getTaskValueMethod      : 'getCalendarId',
    setTaskValueMethod      : 'setCalendarId',

    /**
     * @cfg {String} pickerAlign The align for combo-box's picker.
     */
    pickerAlign             : 'tl-bl?',

    /**
     * @cfg {Boolean} matchFieldWidth Defines if the picker dropdown width should be explicitly set to match the width of the field. Defaults to true.
     */
    matchFieldWidth         : true,

    editable                : true,

    triggerAction           : 'all',

    valueField              : 'Id',

    displayField            : 'Name',

    queryMode               : 'local',

    forceSelection          : true,

    allowBlank              : true,

    initComponent : function () {
        var me      = this,
            config  = me.getInitialConfig();

        if (!config.store || me.store.isEmptyStore) {
            me.store    = {
                xclass  : 'Ext.data.Store',
                model   : 'Gnt.model.Calendar'
            };
        }

        if (!(me.store instanceof Ext.data.Store)) {
            me.store = Ext.create(me.store);
        }

        me.callParent(arguments);

        // load calendars list
        me.updateCalendarsStore();

        // listen to new calendars creation/removal and update the field store
        me.mon(Ext.data.StoreManager, {
            add     : function (index, store, key) {
                if (store instanceof Gnt.data.Calendar) {
                    this.updateCalendarsStore();
                }
            },
            remove  : function (index, store, key) {
                if (store instanceof Gnt.data.Calendar) {
                    this.updateCalendarsStore();
                }
            },
            scope   : me
        });

        me.on({
            show    : me.setReadOnlyIfEmpty,
            scope   : me
        });

        me.on('change', me.onFieldChange, me);
    },


    updateCalendarsStore : function () {
        this.store.loadData(this.getCalendarData());
    },


    // @private
    // Sets field to readonly if no calendars found.
    setReadOnlyIfEmpty : function () {
        if (!this.store.count()) {
            this.setReadOnly(true);
        }
    },


    getCalendarData : function () {
        return Ext.Array.map(Gnt.data.Calendar.getAllCalendars(), function (cal) {
            return {
                Id      : cal.calendarId,
                Name    : cal.name || cal.calendarId
            };
        });
    },


    onSetTask : function () {
        // set field to readonly if no calendars
        this.setReadOnlyIfEmpty();

        this.setValue(this.getTaskValue());
    },


    // Used in the column renderer
    valueToVisible : function (value, task) {
        var me              = this,
            displayTplData  = [];

        var record = this.findRecordByValue(value);

        if (record) {
            displayTplData.push(record.data);
        } else if (Ext.isDefined(me.valueNotFoundText) && typeof me.valueNotFoundText == 'string') {
            displayTplData.push(me.valueNotFoundText);
        }

        return me.displayTpl.apply(displayTplData);
    },


    // @OVERRIDE
    getValue : function () {
        return this.value || '';
    },


    getErrors : function (value) {
        if (value) {
            var record = this.findRecordByDisplay(value);
            if (record) {
                if (this.task && !this.task.isCalendarApplicable(record.getId())) return [ this.L('calendarNotApplicable') ];
            }
        }

        return this.callParent(arguments);
    },


    onFieldChange : function (field, value) {
        this.setValue(value);
    },


    // @OVERRIDE
    // We need to have both onFieldChange and setValue
    // since setValue is not called when user select an option from the dropdown list
    setValue : function (value) {

        this.callParent([ value ]);

        // we keep '' for empty field
        if (undefined === value || null === value || '' === value) this.value = '';

        if (this.instantUpdate && !this.getSuppressTaskUpdate() && this.task) {

            if (this.getTaskValue() != this.value) {
                // apply changes to task
                this.applyChanges();
            }

        }
    },


    // @OVERRIDE
    assertValue : function () {
        var raw = this.getRawValue();
        if (!raw && this.value) {
            this.setValue('');
        } else {
            this.callParent(arguments);
        }
    }
});

/**

A specialized field to enter percent values.
This class inherits from the standard Ext JS "number" field, so any usual `Ext.form.field.Number` configs can be used.

@class Gnt.field.Percent
@extends Ext.form.field.Number

*/
Ext.define('Gnt.field.Percent', {
    extend              : 'Ext.form.field.Number',

    alias               : 'widget.percentfield',

    mixins              : ['Gnt.mixin.Localizable'],

    alternateClassName  : 'Gnt.widget.PercentField',

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - invalidText : 'Invalid value'
     */

    disableKeyFilter    : false,

    minValue            : 0,
    maxValue            : 100,
    allowExponential    : false,

    baseChars           : '0123456789%',

    constructor             : function() {
        this.callParent(arguments);

        this.invalidText = this.L('invalidText');
    },

    valueToRaw: function (value) {
        if (Ext.isNumber(value)) {
            return parseFloat(Ext.Number.toFixed(value, this.decimalPrecision)) + '%';
        }
        return '';
    },

    getErrors: function (value) {
        var percent = this.parseValue(value);

        if (percent === null) {
            if (value !== null && value !== '') {
                return [this.invalidText];
            } else {
                percent = '';
            }
        }
        return this.callParent([percent]);
    }
});

/**
@class Gnt.field.Dependency
@extends Ext.form.field.Text

A specialized field allowing a user to change the dependencies of a task. The type of dependecies
created by this field is controlled by the {@link #type} config.

The text describing a dependency can be one or more values in the following format, separated with a {@link #separator} string:

    [TaskId][DependencyType][Lag]

where:

- `TaskId` is the id of the predecessor/successor task, can be a "real" or "sequential" id, see below.
- `DependencyType` (optional, default value is "FS") is one of the following (based on the {@link Gnt.util.DependencyParser#l10n}) property.
* **Please note** that dependency types are localized and depend on selected language (following values present English translation):
    - `FS` - for "Finish-To-Start"
    - `FF` - for "Finish-To-Finish"
    - `SF` - for "Start-To-Finish"
    - `SS` - for "Start-To-Start"
- `Lag` (optional). Should start with `+` or `-` followed by a number indicating the lag amount
and duration unit.


The `TaskId` part can contain either "real" id of the task (the id that is stored in the database) or "sequential" id.
The sequential id corresponds to the ordinal position of the task in the whole dataset. When you add or remove tasks
from the dataset, the sequential id of the tasks may change. Which type of id is used is controled by the
{@link #useSequenceNumber} config.

For example:
    10          - Finish to start dependency from task with Id 10
    10SS        - Start to start dependency from task with Id 10
    3FS+1d      - Finish to start dependency from task with Id 3, with +1 day lag
    3FS-10h      - Finish to start dependency from task with Id 3, with -10 hours lag

*/
Ext.define("Gnt.field.Dependency", {
    extend              : "Ext.form.field.Text",

    alternateClassName  : "Gnt.widget.DependencyField",
    alias               : "widget.dependencyfield",

    requires            : ['Gnt.util.DependencyParser'],

    mixins              : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {String} type Either `predecessors` or `successors`. Defines the type of dependencies managed by this field. Defaults to 'predecessors'.
     */
    type                : 'predecessors',        // Or successors

    /**
     * @cfg {String} separator A separator between the dependency values in the text field.
     */
    separator           : ';',

    task                : null,

    /**
     * @property {Gnt.util.DependencyParser} dependencyParser
     * An object used to parse entered string to a proper dependency data.
     * **See also** {@link #dependencyParserConfig} config.
     */
    dependencyParser    : null,

    /**
     * @cfg {Object} dependencyParserConfig
     * A config object to be passed to {@link Gnt.util.DependencyParser} constructor.
     */
    dependencyParserConfig  : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - invalidFormatText   : 'Invalid dependency format',
            - invalidDependencyText : 'Invalid dependency found, please make sure you have no cyclic paths between your tasks',
            - invalidDependencyType : 'Invalid dependency type {0}. Allowed values are: {1}.'
     */

    /**
     * @cfg {Boolean} useSequenceNumber Set to `true` to use auto-generated sequential identifiers
     * to reference other tasks (see {@link Gnt.model.Task#getSequenceNumber} for definition).
     * If value is `false`then "real" id (that is stored in the database) will be used.
     */
    useSequenceNumber : false,

    constructor         : function(config) {
        var me = this;
        Ext.apply(this, config);

        this.dependencyParser = new Gnt.util.DependencyParser(Ext.apply({
            // Since we're reusing the NumberField's parsing of numbers, we have to pass this on to the parser
            // to avoid having the same definitions in the parser too
            parseNumberFn : function() { return Gnt.widget.DurationField.prototype.parseValue.apply(me, arguments); }
        }, this.dependencyParserConfig));

        this.callParent(arguments);

        this.addCls('gnt-field-dependency');
    },


    isPredecessor : function() {
        return this.type === 'predecessors';
    },

    /**
     * Set the task this field is bound to.
     *
     * @param {Gnt.model.Task} task
     */
    setTask : function(task) {
        this.task   = task;
        this.setRawValue(this.getFieldDisplayValue(task));
    },

    /**
     * Returns an array of dependency objects representing the current value of the field:

        [
            {
                taskId  : 3,    // Int, always present
                type    : "FS", // String, always present
                lag     : 3,    // Int, optional
                lagUnit : 'd'   // String, optional
            },
            ...
        ]

     * @return {Object} The dependencies
     */
    getDependencies: function () {
        return this.dependencyParser.parse(this.getRawValue());
    },


    getTaskIdFromDependency : function (dependencyData) {
        var store = this.task.getTaskStore(),
            taskId = dependencyData.taskId,
            task;

        if (this.useSequenceNumber) {
            task = store.getBySequenceNumber(taskId);
            taskId = task && task.getId();
        }

        return taskId;
    },


    getErrors : function (value) {
        if (!value) return [];

        var parsed   = this.dependencyParser.parse(value);

        if (!parsed) {
            return [ this.L('invalidFormatText') ];
        }

        var dependencies    = this.getDependencies(),
            isPredecessor   = this.isPredecessor(),
            task            = this.task,
            dependencyStore = task.getTaskStore().dependencyStore,
            // existing dependencies
            oldDependencies = task[isPredecessor ? 'predecessors' : 'successors'],
            typeAbbrs       = this.dependencyParser.types,
            allowedTypes    = dependencyStore.allowedDependencyTypes,
            typeCodes       = dependencyStore.model.Type,
            taskId;

        // build list of tasks to be created, we need to provide it to isValidDependency() for correct validation
        var newDeps    = [];

        for (var i = 0; i < dependencies.length; i++) {
            var depData = dependencies[i];

            taskId      = this.getTaskIdFromDependency(depData);
            if (!taskId) {
                return [ this.L('invalidDependencyText') ];
            }

            // validate dependency type used
            if (dependencyStore.allowedDependencyTypes && !dependencyStore.isValidDependencyType(depData.type)) {
                var allowed         = '';

                for (var j = 0, k = allowedTypes.length; j < k; j++) {
                    allowed += typeAbbrs[typeCodes[allowedTypes[j]]] + ',';
                }

                return [ Ext.String.format(this.L('invalidDependencyType'), typeAbbrs[depData.type], allowed.substring(0, allowed.length-1)) ];
            }

            var dep     = new dependencyStore.model();

            dep.setSourceId(isPredecessor ? taskId : task.getId());
            dep.setTargetId(isPredecessor ? task.getId() : taskId);
            dep.setType(depData.type);
            dep.setLag(depData.lag);
            dep.setLagUnit(depData.lagUnit);

            newDeps.push(dep);
        }

        // loop over dependencies to be created
        for (i = 0; i < newDeps.length; i++) {
            // validate dependency: we ask store if `newDeps[i]` is valid if we remove `oldDependencies` and add `newDeps` dependencies
            if (!dependencyStore.isValidDependency(newDeps[i], newDeps, oldDependencies)) {
                return [ this.invalidDependencyText ];
            }
        }

        return this.callParent([ parsed.value ]);
    },

    getFieldDisplayValue    : function (task) {

        var isPredecessor   = this.isPredecessor(),
            dependencyStore = task.getTaskStore().getDependencyStore(),
            deps            = isPredecessor ? task.getIncomingDependencies(true) : task.getOutgoingDependencies(true),
            dpTypes         = this.dependencyParser.types,
            endToStart      = Gnt.model.Dependency.Type.EndToStart,
            strings         = [],
            depTask;

        for (var i = 0; i < deps.length; i++) {
            var dep     = deps[i];

            depTask     = isPredecessor ? dep.getSourceTask() : dep.getTargetTask();

            if (depTask && dep.isValid(false)) {
                var type        = dep.getType(),
                    lag         = dep.getLag(),
                    lagUnit     = dep.getLagUnit();

                strings.push(Ext.String.format(
                    '{0}{1}{2}{3}{4}',
                    this.useSequenceNumber ? depTask.getSequenceNumber() : depTask.getId(),
                    lag || type !== endToStart ? dpTypes[type] : '',
                    lag > 0 ? '+' : '',
                    lag || '',
                    lag && lagUnit !== 'd' ? lagUnit : '')
                );
            }
        }

        return strings.join(this.separator);
    },

    isDirty : function (task) {
        task            = task || this.task;
        if (!task) return false;

        var isPredecessor   = this.isPredecessor(),
            depStore        = task.getTaskStore().dependencyStore,
            deps            = isPredecessor ? task.getIncomingDependencies() : task.getOutgoingDependencies(),
            taskId          = task.getId();

        // check if some of task dependencies are dirty
        for (var i = 0, l = deps.length; i < l; i++) {
            if (deps[i].dirty || deps[i].phantom) return true;
        }

        if (depStore) {
            var fn  = isPredecessor ? 'getTargetId' : 'getSourceId';

            // check if there are some unsaved removed dependencies
            deps    = depStore.getRemovedRecords();
            for (i = 0, l = deps.length; i < l; i++) {
                if (deps[i][fn]() == taskId) return true;
            }
        }

        return false;
    },

    /**
     * This method applies the changes from the field to the bound task or to the task provided as 1st argument.
     *
     * @param {Gnt.model.Task} [toTask] The task to apply the changes to. If not provided, changes will be applied to the last bound task
     * (with {@link #task} config option or {@link #setTask) method)
     */
    applyChanges : function(task) {
        task = task || this.task;

        var depStore      = task.getTaskStore().dependencyStore,
            dependencies  = this.getDependencies(),
            ids           = [],
            isPredecessor = this.isPredecessor(),
            currentDeps   = isPredecessor ? task.getIncomingDependencies(true) : task.getOutgoingDependencies(true),
            toRemove      = [];

        for (var i = 0, l = dependencies.length; i < l; i++) {
            ids.push(this.getTaskIdFromDependency(dependencies[i]));
        }

        // First remove deleted dependencies
        for (i = 0; i < currentDeps.length; i++) {
            if (!Ext.Array.contains(ids, currentDeps[i][isPredecessor ? 'getSourceId' : 'getTargetId']())) {
                toRemove.push(currentDeps[i]);
            }
        }
        if (toRemove.length > 0) {
            depStore.remove(toRemove);
        }

        var toAdd = [];

        // Now iterate cell value, to update or add new dependencies
        for (i = 0; i < dependencies.length; i++) {
            var depData = dependencies[i];
            var predId = this.getTaskIdFromDependency(depData);
            var dep = depStore.getByTaskIds(predId, task.getId());

            if (dep) {
                dep.beginEdit();
                dep.setType(depData.type);
                dep.setLag(depData.lag);
                dep.setLagUnit(depData.lagUnit);
                dep.endEdit();
            } else {
                dep = new depStore.model();

                dep.setSourceId(isPredecessor ? predId : task.getId());
                dep.setTargetId(isPredecessor ? task.getId() : predId);
                dep.setType(depData.type);
                dep.setLag(depData.lag);
                dep.setLagUnit(depData.lagUnit);

                toAdd.push(dep);
            }
        }

        if (toAdd.length > 0) {
            depStore.add(toAdd);
        }

        if (toAdd.length || toRemove.length) task.triggerUIUpdate();
    }
});

/**
@class Gnt.field.Milestone
@extends Ext.form.field.ComboBox

A specialized field allowing a user to convert regular task to milestone and back.

*/
Ext.define('Gnt.field.Milestone', {
    extend                  : 'Ext.form.field.ComboBox',
    requires                : 'Ext.data.JsonStore',
    mixins                  : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],

    alias                   : 'widget.milestonefield',

    instantUpdate           : false,
    allowBlank              : false,
    forceSelection          : true,
    displayField            : 'text',
    valueField              : 'value',
    queryMode               : 'local',

    constructor : function (config) {

        Ext.apply(this, config);

        this.store  = new Ext.data.JsonStore({
            fields  : ['value', 'text'],
            data    : [
                { value : 0, text : this.L('no') },
                { value : 1, text : this.L('yes') }
            ]
        });

        this.callParent(arguments);

        this.on('change', this.onFieldChange, this);
    },

    onSetTask : function () {
        this.setValue(this.task.isMilestone() ? 1 : 0);
    },

    valueToVisible : function (value) {
        return value ? this.L('yes') : this.L('no');
    },

    onFieldChange : function (value) {

        if (this.instantUpdate && !this.getSuppressTaskUpdate() && this.task) {

            if (this.task.isMilestone() != Boolean(this.value)) {
                // apply changes to task
                this.applyChanges();
            }
        }
    },

    getValue : function () {
        return this.value;
    },

    applyChanges : function (task) {
        task    = task || this.task;

        if (this.getValue()) {
            task.convertToMilestone();
        } else {
            task.convertToRegular();
        }

        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        task.fireEvent('taskupdated', task, this);
    }
});

/**
 * A specialized field, allowing a user to specify task constraint type.
 * This class inherits from the standard Ext JS "combo" field, so any usual `Ext.form.field.ComboBox` configs can be used.
 *
 * In default setup the value of this field can be one of the following strings:
 * - finishnoearlythan
 * - finishnolaterthan
 * - mustfinishon
 * - muststarton
 * - startnoearlierthan
 * - startnolaterthan
 * but if one has created a new constraint class (see {@link Gnt.constraint.Base}) then this field value
 * might be that new class alias part after the 'gntconstraint.' prefix.
 *
 * @class Gnt.field.ConstraintType
 * @extends Ext.form.field.ComboBox
 */
Ext.define('Gnt.field.ConstraintType', {
    extend                  : 'Ext.form.field.ComboBox',

    mixins                  : [
        'Gnt.field.mixin.TaskField',
        'Gnt.mixin.Localizable'
    ],

    uses : [
        'Gnt.constraint.Base'
    ],

    alias                   : 'widget.constrainttypefield',

    alternateClassName      : 'Gnt.widget.ConstraintType.Field',

    taskField               : 'constraintTypeField',
    getTaskValueMethod      : 'getConstraintType',
    setTaskValueMethod      : 'setConstraint',

    /**
     * @cfg {String} pickerAlign The align for combo-box's picker.
     */
    pickerAlign             : 'tl-bl?',

    /**
     * @cfg {Boolean} matchFieldWidth Whether the picker dropdown's width should be explicitly set to match the width of the field. Defaults to true.
     */
    matchFieldWidth         : false,

    editable                : false,

    forceSelection          : true,

    triggerAction           : 'all',

    /**
     * Localication object
     */
    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - none : 'None'
     */

    initComponent : function() {
        var me = this;

        me.store = me.store || Gnt.field.ConstraintType.buildDefaultConstraintTypeList(me.L('none'));
        me.callParent(arguments);

        this.on('change', this.onFieldChange, this);
    },


    // will be used in the column's renderer
    valueToVisible : function (value, task) {
        var me              = this,
            displayTplData  = [];

        var record = this.findRecordByValue(!Ext.isEmpty(value) ? value : null);

        if (record) {
            displayTplData.push(record.data);
        } else if (Ext.isDefined(me.valueNotFoundText)) {
            displayTplData.push(me.valueNotFoundText);
        }

        return me.displayTpl.apply(displayTplData);
    },

    applyChanges : function (task) {
        var me          = this,
            value       = me.getValue(),
            constraintClass;

        task            = task || me.task;
        constraintClass = Gnt.constraint.Base.getConstraintClass(value);

        me.setTaskValue(task, value, constraintClass && constraintClass.getInitialConstraintDate(task) || null);

        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        task.fireEvent('taskupdated', task, me);
    },

    onFieldChange : function (value) {
        var me = this;

        if (!me.getSuppressTaskUpdate() && me.task && value) {
            // apply changes to task
            me.applyChanges();
        }
    },

    statics : {
        /**
         * Builds default constraint type list by scanning Gnt.constraint namespace for suitable constraint classes
         *
         * @param {String} [noneText] Text to use for no constraint item, no constraint will be prepended to the list
         *  if text is given.
         */
        buildDefaultConstraintTypeList : function(noneText) {
            var result = [];

            Ext.Array.each(Ext.ClassManager.getNamesByExpression('gntconstraint.*'), function(name) {
                var singleton = Ext.ClassManager.get(name),
                    alias     = singleton.alias[0],
                    id        = alias.split('.').pop();

                singleton && (result.push([ id, singleton.L('name') ]));
            });

            result = Ext.Array.sort(result, function(a, b) { return a[1] > b[1] ? 1 : -1; });
            noneText && result.unshift( [ null, noneText ] );

            return result;
        }
    }

});

Ext.define('Gnt.field.ConstraintDate', {

    extend              : 'Ext.form.field.Date',
    mixins              : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],
    alias               : 'widget.constraintdatefield',

    // This is required to properly handle the field's read only state as designated in task's isEditable() method
    taskField           : 'constraintDateField',
    getTaskValueMethod  : 'getConstraintDate',
    setTaskValueMethod  : 'setConstraintDate',


    valueToVisible : function (value, task) {
        task    = task || this.task;

        var me              = this,
            constraintClass = task.getConstraintClass(),
            format          = me.format || Ext.Date.defaultFormat;

        if (constraintClass) {
            return constraintClass.getDisplayableConstraintDateForFormat(value, format, task);
        } else {
            return value;
        }
    },


    // Called each time when new task is set or current task is updated
    onSetTask : function (task) {
        var me = this;

        me.setValue(me.valueToVisible(me.getTaskValue(task), task));
    },

    setValue : function (value) {
        var me   = this,
            task = me.task;

        me.callParent([ value ]);

        if (!me.getSuppressTaskUpdate() && task && value) {
            me.applyChanges();
        }
    },

    onExpand : function() {
        var me = this,
            value = me.getValue();

        me.getPicker().setValue(Ext.isDate(value) ? value : new Date());
    },

    onSelect : function (picker, pickerDate) {
        // if we display the date with hours, then we (probably) want to keep the task constraint date's hour/minutes
        // after selecting the date from the picker. In the same time picker will clear the time portion
        // so we need to restore it from original date
        // see also: http://www.bryntum.com/forum/viewtopic.php?f=9&t=4294
        var me           = this,
            format       = me.format,
            task         = me.task,
            originalDate = task && me.getTaskValue(task);

        if (originalDate && Ext.Date.formatContainsHourInfo(format)) {
            pickerDate.setHours(originalDate.getHours());
            pickerDate.setMinutes(originalDate.getMinutes());
            pickerDate.setSeconds(originalDate.getSeconds());
        }

        me.callParent([picker, pickerDate]);
    },

    applyChanges : function (task) {
        var me     = this,
            format = me.format || Ext.Date.defaultFormat,
            constraintClass,
            value;

        task            = task || me.task;
        constraintClass = task.getConstraintClass();
        value           = me.getValue();

        if (constraintClass && !Ext.isEmpty(value)) {
            value = constraintClass.adjustConstraintDateFromDisplayableWithFormat(value, format, task);
        }
        else if (Ext.isEmpty(value)) {
            value = null;
        }

        me.setTaskValue(task, value);

        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        task.fireEvent('taskupdated', task, me);
    }
});

/**

@class Gnt.field.BaselineStartDate
@extends Gnt.field.StartDate

A specialized field for editing the task baseline start date value. This class inherits from the `Ext.form.field.Date` field
so any of its configuration options can be used. You can find this field in {@link Gnt.widget.TaskForm}
and in {@link Gnt.column.BaselineStartDate} but you can use it in your own components as well.

*/
Ext.define('Gnt.field.BaselineStartDate', {
    extend              : 'Gnt.field.StartDate',

    alias               : 'widget.baselinestartdatefield',

    taskField           : 'baselineStartDateField',
    getTaskValueMethod  : 'getBaselineStartDate',
    setTaskValueMethod  : 'setBaselineStartDate',

    isBaseline          : true,

    /**
     * @hide
     * @cfg keepDuration
     */

    applyChanges : function (toTask, silent) {
        this.setTaskValue(toTask || this.task, this.value);

        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        if (!silent) toTask.fireEvent('taskupdated', toTask, this);
    }

});

/**
@class Gnt.field.BaselineEndDate
@extends Gnt.field.EndDate

A specialized field for editing the task baseline end date value. This class inherits from the `Ext.form.field.Date` field
and any of its configuration options can be used. You can find this field used in the {@link Gnt.widget.TaskForm}
and in the {@link Gnt.column.BaselineStartDate} classes but you can also use it in your own components.

This field must be bound to a {@link Gnt.model.Task task} instance, which is used for date value processing
(calendars, holidays etc).

#Task interaction

By default the field instantly applies all changes to the bound task. This can be turned off with the {@link #instantUpdate} option.

* **Note**, that the value displayed in the field can be different from the value in the data model when editing milestones
or when the date does not contain any time information (hours/minutes etc). This is because in our component, an end date represents a distinct point
on the timeaxis. For example: if from a user perspective, a task starts at 2013/01/01 and ends at 2013/01/02 -
this means that the task actually ends at 2013/01/02 23:59:59.9999. In the task model we store
2013/01/03 00:00:00, but in the field we show 2013/01/02. See also {@link #adjustMilestones}.

*/
Ext.define('Gnt.field.BaselineEndDate', {

    extend              : 'Gnt.field.EndDate',

    alias               : 'widget.baselineenddatefield',

    /**
     * @hide
     * @cfg keepDuration
     */

    taskField           : 'baselineEndDateField',
    getTaskValueMethod  : 'getBaselineEndDate',
    setTaskValueMethod  : 'setBaselineEndDate',

    applyChanges : function (toTask, silent) {
        this.setTaskValue(toTask || this.task, this.value || null);
        // since we have an "applyChanges" method different from the one provided by "TaskField" mixin
        // we need to fire "taskupdated" ourself
        if (!silent) toTask.fireEvent('taskupdated', toTask, this);
    }

});

/*
 * @class Gnt.column.ResourceName
 * @extends Ext.grid.Column
 * @private
 * Private class used inside Gnt.widget.AssignmentGrid.
 */
Ext.define('Gnt.column.ResourceName', {
    extend         : 'Ext.grid.column.Column',
    alias          : 'widget.resourcenamecolumn',
    mixins         : ['Gnt.mixin.Localizable'],

    dataIndex      : 'ResourceName',
    flex           : 1,
    align          : 'left',

    constructor : function (config) {
        config = config || {};

        this.text   = config.text || this.L('text');
        
        Ext.apply(this, config);

        this.callParent(arguments);
    }
});

/*
 * @class Gnt.column.AssignmentUnits
 * @extends Ext.grid.Column
 * @private
 * Private class used inside Gnt.widget.AssignmentGrid.
 */
Ext.define("Gnt.column.AssignmentUnits", {
    extend      : "Ext.grid.column.Number",
    mixins      : ['Gnt.mixin.Localizable'],
    alias       : "widget.assignmentunitscolumn",

    dataIndex   : 'Units',
    format      : '0 %',
    align       : 'left',

    constructor : function (config) {
        config = config || {};        

        this.text   = config.text || this.L('text');
        this.scope = this;

        this.callParent(arguments);
    },

    // HACK, without 3 arguments the grid doesn't behave sanely
    renderer : function(value, meta, record) {
        if (value) return Ext.util.Format.number(value, this.format);
    }
});

/**
 @class Gnt.widget.AssignmentGrid
 @extends Ext.grid.Panel

 A class used to display and edit the task assignments. You can configure this through the {@link Gnt.widget.AssignmentField#gridConfig gridConfig} object
 available on the {@link Gnt.widget.AssignmentField} class.

 */
Ext.define('Gnt.widget.AssignmentGrid', {
    extend                  : 'Ext.grid.Panel',
    alias                   : 'widget.assignmentgrid',

    requires                : [
        'Gnt.model.AssignmentEditing',
        'Gnt.column.ResourceName',
        'Gnt.column.AssignmentUnits',
        'Ext.grid.plugin.CellEditing'
    ],

    /**
     * @cfg {Ext.data.Store} assignmentStore A store with assignments
     */
    assignmentStore         : null,

    /**
     * @cfg {Ext.data.Store} resourceStore A store with resources
     */
    resourceStore           : null,

    readOnly                : false,
    cls                     : 'gnt-assignmentgrid',

    defaultAssignedUnits    : 100,
    taskId                  : null,

    cellEditing             : null,

    assignmentUnitsEditor   : null,

    // HACK, breaks too many features
    bufferedRenderer        : false,

    sorter : {
        sorterFn : function (o1, o2) {
            var un1 = o1.getUnits(),
                un2 = o2.getUnits();

            if ((!un1 && !un2) || (un1 && un2)) {
                return o1.get('ResourceName') < o2.get('ResourceName') ? -1 : 1;
            }

            return un1 ? -1 : 1;
        }
    },

    constructor : function (config) {
        var me = this;
        this.store = Ext.create("Ext.data.JsonStore", {
            model : 'Gnt.model.AssignmentEditing'
        });

        this.columns = this.buildColumns();

        if (!this.readOnly) {
            this.plugins = this.buildPlugins();
        }

        Ext.applyIf(this, {
            selModel : {
                selType   : 'checkboxmodel',
                mode      : 'MULTI',
                checkOnly : true
            }
        });

        this.callParent(arguments);
    },

    initComponent : function () {
        this.loadResources();

        this.mon(this.resourceStore, {
            datachanged : this.loadResources,
            scope       : this
        });

        this.callParent(arguments);

        this.getSelectionModel().on({
            select   : this.onSelect,
            deselect : this.onDeselect,
            scope    : this
        });
    },

    onSelect : function (sm, rec) {
        if ((!this.cellEditing || !this.cellEditing.getActiveEditor()) && !rec.getUnits()) {
            rec.setUnits(this.defaultAssignedUnits);
        }
    },

    onDeselect : function (sm, rec) {
        rec.setUnits(0);
    },

    loadResources : function () {
        var data = [],
            rs = this.resourceStore;

        for (var i = 0, l = rs.getCount(); i < l; i++) {
            var resource = rs.getAt(i);

            data.push({
                ResourceId   : resource.getId(),
                ResourceName : resource.getName(),
                Units        : ''
            });
        }
        this.store.loadData(data);
    },

    // @private
    buildPlugins  : function () {
        var cellEditing = this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
            clicksToEdit: 1
        });

        cellEditing.on('edit', this.onEditingDone, this);

        return [
            cellEditing
        ];
    },

    hide : function () {
        this.cellEditing.cancelEdit();
        this.callParent(arguments);
    },

    onEditingDone : function (ed, e) {
        // Make sure row is selected after editing a cell
        if (e.value) {
            this.getSelectionModel().select(e.record, true);
        } else {
            this.getSelectionModel().deselect(e.record);
            e.record.reject();
        }
    },

    // @private
    buildColumns  : function () {
        return [
            {
                xtype : 'resourcenamecolumn'
            },
            {
                xtype           : 'assignmentunitscolumn',
                assignmentStore : this.assignmentStore,
                editor          : {
                    xtype         : 'numberfield',
                    minValue      : 0,
                    step          : 10,
                    selectOnFocus : true
                }
            }
        ];
    },

    setEditableFields : function (taskId) {
        if (!this.assignmentUnitsEditor) this.assignmentUnitsEditor = this.down('assignmentunitscolumn').getEditor();

        var taskStore = this.assignmentStore && this.assignmentStore.getTaskStore(),
            task = taskStore && taskStore.getModelById(taskId);

        if (task) {
            switch (task.getSchedulingMode()) {
                case 'DynamicAssignment' :
                    this.assignmentUnitsEditor.setReadOnly(true);
                    break;
                default :
                    this.assignmentUnitsEditor.setReadOnly(false);
            }
        }
    },

    loadTaskAssignments : function (taskId) {
        var store = this.store,
            sm = this.getSelectionModel();

        this.taskId = taskId;

        // clear all checkboxes
        sm.deselectAll(true);

        // Reset all "Units" values of all resource assignment records first
        for (var i = 0, l = store.getCount(); i < l; i++) {
            // should be ok to use field names here, since we are inheriting directly from Gnt.model.Assignment
            var record = store.getAt(i);
            record.data.Units = 0;
            record.data.Id = null;
            // after each saveTaskAssignments we should call loadTaskAssignments to set proper __id__'s on task assignments
            delete record.__id__;
        }


        var taskAssignments = this.assignmentStore.queryBy(function (a) {
            return a.getTaskId() == taskId;
        });

        taskAssignments.each(function (assignment) {
            var resourceAssignmentRecord = store.findRecord("ResourceId", assignment.getResourceId(), 0, false, true, true);

            if (resourceAssignmentRecord) {
                resourceAssignmentRecord.setUnits(assignment.getUnits());
                // can't assign to "idProperty" of the record because if "id" is missing
                // the store internal mapping will be broken (and "indexOf" method of the store will stop working)
                resourceAssignmentRecord.__id__ = assignment.getId();

                // mark the record with checkbox
                sm.select(resourceAssignmentRecord, true, true);
            }
        });

        // HACK: Weird Safari only bug
        // https://www.assembla.com/spaces/bryntum/tickets/1810-assignment-editor-doesn-t-work-on-safari#/activity/ticket:
        if (Ext.isSafari) {
            this.focus();
        }

        // Apply sort to show assigned resources at the top
        store.sort(this.sorter);

        // HACK Ext JS saves the sorter, remove it explicitly
        store.getSorters().removeAll();

        this.setEditableFields(taskId);
    },

    saveTaskAssignments : function () {
        var aStore = this.assignmentStore,
            taskId = this.taskId;

        var assignmentsToStay = {};
        var newAssignments = [];

        this.getSelectionModel().selected.each(function (resourceAssignmentRecord) {
            var units = resourceAssignmentRecord.getUnits();

            if (units > 0) {
                // if not undefined that means resource was assigned to another task
                var id = resourceAssignmentRecord.__id__;

                if (id) {
                    assignmentsToStay[id] = true;

                    aStore.getModelById(id).setUnits(units);
                } else {
                    var newAssignment = Ext.create(aStore.model);
                    newAssignment.setTaskId(taskId);
                    newAssignment.setResourceId(resourceAssignmentRecord.getResourceId());
                    newAssignment.setUnits(units);

                    assignmentsToStay[newAssignment.internalId] = true;

                    newAssignments.push(newAssignment);
                }
            }
        });

        var assignmentsToRemove = [];

        // Remove any assignments that
        // - are not phantom
        // - and have been unchecked (and thus are not included in `assignmentsToStay`)
        aStore.each(function (assignment) {
            //   assignment is for our task       | not phantom |       was unchecked
            if (assignment.getTaskId() == taskId && !assignmentsToStay[assignment.getId() || assignment.internalId]) {
                assignmentsToRemove.push(assignment);
            }
        });

        // Fire this event so UI can ignore the datachanged events possibly fired below
        aStore.fireEvent('beforetaskassignmentschange', aStore, taskId, newAssignments);

        aStore.suspendAutoSync();

        aStore.remove(assignmentsToRemove);

        // Add selected assignments for this task
        aStore.add(newAssignments);

        aStore.resumeAutoSync();

        // Fire this event so UI can just react and update the row for the task
        aStore.fireEvent('taskassignmentschanged', aStore, taskId, newAssignments);

        if (aStore.autoSync) {
            aStore.sync();
        }
    },

    isDataChanged : function () {
        var me = this;

        return me.store &&
            me.store.getUpdatedRecords().length > 0 ||
            me.store.getNewRecords().length > 0 ||
            me.store.getRemovedRecords().length > 0;
    },


    isDataValid : function () {
        var result = true;
        this.store.each(function (record) {
            if (!record.isValid()) {
                result = false;
                return false;
            }
        });
        return result;
    }

});

/**

@class Gnt.field.Assignment
@extends Ext.form.field.Picker

A specialized field to be used for editing in the {@link Gnt.column.ResourceAssignment} column.

*/

Ext.define('Gnt.field.Assignment', {
    extend              : 'Ext.form.field.Picker',

    alias               : ['widget.assignmentfield', 'widget.assignmenteditor'],
    alternateClassName  : 'Gnt.widget.AssignmentField',

    requires            : ['Gnt.widget.AssignmentGrid'],

    mixins              : ['Gnt.mixin.Localizable'],

    matchFieldWidth     : false,
    editable            : false,
    task                : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - cancelText : 'Cancel',
            - closeText  : 'Save and Close'
     */

    /**
     * @cfg {Gnt.data.AssignmentStore} assignmentStore A store with assignments
     */
    assignmentStore     : null,

    /**
     * @cfg {Gnt.data.ResourceStore} resourceStore A store with resources
     */
    resourceStore       : null,

    /**
     * @cfg {Object} gridConfig A custom config object used to configure the Gnt.widget.AssignmentGrid instance
     */
    gridConfig          : null,

    /**
     * @cfg {String} formatString A string defining how an assignment should be rendered. Defaults to '{0} [{1}%]'
     */
    formatString        : '{0} [{1}%]',

    /**
     * @cfg {Boolean} expandPickerOnFocus true to show the grid picker when this field receives focus.
     */
    expandPickerOnFocus : false,

    afterRender : function() {
        this.callParent(arguments);
        this.on('expand', this.onPickerExpand, this);

        if (this.expandPickerOnFocus) {
            this.on('focus', function() {
                this.expand();
            }, this, { delay : 1}); // Without delay, Ext JS messes up the positioning
        }
    },

    createPicker: function() {
        var grid = new Gnt.widget.AssignmentGrid(Ext.apply({
            frame       : true,
            floating    : true,

            height      : 200,
            width       : 300,

            resourceStore       : this.task.getResourceStore(),
            assignmentStore     : this.task.getAssignmentStore(),

            fbar                : this.buildButtons()
        }, this.gridConfig || {}));

        return grid;
    },


    buildButtons : function() {
        return [
            '->',
            {
                text        : this.L('closeText'),

                handler     : function () {
                    // when clicking on "close" button with editor visible
                    // grid will be destroyed right away and seems in IE there will be no
                    // "blur" event for editor
                    // this is also sporadically reproducable in FF
                    // doing a defer to let the editor to process the "blur" first (will take 1 + 10 ms delay)
                    // only then close the editor window
                    Ext.Function.defer(this.onSaveClick, Ext.isIE && !Ext.isIE9 ? 60 : 30, this);
                },
                scope       : this
            },
            {
                text        : this.L('cancelText'),

                handler     : function() {
                    this.collapse();
                },
                scope       : this
            }
        ];
    },

    setTask : function(task){
        this.task = task;
        this.setRawValue(this.getFieldDisplayValue(task));
    },

    onPickerExpand: function() {
        // Select the assigned resource in the grid
        this.picker.loadTaskAssignments(this.task.getId());
    },


    onSaveClick : function() {
        // Update the assignment store with the assigned resource data
        var sm = this.picker.getSelectionModel(),
            selections = sm.selected;

        this.collapse();

        this.fireEvent('select', this, selections);

        this.picker.saveTaskAssignments();
    },

    isDirty : function (task) {
        task            = task || this.task;
        if (!task) return false;

        var assignmentStore = this.picker && this.picker.assignmentStore || task.getAssignmentStore(),
            assignments     = task.getAssignments();

        // check if some of task assignments are dirty
        for (var i = 0, l = assignments.length; i < l; i++) {
            if (assignments[i].dirty || assignments[i].phantom) return true;
        }

        if (assignmentStore) {
            assignments = assignmentStore.getRemovedRecords();
            // check if there are some unsaved assignments removed from the task
            for (i = 0, l = assignments.length; i < l; i++) {
                if (assignments[i].getTaskId() == task.getId()) return true;
            }
        }

        return false;
    },

    getFieldDisplayValue : function(task) {
        task = task || this.task;

        var names               = [],
            assignments         = task.getAssignments();

        for (var i = 0, l = assignments.length; i < l; i++) {
            var assignment  = assignments[i];

            if (assignment.getUnits() > 0) {
                names.push(Ext.String.format(this.formatString, assignment.getResourceName(), assignment.getUnits()));
            }
        }
        return names.join(', ');
    }
});

/**

 @class Gnt.field.Note
 @extends Ext.form.field.Picker

 A specialized field to be used for editing in the {@link Gnt.column.Note} column.

 */

Ext.define('Gnt.field.Note', {
    extend              : 'Ext.form.field.Picker',

    alias               : ['widget.notefield', 'widget.noteeditor'],
    alternateClassName  : 'Gnt.widget.NoteField',

    requires            : ['Ext.form.field.HtmlEditor'],

    mixins              : ['Gnt.field.mixin.TaskField', 'Gnt.mixin.Localizable'],

    matchFieldWidth     : false,
    editable            : false,

    /**
     * @cfg {Object} pickerConfig Configuration of the field picker (Ext.form.field.HtmlEditor instance)
     */
    pickerConfig        : null,

    /**
     * @cfg {Function} previewFn
     * Function to return raw field value. If not provided the field uses text stripped of tags
     */
    previewFn           : null,
    /**
     * @cfg {Function} previewFnScope
     * Scope for {!link #previewFn} function to return raw field value
     */
    previewFnScope      : null,

    taskField           : 'noteField',
    getTaskValueMethod  : 'getNote',
    setTaskValueMethod  : 'setNote',

    afterRender : function() {
        this.callParent(arguments);
        this.on('collapse', this.onPickerCollapse, this);
    },


    valueToVisible : function (value) {
        if (this.previewFn) {
            return this.previewFn.call(this.previewFnScope || this, value);
        } else {
            return Ext.util.Format.stripTags(value);
        }
    },


    createPicker: function() {
        var field = new Ext.form.field.HtmlEditor(Ext.apply({
            frame       : true,
            shadow      : false,
            floating    : true,
            height      : 200,
            width       : 300,
            listeners   : {
                change : this.onPickerChange,
                scope  : this
            }
        }, this.pickerConfig || {}));

        return field;
    },

    onPickerChange : function (picker, value) {
        this.setRawValue(this.valueToVisible(value));
    },

    getValue : function () {
        return this.getPicker().getValue();
    },

    setValue : function (value) {
        this.callParent([ this.valueToVisible(value) ]);

        this.getPicker().setValue(value);

        if (this.instantUpdate && !this.getSuppressTaskUpdate() && this.task) {
            this.applyChanges();
        }
    },

    onPickerCollapse : function() {
        this.setValue(this.getPicker().getValue());
    },

    onTriggerClick: function() {
        var me = this;

        if (!me.readOnly && !me.disabled) {
            if (me.isExpanded) {
                me.collapse();
            } else {
               me.expand();
            }
        }
    }
});

/**

@class Gnt.column.ResourceAssignment
@extends Ext.grid.column.Column

{@img gantt/images/resource-assignment.png}

A Column showing the resource assignments of a task. To make the column editable,
add the {@link Sch.plugin.TreeCellEditing} plugin to your gantt panel:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'resourceassignmentcolumn',
                width       : 80
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

*/
Ext.define("Gnt.column.ResourceAssignment", {
    extend      : "Ext.grid.column.Column",
    alias       : [
        "widget.resourceassignmentcolumn",
        "widget.ganttcolumn.resourceassignment"
    ],
    requires    : ['Gnt.field.Assignment'],
    mixins      : ['Gnt.mixin.Localizable'],

    tdCls       : 'sch-assignment-cell',

    /**
     * @cfg {Boolean} showUnits Set to `true` to show the assignment units (in percent). Default value is `true`.
     */
    showUnits   : true,

    // Reference to the field used by the Editor
    field       : null,

    // Copied from the panel view if cells for this columns should be marked dirty
    dirtyCls    : null,

    constructor : function(config) {
        config      = config || {};



        this.text   = config.text || this.L('text');

        var field   = config.editor;
        var showUnits = config.showUnits || this.showUnits;

        delete config.editor;

        config.editor   = field || {};

        if (!(config.editor instanceof Ext.form.Field)) {
            config.editor   = Ext.ComponentManager.create(Ext.applyIf(config.editor, {
                expandPickerOnFocus : true,
                formatString        : '{0}' + (showUnits ? ' [{1}%]' : '')
            }), 'assignmentfield');
        }

        config.field = config.editor;

        this.callParent([ config ]);

        this.scope          = this;

        if (this.field){
            // HACK, complete editing when the field is collapsed
            this.field.on('collapse', function() {
                this.up('ganttpanel').ganttEditingPlugin.completeEdit();
            }, this);
        }
    },

    afterRender: function() {
        var view       = this.up('treepanel').getView();

        // Check if the current view is configured to highlight dirty cells
        if (view.markDirty) {
            this.dirtyCls = view.dirtyCls;
        }

        this.callParent(arguments);
    },

    renderer : function(value, meta, task) {
        if (this.dirtyCls && this.field.isDirty(task)) {
            meta.tdCls   = this.dirtyCls;
        }

        return this.field.getFieldDisplayValue(task);
    }
});

/**
@class Gnt.column.mixin.TaskFieldColumn
This class implement common logic for fields that have a field mixed with {@link Gnt.field.mixin.TaskField} class as an editor.
Also it makes the column localizable by mixing it with {@link Gnt.mixin.Localizable} class.
*/
Ext.define('Gnt.column.mixin.TaskFieldColumn', {

    extend              : 'Ext.Mixin',

    requires            : [
        'Gnt.patches.TreeColumn'
    ],

    mixins              : [
        'Gnt.mixin.Localizable'
    ],

    /**
     * @cfg {Boolean} instantUpdate Set to `true` to instantly apply any changes in the field to the task.
     * This option is just translated to the {@link Gnt.field.mixin.TaskField#instantUpdate} config option.
     */
    instantUpdate       : false,

    /**
     * @property {Ext.form.field.Field} Reference to the field used by the editor
     */
    field               : null,

    fieldProperty       : '',

    fieldConfigs        : 'instantUpdate',

    defaultEditorXType  : '',

    mixinConfig         : {

        after           : {
            initComponent   : 'afterInitComponent'
        },

        afterIf        : {
            applyColumnCls  : 'applyColumnCls'
        }
    },


    initTaskFieldColumn : function (editorCfg) {
        this.text       = this.config.text || this.L('text');

        if (this.defaultEditorXType) this.initColumnEditor(editorCfg);

        this.scope      = this.scope || this;

        if (this.renderer) {
            this.providedRenderer       = this.renderer;
            this.providedRendererScope  = this.scope;

        } else {
            this.providedRenderer       = this.getValueToRender;
            this.providedRendererScope  = this;
        }

        var me  = this;

        this.renderer   = function () {
            return me.taskFieldRenderer.apply(me, arguments);
        };

        this.mon(this, 'render', this.onColumnRender, this);
    },


    applyColumnCls : function (value, meta, task) {
        if (!task.isEditable(this.dataIndex)) {
            meta.tdCls      = (meta.tdCls || '') + ' sch-column-readonly';
        }
    },


    afterInitComponent : function () {
        // Make sure Ext 'understands' this column has its own renderer which makes sure this column is always updated
        // if any task field is changed
        this.hasCustomRenderer  = true;
    },


    initColumnEditor : function (editorCfg) {
        editorCfg   = Ext.copyTo(editorCfg || {}, this, this.fieldConfigs, true);

        if (!(this.editor instanceof Ext.ClassManager.getByAlias('widget.' + this.defaultEditorXType))) {
            this.editor = Ext.ComponentManager.create(Ext.applyIf(this.editor || {}, editorCfg), this.defaultEditorXType);
        }

        this.field    = this.editor;
    },


    onColumnRender : function() {
        var tree        = this.up('treepanel');
        var taskStore   = tree.store;

        if (!this.dataIndex) {
            this.dataIndex = taskStore.model.prototype[ this.fieldProperty ];
        }
    },


    getValueToRender : function (value, meta, task) {
        var field   = this.field;

        return field && field.valueToVisible(value, task) || value;
    },


    taskFieldRenderer : function (value, meta, task) {
        var result  = Ext.util.Format.htmlEncode( this.providedRenderer.apply(this.providedRendererScope, arguments) );

        this.applyColumnCls(value, meta, task);

        return result;
    },


    afterClassMixedIn : function (cls) {
        var mixin       = this.prototype,
            mixinConfig = mixin.mixinConfig,
            befores     = mixinConfig && mixinConfig.beforeIf,
            afters      = mixinConfig && mixinConfig.afterIf;

        befores && Ext.Object.each(befores, function (key, value) {
            if (key in cls.prototype) {

                cls.addMember(key, function () {
                    if (mixin[value].apply(this, arguments) !== false) {
                        return this.callParent(arguments);
                    }
                });

            } else {

                cls.addMember(key, function () {
                    mixin[value].apply(this, arguments);
                });

            }
        });

        afters && Ext.Object.each(afters, function (key, value) {
            if (key in cls.prototype) {

                cls.addMember(key, function () {
                    this.callParent(arguments);
                    mixin[value].apply(this, arguments);
                });

            } else {

                cls.addMember(key, function () {
                    mixin[value].apply(this, arguments);
                });

            }
        });
    }
});

/**

@class Gnt.column.Name
@extends Ext.tree.Column

A Column representing the `Name` field of a task. The column is editable, however to enable the editing you will need to add a
`Sch.plugin.TreeCellEditing` plugin to your gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        // Setup your grid columns
        columns         : [
            ...
            {
                xtype       : 'namecolumn',
                width       : 200
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

*/
Ext.define('Gnt.column.Name', {
    extend              : 'Ext.tree.Column',

    alias               : [
        'widget.namecolumn',
        'widget.ganttcolumn.name'
    ],

    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

        - text : 'Task Name'
     */

    // Ext 5.1.0 sets this to false
    draggable           : true,

    fieldProperty       : 'nameField',

    defaultEditorXType  : 'textfield',

    initComponent : function () {
        this.initTaskFieldColumn({
            allowBlank  : false
        });

        this.callParent(arguments);
    },


    applyColumnCls : function (value, meta, task) {
        if (task && task.isProject) {
            meta.tdCls = (meta.tdCls || '') + ' sch-gantt-project-name';
        }
    },


    getValueToRender : function (value) {
        return value;
    }

});

/**
@class Gnt.column.Note
@extends Ext.grid.column.Column

A Column showing the `Note` field of the task.

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'notecolumn',
                width       : 80
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

*/
Ext.define("Gnt.column.Note", {
    extend              : "Ext.grid.column.Column",

    requires            : ['Gnt.field.Note'],

    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    alias               : [
        "widget.notecolumn",
        "widget.ganttcolumn.note"
    ],

    defaultEditorXType  : 'notefield',

    fieldProperty       : 'noteField',

    previewFn           : null,
    previewFnScope      : null,

    fieldConfigs        : [ 'instantUpdate', 'previewFn', 'previewFnScope' ],

    initComponent : function () {
        this.initTaskFieldColumn();
        this.callParent(arguments);
    }

});

/**

@class Gnt.column.EndDate
@extends Ext.grid.column.Date

A Column showing the `EndDate` field of the tasks. The column is editable when adding a
`Sch.plugin.TreeCellEditing` plugin to your gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'enddatecolumn',
                width       : 80
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

Note, that this column will provide only a day-level editor (using a subclassed Ext JS DateField). If you need a more precise editing (ie also specify
the start hour/minute) you will need to provide your own field (which should extend {@link Gnt.field.EndDate}). See this [forum thread][1] for more information.

[1]: http://bryntum.com/forum/viewtopic.php?f=16&t=2277&start=10#p13964

Note that the end date of task in gantt is not inclusive, however, this column will compensate the value when rendering or editing.
So for example, if you have a 1 day task which starts at 2011/07/20 and ends at 2011/07/21 (remember end date is not inclusive!),
this column will show the `2011/07/20` when rendering. It will also increase the date by 1 day after being edited.

Also note, that this class inherits from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-1/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format" option.

*/
Ext.define("Gnt.column.EndDate", {
    extend                  : "Ext.grid.column.Date",

    alias                   : [
        'widget.enddatecolumn',
        'widget.ganttcolumn.enddate'
    ],

    requires                : [
        'Ext.grid.CellEditor',
        'Gnt.field.EndDate'
    ],

    mixins                  : ['Gnt.column.mixin.TaskFieldColumn'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

        - text : 'Finish'
     */

    /**
     * @cfg {Number} width The width of the column.
     */
    width                   : 100,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align                   : 'left',

    /**
     * @cfg {String} editorFormat A date format to be used when editing the value of the column. By default it is the same as `format` configuration
     * option of the column itself.
     */
    editorFormat            : null,

    /**
     * @cfg {Boolean} adjustMilestones When set to `true`, the start/end dates of the milestones will be adjusted -1 day *during rendering and editing*. The task model will still hold unmodified date.
     */
    adjustMilestones        : true,

    /**
     * @cfg {Boolean} validateStartDate When set to `true`, the column will validate a "startDate <= endDate" condition and won't allow user to save the invalid end date.
     * Set it to `false` if you use different validation mechanism.
     */
    validateStartDate       : true,

    /**
     * @cfg {Boolean} keepDuration Pass `true` to keep the duration of the task ("move" the task), `false` to change the duration ("resize" the task).
     */
    keepDuration            : false,

    fieldProperty           : 'endDateField',

    fieldConfigs            : [ 'instantUpdate', 'adjustMilestones', 'keepDuration', 'validateStartDate' ],

    defaultEditorXType      : 'enddatefield',

    initComponent : function () {
        this.initTaskFieldColumn({
            format : this.editorFormat || this.format || Ext.Date.defaultFormat
        });

        this.callParent(arguments);
    },


    getValueToRender : function (value, meta, task) {
        return value && Ext.Date.format( this.field.valueToVisible(value, task), this.format ) || '';
    }

});

/**
@class Gnt.column.PercentDone
@extends Ext.grid.column.Number

A Column representing the `PercentDone` field of the task. The column is editable when adding a
`Sch.plugin.TreeCellEditing` plugin to your Gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'percentdonecolumn',
                width       : 80
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })


*/
Ext.define("Gnt.column.PercentDone", {
    extend      : "Ext.grid.column.Number",
    alias       : [
        "widget.percentdonecolumn",
        "widget.ganttcolumn.percentdone"
    ],

    mixins      : ['Gnt.mixin.Localizable'],

    width       : 50,
    format      : '0',
    align       : 'center',

    editor      : {
        xtype               : 'percentfield',
        decimalPrecision    : 0,
        minValue            : 0,
        maxValue            : 100
    },
    
    fieldProperty           : 'percentDoneField',


    constructor : function (config) {
        config          = config || {};



        this.text   = config.text || this.L('text');

        this.callParent(arguments);

        this.scope      = this;
    },


    afterRender: function() {
        var panel       = this.up('treepanel');

        if (!this.dataIndex) {
            this.dataIndex = panel.store.model.prototype[ this.fieldProperty ];
        }

        this.callParent(arguments);
    },


    renderer    : function (value, meta, task) {
        if (!task.isEditable(this.dataIndex)) {
            meta.tdCls      = (meta.tdCls || '') + ' sch-column-readonly';
        }
        return this.defaultRenderer(value, meta, task);
    }

});

/**

@class Gnt.column.StartDate
@extends Ext.grid.column.Date

A Column representing a `StartDate` field of a task. The column is editable, however to enable the editing you will need to add a
`Sch.plugin.TreeCellEditing` plugin to your gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'startdatecolumn',
                width       : 80
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

Note, that this column will provide only a day-level editor (using a subclassed Ext JS DateField). If you need a more precise editing (ie also specify
the start hour/minute) you will need to provide your own field which should subclass {@link Gnt.field.StartDate}. See [forumthread][1] for more information.

Also note, that this class inherits from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-1/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format" option.

[1]: http://bryntum.com/forum/viewtopic.php?f=16&t=2277&start=10#p13964

*/
Ext.define('Gnt.column.StartDate', {
    extend              : 'Ext.grid.column.Date',
    alias               : [
        'widget.startdatecolumn',
        'widget.ganttcolumn.startdate'
    ],

    requires            : ['Gnt.field.StartDate'],

    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - text : 'Start'
     */

    /**
     * @cfg {Number} width A width of the column, default value is 100
     */
    width               : 100,

    /**
     * @cfg {String} align An align of the text in the column, default value is 'left'
     */
    align               : 'left',

    /**
     * @cfg {String} editorFormat A date format to be used when editing the value of the column. By default it is the same as `format` configuration
     * option of the column itself.
     */
    editorFormat        : null,

    /**
     * @cfg {Boolean} adjustMilestones When set to `true`, the start/end dates of the milestones will be adjusted -1 day *during rendering and editing*. The task model will still hold unmodified date.
     */
    adjustMilestones    : true,

    /**
     * @cfg {Boolean} keepDuration Pass `true` to keep the duration of the task ("move" the task), `false` to change the duration ("resize" the task).
     */
    keepDuration        : true,

    fieldProperty       : 'startDateField',

    fieldConfigs        : [ 'instantUpdate', 'adjustMilestones', 'keepDuration' ],

    defaultEditorXType  : 'startdatefield',


    initComponent : function () {
        this.initTaskFieldColumn({
            format      : this.editorFormat || this.format || Ext.Date.defaultFormat
        });

        this.callParent(arguments);
    },


    getValueToRender : function (value, meta, task) {
        return value && Ext.Date.format(this.field.valueToVisible(value, task), this.format) || '';
    }
});

/**

@class Gnt.column.WBS
@extends Ext.grid.column.Date

A "calculated" Column which displays the WBS (Work Breakdown Structure) for the tasks - the position of the task in the project tree structure.
*/
Ext.define("Gnt.column.WBS", {
    extend      : "Ext.grid.column.Column",
    alias       : [
        "widget.wbscolumn",
        "widget.ganttcolumn.wbs"
    ],
    mixins      : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - text : 'WBS'
     */

    /**
     * @cfg {Number} width The width of the column.
     */
    width       : 40,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align       : 'left',

    sortable    : false,
    dataIndex   : 'index',

    constructor : function (config) {
        config = config || {};        

        this.text   = config.text || this.L('text');

        this.callParent(arguments);
    },

    renderer    : function (value, meta, task) {
        return task.getWBSCode();
    }
});

/**

@class Gnt.column.Sequence
@extends Ext.grid.column.Column

A "calculated" column which displays the sequential position of the task in the project. 
See {@link Gnt.model.Task#getSequenceNumber} for details.


*/
Ext.define("Gnt.column.Sequence", {
    extend      : "Ext.grid.column.Column",
    alias       : [
        "widget.sequencecolumn",
        "widget.ganttcolumn.sequence"
    ],

    mixins      : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - text : '#'
     */

    /**
     * @cfg {Number} width The width of the column.
     */
    width       : 40,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align       : 'right',

    sortable    : false,
    dataIndex   : 'index',

    constructor : function (config) {
        config = config || {};

        this.text   = config.text || this.L('text');

        this.callParent(arguments);
    },

    renderer    : function (value, meta, task) {
        return task.getSequenceNumber();
    }
});

/**

 @class Gnt.column.ManuallyScheduled
 @extends Ext.grid.column.Column

 A Column showing the `Manually Scheduled` field of a task.
 */

Ext.define("Gnt.column.ManuallyScheduled", {
    extend              : "Ext.grid.Column",
    alias               : [
        'widget.manuallyscheduledcolumn',
        'widget.ganttcolumn.manuallyscheduledcolumn'
    ],

    requires            : ['Gnt.field.ManuallyScheduled'],

    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    width               : 50,
    align               : 'center',

    instantUpdate       : false,

    defaultEditorXType  : 'manuallyscheduledfield',

    initComponent : function () {
        this.initTaskFieldColumn();

        this.callParent(arguments);
    },

    getValueToRender : function (value, meta, task) {
        return this.field.valueToVisible(task.isManuallyScheduled());
    }

});

/**

@class Gnt.column.SchedulingMode
@extends Ext.grid.column.Column

A Column showing the `SchedulingMode` field of a task. The column is editable when adding a
`Sch.plugin.TreeCellEditing` plugin to your Gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'schedulingmodecolumn',
                width       : 80
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })


*/
Ext.define("Gnt.column.SchedulingMode", {
    extend              : "Ext.grid.column.Column",

    requires            : ['Gnt.field.SchedulingMode'],
    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    alias               : [
        "widget.schedulingmodecolumn",
        "widget.ganttcolumn.schedulingmode"
    ],


    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - text : 'Mode'
     */

    /**
     * @cfg {Number} width The width of the column.
     */
    width               : 100,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align               : 'left',

    /**
     * @cfg {Array} data A 2-dimensional array used for editing in combobox. The first item of inner arrays will be treated as "value" and 2nd - as "display"
     */
    data                : null,

    /**
     * @cfg {Boolean} instantUpdate Set to `true` to instantly apply any changes in the field to the task.
     * This option is just translated to the {@link Gnt.field.mixin.TaskField#instantUpdate} config option.
     */
    instantUpdate       : false,

    fieldProperty       : 'schedulingModeField',

    defaultEditorXType  : 'schedulingmodefield',

    initComponent : function () {
        this.initTaskFieldColumn({
            store : this.data
        });

        this.callParent(arguments);
    }

});

/**
@class Gnt.column.AddNew
@extends Ext.grid.column.Column

A column allowing the user to add a new column to the Gantt chart. To include your own custom columns in this list,
 just create an alias for them starting with 'widget.ganttcolumn.XXX'. Example:

    Ext.define('Your.column.DeadlineDate', {
        extend              : 'Ext.grid.column.Date',

        alias               : [
            'widget.ganttcolumn.deadlinedate'
        ],

        ...
    });

*/
Ext.define("Gnt.column.AddNew", {
    extend      : "Ext.grid.column.Column",

    alias       : [
        "widget.addnewcolumn",
        "widget.ganttcolumn.addnew"
    ],

    requires    : [
        'Ext.form.field.ComboBox',
        'Ext.Editor'
    ],

    mixins      : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

        - text  : 'Add new column...'
     */

    text           : '',
    width          : 100,
    resizable      : false,
    sortable       : false,
    draggable      : false,
    colEditor      : null,
    colEditorStore : null,

    /**
     * @cfg {Array} [columnList] An array of column definition objects. It should be a list containing data as seen below
     *
     *      [
     *          { clsName : 'Gnt.column.StartDate', text : 'Start Date', config : {...} },
     *          { clsName : 'Gnt.column.Duration', text : 'Duration', config : {...} },
     *          ...
     *      ]
     *
     * If not provided, a list containing all the columns from the `Gnt.column.*` namespace will be created.
     * This default list can also be retrieved by {@link #buildDefaultColumnList} static method:
     *
     *     // get default column list
     *     var columns  = Gnt.column.AddNew.buildDefaultColumnList();
     *
     *     // find Gnt.column.StartDate column entry
     *     var column   = Ext.Array.findBy(columns, function (c) { return c.clsName == 'Gnt.column.StartDate'; });
     *
     *     // set custom date format to Gnt.column.StartDate
     *     column.config    = { format : 'Y' };
     *     column.text      = 'Start year';
     *
     *     Ext.create('Gnt.panel.Gantt', {
     *         ...
     *         columns  : [
     *             ...
     *             {
     *                 xtype        : 'addnewcolumn',
     *                 // provide customized list
     *                 columnList   : columns
     *             }
     *         ]
     *     });
     *
     */
    columnList  : null,

    initComponent : function() {
        if (!this.text) this.text = this.L('text');

        this.addCls('gnt-addnewcolumn');

        this.on({
            headerclick         : this.myOnHeaderClick,
            headertriggerclick  : this.myOnHeaderClick,
            scope               : this
        });

        this.callParent(arguments);
    },

    getGantt : function () {
        if (!this.gantt) {
            this.gantt = this.up('ganttpanel');
        }

        return this.gantt;
    },

    /**
     * @protected
     */
    getColEditor : function() {
        var me = this,
            editor;

        if (!me.colEditor) {
            editor = me.colEditor = new Ext.Editor({
                shadow      : false,
                updateEl    : false,
                itemId      : 'addNewEditor',

                // HACK: we need this editor to exist in the column header for scrolling of the grid
                renderTo    : me.el,
                offsets     : [20, 0],
                field       : new Ext.form.field.ComboBox({
                    displayField    : 'text',
                    valueField      : 'clsName',
                    hideTrigger     : true,
                    queryMode       : 'local',
                    forceSelection  : true,
                    multiSelect     : false,
                    listConfig      : {
                        itemId      : 'addNewEditorComboList',
                        minWidth    : 150
                    },
                    store           : me.getColEditorStore(),
                    listeners : {
                        render  : function() {
                            this.on('blur', function(){
                                editor.cancelEdit();
                            });
                        },
                        select  : me.onSelect,
                        scope   : me
                    }
                })
            });
        }

        return me.colEditor;
    },

    /**
     * @protected
     */
    getColEditorStore : function() {
        var me = this;

        if (!me.colEditorStore) {
            me.columnList = me.columnList || Gnt.column.AddNew.buildDefaultColumnList();

            me.colEditorStore = new Ext.data.Store({
                fields  : ['text', 'clsName', 'config'],
                data    : me.columnList,
                sorters : [{
                    property  : 'text',
                    direction : 'ASC'
                }]
            });
        }

        return me.colEditorStore;
    },

    /**
     * @private
     */
    myOnHeaderClick : function() {
        var me = this,
            editor,
            titleEl;

        titleEl = me.el.down('.' + Ext.baseCSSPrefix + 'column-header-text');
        editor = me.getColEditor();
        editor.startEdit(titleEl, '');
        editor.field.reset();
        editor.field.setWidth(this.getWidth() - 20);
        editor.field.expand();

        return false;
    },

    /**
     * @private
     */
    onSelect : function(combo, records) {
        var me  = this;

        me.colEditor.cancelEdit();
        me.addColumn(Ext.isArray(records) ? records[0] : records);
    },

    /**
     * @protected
     */
    addColumn : function(record) {
        var me              = this;
        var rec             = record;
        var owner           = me.ownerCt;
        var text            = rec.get('text');
        var config          = rec.get('config') || {};
        var clsName         = rec.get('clsName') || config.xclass || 'Ext.grid.column.Column';

        Ext.require(clsName, function() {
            var cls = Ext.ClassManager.get(clsName);

            var col = Ext.create(Ext.applyIf(config, {
                xclass    : clsName,
                dataIndex : me.getGantt().taskStore.model.prototype[cls.prototype.fieldProperty],
                text      : text
            }));

            owner.insert(owner.items.indexOf(me), col);
        });
    },

    statics : {
        /**
         * Builds the default column list to show in the combo box picker. The list will contain all columns matching the "widget.ganttcolumn.XXX" alias.
         *
         * @return {Object[]} Returns array of objects having following properties:
         * @return {String} return.clsName  Column class name
         * @return {String} return.text     Column label
         * @return {String} return.config   (optional) Column instance configuration
         */
        buildDefaultColumnList : function() {
            var list = [];

            Ext.Array.each(Ext.ClassManager.getNamesByExpression('widget.ganttcolumn.*'), function(name) {
                var cls = Ext.ClassManager.get(name);

                if (
                    cls !== Gnt.column.AddNew &&
                    !Gnt.column.AddNew.prototype.isPrototypeOf(cls.prototype)
                ) {
                    list.push({
                        clsName : name,
                        text    : cls.prototype.localize ? cls.prototype.localize('text') : cls.prototype.text
                    });
                }
            });

            return Ext.Array.sort(list, function(a, b) { return a.text > b.text ? 1 : -1; });
        }
    }
});

/**

@class Gnt.column.EarlyStartDate
@extends Ext.grid.column.Date

A Column displaying the earliest possible start date of a task.
This value is calculated based on earliest end dates of task's incoming dependencies.
If a task has no incoming dependencies then its start date is taken as earliest start date.

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'earlystartdatecolumn',
                width       : 80
            }
            ...
        ],
        ...
    })

Note, that this class inherit from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-2/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format".
*/
Ext.define('Gnt.column.EarlyStartDate', {
    extend              : 'Ext.grid.column.Date',

    mixins              : ['Gnt.mixin.Localizable'],

    alias               : [
        'widget.earlystartdatecolumn',
        'widget.ganttcolumn.earlystartdate'
    ],

    /**
     * @cfg {Number} width The width of the column.
     */
    width               : 100,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align               : 'left',

    /**
     * @cfg {Boolean} adjustMilestones When set to `true`, the start/end dates of the milestones will be adjusted -1 day *during rendering and editing*. The task model will still hold unmodified date.
     */
    adjustMilestones    : true,

    constructor : function (config) {
        config          = config || {};

        

        this.text   = config.text || this.L('text');

        this.callParent(arguments);

        this.renderer   = config.renderer || this.rendererFunc;
        this.scope      = config.scope || this;

        this.hasCustomRenderer = true;
    },

    afterRender : function() {
        var panel = this.up('ganttpanel');

        // Make top Gantt panel aware of the need for refreshing locked grid after changes in the dependency store
        panel.registerLockedDependencyListeners();

        this.callParent(arguments);
    },

    rendererFunc : function (value, meta, task) {
        meta.tdCls = (meta.tdCls || '') + ' sch-column-readonly';

        return task.getDisplayStartDate(this.format, this.adjustMilestones, task.getEarlyStartDate());
    }
});

/**

@class Gnt.column.EarlyEndDate
@extends Ext.grid.column.Date

A column displaying the earliest possible end date of a task.
This value is calculated based on the earliest end dates of the task predecessors.
If a task has no predecessors then its end date will be equal to its earliest end date.

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'earlyenddatecolumn',
                width       : 80
            }
            ...
        ],
        ...
    })

Note, that this class inherits from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-2/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format" option.
*/
Ext.define('Gnt.column.EarlyEndDate', {
    extend              : 'Ext.grid.column.Date',

    mixins              : ['Gnt.mixin.Localizable'],

    alias               : [
        'widget.earlyenddatecolumn',
        'widget.ganttcolumn.earlyenddate'
    ],

    /**
     * @cfg {Number} width The width of the column.
     */
    width               : 100,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align               : 'left',

    /**
     * @cfg {Boolean} adjustMilestones When set to `true`, the start/end dates of the milestones will be adjusted -1 day *during rendering and editing*. The task model will still hold the raw unmodified date.
     */
    adjustMilestones    : true,

    constructor : function (config) {
        config          = config || {};

        

        this.text   = config.text || this.L('text');

        this.callParent(arguments);

        this.renderer   = config.renderer || this.rendererFunc;
        this.scope      = config.scope || this;

        this.hasCustomRenderer = true;
    },

    afterRender : function() {
        var panel = this.up('ganttpanel');

        // Make top Gantt panel aware of the need for refreshing locked grid after changes in the dependency store
        panel.registerLockedDependencyListeners();

        this.callParent(arguments);
    },

    rendererFunc : function (value, meta, task) {
        meta.tdCls = (meta.tdCls || '') + ' sch-column-readonly';

        return task.getDisplayEndDate(this.format, this.adjustMilestones, task.getEarlyEndDate());
    }
});

/**

@class Gnt.column.LateStartDate
@extends Ext.grid.column.Date

A Column displaying the latest possible start date of a task.
This value is calculated as the latest start date of the dependent tasks for this task.
If a task has no successors then the column value is calculated as the project end date minus the task duration
(_project end date_ is the latest end date of all the tasks in the task store).

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'latestartdatecolumn',
                width       : 80
            }
            ...
        ],
        ...
    })

Note, that this class inherit from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-2/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format".
*/
Ext.define('Gnt.column.LateStartDate', {
    extend              : 'Ext.grid.column.Date',

    mixins              : ['Gnt.mixin.Localizable'],

    alias               : [
        'widget.latestartdatecolumn',
        'widget.ganttcolumn.latestartdate'
    ],

    /**
     * @cfg {Number} width The width of the column.
     */
    width               : 100,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align               : 'left',

    /**
     * @cfg {Boolean} adjustMilestones When set to `true`, the start/end dates of the milestones will be adjusted -1 day *during rendering and editing*. The task model will still hold unmodified date.
     */
    adjustMilestones    : true,

    constructor : function (config) {
        config          = config || {};

        

        this.text   = config.text || this.L('text');

        this.callParent(arguments);

        this.renderer   = config.renderer || this.rendererFunc;
        this.scope      = config.scope || this;

        this.hasCustomRenderer = true;
    },

    afterRender : function() {
        var panel = this.up('ganttpanel');

        // Make top Gantt panel aware of the need for refreshing locked grid after changes in the dependency store
        panel.registerLockedDependencyListeners();

        this.callParent(arguments);
    },

    rendererFunc : function (value, meta, task) {
        meta.tdCls = (meta.tdCls || '') + ' sch-column-readonly';

        return task.getDisplayStartDate(this.format, this.adjustMilestones, task.getLateStartDate());
    }
});

/**

@class Gnt.column.LateEndDate
@extends Ext.grid.column.Date

A Column displaying the latest possible end date of a task.
This value is calculated based on the latest start date of the task successors.
If a task has no successors then the project end date is used as its latest end date.

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'lateenddatecolumn',
                width       : 80
            }
            ...
        ],
        ...
    })

Note, that this class inherit from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-2/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format".
*/
Ext.define('Gnt.column.LateEndDate', {
    extend              : 'Ext.grid.column.Date',

    mixins              : ['Gnt.mixin.Localizable'],

    alias               : [
        'widget.lateenddatecolumn',
        'widget.ganttcolumn.lateenddate'
    ],

    width               : 100,

    align               : 'left',

    /**
     * @cfg {Boolean} adjustMilestones When set to `true`, the start/end dates of the milestones will be adjusted -1 day *during rendering and editing*. The task model will still hold the unmodified date.
     */
    adjustMilestones    : true,

    constructor : function (config) {
        config          = config || {};

        

        this.text   = config.text || this.L('text');

        this.callParent(arguments);

        this.renderer   = config.renderer || this.rendererFunc;
        this.scope      = config.scope || this;

        this.hasCustomRenderer = true;
    },

    afterRender : function() {
        var panel = this.up('ganttpanel');

        // Make top Gantt panel aware of the need for refreshing locked grid after changes in the dependency store
        panel.registerLockedDependencyListeners();

        this.callParent(arguments);
    },

    rendererFunc : function (value, meta, task) {
        meta.tdCls = (meta.tdCls || '') + ' sch-column-readonly';

        return task.getDisplayEndDate(this.format, this.adjustMilestones, task.getLateEndDate());
    }
});

/**

@class Gnt.column.Slack
@extends Ext.grid.column.Column

A column showing the available amount of slack for a task. The _slack_ (or _float_) is the amount of time that a task can be delayed
without causing a delay to any of its successors.

The slack is displayed in units specified by the {@link #slackUnit} config (by default it's displayed in _days_).


    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        // Setup your grid columns
        columns         : [
            ...
            {
                xtype       : 'slackcolumn',
                width       : 70
            }
            ...
        ],
        ...
    })

*/
Ext.define('Gnt.column.Slack', {
    extend              : 'Ext.grid.column.Column',

    requires            : ['Ext.Number', 'Sch.util.Date'],

    mixins              : ['Gnt.mixin.Localizable'],

    alias               : [
        'widget.slackcolumn',
        'widget.ganttcolumn.slack'
    ],

    /**
     * @cfg {Number} decimalPrecision A number of digits to show after the dot when rendering the value of the slack.
     */
    decimalPrecision    : 2,

    /**
     * @cfg {Boolean} useAbbreviation When set to `true`, the column will render the abbreviated slack unit name, not full.
     * Useful if the column width is limited.
     */
    useAbbreviation     : false,

    /**
     * @cfg {String} slackUnit The time unit to use when displaying the slack amount.
     */
    slackUnit           : 'd',

    width               : 100,

    align               : 'left',

    constructor : function (config) {
        config = config || {};

        this.text   = config.text || this.L('text');

        this.callParent(arguments);

        this.renderer   = config.renderer || this.rendererFunc;
        this.scope      = config.scope || this;

        this.hasCustomRenderer = true;
    },

    afterRender : function() {
        var panel = this.up('ganttpanel');

        // Make top Gantt panel aware of the need for refreshing locked grid after changes in the dependency store
        panel.registerLockedDependencyListeners();

        this.callParent(arguments);
    },

    rendererFunc : function (value, meta, task) {
        meta.tdCls = (meta.tdCls || '') + ' sch-column-readonly';

        value = task.getSlack();

        if (Ext.isNumber(value)) {
            return parseFloat(Ext.Number.toFixed(value, this.decimalPrecision)) + ' ' +
                Sch.util.Date[ this.useAbbreviation ? 'getShortNameOfUnit' : 'getReadableNameOfUnit' ](this.slackUnit, value !== 1);
        }

        return '';
    }
});

/**

@class Gnt.column.BaselineStartDate
@extends Ext.grid.column.Date

A Column displaying the baseline start date of a task.

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'baselinestartdatecolumn',
                width       : 80
            }
            ...
        ],
        ...
    })

Note, that this class inherit from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-2/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format" option.
*/
Ext.define('Gnt.column.BaselineStartDate', {
    extend              : 'Gnt.column.StartDate',

    requires            : ['Gnt.field.BaselineStartDate'],

    alias               : [
        'widget.baselinestartdatecolumn',
        'widget.ganttcolumn.baselinestartdate'
    ],

    width               : 100,

    fieldProperty       : 'baselineStartDateField',

    fieldConfigs        : [ 'instantUpdate', 'adjustMilestones' ],

    defaultEditorXType  : 'baselinestartdatefield'
});

/**

@class Gnt.column.BaselineEndDate

A Column displaying the baseline end date of a task.

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        columns         : [
            ...
            {
                xtype       : 'baselineenddatecolumn',
                width       : 80
            }
            ...
        ],
        ...
    })

Note, that this class inherit from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-2/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format" option.
*/
Ext.define('Gnt.column.BaselineEndDate', {
    extend              : 'Gnt.column.EndDate',

    requires            : ['Gnt.field.BaselineEndDate'],

    alias               : [
        'widget.baselineenddatecolumn',
        'widget.ganttcolumn.baselineenddate'
    ],

    width               : 100,

    fieldProperty       : 'baselineEndDateField',

    fieldConfigs        : [ 'instantUpdate', 'adjustMilestones', 'keepDuration', 'validateStartDate' ],

    defaultEditorXType  : 'baselineenddatefield'
});

/**
 @class Gnt.column.Milestone
 @extends Ext.grid.column.Column

 A Column showing if a task is a milestone or not.

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        // Setup your static columns
        columns         : [
            ...
            {
                xtype       : 'milestonecolumn',
                width       : 80
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    });


 */
Ext.define('Gnt.column.Milestone', {
    extend              : 'Ext.grid.column.Column',
    alias               : [
        'widget.milestonecolumn',
        'widget.ganttcolumn.milestone'
    ],

    requires            : ['Gnt.field.Milestone'],
    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    width               : 50,
    align               : 'center',

    defaultEditorXType  : 'milestonefield',

    initComponent : function () {
        this.initTaskFieldColumn();

        this.callParent(arguments);
    },

    getValueToRender : function (value, meta, task) {
        return this.field.valueToVisible(task.isMilestone());
    }
});

/**

@class Gnt.column.Rollup
@extends Ext.tree.Column

A Column which displays if the task should rollup to the parent task.
*/

Ext.define("Gnt.column.Rollup", {
    extend              : "Ext.grid.Column",
    alias               : [
        "widget.rollupcolumn",
        "widget.ganttcolumn.rollup"
    ],

    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    fieldProperty       : 'rollupField',

    defaultEditorXType  : 'combobox',

    initComponent : function () {
        this.initTaskFieldColumn({
            store : [
                [ false, this.L('no') ],
                [ true, this.L('yes') ]
            ]
        });

        this.callParent(arguments);
    },

    getValueToRender : function (value, meta, task) {
        return this.L(value ? 'yes' : 'no');
    }

});


/**
 * @class Gnt.column.Calendar
 * @extends Ext.grid.column.Column
 *
 * {@img gannt/images/calendar-field.png}
 *
 * A column representing a 'CalendarId' field of a task. The column is editable, however to enable the editing you will
 * need to add a `Sch.plugin.TreeCellEditing` plugin to your gantt panel. The overall setup will look like this:
 *
 *    var gantt = Ext.create('Gnt.panel.Gantt', {
 *        height      : 600,
 *        width       : 1000,
 *
 *        // Setup your static columns
 *        columns         : [
 *            ...
 *            {
 *                xtype       : 'calendarcolumn',
 *                width       : 80
 *            }
 *            ...
 *        ],
 *
 *        plugins             : [
 *            Ext.create('Sch.plugin.TreeCellEditing', {
 *                clicksToEdit: 1
 *            })
 *        ],
 *        ...
 *   });
 *
 * This column uses a field - {@link Gnt.field.Calendar} as the editor.
 */
Ext.define('Gnt.column.Calendar', {
    extend                  : 'Ext.grid.column.Column',

    alias                   : [
        'widget.calendarcolumn',
        'widget.ganttcolumn.calendar'
    ],

    requires                : [
        'Gnt.model.Calendar',
        'Gnt.field.Calendar'
    ],

    mixins                  : ['Gnt.column.mixin.TaskFieldColumn'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:
     *
     *  - text : 'Calendar'
     */

    /**
     * @cfg {Number} width
     * The width of the column.
     */
    width                   : 100,

    /**
     * @cfg {String} align
     * The alignment of the text in the column.
     */
    align                   : 'left',

    instantUpdate           : true,

    store                   : null,

    fieldProperty           : 'calendarIdField',

    fieldConfigs            : [ 'instantUpdate', 'store' ],

    defaultEditorXType      : 'calendarfield',

    initComponent : function () {
        this.initTaskFieldColumn({
            format      : this.editorFormat || this.format || Ext.Date.defaultFormat
        });

        this.callParent(arguments);
    },


    applyColumnCls : function (value, meta, task, col, index, store) {
        if (!value) {
            meta.tdCls  = (meta.tdCls || '') + ' gnt-default';
        }
    },


    getValueToRender : function (value, meta, task, col, index, store) {
        value       = value || (store.calendar ? store.calendar.calendarId : '');

        return this.field.valueToVisible(value, task) || value;
    }

});

/**
@class Gnt.widget.AssignmentEditGrid
@extends Ext.grid.Panel

A widget used to display and edit the task assignments.
You can find this widget at the `Resources` tab of {@link Gnt.widget.taskeditor.TaskEditor}.
There you can configure it through the {@link Gnt.widget.taskeditor.TaskEditor#assignmentGridConfig assignmentGridConfig} object
available both on the {@link Gnt.widget.taskeditor.TaskEditor} and on the {@link Gnt.plugin.TaskEditor} (if you use TaskEditor by plugin).

{@img gantt/images/assignment-edit-grid2.png}

{@img gantt/images/assignment-edit-grid1.png}

You can also use this grid in your components, standalone:

    // the task store of the project
    var taskStore           = myGanttPanel.taskStore

    var assignmentGrid      = new Gnt.widget.AssignmentEditGrid({
        assignmentStore         : taskStore.assignmentStore,
        resourceStore           : taskStore.resourceStore,

        // identifier of task which assignments have to be displayed
        taskId                  : 100,
        // turn off in-place resource adding
        addResources            : false,

        renderTo                : Ext.getBody(),

        width                   : 800,
        height                  : 600
    })

*/
Ext.define('Gnt.widget.AssignmentEditGrid', {
    extend      : 'Ext.grid.Panel',

    alias       : 'widget.assignmenteditgrid',

    requires    : [
        'Ext.data.JsonStore',
        'Ext.window.MessageBox',
        'Ext.form.field.ComboBox',
        'Ext.grid.plugin.CellEditing',
        'Gnt.util.Data',
        'Gnt.data.AssignmentStore',
        'Gnt.data.ResourceStore',
        'Gnt.column.ResourceName',
        'Gnt.column.AssignmentUnits'
    ],

    mixins                  : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Gnt.data.AssignmentStore} assignmentStore A store with assignments.
     */
    assignmentStore         : null,

    /**
     * @cfg {Gnt.data.ResourceStore} resourceStore A store with resources.
     */
    resourceStore           : null,

    /**
     * @cfg {Boolean} readOnly Whether this grid is read only.
     */
    readOnly                : false,

    cls                     : 'gnt-assignmentgrid',

    /**
     * @cfg {Number} defaultAssignedUnits Default amount of units. This value applies for new assignments.
     */
    defaultAssignedUnits    : 100,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - confirmAddResourceTitle : 'Confirm',
            - confirmAddResourceText  : 'No resource &quot;{0}&quot; in storage yet. Would you like to add it?',
            - noValueText             : 'Please select resource to assign',
            - noResourceText          : 'No resource &quot;{0}&quot; in storage'
     */
    /**
     * @cfg {Mixed} confirmAddResourceText A title for the confirmation window when a new resource is about to be added.
     * If you set this to `false`, no confirmation window will be displayed.
     * In this mode, for every "unknown" resource name entered into the combobox field, a new resource will be created.
     * @removed 2.5 Please use {@link #confirmAddResource} and {@link #l10n} instead.
     */

    /**
     * @cfg {Boolean} confirmAddResource False to not display a confirmation window before adding a new resource.
     */
    confirmAddResource      : true,

    /**
     * @cfg {Boolean} addResources `true` to enable in-place resource adding.
     */
    addResources            : true,

    /**
     * @property {String/Number} taskId Identifier of the task to which the assignments belong.
     */
    /**
     * @cfg {String/Number} taskId The task id indicating which assignments to load.
     * **Note**, that if the task doesn't have an identifier yet (a 'phantom' record), you can use its phantomId instead.
     */
    taskId                  : null,

    refreshTimeout          : 100,

    // copy of resource store
    resourceDupStore        : null,

    // copy of resource store used for resources combobox
    // (this store is affected by filters so we don't use `resourceDupStore` to always have "clean" copy there)
    resourceComboStore      : null,

    assignmentUnitsEditor   : null,

    constructor : function (config) {

        Ext.apply(this, config);

        var assignmentStore = config.assignmentStore;

        var taskStore = config.taskStore || assignmentStore.getTaskStore();

        // grid store ..we make it Gnt.data.AssignmentStore instance since
        // we need it could play this role in case we link grid with TaskForm.taskBuffer
        this.store      = config.store || new assignmentStore.self({
            model       : assignmentStore.model,
            taskStore   : taskStore
        });

        var resourceStore = taskStore.getResourceStore();

        this.resourceDupStore = config.resourceDupStore || new resourceStore.self({
            model       : resourceStore.model,
            taskStore   : taskStore
        });

        // resource combo store
        this.resourceComboStore = new Ext.data.JsonStore({
            model   :this.resourceDupStore.model
        });

        if (config.addResources !== undefined) {
            this.addResources = config.addResources;
        }

        this.columns        = this.buildColumns();

        if (!this.readOnly) {
            this.plugins = this.buildPlugins();
        }

        this.callParent(arguments);
    },

    initComponent : function() {
        this.loadResources();

        var refreshResources        = Ext.Function.createBuffered(this.loadResources, this.refreshTimeout, this, []);

        this.mon(this.resourceStore, {
            add         : refreshResources,
            remove      : refreshResources,
            load        : refreshResources,
            clear       : refreshResources
        });

        this.loadTaskAssignments();

        var refreshAssignments      = Ext.Function.createBuffered(this.loadTaskAssignments, this.refreshTimeout, this, []);

        this.mon(this.assignmentStore, {
            add         : refreshAssignments,
            remove      : refreshAssignments,
            load        : refreshAssignments,
            clear       : refreshAssignments
        });

        this.callParent(arguments);
    },


    loadResources : function (justResources) {
        if (!this.resourceStore) return false;

        // make a copy of resourceStore
        var data = Gnt.util.Data.cloneModelSet(this.resourceStore, function (copiedResource, srcResource) {
            // TODO: in ExtJS 5 Model::getId() always provides an id
            // each record without Id will be referred by internalId (comment outdated)
            if (!copiedResource.getId()) {
                // but we need to put it to Id field for combobox
                // since combobox valueField is set to get values from Id
                copiedResource.setId(srcResource.getId());
            }
        });

        this.resourceDupStore.loadData(data);

        // clone data to not affect real store
        this.resourceComboStore.loadData(data);

        // we reload assignments as well since they depend on resources list
        if (!justResources) {
            this.loadTaskAssignments();
        }

        return true;
    },


    getUnitsEditor : function () {
        if (!this.readOnly) {
            // in readOnly mode we dont have cellEditing plugin instance and thus we don't have getEditor method at all
            if (!this.assignmentUnitsEditor) this.assignmentUnitsEditor = this.down('assignmentunitscolumn').getEditor();
        }

        return this.assignmentUnitsEditor;
    },


    setEditableFields : function (task) {
        var unitsEditor     = this.getUnitsEditor();

        if (unitsEditor) {
            switch (task.getSchedulingMode()) {
                case 'DynamicAssignment' :
                    unitsEditor.setReadOnly(true);
                    break;
                default :
                    unitsEditor.setReadOnly(false);
            }
        }
    },


    /**
     * Loads task assignments from {@link #assignmentStore}.
     *
     * @param {Mixed} [taskId] The task id indicating which assignments to load.
     * If this parameter is not specified then it will use current {@link #property-taskId} value (identifier provided to this function before (if any)
     * or initially specified by {@link #cfg-taskId} config).
     * **Note**, that if the task doesn't have an identifier yet (a 'phantom' record), you can use the task phantomId instead.
     *
     * @return {Boolean} False if {@link #assignmentStore} doesn't yet exist or if no task identifier has been provided.
     * Otherwise returns `true`.
     */
    loadTaskAssignments : function (taskId) {
        taskId          = taskId || this.taskId;

        if (!taskId) return false;

        var taskStore   = this.taskStore || this.assignmentStore.getTaskStore(),
            task        = taskStore && taskStore.getModelById(taskId),
            taskAssignments;

        if (task) {
            taskAssignments = task.getAssignments();

        } else {
            if (!this.assignmentStore) return false;

            // grab assignments for this task only
            taskAssignments = this.assignmentStore.queryBy(function(a) {
                return a.getTaskId() == taskId;
            });
        }

        this.taskId     = taskId;

        var store       = this.store,
            resStore    = this.resourceDupStore,
            // clone assignments to not affect real records
            data        = Gnt.util.Data.cloneModelSet(taskAssignments, function (copiedAssignment, srcAssignment) {
                // get original resource Id
                var resId       = srcAssignment.getResourceId();
                // get cloned version of that resource
                var clonedRes   = resStore.queryBy(function (resource) {
                    var r   = resource.originalRecord;
                    return (r.getId() || r.internalId) == resId;
                });
                if (clonedRes.getCount()) {
                    clonedRes   = clonedRes.first();
                    // and bind cloned resource to copy of assignment instead of real resource
                    copiedAssignment.setResourceId(clonedRes.getId() || clonedRes.internalId);
                }
            });

        // load data to the store
        store.loadData(data);

        if (task && this.rendered) {
            this.setEditableFields(task);
        }

        return true;
    },


    /**
     * Adds a new assignment record and starts the editor.
     *
     * @param {Gnt.model.Assignment/Object} [newRecord] The new assignment to be added.
     * If this parameter is not provided, a new record will be created using the TaskId of the current task,
     * empty ResourceId field and Units field set to {@link #defaultAssignedUnits} amount.
     * @param {Boolean} [doNotActivateEditor=False] `true` to just insert record without activating editor after insertion.
     *
     * @return {Gnt.model.Assignment[]} The records that were added.
     */
    insertAssignment : function (newRecord, doNotActivateEditor) {
        if (!this.store) return;

        var model   = this.store.model.prototype,
            newRec  = {};

        if (newRecord) {
            newRec = newRecord;
        } else {
            newRec[model.unitsField]    = this.defaultAssignedUnits;
        }

        newRec[model.taskIdField]       = this.taskId;

        var added   = this.store.insert(0, newRec);

        var me              = this,
            oldValidator    = added[0].isValid;

        added[0].isValid    = function () {
            return oldValidator.apply(this, arguments) && me.isValidAssignment(this);
        };

        // there might be no cellEditing if the grid is in readOnly mode
        if (!doNotActivateEditor && this.cellEditing) {
            this.cellEditing.startEditByPosition({ row : 0, column : 0 });
        }

        return added;
    },

    /**
     * Checks if the data in the grid store is valid.
     * @return {Boolean}
     */
    isValid : function () {
        var result  = true;
        this.store.each(function (record) {
            if (!record.isValid()) {
                result  = false;
                return false;
            }
        });
        return result;
    },

    /**
     * Returns an array of task assignment error messages.
     * @return {String[]} Array of error messages.
     */
    getAssignmentErrors : function (assignment) {
        var resourceId  = assignment.getResourceId();
        if (!resourceId) return [this.L('noValueText')];

        if (!this.resourceDupStore.getModelById(resourceId)) {
            return [Ext.String.format(this.L('noResourceText'), resourceId)];
        }
    },

    isValidAssignment : function (assignment) {
        return !this.getAssignmentErrors(assignment);
    },


    // @private
    buildPlugins : function() {
        var cellEditing = this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
            clicksToEdit : 1
        });

        var oldStartEdit = cellEditing.startEdit;

        cellEditing.startEdit = function() {
            this.completeEdit();

            return oldStartEdit.apply(this, arguments);
        };

        cellEditing.on({
            beforeedit  : this.onEditingStart,

            scope       : this
        });

        return [cellEditing];
    },

    hide : function() {
        this.cellEditing.cancelEdit();
        return this.callParent(arguments);
    },

    onEditingStart  : function (ed, e) {
        var model   = this.store.model.prototype;

        if (e.field == model.resourceIdField) {
            this.assignment = e.record;
            // keep resourceId of record being edited
            this.resourceId = e.record.getResourceId();

            this.resourceComboStore.loadData(this.resourceDupStore.getRange());

            // and re-apply filter to refresh dataset
            this.resourceComboStore.filter(this.resourcesFilter);
        }
    },

    resourceRender : function (value, meta, assignment) {
        var errors  = this.getAssignmentErrors(assignment);

        if (errors && errors.length) {
            meta.tdCls  = Ext.baseCSSPrefix + 'form-invalid';
            meta.tdAttr = 'data-errorqtip="'+errors.join('<br>')+'"';
        } else {
            meta.tdCls  = '';
            meta.tdAttr = 'data-errorqtip=""';
        }

        var record  = this.resourceDupStore.getModelById(value);
        return Ext.String.htmlEncode((record && record.getName()) || value);
    },

    // filters resources store to exclude resources that already assigned to the task.
    filterResources : function (resource) {
        var resourceId      = resource.getId(),
            resourceField   = this.store.model.prototype.resourceIdField,
            show            = true;

        // record that is being edited should always be presented in combobox dataset
        if (resourceId !== this.resourceId) {
            // filter out already assigned resources
            this.store.each(function (assignment) {
                if (resourceId == assignment.get(resourceField)) {
                    show    = false;
                    return false;
                }
            });
        }

        return show;
    },

    onResourceComboAssert : function (combo) {
        var rawValue    = combo.getRawValue();

        if (rawValue) {

            var idx = this.resourceDupStore.findExact(combo.displayField, rawValue);

            var record  = idx !== -1 ? this.resourceDupStore.getAt(idx) : false;

            // if no matching record in store
            if (!record) {
                var assignment  = this.assignment;
                var me          = this;

                // callback to proceed with resource creation
                var addResource = function (deferred) {
                    var model       = me.resourceStore.model,
                        newResource = {};

                    // let`s add a new record with such name
                    newResource[model.prototype.nameField]    = combo.rawValue;

                    newResource = new model(newResource);
                    // set resource Id equal to internalId
                    // we need filled Id to combobox proper working
                    newResource.setId(newResource.internalId);

                    // push to store
                    var added   = me.resourceDupStore.add(newResource);
                    if (added && added.length) {
                        if (!deferred) {
                            combo.getStore().add(newResource);
                            // and set combobox value
                            combo.setValue(added[0].getId());
                        } else {
                            assignment.setResourceId(added[0].getId());
                        }
                    }
                };

                // if confirmation required
                if (this.confirmAddResource) {
                    var text    = Ext.String.format(this.L('confirmAddResourceText'), Ext.String.htmlEncode(rawValue));

                    Ext.Msg.confirm(this.L('confirmAddResourceTitle'), text, function (buttonId) {
                        if (buttonId == 'yes') {
                            addResource(true);
                        }
                    });
                } else {
                    addResource();
                }
            } else {
                combo.select(record, true);
            }
        }
    },

    buildColumns : function() {
        var me  = this;

        // task name column editor
        this.resourceCombo  = new Ext.form.field.ComboBox({
            queryMode           : 'local',
            store               : this.resourceComboStore,
            allowBlank          : false,
            editing             : this.addResources,
            validateOnChange    : false,
            autoSelect          : false,
            forceSelection      : !this.addResources,
            valueField          : this.resourceComboStore.model.prototype.idProperty,
            displayField        : this.resourceComboStore.model.prototype.nameField,
            queryCaching        : false,
            listConfig          : {
                // HTML encode combobox items
                getInnerTpl : function () {
                    return '{' + this.displayField + ':htmlEncode}';
                }
            }
        });

        this.resourcesFilter    = Ext.create('Ext.util.Filter', {
            filterFn    : this.filterResources,
            scope       : this
        });

        if (this.addResources) {
            // add new resource record to combo store before assertValue call
            Ext.Function.interceptBefore(this.resourceCombo, 'assertValue', function () {
                me.onResourceComboAssert(this);
            });
        }

        var task;

        // if taskId was provided on a construction step
        if (this.taskId) {
            var taskStore   = this.taskStore || this.assignmentStore.getTaskStore();
            // trying to get task
            task            = taskStore && taskStore.getModelById(this.taskId);
        }

        return [
            {
                xtype           : 'resourcenamecolumn',
                editor          : this.resourceCombo,
                dataIndex       : this.assignmentStore.model.prototype.resourceIdField,
                renderer        : this.resourceRender,
                scope           : this
            },
            {
                xtype           : 'assignmentunitscolumn',
                assignmentStore : this.assignmentStore,
                dataIndex       : this.assignmentStore.model.prototype.unitsField,
                editor          : {
                    xtype       : 'percentfield',
                    step        : 10,
                    // don't allow to edit for tasks with DynamicAssignment scheduling mode
                    readOnly    : task && task.getSchedulingMode() == 'DynamicAssignment'
                }
            }
        ];
    },


    saveResources : function () {
        Gnt.util.Data.applyCloneChanges(this.resourceDupStore, this.resourceStore);
    },


    /**
     * Persists task assignments to {@link #assignmentStore}.
     * @return {Boolean} `false` if saving error occures. Otherwise returns `true`.
     */
    saveTaskAssignments : function () {

        this.resourceStore.suspendEvents(true);
        this.assignmentStore.suspendEvents(true);

        // first we have to save resources in case of *new* resource assignment
        this.saveResources();

        var model       = this.store.model,
            comboStore  = this.resourceDupStore,
            result      = true;

        Gnt.util.Data.applyCloneChanges(this.store, this.assignmentStore, function (data) {
            // get assigned resource
            var resource    = comboStore.getById(this.getResourceId());
            // and its original record
            if (!resource || !resource.originalRecord) {
                // normally it should`t occur this way since we had to save resources at first
                result  = false;
                return;
            }
            var r   = resource.originalRecord;
            // now let's use real resource ID for saving
            data[model.prototype.resourceIdField] = r.getId() || r.internalId;
        });

        this.resourceStore.resumeEvents();
        this.assignmentStore.resumeEvents();

        return result;
    },


    isDataChanged : function() {
        var me = this;

        return me.store &&
               me.store.getUpdatedRecords().length > 0  ||
               me.store.getNewRecords().length > 0      ||
               me.store.getRemovedRecords().length > 0;
    },


    isDataValid : function() {
        var result  = true;
        this.store.each(function (record) {
            if (!record.isValid()) {
                result  = false;
                return false;
            }
        });
        return result;
    }

});

/**
@class Gnt.widget.DependencyGrid
@extends Ext.grid.Panel

A widget used to display and edit the dependencies of a task.
This widget is used as the `Predecessors` tab of the {@link Gnt.widget.taskeditor.TaskEditor}.
There you can configure it through the {@link Gnt.widget.taskeditor.TaskEditor#dependencyGridConfig dependencyGridConfig} object
available both on the {@link Gnt.widget.taskeditor.TaskEditor} and on the {@link Gnt.plugin.TaskEditor} classes.

{@img gantt/images/dependency-grid.png}

You can create an instance of the grid like this:

        dependencyGrid = Ext.create('Gnt.widget.DependencyGrid', {
            renderTo : Ext.getBody()
        });

To load data into the grid you can use the {@link #loadDependencies} method:

        // create grid
        dependencyGrid = Ext.create('Gnt.widget.DependencyGrid', {
            renderTo : Ext.getBody()
        });

        // load data
        dependencyGrid.loadDependencies(someTask);

* **Note:** If you plan to use this grid for tasks that don't belong to any taskStore you should specify a {@link #dependencyStore}:

        dependencyGrid = Ext.create('Gnt.widget.DependencyGrid', {
            renderTo        : Ext.getBody(),
            dependencyStore : dependencyStore
        });

Let's make our example more interesting by adding toolbar with buttons for editing:

        dependencyGrid = Ext.create('Gnt.widget.DependencyGrid', {
            renderTo        : Ext.getBody(),
            dependencyStore : dependencyStore,

            // toolbar with buttons
            tbar            : {
                items   : [
                    {
                        xtype       : 'button',
                        iconCls     : 'gnt-action-add',
                        text        : 'Add',
                        handler     : function() {
                            dependencyGrid.insertDependency();
                        }
                    },
                    {
                        xtype       : 'button',
                        iconCls     : 'gnt-action-remove',
                        text        : 'Remove',
                        handler     : function() {
                            var recs = dependencyGrid.getSelectionModel().getSelection();
                            if (recs && recs.length) {
                                dependencyGrid.store.remove(recs);
                            }
                        }
                    }
                ]
            }
        });

#Set grid direction

By default this grid displays predecessors of a task. To display successors instead, set the {@link #cfg-direction} config to 'successors'.
Example:

        dependencyGrid = Ext.create('Gnt.widget.DependencyGrid', {
            // set grid to display successors
            direction : 'successors'
        });

#Embedded checks

This class contains embedded transitivity and cycle detection algorithms. It runs them every time a new dependency is being added.
* **For example**: There is `Task A`->`Task B` and `Task B`->`Task C` dependencies.
In this case dependency `Task A`->`Task C` will be **transitive** and therefore will be considered invalid.
And dependency `Task C`->`Task A` (or `Task B`->`Task A`) will form a **cycle** and will also be considered invalid.

*/
Ext.define('Gnt.widget.DependencyGrid', {
    extend              : 'Ext.grid.Panel',
    alias               : 'widget.dependencygrid',

    requires            : [
        'Ext.data.JsonStore',
        'Ext.grid.plugin.CellEditing',
        'Ext.form.field.ComboBox',
        'Ext.util.Filter',
        'Gnt.model.Dependency',
        'Gnt.util.Data',
        'Gnt.field.Duration'
    ],

    mixins              : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Boolean} readOnly Whether this grid is read only.
     */
    readOnly            : false,

    /**
     * @cfg {Boolean} showCls Whether to show the column for `Cls` field of the dependencies.
     */
    showCls             : false,

    cls                 : 'gnt-dependencygrid',

    /**
     * @property {Gnt.model.Task} task A task dependencies of which are displayed.
     * @readonly
     */
    task                : null,

    /**
     * @cfg {Gnt.data.DependencyStore} dependencyStore A store with dependencies.
     */
    dependencyStore     : null,

    /**
     * @cfg {Gnt.model.Task} taskModel A task model class.
     * **Note:** This setting might be required when the grid shows dependencies of a task which subclasses {@link Gnt.model.Task}
     * and does not belong to any task store (and task store is not specified in dependency store as well).
     */
    taskModel           : null,

    /**
     * @property {String} direction The type of dependencies that are displayed in the grid. Either 'predecessors' or 'successors'.
     * @readonly
     * **Note:** You should use this property for *reading only*.
     */

    /**
     * @cfg {String} direction Defines what kind of dependencies will be displayed in a grid. Either 'predecessors' or 'successors'.
     */
    direction           : 'predecessors',

    oppositeStore       : null,

    taskStoreListeners  : null,

    refreshTimeout      : 100,

    /**
     * @cfg {Boolean} allowParentTaskDependencies Set to `true` to include parent tasks in the list of possible predecessors/successors.
     */
    allowParentTaskDependencies     : false,

    /**
     * @cfg {Boolean} useSequenceNumber Set to `true` to use auto-generated sequential identifiers
     * to reference other tasks (see {@link Gnt.model.Task#getSequenceNumber} for definition).
     * If value is `false` then "real" id (that is stored in the database) will be used.
     */
    useSequenceNumber               : false,

    /**
     * @cfg {Object} l10n
     * A object, purposed for class localization. Contains the following keys/values:

        - idText                      : 'ID',
        - taskText                    : 'Task Name',
        - blankTaskText               : 'Please select task',
        - invalidDependencyText       : 'Invalid dependency',
        - parentChildDependencyText   : 'Dependency between child and parent found',
        - duplicatingDependencyText   : 'Duplicating dependency found',
        - transitiveDependencyText    : 'Transitive dependency',
        - cyclicDependencyText        : 'Cyclic dependency',
        - typeText                    : 'Type',
        - lagText                     : 'Lag',
        - clsText                     : 'CSS class',
        - endToStartText              : 'Finish-To-Start',
        - startToStartText            : 'Start-To-Start',
        - endToEndText                : 'Finish-To-Finish',
        - startToEndText              : 'Start-To-Finish'
     */

    /**
     * @property {Gnt.field.Duration} lagEditor Editor instance used for the `Lag` column editing.
     */
    lagEditor                       : null,

    /**
     * @property {Ext.form.field.ComboBox} typesCombo Editor instance used for the `Type` column editing.
     */
    typesCombo                      : null,

    constructor : function (config) {
        config = config || {};

        // map locales from legacy configs
        Ext.Array.each(
            [
                'idText',
                'taskText',
                'blankTaskText',
                'invalidDependencyText',
                'parentChildDependencyText',
                'duplicatingDependencyText',
                'transitiveDependencyText',
                'cyclicDependencyText',
                'typeText',
                'lagText',
                'clsText',
                'endToStartText',
                'startToStartText',
                'endToEndText',
                'startToEndText'
            ],
            function (prop) {
                if (prop in config) this[prop] = config[prop];
            },
            this
        );


        this.store  = config.store || new Ext.data.JsonStore({
            model   : config.dependencyStore ? config.dependencyStore.model : 'Gnt.model.Dependency'
        });

        if (!this.readOnly) {
            this.plugins    = this.buildPlugins();
        }

        this.direction = config.direction || this.direction;

        // tweak to fill taskModel automatically if not provided
        if (!config.taskModel) {
            config.taskModel    = Ext.ClassManager.get('Gnt.model.Task');

            if (config.dependencyStore) {
                var taskStore   = config.dependencyStore.getTaskStore();
                if (taskStore) config.taskModel    = taskStore.model;
            }
        }

        if (config.oppositeStore) {
            this.setOppositeStore(config.oppositeStore);
        }

        this.callParent([ config ]);
    },

    initComponent : function() {

        if (this.task) {
            this.setTask(this.task);
            this.loadDependencies(this.task);
        }

        this.columns = this.buildColumns();

        this.callParent(arguments);
    },

    destroy : function () {

        if (this.deferredStoreBind) {
            this.tasksCombo.un('render', this.bindTaskStore, this);
        }

        this.tasksCombo.destroy();
        this.typesCombo.destroy();
        this.lagEditor.destroy();

        this.callParent(arguments);

        this.cellEditing.destroy();
    },


    setTask : function (task) {
        if (!task) return;

        this.task               = task;

        var dependencyStore     = task.dependencyStore || task.getTaskStore().dependencyStore;

        if (dependencyStore && dependencyStore !== this.dependencyStore) {
            if (this.dependencyStore) {
                this.mun(this.dependencyStore, this.onDependencyStoreDataChanged, this);
            }

            this.dependencyStore    = dependencyStore;

            if (this.typesCombo) {
                this.typesCombo.store.filter(this.typesFilter);
            }

            this.mon(this.dependencyStore, this.onDependencyStoreDataChanged, this);
        }

    },

    onDependencyStoreDataChanged : function () {
        this.loadDependencies();
    },

    buildPlugins : function() {

        var cellEditing = this.cellEditing = new Ext.grid.plugin.CellEditing({ clicksToEdit : 1 });

        cellEditing.on({
            beforeedit  : this.onEditingStart,
            edit        : this.onEditingDone,

            scope   : this
        });

        return [cellEditing];
    },


    hide : function() {
        this.cellEditing.cancelEdit();
        this.callParent(arguments);
    },


    onEditingStart  : function (ed, e) {
        var model   = this.store.model.prototype;

        switch (e.field) {
            case model.lagField: this.lagEditor.durationUnit = e.record.getLagUnit(); break;

            case model.typeField:
                this.typesCombo.store.filter(this.typesFilter);
                // if set of dependency types is restricted and allowed number of types is less than 2
                // we won't show dropdown list
                if (this.typesCombo.store.count() < 2) return false;
                break;

            //case model.fromField:
                //this.idValue    = this.direction === 'predecessors' ? e.record.getSourceId() : e.record.getTargetId();
                //break;
        }
    },


    onEditingDone : function (ed, e) {
        var model = this.store.model.prototype;

        if (e.field == model.lagField) {
            e.record.setLagUnit(this.lagEditor.durationUnit);
        }

        // after editing we refresh view since some records could become invalid
        this.getView().refresh();
    },

    // dependency type column renderer
    dependencyTypeRender : function (value) {
        var type  = this.store.model.Type;

        switch (value) {
            case type.EndToStart    : return this.L('endToStartText');
            case type.StartToStart  : return this.L('startToStartText');
            case type.EndToEnd      : return this.L('endToEndText');
            case type.StartToEnd    : return this.L('startToEndText');
        }

        return value;
    },


    // gets list of dependency errors, used at task column renderer
    taskValidate : function (value, depRec) {
        if (!value) {
            return [this.L('blankTaskText')];
        }
        if (!depRec.isValid()) {
            var errors  = this.getDependencyErrors(depRec);
            if (errors && errors.length) {
                return errors;
            }
            return [this.L('invalidDependencyText')];
        }
    },

    // task name column renderer
    taskRender : function (value, meta, depRec) {
        var errors  = this.taskValidate(value, depRec),
            record;

        if (errors && errors.length) {
            meta.tdCls  = Ext.baseCSSPrefix + 'form-invalid';
            meta.tdAttr = 'data-errorqtip="'+errors.join('<br>')+'"';
        } else {
            meta.tdCls  = '';
            meta.tdAttr = 'data-errorqtip=""';
        }

        var taskStore   = this.dependencyStore && this.dependencyStore.getTaskStore();
        if (taskStore) {
            record = taskStore.getModelById(value);
            return (record && Ext.String.htmlEncode(record.getName())) || '';
        }

        return '';
    },


    filterTasks : function (record) {
        var me     = this,
            taskId = record.getId(),
            method;

        if (this.direction === 'predecessors') {
            method  = 'getSourceId';
        } else {
            method  = 'getTargetId';
        }

        // filter out task itself
        return taskId != this.task.getId() &&
            // a links between a parent and its child
            !this.task.contains(record) && !record.contains(this.task) &&
            (this.allowParentTaskDependencies || record.isLeaf()) /*&&
            (!me.idValue ||
                ((taskId != me.idValue) &&
                    (this.store.findBy(function (dep) { return taskId == dep[method](); }) < 0)))*/;
    },


    bindTaskStore : function() {
        var taskStore   = this.dependencyStore && this.dependencyStore.getTaskStore();

        if (taskStore) {

            if (!this.taskStoreListeners) {
                // merge multiple refreshes to single one
                var refreshTasks    = Ext.Function.createBuffered(this.bindTaskStore, this.refreshTimeout, this, []);

                this.taskStoreListeners = this.mon(taskStore, {
                    nodeappend  : refreshTasks,
                    nodeinsert  : refreshTasks,
                    noderemove  : refreshTasks,
                    update      : refreshTasks,
                    refresh     : refreshTasks,
                    clear       : refreshTasks,
                    'nodestore-datachange-end'    : refreshTasks,
                    scope       : this,
                    destroyable : true
                });
            }

            // make new store
            var store   = new Ext.data.JsonStore({
                model   : taskStore.model,
                sorters : taskStore.model.prototype.nameField
            });

            var root = taskStore.getRootNode();

            // load tasks from tasks store
            store.loadData(Gnt.util.Data.cloneModelSet(taskStore.toArray(), function (rec, src) {
                if (src === root || src.hidden) return false;
                // set phantomId as Id for records without Id
                // we need it since combo's valueField is 'Id'
                if (!src.getId()) {
                    rec.setId(src.getId());
                }
            }));

            this.tasksFilter    = new Ext.util.Filter({
                filterFn    : this.filterTasks,
                scope       : this
            });

            // and apply filter to it
            store.filter(this.tasksFilter);

            this.tasksCombo.bindStore(store);
        }
    },


    buildTasksCombo : function () {
        var me  = this;

        return new Ext.form.field.ComboBox({
            queryMode       : 'local',
            allowBlank      : false,
            editing         : false,
            forceSelection  : true,
            valueField      : this.taskModel.prototype.idProperty,
            displayField    : this.taskModel.prototype.nameField,
            queryCaching    : false,
            listConfig      : {
                // HTML encode combobox items
                getInnerTpl : function () {
                    return '{' + this.displayField + ':htmlEncode}';
                }
            },
            validator       : function (value) {
                if (!value) {
                    return me.L('blankTaskText');
                }

                return true;
            }
        });
    },


    filterAllowedTypes : function (record) {
        if (!this.dependencyStore || !this.dependencyStore.allowedDependencyTypes) return true;

        var allowed     = this.dependencyStore.allowedDependencyTypes;
        var depType     = this.store.model.Type;

        for (var i = 0, l = allowed.length; i < l; i++) {
            var type    = depType[allowed[i]];
            if (record.getId() == type) return true;
        }

        return false;
    },


    buildTypesCombo : function () {
        var depType         = this.store.model.Type;

        // https://www.sencha.com/forum/showthread.php?300987-How-re-filter-chained-store.&viewfull=1#post1103214
        // assign id to filter fn to use filter(this.typesFilter)
        this.typesFilter    = new Ext.util.Filter({
            id          : 'typesfilter',
            filterFn    : this.filterAllowedTypes,
            scope       : this
        });

        var store           = new Ext.data.ArrayStore({
            fields      : [
               { name : 'id', type : 'int' },
               'text'
            ],
            data        : [
                [   depType.EndToStart,     this.L('endToStartText')     ],
                [   depType.StartToStart,   this.L('startToStartText')   ],
                [   depType.EndToEnd,       this.L('endToEndText')       ],
                [   depType.StartToEnd,     this.L('startToEndText')     ]
            ]
        });

        // and apply filter to it
        store.filter(this.typesFilter);

        return new Ext.form.field.ComboBox({
            triggerAction   : 'all',
            queryMode       : 'local',
            editable        : false,
            valueField      : 'id',
            displayField    : 'text',
            store           : store
        });
    },


    buildLagEditor : function () {
        return new Gnt.field.Duration({
            minValue : Number.NEGATIVE_INFINITY
        });
    },


    buildColumns : function () {
        var me          = this,
            model       = this.store.model.prototype,
            depType     = this.store.model.Type,
            cols        = [],
            taskStore   = this.dependencyStore && this.dependencyStore.getTaskStore();

        // task name column editor
        this.tasksCombo = this.buildTasksCombo();

        // if no taskStore yet let`s defer its binding
        if (!taskStore) {
            this.deferredStoreBind = true;
            this.tasksCombo.on('render', this.bindTaskStore, this);
        // let`s build & bind combobox store
        } else {
            this.bindTaskStore();
        }

        var idColumn    = {};

        if (this.useSequenceNumber) {
            idColumn =
                {
                    text        : this.L('snText'),
                    dataIndex   : model.fromField,
                    renderer    : function (value, meta, record) {
                        var store   = me.dependencyStore && me.dependencyStore.getTaskStore(),
                            node    = store && store.getModelById(record.get('From'));

                        return node ? node.getSequenceNumber() : '';
                    },
                    width       : 50
                };
        } else {
            idColumn =
                {
                    text        : this.L('idText'),
                    dataIndex   : model.fromField,
                    width       : 50
                };
        }

        cols.push(
            idColumn,
            {
                text        : this.L('taskText'),
                dataIndex   : model[this.direction === 'predecessors' ? "fromField" : "toField"],
                flex        : 1,
                editor      : this.tasksCombo,
                renderer    : function (value, meta, depRec) {
                    return me.taskRender(value, meta, depRec);
                }
            }
        );

        this.lagEditor  = this.buildLagEditor();

        this.typesCombo = this.buildTypesCombo();

        cols.push(
            {
                text        : this.L('typeText'),
                dataIndex   : model.typeField,
                width       : 120,
                renderer    : function (value) {
                    return me.dependencyTypeRender(value);
                },
                editor      : this.typesCombo
            },
            {
                text        : this.L('lagText'),
                dataIndex   : model.lagField,
                width       : 100,
                editor      : this.lagEditor,
                renderer    : function(value, meta, record) {
                    return me.lagEditor.valueToVisible(value, record.get(model.lagUnitField), 2);
                }
            },
            {
                text        : this.L('clsText'),
                dataIndex   : model.clsField,
                hidden      : !this.showCls,
                width       : 100
            }
        );

        return cols;
    },


    /**
     * Creates new record and starts process of its editing.
     * @param {Gnt.model.Dependency/Object} [newRecord] New dependency to be added.
     * @param {Boolean} [doNotActivateEditor=false] `true` to just insert record without starting the editing after insertion.
     * @return {Gnt.model.Dependency[]} The records that were added.
     */
    insertDependency  : function (newRecord, doNotActivateEditor) {
        if (!this.dependencyStore) return;

        var taskId  = this.task.getId(),
            model   = this.store.model.prototype,
            newRec  = {},
            me      = this;

        if (newRecord) {
            newRec = newRecord;
        } else {
            newRec[model.typeField]     = this.typesCombo.store.getAt(0).getId();
            newRec[model.lagField]      = 0;
            newRec[model.lagUnitField]  = 'd';
        }

        if (this.direction === 'predecessors') {
            newRec[model.toField]   = taskId;
        } else {
            newRec[model.fromField] = taskId;
        }

        var added   = this.store.insert(0, newRec);
        // bind our validator
        if (added.length) {
            var oldValidator    = added[0].isValid;
            added[0].isValid    = function () {
                return oldValidator.call(this, false) && me.isValidDependency(this);
            };
        }

        if (!doNotActivateEditor) {
            this.cellEditing.startEditByPosition({ row : 0, column : 1 });
        }

        return added;
    },

    onOppositeStoreChange : function () {
        this.getView().refresh();
    },

    setOppositeStore : function (store) {

        // this can be made public after resolving the problem with transitivity detection
        //
        // Sets store with opposite to the grid dependencies direction.
        // This can be used for example to implement two grids one with predecessors and another one with successors of the task.
        // Grids will work in conjunction and validation of one grid will instantly react on changes made in another one.
        // @param {Ext.data.Store} store Store with dependencies.
        // @example
        //      var predecessorsGrid = Ext.create('Gnt.widget.DependencyGrid', {
        //          direction       : 'predecessors',
        //          dependencyStore : dependencyStore,
        //          task            : task
        //      });
        //
        //      var successorsGrid = Ext.create('Gnt.widget.DependencyGrid', {
        //          direction       : 'successors',
        //          dependencyStore : dependencyStore,
        //          // set predecessors grid store as opposite to successors
        //          oppositeStore   : predecessorsGrid.store,
        //          task            : task
        //      });
        //
        //      // set successors grid store as opposite to predecessors
        //      predecessorsGrid.setOppositeStore(successorsGrid.store);
        //

        var listeners = {
            update      : this.onOppositeStoreChange,
            datachanged : this.onOppositeStoreChange,
            scope       : this
        };

        if (this.oppositeStore) {
            this.mun(this.oppositeStore, listeners);
        }

        this.oppositeStore = store;

        // on opposite store changes we will refresh grid view
        // since it can affect rows validity
        this.mon(this.oppositeStore, listeners);
    },

    /**
     * Loads task dependencies to grid store.
     * @param {Gnt.model.Task} task Task dependencies of which should be loaded.
     */
    loadDependencies : function (task) {
        var me = this;

        task = task || this.task;

        if (!task) return;

        if (this.task !== task) {
            this.setTask(task);
        }

        var data;

        if (this.direction === 'predecessors') {
            data = task.getIncomingDependencies(true);
            if (!this.oppositeStore) {
                this.oppositeData   = task.getOutgoingDependencies(true);
            }
        } else {
            data = task.getOutgoingDependencies(true);
            if (!this.oppositeStore) {
                this.oppositeData   = task.getIncomingDependencies(true);
            }
        }

        // let`s clone it to not affect real data
        // we save changes only by saveDependencies() call
        var result  = Gnt.util.Data.cloneModelSet(data, function (rec) {
            // validate record by our own validator
            var oldValidator    = rec.isValid;
            rec.isValid         = function () {
                return oldValidator.call(this, false) && me.isValidDependency(this);
            };
        });

        this.store.loadData(result);

        this.fireEvent('loaddependencies', this, this.store, result, task);
    },


    /*
     * Gets an array of error messages for provided dependency.
     */
    getDependencyErrors : function (dependency) {
        var me          = this,
            depStore    = me.dependencyStore,
            fromId      = me.task.getId(),
            toId        = fromId,
            errors      = [];

        if (me.direction === 'predecessors') {
            fromId      = dependency.getSourceId();
        } else {
            toId        = dependency.getTargetId();
        }

        var fromTask    = depStore.getSourceTask(fromId);
        var toTask      = depStore.getTargetTask(toId);

        me.store.each(function (dep) {
            var sourceId    = dep.getSourceId(),
                targetId    = dep.getTargetId();
            // check duplicating records
            if ((fromId == sourceId) && (toId == targetId) && (dep !== dependency)) {
                errors.push(me.L('duplicatingDependencyText'));
                return false;
            }
        });

        if (errors.length) return errors;

        // let's ask dependency store to validate the dependency
        // we have to provide list of records that we're gonna add to the dependency store
        var toAdd   = me.store.getRange();
        // ..minus dependency that we're validating
        toAdd.splice(Ext.Array.indexOf(toAdd, dependency), 1);
        // and list of existing ..old dependencies ..that we plan to remove/replace
        var oldDependencies = me.task[me.direction];
        // run validation
        var error   = depStore.getDependencyError(dependency, toAdd, oldDependencies);

        if (error) {
            switch (error) {
                case -3: case -8: case -5: case -6:
                    return [me.L('transitiveDependencyText')];
                case -4: case -7:
                    return [me.L('cyclicDependencyText')];
                case -9:
                    return [me.L('parentChildDependencyText')];
            }

            return [this.L('invalidDependencyText')];
        }

        return errors;
    },


    /*
     * Checks if the dependency is valid.
     */
    isValidDependency : function (dependency) {
        var errors = this.getDependencyErrors(dependency);

        return !errors || !errors.length;
    },


    /*
     * Checks if the grid is valid.
     */
    isValid : function () {
        var result  = true;
        this.store.each(function (record) {
            if (!record.isValid()) {
                result  = false;
                return false;
            }
        });
        return result;
    },

    /**
     * Applies all changes that have been made to grid data to dependency store.
     */
    saveDependencies : function () {
        if (!this.dependencyStore || !this.isValid()) return;

        // push changes from grid store to real dependencyStore
        Gnt.util.Data.applyCloneChanges(this.store, this.dependencyStore);
    },


    isDataChanged : function() {
        var me = this;

        return me.store &&
               me.store.getUpdatedRecords().length > 0  ||
               me.store.getNewRecords().length > 0      ||
               me.store.getRemovedRecords().length > 0;
    },


    isDataValid : function() {
        return this.isValid();
    }
});

/**
 @class Gnt.widget.taskeditor.BaseForm
 @extends Ext.form.Panel

 A mixin with common functionality for the taskform {@link Gnt.widget.taskeditor.TaskEditor}.

 */
Ext.define('Gnt.widget.taskeditor.BaseForm', {

    extend                  : 'Ext.form.Panel',

    /**
     * @cfg {Boolean} highlightTaskUpdates `true` to highlight fields updates initiated by changes of another fields.
     */
    highlightTaskUpdates    : true,

    /**
     * @cfg {Gnt.model.Task} task A task to load to the form.
     */
    /**
     * @property {Gnt.model.Task} task The task loaded in the form.
     */
    task                    : null,

    /**
     * @cfg {Gnt.model.Task} taskBuffer A task used to keep intermediate values of fields implemented by {@link Gnt.field.mixin.TaskField} mixin.
     */
    /**
     * @property {Gnt.model.Task} taskBuffer A task used to keep intermediate values of fields implemented by {@link Gnt.field.mixin.TaskField} mixin.
     */
    taskBuffer              : null,

    /**
     * @cfg {Gnt.data.TaskStore} taskStore A store with tasks.
     *
     * **Note:** This is required option if task being loaded isn't yet belong to any task store.
     */
    taskStore               : null,

    taskListeners           : null,

    autoScroll              : true,

    defaults                : {
        labelWidth : 110
    },

    border                  : false,
    layout                  : 'anchor',
    defaultType             : 'textfield',

    initComponent : function () {
        // if task provided on construction step
        if (this.task) {
            // get actual field names from task
            this.fieldNames = this.getFieldNames(this.task);
        }

        // if no fields definition provided we make default fields set
        if (!this.items) {
            this.buildFields();
        }

        this.callParent(arguments);

        if (this.task) {
            this.loadRecord(this.task, this.taskBuffer);
        }
    },

    getFieldNames : function (task) {
        if (!task) return;

        var result = {};

        for (var i in this.fieldNames) {
            result[i] = task[i];
        }

        return result;
    },

    // Renames form fields according to provided task model.
    renameFields : function (task) {
        var newFields   = this.getFieldNames(task);
        if (!newFields) return;

        var form    = this.getForm(),
            changed = false,
            field;

        for (var i in this.fieldNames) {
            field = form.findField(this.fieldNames[i]);

            // check if field name should be changed
            if (field && newFields[i] && newFields[i] != field.name) {
                changed     = true;
                field.name  = newFields[i];
            }
        }

        // if something was changed
        if (changed) {
            // keep new fields' names dictionary
            this.fieldNames = newFields;
        }
    },

    /**
     * Suppress task updates invoking by form fields. Calls setSuppressTaskUpdate() of each field that supports this method.
     * @param {Boolean} state Suppress or allow task updating.
     */
    setSuppressTaskUpdate : function (state) {
        var fields  = this.getForm().getFields();

        fields.each(function (field) {
            // if field contains setTask() method
            field.setSuppressTaskUpdate && field.setSuppressTaskUpdate(state);
        });
    },

    isDataChanged : function() {
        return this.isDirty();
    },


    buildTaskBuffer : function (task) {
        var me  = this;

        me.taskBuffer             = task.copy();
        // since copy() doesn't copy taskStore let`s copy it ourself
        me.taskBuffer.taskStore   = task.taskStore;
    },


    /**
     * Loads an Gnt.model.Task into this form.
     * @param {Gnt.model.Task} task The record to edit.
     * @param {Gnt.model.Task} [taskBuffer] The record to be used as a buffer to keep changed values of fields which implement {@link Gnt.field.mixin.TaskField}
     * mixin interface. This parameter can be used in case when you want to implement two form instances instantly
     * reflecting changes of each other:
     *
     *      // create 1st TaskForm instance
     *      var taskForm = Ext.create('Gnt.widget.taskeditor.TaskForm');
     *      // load record into 1st form
     *      taskForm.loadRecord(someTask);
     *
     *      // create 2nd TaskForm instance
     *      var anotherForm = Ext.create('Gnt.widget.taskeditor.TaskForm');
     *      // load the same record into 2nd form
     *      // and set to share taskBuffer with 1st form to immediately refect changes of each other
     *      anotherForm.loadRecord(someTask, taskForm.taskBuffer);
     */
    loadRecord : function (task, taskBuffer) {
        var me          = this;

        // if new or another task loading
        if (task && task !== me.task) {
            // let's rename form fields according to task model
            me.renameFields(task);
        }

        me.task         = task;
        me.taskBuffer   = taskBuffer;

        // if no pre-created taskBuffer provided, let`s create it
        if (!me.taskBuffer) {
            me.buildTaskBuffer(task);
        }

        // destroy previous task listeners if any
        me.taskListeners && me.taskListeners.destroy();

        // listen to 'taskupdated' event and update fields "readonly" state
        me.taskListeners = me.mon(me.taskBuffer, {
            taskupdated : me.onTaskUpdated,
            destroyable : true,
            scope       : me
        });

        var form        = me.getForm();

        // following code is modified implementation
        // of Ext.form.Basic setValues() method
        form._record    = task;

        this.suspendLayouts();

        var data = task.getData();

        form.getFields().each(function (field) {
            if (field.getName() in data) {
                // if field contains setTask() method
                // we gonna use it since setTask() execute setValue()
                if (field.setTask) {
                    field.setTask(me.taskBuffer);
                } else {
                    // set field value
                    field.setValue(data[field.getName()]);
                    // and set its readOnly state depending on task.isEditable() result
                    me.updateFieldReadOnly(field);
                }

                if (form.trackResetOnLoad) {
                    field.resetOriginalValue();
                }
            }
        });

        this.resumeLayouts(true);

        this.fireEvent('afterloadrecord', this, task);
    },


    updateFieldReadOnly : function (field) {
        var me = this;

        if (!field.disabled) {

            // editable = false requires special treatment
            if (field.editable === false) {
                // let's take into account Task.isEditable() result
                if (!me.taskBuffer.isEditable(field.name)) {
                    field.setReadOnly(true);

                    // when editable is false `readOnly` should be set to `true`
                } else if (field.inputEl) {
                    field.setReadOnly(false);
                    field.inputEl.dom.readOnly = true;
                }

            } else {
                // let's take into account Task.isEditable() result
                field.setReadOnly(!me.taskBuffer.isEditable(field.name));
            }
        }
    },


    // Updates readonly state of all the form fields
    updateReadOnly : function () {
        var me      = this,
            form    = me.getForm(),
            data    = me.taskBuffer.getData();

        form.getFields().each(function (field) {
            if (field.getName() in data && !field.isTaskField) me.updateFieldReadOnly(field);
        });
    },


    /**
     * Applies the values from this form into the passed {@link Gnt.model.Task} object.
     * If the task is not specified, it will attempt to update (if it exists) the record provided to {@link #loadRecord}.
     * @param {Gnt.model.Task} [task] The record to apply change to.
     */
    updateRecord : function (task) {
        var me = this;

        task = task || me.task;

        if (task && me.fireEvent('beforeupdaterecord', me, task, me.updateRecordFn) !== false) {
            me.setSuppressTaskUpdate(true);

            me.updateRecordFn.call(me, task);

            me.setSuppressTaskUpdate(false);
            me.fireEvent('afterupdaterecord', me, task);
            return true;
        }

        return false;
    },


    updateRecordWithFieldValue : function (task, field) {
        var modelField = task.getField(field.name);

        // if the field has applyChanges() method
        // we use it to apply changes to the task
        if (field.applyChanges) {
            field.applyChanges(task);

        // if there is a matching model field and the form field is supposed to be submittable (not displayfield or smth)
        } else if (modelField && field.name in this.getForm().getFieldValues()) {
            task.set(field.name, field.getValue());
        }
    },


    /**
     * A function that iterates the form fields and applies to changes to it. Override this function for custom logic.
     * @param task
     */
    updateRecordFn : function (task) {
        var me      = this;

        task.beginEdit();

        me.getForm().getFields().each(function (field) {
            me.updateRecordWithFieldValue(task, field);
        });

        task.endEdit();
    },


    // Applies "task", "taskStore", "highlightTaskUpdates" and "readOnly" configs to a field
    initFieldDefinition : function (field, cfg) {
        var me              = this;

        var commonParams    = {
            taskStore               : me.taskStore,
            task                    : me.task,
            highlightTaskUpdates    : me.highlightTaskUpdates
        };

        // if field isn't already read only then let's take into account Task.isEditable() result
        if (!field.readOnly && me.task) {
            commonParams.readOnly   = !me.task.isEditable(field.name);
        }

        return Ext.apply(field, commonParams, cfg);
    },


    // Gets the task field value
    getTaskFieldValue : function (field) {
        var me      = this,
            task    = this.task;

        return task ? task.get(me.fieldNames[field]) : '';
    },


    onTaskUpdated : function (task, field) {
        // let's update fields "readonly" status after task data has been modified
        this.updateReadOnly();
    }

});

/**
@class Gnt.widget.taskeditor.TaskForm
@extends Gnt.widget.taskeditor.BaseForm

{@img gantt/images/taskeditor-form.png}

This form is used to edit the task properties.
By default it supports editing of the following fields:

 - the name of the task (task title)
 - the start date of the task
 - the end date of the task
 - the task duration
 - the task effort
 - the current status of a task, expressed as the percentage completed
 - the baseline start date of the task (editing of this field is optional)
 - the baseline end date of the task (editing of this field is optional)
 - the baseline status of a task, expressed as the percentage completed (editing of this field is optional)
 - the calendar assigned to task
 - the scheduling mode for the task

* **Note:** However this standard set of fields can be easily overwritten (for more details check {@link #items}).

## Extending the default field set

The default field set can be overwritten using the {@link #items} config.
In case you want to keep the default fields and add some new custom fields, you can use the code below:

    // Extend the standard TaskForm class
    Ext.define('MyTaskForm', {
        extend : 'Gnt.widget.taskeditor.TaskForm',

        constructor : function(config) {
            this.callParent(arguments);

            // add some custom field
            this.add({
                fieldLabel  : 'Foo',
                name        : 'Name',
                width       : 200
            });
        }
    });

    // create customized form
    var form = new MyTaskForm({...});

*/
Ext.define('Gnt.widget.taskeditor.TaskForm', {
    // This form by default contains various "standard" fields of the task
    // and it "knows" about their "applyChanges" methods (for our fields),
    // and about renamed field names
    // This form can be also used with any other set of fields, provided
    // as the "items" config

    extend                  : 'Gnt.widget.taskeditor.BaseForm',

    alias                   : 'widget.taskform',

    requires                : [
        'Gnt.model.Task',
        'Ext.form.FieldSet',
        'Ext.form.FieldContainer',
        'Ext.form.field.Text',
        'Ext.form.field.Date',
        'Gnt.field.Percent',
        'Gnt.field.StartDate',
        'Gnt.field.EndDate',
        'Gnt.field.Duration',
        'Gnt.field.SchedulingMode',
        'Gnt.field.ManuallyScheduled',
        'Gnt.field.Effort',
        'Gnt.field.ConstraintType',
        'Gnt.field.BaselineStartDate',
        'Gnt.field.BaselineEndDate'
    ],

    mixins                  : ['Gnt.mixin.Localizable'],

    alternateClassName      : ['Gnt.widget.TaskForm'],

    /**
     * @cfg {Object/Object[]} items A single item, or an array of child Components to be added to this container.
     *
     * For example:
     *
        var myForm  = new Gnt.widget.taskeditor.TaskForm({
            items       : [
                {
                    xtype       : 'calendarfield',
                    fieldLabel  : 'Calendar',
                    name        : 'CalendarId'
                },
                {
                    xtype       : 'displayfield',
                    fieldLabel  : "WBS",
                    name        : 'wbsCode'
                }
            ],
            task        : myTask,
            taskStore   : myTaskStore
        });


     *
     * **Note:** By default this form provide pre-configured set of fields. Using this option will overwrite that field set.
     */

    /**
     * @cfg {Boolean} [showGeneral=true] `true` to display general fields.
     */
    showGeneral             : true,
    /**
     * @cfg {Boolean} [showBaseline=true] `true` to display baseline fields.
     */
    showBaseline            : true,
    /**
     * @cfg {Boolean} [editBaseline=false] `true` to allow editing of baseline fields.
     */
    editBaseline            : false,
    /**
     * @cfg {Boolean} [showCalendar=false] `true` to show `Calendar` field.
     */
    showCalendar            : false,
    /**
     * @cfg {Boolean} [showManuallyScheduled=false] `true` to show `ManuallyScheduled` field.
     */
    showManuallyScheduled   : false,
    /**
     * @cfg {Boolean} [showSchedulingMode=false] `true` to show `Scheduling Mode` field.
     */
    showSchedulingMode      : false,
    /**
     * @cfg {Boolean} [showWbsCode=false] `true` to show `WBS code` field.
     */
    showWbsCode             : false,
    /**
     * @cfg {Boolean} [showRollup=false] `true` to show `Rollup` field.
     */
    showRollup              : false,
    /**
     * @cfg {Boolean} [showConstraint=false] `true` to show `Constraint Type`, `Constraint Date` fields.
     */
    showConstraint          : false,

    /**
     * @cfg {Object} l10n
     *    A object, purposed for the class localization. Contains the following keys/values:
     *
     * @cfg {String} l10n.taskNameText            'Name'
     * @cfg {String} l10n.durationText            'Duration'
     * @cfg {String} l10n.datesText               'Dates'
     * @cfg {String} l10n.baselineText            'Baseline'
     * @cfg {String} l10n.startText               'Start'
     * @cfg {String} l10n.finishText              'Finish'
     * @cfg {String} l10n.percentDoneText         'Percent Complete'
     * @cfg {String} l10n.baselineStartText       'Start'
     * @cfg {String} l10n.baselineFinishText      'Finish'
     * @cfg {String} l10n.baselinePercentDoneText 'Percent Complete'
     * @cfg {String} l10n.effortText              'Effort'
     * @cfg {String} l10n.invalidEffortText       'Invalid effort value'
     * @cfg {String} l10n.calendarText            'Calendar'
     * @cfg {String} l10n.manuallyScheduled       'Manually Scheduled'
     * @cfg {String} l10n.schedulingModeText      'Scheduling Mode'
     * @cfg {String} l10n.wbsCodeText             'WBS code'
     * @cfg {String} l10n."Constraint Type"       'Constraint Type'
     * @cfg {String} l10n."Constraint Date"       'Constraint Date'
     */

    /**
     * @cfg {Object} taskNameConfig A config object to be applied to the `Name` field.
     */
    taskNameConfig          : null,

    /**
     * @cfg {Object} durationConfig A config object to be applied to the `Duration` field.
     */
    durationConfig          : null,

    /**
     * @cfg {Object} startConfig A config object to be applied to the `Start` field.
     */
    startConfig             : null,

    /**
     * @cfg {Object} finishConfig A config object to be applied to the `Finish` field.
     */
    finishConfig            : null,

    /**
     * @cfg {Object} percentDoneConfig A config object to be applied to the `Percent Complete` field.
     */
    percentDoneConfig       : null,

    /**
     * @cfg {Object} baselineStartConfig A config object to be applied to the `Start` field of the `Baseline` fields container.
     */
    baselineStartConfig     : null,

    /**
     * @cfg {Object} baselineFinishConfig A config object to be applied to the `Finish` field of the `Baseline` fields container.
     */
    baselineFinishConfig    : null,

    /**
     * @cfg {Object} baselinePercentDoneConfig A config object to be applied to the `Percent Complete` field of the `Baseline` fields container.
     */
    baselinePercentDoneConfig   : null,

    /**
     * @cfg {Object} effortConfig A config object to be applied to the `Effort` field.
     */
    effortConfig            : null,

    /**
     * @cfg {Object} calendarConfig A config object to be applied to the `Calendar` field.
     */
    calendarConfig          : null,

    /**
     * @cfg {Object} manuallyScheduledConfig A config object to be applied to the `Manually Scheduled` field.
     */
    manuallyScheduledConfig    : null,

    /**
     * @cfg {Object} schedulingModeConfig A config object to be applied to the `Scheduling Mode` field.
     */
    schedulingModeConfig    : null,
    /**
     * @cfg {Object} wbsCodeConfig A config object to be applied to the `WBS code` field.
     */
    wbsCodeConfig           : null,
    /**
     * @cfg {Object} rollupConfig A config object to be applied to the `Rollup` field.
     */
    rollupConfig            : null,
    /**
     * @cfg {Object} constraintTypeConfig A config object to be applied to the `Constraint Type` field.
     */
    constraintTypeConfig : null,
    /**
     * @cfg {Object} constraintDateConfig A config object to be appied to the `Constraint Date` field.
     */
    constraintDateConfig : null,

    constructor : function (config) {
        config = config || {};

        this.showBaseline = config.showBaseline;
        this.editBaseline = config.editBaseline;

        var model =  config.taskStore ? config.taskStore.model.prototype : Gnt.model.Task.prototype;

        // default field names
        this.fieldNames = {
            baselineEndDateField        : model.baselineEndDateField,
            baselinePercentDoneField    : model.baselinePercentDoneField,
            baselineStartDateField      : model.baselineStartDateField,
            calendarIdField             : model.calendarIdField,
            clsField                    : model.clsField,
            draggableField              : model.draggableField,
            durationField               : model.durationField,
            durationUnitField           : model.durationUnitField,
            effortField                 : model.effortField,
            effortUnitField             : model.effortUnitField,
            endDateField                : model.endDateField,
            manuallyScheduledField      : model.manuallyScheduledField,
            nameField                   : model.nameField,
            percentDoneField            : model.percentDoneField,
            resizableField              : model.resizableField,
            rollupField                 : model.rollupField,
            schedulingModeField         : model.schedulingModeField,
            startDateField              : model.startDateField,
            noteField                   : model.noteField,
            constraintTypeField         : model.constraintTypeField,
            constraintDateField         : model.constraintDateField
        };

        this.callParent(arguments);

        this.addBodyCls('gnt-taskeditor-taskform');
    },

    // Builds default set of form fields.
    buildFields : function () {
        var me      = this,
            f       = me.fieldNames;

        me.items = me.items || [];

        if (me.showGeneral) {
            me.items.push({
                xtype       : 'fieldcontainer',
                layout      : 'hbox',
                defaults    : {
                    allowBlank  : false
                },
                items       : [
                    me.initFieldDefinition({
                        xtype       : 'textfield',
                        fieldLabel  : me.L('taskNameText'),
                        name        : f.nameField,
                        labelWidth  : 110,
                        flex        : 1,
                        value       : me.getTaskFieldValue(f.nameField)
                    }, me.nameConfig),

                    me.initFieldDefinition({
                        xtype       : 'durationfield',
                        fieldLabel  : me.L('durationText'),
                        name        : f.durationField,
                        labelWidth  : 90,
                        width       : 170,
                        value       : me.getTaskFieldValue(f.durationField)
                    }, me.durationConfig)
                ]
            },
            me.initFieldDefinition({
                xtype       : 'percentfield',
                fieldLabel  : me.L('percentDoneText'),
                name        : f.percentDoneField,
                margin      : '0 0 0 8',
                width       : 200,
                allowBlank  : false,
                value       : me.getTaskFieldValue(f.percentDoneField)
            }, me.percentDoneConfig),
            {
                xtype               : 'fieldset',
                title               : me.L('datesText'),
                layout              : 'hbox',
                defaults            : {
                    labelWidth  : 110,
                    allowBlank  : false
                },
                items               : [
                    me.initFieldDefinition({
                        xtype       : 'startdatefield',
                        fieldLabel  : me.L('startText'),
                        width       : 260,
                        name        : f.startDateField,
                        value       : me.getTaskFieldValue(f.startDateField)
                    }, me.startConfig),

                    me.initFieldDefinition({
                        xtype       : 'enddatefield',
                        fieldLabel  : me.L('finishText'),
                        flex        : 1,
                        labelWidth  : 110,
                        name        : f.endDateField,
                        value       : me.getTaskFieldValue(f.endDateField)
                    }, me.finishConfig)
                ]
            },
            me.initFieldDefinition({
                xtype       : 'effortfield',
                fieldLabel  : me.L('effortText'),
                name        : f.effortField,
                invalidText : me.L('invalidEffortText'),
                width       : 200,
                allowBlank  : true,
                value       : me.getTaskFieldValue(f.effortField)
            }, me.effortConfig));
        }

        if (me.showBaseline) {

            me.items.push({
                xtype               : 'fieldset',
                title               : me.L('baselineText'),
                layout              : 'hbox',
                defaults            : {
                    labelWidth  : 110,
                    width       : 260,
                    cls         : 'gnt-baselinefield'
                },
                items               : [
                    me.initFieldDefinition({
                        xtype           : 'baselinestartdatefield',
                        fieldLabel      : me.L('baselineStartText'),
                        name            : f.baselineStartDateField,
                        value           : me.getTaskFieldValue(f.baselineStartDateField),
                        readOnly        : !me.editBaseline,
                        // disable TaskField logic that updates readOnly state
                        forceReadOnly   : !this.editBaseline
                    }, me.baselineStartConfig),

                    me.initFieldDefinition({
                        xtype           : 'baselineenddatefield',
                        fieldLabel      : me.L('baselineFinishText'),
                        name            : f.baselineEndDateField,
                        flex            : 1,
                        value           : me.getTaskFieldValue(f.baselineEndDateField),
                        readOnly        : !me.editBaseline,
                        forceReadOnly   : !this.editBaseline
                    }, me.baselineFinishConfig)
                ]
            },
            me.initFieldDefinition({
                xtype       : 'percentfield',
                fieldLabel  : me.L('baselinePercentDoneText'),
                name        : f.baselinePercentDoneField,
                labelWidth  : 110,
                width       : 200,
                cls         : 'gnt-baselinefield',
                value       : me.getTaskFieldValue(f.baselinePercentDoneField),
                readOnly    : !me.editBaseline
            }, me.baselinePercentDoneConfig));
        }

        if (me.showCalendar) {
            me.items.push(me.initFieldDefinition({
                xtype       : 'calendarfield',
                fieldLabel  : this.L('calendarText'),
                width       : 260,
                name        : f.calendarIdField,
                value       : me.getTaskFieldValue(f.calendarIdField)
            }, me.calendarConfig));
        }

        if (me.showManuallyScheduled) {
            me.items.push(me.initFieldDefinition({
                xtype       : 'manuallyscheduledfield',
                fieldLabel  : me.L('manuallyScheduledText'),
                name        : f.manuallyScheduledField,
                value       : me.getTaskFieldValue(f.manuallyScheduledField)
            }, me.manuallyScheduledConfig));
        }

        if (me.showSchedulingMode) {
            me.items.push(me.initFieldDefinition({
                xtype       : 'schedulingmodefield',
                fieldLabel  : me.L('schedulingModeText'),
                width       : 260,
                name        : f.schedulingModeField,
                value       : me.getTaskFieldValue(f.schedulingModeField),
                allowBlank  : false
            }, me.schedulingModeConfig));
        }

        if (me.showWbsCode) {
            me.items.push(me.initFieldDefinition({
                xtype       : 'textfield',
                fieldLabel  : me.L('wbsCodeText'),
                name        : 'wbsCode',
                width       : 260,
                readOnly    : true,
                value       : me.task && me.task.getWBSCode()
            }, me.wbsCodeConfig));
        }

        if (me.showRollup) {
            this.items.push(me.initFieldDefinition({
                xtype       : 'checkboxfield',
                fieldLabel  : this.L('rollupText'),
                name        : f.rollupField,
                value       : me.getTaskFieldValue(f.rollupField)
            }, me.rollupConfig));
        }

        if (me.showConstraint) {
            me.items.push(

                me.initFieldDefinition({
                    xtype      : 'constrainttypefield',
                    fieldLabel : me.L("Constraint Type"),
                    name       : f.constraintTypeField,
                    width      : 260,
                    value      : me.getTaskFieldValue(f.constraintTypeField)
                }, me.constraintTypeConfig),

                me.initFieldDefinition({
                    xtype      : 'constraintdatefield',
                    fieldLabel : me.L("Constraint Date"),
                    name       : f.constraintDateField,
                    width      : 260,
                    value      : me.getTaskFieldValue(f.constraintDateField)
                }, me.constraintDateConfig)
            );
        }

    },


    updateRecordWithFieldValue : function (task, field) {
        var me = this;

        // Constraint related fields require different approach
        if (field.name != me.fieldNames.constraintTypeField && field.name != me.fieldNames.constraintDateField) {
            return this.callParent(arguments);
        }
    },


    updateRecordFn : function (task) {
        var me                  = this,
            fieldNames          = me.fieldNames,
            form                = me.getForm(),
            constraintTypeField = form.findField(fieldNames.constraintTypeField),
            constraintDateField = form.findField(fieldNames.constraintDateField);

        task.beginEdit();

        this.callParent(arguments);

        // apply constraints if corresponding fields was shown
        // and task has constraint mixin mixed
        if (constraintTypeField && constraintDateField && task.setConstraint) {
            task.setConstraint(
                constraintTypeField.getValue(),
                constraintDateField.getValue()
            );
        }

        task.endEdit();
    },


    buildTaskBuffer : function (task) {
        this.callParent(arguments);

        // since "isEditable" depends on the project readonly state
        // taskBuffer needs to know the real project to ask
        this.taskBuffer.getProject = function () {
            return task.getProject();
        };
    }
});

/**
 @class Gnt.widget.taskeditor.BaseEditor
 @extends Ext.tab.Panel

 This is the baseclass for editors, it keeps the references to the stores and the loaded task instances.

 */

Ext.define('Gnt.widget.taskeditor.BaseEditor', {

    extend                  : 'Ext.tab.Panel',

    requires                : ['Gnt.util.Data'],

    mixins                  : ['Gnt.mixin.Localizable'],
    margin                  : '5 0 0 0',

    height                  : 340,
    width                   : 600,
    layout                  : 'fit',

    border                  : false,

    plain                   : true,

    defaults                : {
        margin          : 5,
        border          : false
    },

    eventIndicator          : 'task',

    /**
     * @cfg {Gnt.model.Task} task The task to edit.
     */
    task                    : null,

    //private a buffer for the task
    taskBuffer              : null,

    /**
     * @cfg {Gnt.data.TaskStore} taskStore A store with tasks.
     *
     * **Note:** This is a required option if the task being edited doesn't belong to any task store.
     */
    taskStore               : null,

    /**
     * @cfg {Gnt.data.AssignmentStore} assignmentStore A store with assignments.
     *
     * **Note:** It has to be provided to show the `Resources` tab (See also {@link #resourceStore}).
     */
    assignmentStore         : null,

    /**
     * @cfg {Gnt.data.ResourceStore} resourceStore A store with resources.
     *
     * **Note:** It has to be provided to show the `Resources` tab (See also {@link #assignmentStore}).
     */
    resourceStore           : null,

    clonedStores            : null,

    constructor : function (config) {
        var me  = this;

        config  = config || {};

        Ext.apply(me, config);

        // Prepare empty store clones (data loading occurs in loadTask() method).
        if (!me.clonedStores) {
            me.clonedStores = (me.task || me.taskStore) ? me.cloneStores() : {};
        }

        var items   = me.buildItems(config);

        var its     = me.items;

        // user defined tabs go after our predefined ones
        if (its) {
            items.push.apply(items, Ext.isArray(its) ? its : [its]);

            delete config.items;
        }

        me.items  = items;

        // if we have the only tab let's hide the tabBar
        if (me.items.length <= 1) {
            config.tabBar   = config.tabBar || {};
            Ext.applyIf(config.tabBar, { hidden : true });
        }

        this.callParent([config]);
    },


    buildItems : function (config) {
        return [];
    },


    cloneTaskBranch : function (task, taskCopy) {
        task            = task || this.task;

        var me              = this,
            taskStore       = me.getTaskStore(),
            root            = taskStore && taskStore.getRoot(),
            clonedStores    = me.clonedStores,
            taskClone,
            lastTask;

        // loop over task parents till the root node
        task.bubble(function (task) {
            if (task !== root) {
                var copy    = taskCopy[task.getId()];

                // stop if we met already copied task
                if (copy) {
                    // we attach cloned tasks to existing copy
                    if (lastTask) copy.appendChild(lastTask);
                    // "result.branch" will be empty in this case
                    lastTask = null;

                    return false;

                } else {
                    copy                    = me.cloneTask(task);
                    taskCopy[task.getId()]  = copy;
                    copy.taskStore          = clonedStores.taskStore;
                }

                if (lastTask) {
                    copy.appendChild(lastTask);
                } else {
                    taskClone   = copy;
                }

                lastTask        = copy;
            }
        });

        return {
            branch  : lastTask,
            task    : taskClone
        };
    },


    cloneRelevantTasks : function (task) {
        task            = task || this.task;

        var me          = this,
            taskCopy    = {};

        // clone task with its parents
        var cloned      = me.cloneTaskBranch(task, taskCopy),
            taskBuffer  = cloned.task,
            tasks       = [ cloned.branch ];

        // clone predecessors
        Ext.Array.each(task.predecessors, function (d) {
            var cloned      = me.cloneTaskBranch(d.getSourceTask(), taskCopy);
            if (cloned.branch) tasks.push(cloned.branch);
        });

        // clone successors
        Ext.Array.each(task.successors, function (d) {
            var cloned      = me.cloneTaskBranch(d.getTargetTask(), taskCopy);
            if (cloned.branch) tasks.push(cloned.branch);
        });

        return {
            task    : taskBuffer,
            tasks   : tasks
        };
    },


    /**
     * Loads task data into task editor.
     * @param {Gnt.model.Task} task Task to load to editor.
     */
    loadTask : function (task) {
        if (!task) return;

        // clone stores ..if they were not cloned yet
        this.clonedStores = this.cloneStores({ task : task });

        // fill cloned stores with data
        this.loadClonedStores(this.clonedStores, task);
    },


    // We need fake taskStore to give task copy ability to ask it for the project calendar
    cloneTaskStore : function (task, config) {
        var store   = this.getTaskStore();

        if (!store) return null;

        var copy                                = new (Ext.getClass(store))(Ext.apply({
            isCloned                            : true,
            // Ticket #1815:
            // Important, not to confuse the StoreManager
            storeId                             : null,
            calendar                            : store.getCalendar(),
            model                               : store.model,
            weekendsAreWorkdays                 : store.weekendsAreWorkdays,
            cascadeChanges                      : store.cascadeChanges,
            batchSync                           : false,
            recalculateParents                  : false,
            skipWeekendsDuringDragDrop          : store.skipWeekendsDuringDragDrop,
            moveParentAsGroup                   : store.moveParentAsGroup,
            enableDependenciesForParentTasks    : store.enableDependenciesForParentTasks,
            availabilitySearchLimit             : store.availabilitySearchLimit,
            dependenciesCalendar                : 'project',
            proxy                               : {
                type        : 'memory',
                reader      : {
                    type    : 'json'
                }
            }
        }, config));

        // on bind different calendar to the original task store we do the same for the copy
        this.mon(store, {
            calendarset : function (store, calendar) {
                copy.setCalendar(calendar);
            }
        });

        return copy;
    },


    cloneDependencyStore : function (task, config) {
        var taskStore   = this.getTaskStore();
        var store       = this.dependencyStore || taskStore && taskStore.getDependencyStore();

        if (!store) return null;

        return new (Ext.getClass(store))(Ext.apply({
            isCloned                    : true,
            model                       : store.model,
            strictDependencyValidation  : store.strictDependencyValidation,
            allowedDependencyTypes      : store.allowedDependencyTypes,
            proxy                       : {
                type        : 'memory',
                reader      : {
                    type    : 'json'
                }
            }
        }, config));
    },


    cloneAssignmentStore : function (task, config) {
        var taskStore   = this.getTaskStore();
        var store       = this.assignmentStore || taskStore && taskStore.getAssignmentStore();

        if (!store) return null;

        return new (Ext.getClass(store))(Ext.apply({
            isCloned        : true,
            model           : store.model,
            proxy           : {
                type        : 'memory',
                reader      : {
                    type    : 'json'
                }
            }
        }, config));
    },


    cloneResourceStore : function (task, config) {
        var taskStore   = this.getTaskStore();
        var store       = this.resourceStore || taskStore && taskStore.getResourceStore();

        if (!store) return null;

        return new (Ext.getClass(store))(Ext.apply({
            isCloned        : true,
            model           : store.model,
            proxy           : {
                type        : 'memory',
                reader      : {
                    type    : 'json'
                }
            }
        }, config));
    },


    cloneStores : function (config) {
        config                  = config || {};

        var task                = config.task || this.task,
            clonedStores        = this.clonedStores || {},
            resourceStore       = clonedStores.resourceStore    || this.cloneResourceStore(task, config && config.resourceStore),
            assignmentStore     = clonedStores.assignmentStore  || this.cloneAssignmentStore(task, config && config.assignmentStore),
            dependencyStore     = clonedStores.dependencyStore  || this.cloneDependencyStore(task, config && config.dependencyStore);

        var taskStore           = clonedStores.taskStore || this.cloneTaskStore(task, Ext.apply({
            assignmentStore     : assignmentStore,
            resourceStore       : resourceStore,
            dependencyStore     : dependencyStore
        }, config && config.taskStore));

        resourceStore.taskStore = taskStore;

        Ext.apply(clonedStores, {
            resourceStore   : resourceStore,
            assignmentStore : assignmentStore,
            dependencyStore : dependencyStore,
            taskStore       : taskStore
        });

        return clonedStores;
    },


    getTaskStore : function (task) {
        task    = task || this.task;

        return this.taskStore || task && task.getTaskStore();
    },


    loadClonedStores : function (clonedStores, task) {
        // copy relevant tasks for TaskStore clone
        var me          = this,
            data        = me.cloneRelevantTasks(task),
            tasks       = data.tasks,
            taskBuffer  = data.task;

        taskBuffer.taskStore.on({
            update : function (store, record, operation) {
                if (record === taskBuffer && operation == Ext.data.Model.EDIT) {
                    record.fireEvent(me.eventIndicator + 'updated', record);
                }
            }
        });

        // fill task store clone w/ related task copies
        clonedStores.taskStore.setRootNode({
            expanded    : true,
            children    : tasks
        });

        me.loadClonedDependencyStore(clonedStores, task);
        me.loadClonedResourceStore(clonedStores, task);
        me.loadClonedAssignmentStore(clonedStores, task);

        me.taskBuffer = taskBuffer;
    },


    loadClonedDependencyStore : function (clonedStores, task) {
        clonedStores    = clonedStores || this.clonedStores;

        clonedStores.dependencyStore && clonedStores.dependencyStore.loadData(
            Gnt.util.Data.cloneModelSet(
                task.getAllDependencies(),
                function (copy, original) { copy.setId(original.getId()); }
            )
        );
    },


    loadClonedResourceStore : function (clonedStores, task) {
        clonedStores    = clonedStores || this.clonedStores;

        clonedStores.resourceStore && clonedStores.resourceStore.loadData(
            Gnt.util.Data.cloneModelSet(
                this.resourceStore || this.getTaskStore().getResourceStore(),
                function (copy, original) { copy.setId(original.getId()); }
            )
        );
    },


    loadClonedAssignmentStore : function (clonedStores, task) {
        clonedStores    = clonedStores || this.clonedStores;

        clonedStores.assignmentStore && clonedStores.assignmentStore.loadData(
            Gnt.util.Data.cloneModelSet(
                task.getAssignments(),
                function (copy, original) { copy.setId(original.getId()); }
            )
        );
    },


    cloneTask : function (task) {
        var result      = task.copy(task.getId(), false),
            segments    = result.getSegments();

        if (segments) {
            for (var i = 0; i < segments.length; i++) {
                var segment     = segments[i];

                segments[i]     = segment.copy(segment.getId(), false);
            }
        }

        return result;
    },


    /**
     * Returns the task editor tab that contains specified component.
     * @return {Ext.Component} Tab containing specified component or `undefined` if item is not found.
     */
    getTabByComponent : function (component) {
        var result;
        this.items.each(function (el) {
            if (component === el || component.isDescendantOf(el)) {
                result = el;
                return false;
            }
        }, this);

        return result;
    },

    /**
     * Checks data loaded or entered to task editor for errors.
     * Calls isValid methods of taskForm, dependencyGrid, advancedForm (if corresponding objects are presented at the task editor).
     * In case some of calls returns `false` switch active tab so that user can view invalid object.
     * Validation can be customized by handling {@link #event-validate} event.
     *
     * Returns `false` in that case.
     * @return {Boolean} Returns `true` if all components are valid.
     */
    validate : function() {
        var result,
            activeTab = this.getActiveTab(),
            invalidTabs = [],
            tabToActivate;

        result = this.doValidate(function (tab) {
            invalidTabs.push(tab);
        });

        if (!result && activeTab && !Ext.Array.contains(invalidTabs, activeTab)) {
            tabToActivate = invalidTabs[0];
            this.setActiveTab(tabToActivate);
        }
        else if (!result && activeTab) {
            tabToActivate = activeTab;
        }
        else if (!result) {
            tabToActivate = invalidTabs[0];
        }

        // validation result
        return (this.fireEvent('validate', this, tabToActivate) !== false) && result;
    },

    /**
     * Persists the values in this task editor into corresponding {@link Gnt.model.Task} object provided to showTask.
     * @return {Boolean} Returns `true` if task was updated. Returns False if some {@link #beforeupdatetask} listener returns False.
     */
    updateTask : function () {
        var me     = this,
            result = false;

        if (me.fireEvent('beforeupdate' + me.eventIndicator, me, function() { me.doUpdateTask(); }) !== false) {
            me.doUpdateTask();
            me.fireEvent('afterupdate' + me.eventIndicator, me);
            result = true;
        }

        return result;
    },

    onDestroy : function() {
        if (this.clonedStores.taskStore) {
            this.clonedStores.taskStore.destroy();
        }

        this.callParent(arguments);
    },

    doValidate : function () {
        return true;
    },

    isDataValid : function () {
        return this.doValidate();
    },

    isDataChanged : function () {
        return false;
    },

    doUpdateTask : Ext.emptyFn

});

/**
@class Gnt.widget.taskeditor.TaskEditor
@extends Gnt.widget.taskeditor.BaseEditor

A widget used to display and edit task information.
By default the widget is an Ext.tab.Panel instance which can contain the following tabs:

 - General information
 - Predecessors
 - Resources
 - Advanced
 - Notes

You can easily add new custom tabs using {@link #items} config.

# General

{@img gantt/images/taskeditor-panel-general.png}

Contains a customizable {@link Gnt.widget.TaskForm form} instance for viewing and editing the following task data:

 - the name of the task
 - the start date of the task
 - the end date of the task
 - the task duration
 - the task effort
 - the current status of a task, expressed as the percentage completed
 - the baseline start date of the task (editing of this field is optional)
 - the baseline end date of the task (editing of this field is optional)
 - the baseline status of a task, expressed as the percentage completed (editing of this field is optional)

### Task form customization

There is a {@link #taskFormConfig} config which can be used to customize the form panel.

        Ext.create('Gnt.widget.taskeditor.TaskEditor', {
            // Configure the form located in the "General" tab
            taskFormConfig : {
                // turn off fields highlighting
                highlightTaskUpdates : false,
                // alter panel margin
                margin : 20
            }
        });

### Fields configuration

The {@link Gnt.widget.TaskForm} class has a config for each field presented at the `General` tab.
And using {@link #taskFormConfig} we can get access for those options to setup fields.
For example:

        Ext.create('Gnt.widget.taskeditor.TaskEditor', {
            // setup form located at "General" tab
            taskFormConfig : {
                // set Baseline Finish Date field invisible
                baselineFinishConfig : {
                    hidden : true
                }
            }
        });

Here are some more configs for other fields:

 - {@link Gnt.widget.TaskForm#taskNameConfig taskNameConfig} (the name of the task field)
 - {@link Gnt.widget.TaskForm#startConfig startConfig} (the start date of the task field)
 - {@link Gnt.widget.TaskForm#finishConfig finishConfig} (the end date of the task field)
 - {@link Gnt.widget.TaskForm#durationConfig durationConfig} (the task duration field)

Please see {@link Gnt.widget.TaskForm} class to see the full list of available config options.

### Extending the General field set

If you want to add a new field to the `General` tab you will have to extend the {@link Gnt.widget.TaskForm TaskForm} class.
After that you will need to configure the task editor to use your extended class:

        // extend standard TaskForm class
        Ext.define('MyTaskForm', {
            extend : 'Gnt.widget.taskeditor.TaskForm',

            constructor : function(config) {
                this.callParent(arguments);

                // add some custom field
                this.add({
                    fieldLabel  : 'Foo',
                    name        : 'Name',
                    width       : 200
                });
            }
        });

        // Let task editor know which class to use
        Ext.create('Gnt.widget.taskeditor.TaskEditor', {
            // to use MyTaskForm to build the "General" tab
            taskFormClass : 'MyTaskForm'
        });

#Predecessors

Contains a {@link Gnt.widget.DependencyGrid grid} instance displaying the predecessors for the task.
You can add, edit or remove dependencies of the task using this panel.

{@img gantt/images/taskeditor-panel-predecessors.png}

You can enable/disable this tab by setting the {@link #showDependencyGrid} option.
To rename this tab you can use `dependencyText` property of {@link #l10n} config.
Customizing the grid itself can be done via the {@link #dependencyGridConfig} config.
To change make this tab display successors instead of predecessors - use the following code:

        Ext.create('Gnt.widget.taskeditor.TaskEditor', {
            l10n : {
                // here we change tab title
                dependencyText : 'Successors'
            },
            // here is the grid config
            dependencyGridConfig : {
                // set grid to display successors
                direction : 'successors'
            }
        });

### Customizing dependency grid class

You can also configure the task editor to use a custom class to build this tab using the {@link #dependencyGridClass} option.
If you need to add an extra column to the grid, you can do it like this:

        // extend standard DependencyGrid
        Ext.define('MyDependencyGrid', {
            extend: 'Gnt.widget.DependencyGrid',

            // extend buildColumns method to append extra column
            buildColumns : function () {
                // add custom column as last one
                return this.callParent(arguments).concat({
                    header    : 'Foo',
                    dataIndex : 'foo',
                    width     : 100
                });
            }
        });

        // setup task editor
        Ext.create('Gnt.widget.taskeditor.TaskEditor', {
            // to use extended class to build tab
            dependencyGridClass : 'MyDependencyGrid'
        });

#Resources

Contains a {@link Gnt.widget.AssignmentEditGrid grid} instance displaying the task assignments.
It allows you to add, edit or remove task assignments.

{@img gantt/images/taskeditor-panel-resources2.png}

It also supports inline resource adding (for more details, take a look at the {@link Gnt.widget.AssignmentEditGrid#addResources} config.

{@img gantt/images/taskeditor-panel-resources1.png}

You can enable/disable this tab by setting the {@link #showAssignmentGrid} option.
To rename this tab you can use the `resourcesText` property of {@link #l10n} config.
Customizing the grid can be done via the {@link #assignmentGridConfig} config.

Example:

        Ext.create('Gnt.widget.taskeditor.TaskEditor', {
            assignmentStore : assignmentStore,
            resourceStore : resourceStore,
            l10n : {
                // rename tab
                resourcesText : 'Assignments'
            },
            // here is grid the config
            assignmentGridConfig : {
                // disable in-place resources adding
                addResources : false
            }
        });

### Customizing assignment grid class

You can use a custom grid class for this tab by using the {@link #assignmentGridClass} option.
For example if you need to add extra column to the grid you can do it like this:

        // Extend the standard AssignmentGrid
        Ext.define('MyAssignmentGrid', {
            extend: 'Gnt.widget.AssignmentEditGrid',

            // extend buildColumns method to append extra column
            buildColumns : function () {
                // add custom column as last one
                return this.callParent(arguments).concat({
                    header       : 'Foo',
                    dataIndex    : 'foo',
                    width        : 100
                });
            }
        });

        // setup task editor
        Ext.create('Gnt.widget.taskeditor.TaskEditor', {
            // use extended class
            assignmentGridClass : 'MyAssignmentGrid'
        });

#Advanced

Contains a {@link Gnt.widget.TaskForm form} instance which can be customized, allowing the user to view and edit the following task data:

 - the calendar assigned to the task
 - the scheduling mode for the task

{@img gantt/images/taskeditor-panel-advanced.png}

You can enable/disable this tab by setting the {@link #showAdvancedForm} option.
To rename this tab you can use the `advancedText` property of {@link #l10n} config.

Customizing the form itself can be done via the {@link #advancedFormConfig} config. For example this is how form content can be overwritten:

        Ext.create("Gnt.widget.taskeditor.TaskEditor", {
            advancedFormConfig: {
                items: [
                     // new fields that will go here
                     // will replace standard presented in the "Advanced" tab
                     ...
                ]
            }
        });

### Customizing the form class

You can use your own custom class to build this tab by using the {@link #advancedFormClass} config:
For example if you need to add some extra field you can do it like this:

        // Extend standard TaskForm class
        Ext.define('MyAdvancedForm', {
            extend : 'Gnt.widget.taskeditor.TaskForm',

            constructor : function(config) {
                this.callParent(arguments);

                // add some custom field
                this.add({
                    fieldLabel  : 'Foo',
                    name        : 'Name',
                    width       : 200
                });
            }
        });

        // setup task editor
        Ext.create("Gnt.widget.taskeditor.TaskEditor", {
            // to use new class to build the "Advanced" tab
            advancedFormClass: 'MyAdvancedForm',
        });

#Notes

Contains an {@link Ext.form.field.HtmlEditor HTML editor instance} for viewing and editing a freetext note about the task.

{@img gantt/images/taskeditor-panel-notes.png}

You can enable/disable this tab by setting the {@link #showNotes} option.
To rename this tab you can use the `notesText` property of {@link #l10n} config.
Customizing the grid itself can be done via the {@link #notesConfig} config.

*/
Ext.define('Gnt.widget.taskeditor.TaskEditor', {

    extend                  : 'Gnt.widget.taskeditor.BaseEditor',

    alias                   : 'widget.taskeditor',

    requires                : [
        'Gnt.widget.taskeditor.TaskForm',
        'Gnt.widget.AssignmentEditGrid',
        'Gnt.widget.DependencyGrid',
        'Ext.form.field.HtmlEditor'
    ],

    alternateClassName      : ['Gnt.widget.TaskEditor'],

    /**
     * @event loadtask
     * Fires after task has been loaded into the editor.
     *
     * This event can be used to do additional data loading if task editor was extended with some extra fields.
     * Also please take a look at {@link #afterupdatetask} event to have an example of how to implement custom data saving.
     *
     *      // some custom user form
     *      var customForm = new Gnt.widget.taskeditor.TaskForm({
     *          title : 'Custom form panel',
     *          xtype : 'taskform',
     *          items : [
     *              {
     *                  fieldLabel  : 'Foo field',
     *                  name        : 'foo',
     *                  allowBlank  : false
     *              }
     *          ],
     *          taskStore   : taskStore
     *      });
     *
     *      var taskEditor = Ext.create('Gnt.plugin.TaskEditor', {
     *          // register custom form as an additional tab
     *          items       : customForm,
     *          listeners   : {
     *              // populate custom form with task values
     *              loadtask : function (taskeditor, task) {
     *                  customForm.loadRecord(task);
     *              },
     *              ....
     *          }
     *      });
     *
     * @param {Gnt.widget.taskeditor.TaskEditor} taskEditor The task editor widget instance.
     * @param {Gnt.model.Task} task The task.
     */

    /**
     * @event beforeupdatetask
     * Fires before task updating occurs. Return `false` to prevent the update.
     * @param {Gnt.widget.taskeditor.TaskEditor} taskEditor The task editor widget instance.
     * @param {Function} proceedCallback The function which can be called manually to continue task updating. Example:
     *
     *      var taskEditor = Ext.create('Gnt.widget.taskeditor.TaskEditor', {
     *          listeners   : {
     *              beforeupdatetask    : function (taskeditor, proceedCallback) {
     *                  var me  = this;
     *                  Ext.MessageBox.confirm('Confirm', 'Are you sure you want to do that?', function (buttonId) {
     *                      if (buttonId == 'yes') {
     *                          // here we continue updating asynchronously after user click "Yes" button
     *                          proceedCallback();
     *                          me.hide();
     *                      }
     *                  });
     *                  // here we return false to stop updating
     *                  return false;
     *              }
     *          }
     *      });
     *
     */

    /**
     * @event afterupdatetask
     * Fires after a task has been updated.
     *
     * This event can be used to do some extra processing after task was updated by task editor.
     * For example in case when you have some additional fields you can implement saving of them using this event.
     * Also please take a look at {@link #loadtask} event to have an example of how to implement custom data loading.
     *
     *      // some custom user form
     *      var customForm = new Gnt.widget.taskeditor.TaskForm({
     *          title : 'Custom form panel',
     *          xtype : 'taskform',
     *          items : [
     *              {
     *                  fieldLabel  : 'Foo field',
     *                  // foo - is the name of custom task field
     *                  name        : 'foo',
     *                  allowBlank  : false
     *              }
     *          ],
     *          taskStore   : taskStore
     *      });
     *
     *      var taskEditor = Ext.create('Gnt.plugin.TaskEditor', {
     *          // register custom form as an additional tab
     *          items       : customForm,
     *          listeners   : {
     *              afterupdatetask : function (taskeditor) {
     *                  // update form fields to loaded task
     *                  customForm.updateRecord();
     *              },
     *              ....
     *          }
     *      });
     *
     * @param {Gnt.widget.taskeditor.TaskEditor} taskEditor The task editor instance.
     */

    /**
     * @event validate
     * Fires when task validating occurs.
     * @param {Gnt.widget.taskeditor.TaskEditor} taskEditor The task editor instance.
     * @param {Ext.Component} tabToFocus The tab panel item where one or more invalid fields was detected.
     *
     * Fires during a {@link #method-validate} method call when task validation occurs.
     * Return `false` to make the validation fail, but take care of marking invalid component somehow (to let user know of error)
     * since normally invalid components are being highlighted during validate call.
     * For example:
     *
     *      var taskEditor = Ext.create('Gnt.widget.taskeditor.TaskEditor', {
     *          items       : {
     *              title   : 'Some custom tab',
     *              items   : [{
     *                  xtype       : 'textfield',
     *                  fieldLabel  : 'Enter your name',
     *                  id          : 'enter-your-name',
     *                  allowBlank  : false,
     *                  blankText   : 'Please enter your name'
     *              }]
     *          },
     *          listeners   : {
     *              validate    : function (taskeditor, tabToFocus) {
     *                  var field = taskeditor.down('#enter-your-name');
     *                  // if validation of our field failed
     *                  if (!field.isValid()) {
     *                      // if no other tabs with some invalid control
     *                      if (!tabToFocus) {
     *                          var activeTab = taskeditor.getActiveTab();
     *                          // if our field is not placed at currently active tab
     *                          if (!field.isDescendantOf(activeTab)) {
     *                              // then we'll switch to tab where our field resides
     *                              taskeditor.setActiveTab(taskeditor.getTabByComponent(field));
     *                          }
     *                      }
     *                      // return false since validation failed
     *                      return false;
     *                  }
     *              }
     *          }
     *      });
     *
     */


    /**
     * @cfg {String} taskFormClass Class representing the form in the `General` tab.
     *
     * This option supposed to be used to implement a custom form in the `General` tab content.
     */
    taskFormClass           : 'Gnt.widget.taskeditor.TaskForm',

    /**
     * @cfg {String} advancedFormClass Class representing the form in the `Advanced` tab.
     *
     * This option supposed to be used to implement a custom form in the `Advanced` tab content.
     */
    advancedFormClass       : 'Gnt.widget.taskeditor.TaskForm',

    /**
     * @cfg {Boolean} showAssignmentGrid `true` to display a `Resources` tab.
     */
    showAssignmentGrid      : true,

    /**
     * @cfg {Boolean} showDependencyGrid `true` to display a `Predecessors` tab.
     */
    showDependencyGrid      : true,

    /**
     * @cfg {Boolean} allowParentTaskDependencies `false` to hide a `Predecessors` tab for parent tasks
     * (requires {@link #showDependencyGrid} to be `false` as well) and also exclude parent tasks from the list
     * of possible predecessors.
     */
    allowParentTaskDependencies     : true,

    /**
     * @cfg {Boolean} showNotes `true` to display a `Notes` tab.
     */
    showNotes               : true,

    /**
     * @cfg {Boolean} showAdvancedForm `true` to display an `Advanced` tab.
     */
    showAdvancedForm        : true,

    /**
     * @cfg {Boolean} showRollup `true` to display rollup field in the `Advanced` tab.
     */
    showRollup            :  false,

    /**
     * @cfg {Object/Object[]} items A single item, or an array of child Components to be **appended** after default tabs to this container.
     * For example:
     *
     *      var taskEditor = Ext.create('Gnt.widget.taskeditor.TaskEditor', {
     *          items: [{
     *              title   : "Some custom tab",
     *              items   : [{
     *                  xtype       : 'textfield',
     *                  fieldLabel  : 'Enter your name',
     *                  id          : 'enter-your-name',
     *                  allowBlank  : false,
     *                  blankText   : 'Please enter your name'
     *              }]
     *          }]
     *      });
     */

    /**
     * @cfg {Boolean} showBaseline `true` to display baseline fields in the `General` tab.
     */
    showBaseline            : true,

    /**
     * @cfg {Object} taskFormConfig Configuration options to be supplied to the `General` tab.
     * For possible options take a look at the {@link Gnt.widget.TaskForm}.
     */
    taskFormConfig          : null,

    /**
     * @cfg {String} dependencyGridClass Class representing the grid panel in the `Predecessor` tab.
     *
     * Override this to provide your own implementation subclassing the {@link Gnt.widget.DependencyGrid} class.
     */
    dependencyGridClass     : 'Gnt.widget.DependencyGrid',

    /**
     * @cfg {Object} dependencyGridConfig Configuration options for the `Predecessors` tab.
     * For possible options take a look at the {@link Gnt.widget.DependencyGrid}.
     *
     */
    dependencyGridConfig    : null,

    /**
     * @cfg {String} assignmentGridClass Class representing the grid panel in the `Resources` tab.
     *
     * Override this to provide your own implementation subclassing the {@link Gnt.widget.AssignmentEditGrid} class.
     */
    assignmentGridClass     : 'Gnt.widget.AssignmentEditGrid',

    /**
     * @cfg {Object} assignmentGridConfig Configuration options for the `Resources` tab.
     * For possible options take a look at the {@link Gnt.widget.AssignmentEditGrid}.
     *
     */
    assignmentGridConfig    : null,

    /**
     * @cfg {Object} advancedFormConfig Configuration options for the `Advanced` tab.
     * For possible options take a look at the {@link Gnt.widget.TaskForm}.
     *
     */
    advancedFormConfig      : null,

    /**
     * @cfg {Object} notesConfig Configuration options for the HTML-editor placed in the `Notes` tab.
     * For possible options take a look at the {@link Ext.form.field.HtmlEditor}.
     */
    notesConfig             : null,

    /**
     * @property {Ext.panel.Panel} notesPanel The `Notes` tab.
     * Please use {@link #notesEditor} to access an enclosed HTML-editor.
     */
    notesPanel              : null,

    /**
     * @property {Ext.form.field.HtmlEditor} notesEditor The HTML-editor presented in the `Notes` tab.
     * To specify setting for the HTML-editor please use {@link #notesConfig}.
     */
    notesEditor             : null,


    /**
     * @property {Gnt.widget.TaskForm} taskForm The `General` tab task form.
     * By default it's a {@link Gnt.widget.TaskForm} instance but it might be customized by using {@link #taskFormClass} option.
     */
    taskForm                : null,

    /**
     * @property {Gnt.widget.AssignmentEditGrid} assignmentGrid The grid used for the `Resources` tab.
     *
     */
    assignmentGrid          : null,

    /**
     * @property {Gnt.widget.DependencyGrid} dependencyGrid The `Predecessors` tab instance.
     *
     */
    dependencyGrid          : null,
    /**
     * @property {Gnt.widget.TaskForm} advancedForm The `Advanced` tab form.
     * By default it's a {@link Gnt.widget.TaskForm} instance but it can be customized by using {@link #advancedFormClass} option.
     *
     */
    advancedForm            : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - generalText         : 'General',
            - resourcesText       : 'Resources',
            - dependencyText      : 'Predecessors',
            - addDependencyText   : 'Add new',
            - dropDependencyText  : 'Remove',
            - notesText           : 'Notes',
            - advancedText        : 'Advanced',
            - wbsCodeText         : 'WBS code',
            - addAssignmentText   : 'Add new',
            - dropAssignmentText  : 'Remove'
     */

    buildItems : function () {
        var me      = this,
            items   = [];

        var clonedStores    = me.clonedStores || {};

        me.taskFormConfig   = me.taskFormConfig || {};

        Ext.applyIf(me.taskFormConfig, {
            showBaseline    : me.showBaseline,
            showRollup      : false //we show it here
        });

        // create TaskForm instance
        me.taskForm = Ext.create(me.taskFormClass, Ext.apply({
            task        : me.task,
            taskStore   : me.taskStore
        }, me.taskFormConfig));

        items.push(me.taskForm);

        // create DependencyGrid instance
        if (me.showDependencyGrid) {
            me.dependencyGrid = Ext.create(me.dependencyGridClass, Ext.apply({
                allowParentTaskDependencies : me.allowParentTaskDependencies,
                taskModel                   : me.taskStore.model,
                task                        : me.task,
                margin                      : 5,
                tbar                        : {
                    layout  : 'auto',
                    items   : [
                        {
                            xtype       : 'button',
                            iconCls     : 'gnt-action-add',
                            text        : me.L('addDependencyText'),
                            itemId      : 'add-dependency-btn',
                            handler     : function () {
                                me.dependencyGrid.insertDependency();
                            }
                        },
                        {
                            xtype       : 'button',
                            iconCls     : 'gnt-action-remove',
                            text        : me.L('dropDependencyText'),
                            itemId      : 'drop-dependency-btn',
                            disabled    : true,
                            handler     : function () {
                                var recs = me.dependencyGrid.getSelectionModel().getSelection();
                                if (recs && recs.length) {
                                    me.dependencyGrid.store.remove(recs);
                                }
                            }
                        }
                    ]
                },
                listeners   : {
                    selectionchange : function (sm, sel) {
                        var grid    = me.dependencyGrid;
                        if (!grid.dropDepBtn) {
                            grid.dropDepBtn  = grid.down('#drop-dependency-btn');
                        }
                        grid.dropDepBtn && grid.dropDepBtn.setDisabled(!sel.length);
                    }
                }
            }, me.dependencyGridConfig));

            items.push(me.dependencyGrid);
        }

        // if AssignmentGrid required
        if (me.showAssignmentGrid && me.assignmentStore && me.resourceStore) {
            // clone assignment and resource stores if they were not copied before
            if (!clonedStores.assignmentStore) clonedStores.assignmentStore = me.cloneAssignmentStore(me.task);
            if (!clonedStores.resourceStore) clonedStores.resourceStore     = me.cloneResourceStore(me.task);

            // create AssignmentGrid instance
            me.assignmentGrid     = Ext.create(me.assignmentGridClass, Ext.apply({
                assignmentStore     : me.assignmentStore,
                resourceStore       : me.resourceStore,
                // we use clone of assignment store as assignmentGrid.store
                store               : clonedStores.assignmentStore,
                resourceDupStore    : clonedStores.resourceStore,
                tbar                : {
                    layout  : 'auto',
                    items   : [
                        {
                            xtype       : 'button',
                            iconCls     : 'gnt-action-add',
                            text        : me.L('addAssignmentText'),
                            itemId      : 'add-assignment-btn',
                            handler     : function () {
                                me.assignmentGrid.insertAssignment();
                            }
                        },
                        {
                            xtype       : 'button',
                            iconCls     : 'gnt-action-remove',
                            text        : me.L('dropAssignmentText'),
                            itemId      : 'drop-assignment-btn',
                            disabled    : true,
                            handler     : function () {
                                var recs = me.assignmentGrid.getSelectionModel().getSelection();
                                if (recs && recs.length) {
                                    me.assignmentGrid.store.remove(recs);
                                }
                            }
                        }
                    ]
                },
                listeners       : {
                    // we need this to draw selection properly on very first activation of tab
                    // to gracefully process deferredRender = true
                    afterrender : {
                        fn      : function(el) {
                            el.loadTaskAssignments(me.task.get(me.task.idProperty));
                        },
                        single  : true
                    },
                    selectionchange : function(sm, sel) {
                        var grid    = me.assignmentGrid;
                        if (!grid.dropBtn) {
                            grid.dropBtn = grid.down('#drop-assignment-btn');
                        }
                        grid.dropBtn && grid.dropBtn.setDisabled(!sel.length);
                    }
                }
            }, me.assignmentGridConfig));

            items.push(me.assignmentGrid);
        }

        // if advanced form required
        if (me.showAdvancedForm) {
            me.advancedFormConfig = me.advancedFormConfig || {};

            // create TaskForm instance for the "Advanced" tab form
            me.advancedForm = Ext.create(me.advancedFormClass, Ext.applyIf(me.advancedFormConfig, {
                showGeneral             : false,
                showBaseline            : false,
                showCalendar            : true,
                showManuallyScheduled   : true,
                showSchedulingMode      : true,
                showWbsCode             : true,
                showConstraint          : true,
                showRollup              : me.showRollup,

                task                    : me.task,
                taskStore               : me.taskStore
            }));

            items.push(me.advancedForm);
        }

        // create notes panel
        if (me.showNotes) {
            // create notes HtmlEditor instance
            me.notesEditor = Ext.create('Ext.form.field.HtmlEditor', Ext.apply({
                listeners       : {
                    // we need this to draw content of HtmlEditor properly on very first activation of tab
                    // to gracefully process deferredRender = true
                    afterrender : function (el) {
                        me.notesEditor.setValue(me.task.get(me.task.noteField));
                    }
                },

                readOnly        : me.task && !me.task.isEditable(me.task.noteField),

                isDataChanged   : function() {
                    return this.isDirty();
                }
            }, me.notesConfig));

            // we have to wrap it to panel since it's gonna be tab in TabPanel
            // (to avoid some render bugs)
            me.notesPanel = Ext.create('Ext.panel.Panel', {
                border  : false,
                layout  : 'fit',
                items   : me.notesEditor
            });

            items.push(me.notesPanel);
        }

        // make sure that each panel has its title
        if (!me.taskForm.title) me.taskForm.title                                   = me.L('generalText');
        if (me.dependencyGrid && !me.dependencyGrid.title) me.dependencyGrid.title  = me.L('dependencyText');
        if (me.assignmentGrid && !me.assignmentGrid.title) me.assignmentGrid.title  = me.L('resourcesText');
        if (me.advancedForm && !me.advancedForm.title) me.advancedForm.title        = me.L('advancedText');
        if (me.notesPanel && !me.notesPanel.title) me.notesPanel.title              = me.L('notesText');

        return items;
    },


    bindDependencyGrid : function () {
        var depsClone           = this.clonedStores.dependencyStore;
        var grid                = this.dependencyGrid;

        // dependency grid store have to use cloned task store
        grid.store.taskStore    = this.clonedStores.taskStore;

        if (depsClone) {

            this.mon(grid, {
                loaddependencies : function (grid, store) {
                    depsClone.loadData( store.getRange().concat(Gnt.util.Data.cloneModelSet(grid.oppositeData)) );
                }
            });

            this.mon(grid.store, {
                add     : function (store, records) {
                    depsClone.add(records);
                },
                remove  : function (store, record) {
                    depsClone.remove(record);
                }
            });

            this.dependencyGridBound    = true;
        }
    },

    /**
     * Loads task data into task editor.
     * @param {Gnt.model.Task} task Task to load to editor.
     */
    loadTask : function (task) {
        if (!task) return;

        this.task           = task;

        var me              = this,
            taskForm        = me.taskForm,
            dependencyGrid  = me.dependencyGrid,
            assignmentGrid  = me.assignmentGrid;

        // on task loading step let's suppress task updating
        taskForm.setSuppressTaskUpdate(true);
        taskForm.getForm().reset();

        // if we don't have dependency grid we still need to have dependency store copy filled
        // if we don't have assignments grid we still need to have assignments store copy filled
        me.callParent([task, !dependencyGrid, !assignmentGrid]);

        var clonedStores    = me.clonedStores,
            taskBuffer      = me.taskBuffer;

        if (dependencyGrid) {
            if (!me.dependencyGridBound) me.bindDependencyGrid();
            // we always load records into the grid event when tab is not visible
            // since we use its ability to load task dependencies to fill our dependency store clone with records
            dependencyGrid.loadDependencies(task);

            if (me.allowParentTaskDependencies || task.isLeaf()) {
                dependencyGrid.tab.show();
            } else {
                dependencyGrid.tab.hide();
            }
        }

        if (assignmentGrid) {
            // we use clone of assignment store as assignmentGrid.store
            if (clonedStores.assignmentStore !== assignmentGrid.getStore()) assignmentGrid.reconfigure(clonedStores.assignmentStore);
            if (assignmentGrid.resourceDupStore !== clonedStores.resourceStore) assignmentGrid.resourceDupStore = clonedStores.resourceStore;

            assignmentGrid.loadResources(true);
            // load task assignments to grid
            assignmentGrid.loadTaskAssignments(task.getId() || task.getPhantomId());

            assignmentGrid.task = taskBuffer;
        }

        taskForm.loadRecord(task, taskBuffer);

        if (me.advancedForm) {
            // disable 'taskupdated' event processing for advancedForm
            me.advancedForm.setSuppressTaskUpdate(true);

            var form    = me.advancedForm.getForm();

            form.reset();

            // we point advancedForm.taskBuffer to taskForm.taskBuffer
            // it will allow them to share changes of each other
            me.advancedForm.loadRecord(task, taskForm.taskBuffer);

            var field   = form.findField('wbsCode');
            if (field) {
                field.setValue(task.getWBSCode());
            }

            // enable 'taskupdated' event processing for advancedForm back
            me.advancedForm.setSuppressTaskUpdate(false);
        }

        // enable 'taskupdated' event processing back
        taskForm.setSuppressTaskUpdate(false);

        if (me.notesEditor) {
            me.notesEditor.setValue(task.getNote());
            me.notesEditor.setReadOnly(!task.isEditable(task.noteField));
        }

        me.fireEvent('loadtask', me, task);
    },

    doValidate : function (invalidComponentsAccFn) {
        var result      = this.callParent(arguments);

        if (this.taskForm && !this.taskForm.isValid()) {
            result = false;
            invalidComponentsAccFn && invalidComponentsAccFn(this.getTabByComponent(this.taskForm), this.taskForm);
        }

        if (this.dependencyGrid && !this.dependencyGrid.isValid()) {
            result = false;
            invalidComponentsAccFn && invalidComponentsAccFn(this.getTabByComponent(this.dependencyGrid), this.dependencyGrid);
        }

        if (this.assignmentGrid && !this.assignmentGrid.isValid()) {
            result = false;
            invalidComponentsAccFn && invalidComponentsAccFn(this.getTabByComponent(this.assignmentGrid), this.assignmentGrid);
        }

        if (this.advancedForm && !this.advancedForm.isValid()) {
            result = false;
            invalidComponentsAccFn && invalidComponentsAccFn(this.getTabByComponent(this.advancedForm), this.advancedForm);
        }

        return result;
    },

    doUpdateTask : function() {
        this.callParent(arguments);

        this.taskForm       && this.taskForm.updateRecord();
        this.advancedForm   && this.advancedForm.updateRecord();
        this.notesEditor    && this.task.set(this.task.noteField, this.notesEditor.getValue());
        this.assignmentGrid && this.assignmentGrid.saveTaskAssignments();
        this.dependencyGrid && this.dependencyGrid.saveDependencies();
    },


    isDataChanged : function(changedComponentsAccFn) {
        var result    = this.callParent(arguments);

        if (this.taskForm && this.taskForm.isDataChanged()) {
            result = true;
            changedComponentsAccFn && changedComponentsAccFn(this.getTabByComponent(this.taskForm));
        }

        if (this.dependencyGrid && this.dependencyGrid.isDataChanged()) {
            result = true;
            changedComponentsAccFn && changedComponentsAccFn(this.getTabByComponent(this.dependencyGrid));
        }

        if (this.assignmentGrid && this.assignmentGrid.isDataChanged()) {
            result = true;
            changedComponentsAccFn && changedComponentsAccFn(this.getTabByComponent(this.assignmentGrid));
        }

        if (this.advancedForm && this.advancedForm.isDataChanged()) {
            result = true;
            changedComponentsAccFn && changedComponentsAccFn(this.getTabByComponent(this.advancedForm));
        }

        if (this.notesEditor && this.notesEditor.isDataChanged()) {
            result = true;
            changedComponentsAccFn && changedComponentsAccFn(this.getTabByComponent(this.notesEditor));
        }

        return result;
    }

});

/**
 @class Gnt.widget.taskeditor.ProjectForm
 @extends Gnt.widget.taskeditor.BaseForm

 This form is used to edit the project properties.
 By default it supports editing of the following fields:

 - the name of the project (project title)
 - the start date of the project
 - the end date of the project
 - the calendar assigned to the project
 - the dependency status, whether the project allows external tasks dependencies

 * **Note:** However this standard set of fields can be easily overwritten (for more details check {@link #items}).

 ## Extending the default field set

 The default field set can be overwritten using the {@link #items} config.
 In case you want to keep the default fields and add some new custom fields, you can use the code below:

            // Extend the standard ProjectForm class
            Ext.define('MyProjectForm', {
                    extend : 'Gnt.widget.taskeditor.ProjectForm',

                    constructor : function(config) {
                        this.callParent(arguments);

                        // add some custom field
                        this.add({
                            fieldLabel  : 'Foo',
                            name        : 'Name',
                            width       : 200
                        });
                    }
            });

            // create customized form
            var form = new MyProjectForm({...});

 */
Ext.define('Gnt.widget.taskeditor.ProjectForm', {
    // This form by default contains various "standard" fields of the project
    // and it "knows" about their "applyChanges" methods (for our fields),
    // and about renamed field names
    // This form can be also used with any other set of fields, provided
    // as the "items" config

    extend                  : 'Gnt.widget.taskeditor.BaseForm',

    alias                   : 'widget.projectform',

    requires                : [
        'Gnt.model.Project',
        'Ext.form.FieldSet',
        'Ext.form.FieldContainer',
        'Ext.form.field.Text',
        'Gnt.field.StartDate',
        'Gnt.field.EndDate',
        // 'Gnt.field.ReadOnly',
        'Ext.form.field.Checkbox'
    ],

    mixins                  : ['Gnt.mixin.Localizable'],

    alternateClassName      : ['Gnt.widget.ProjectForm'],

    /**
     * @cfg {Object/Object[]} items A single item, or an array of child Components to be added to this container.
     *
     * **Note:** By default this form provide pre-configured set of fields. Using this option will overwrite that field set.
     */

    /**
     * @cfg {Boolean} [showCalendar=true] `true` to show calendarField.
     */
    showCalendar            : false,

    /**
     * @cfg {Object} l10n
     *    A object, purposed for the class localization. Contains the following keys/values:
     *
     * @cfg {String} l10n.nameText                'Name'
     * @cfg {String} l10n.datesText               'Dates'
     * @cfg {String} l10n.startText               'Start'
     * @cfg {String} l10n.finishText              'Finish'
     * @cfg {String} l10n.calendarText            'Calendar'
     * @cfg {String} l10n.allowDependenciesText   'AllowDependencies'
     */

    /**
     * @cfg {Object} nameConfig A config object to be applied to the `Name` field.
     */
    nameConfig              : null,

    /*
     * @cfg {Object} readOnlyConfig A config object to be applied to the `ReadOnly` field.
     */
    readOnlyConfig          : null,

    /**
     * @cfg {Object} allowDependenciesConfig A config object to be applied to the `AllowDependencies` field.
     */
    allowDependenciesConfig : null,

    /**
     * @cfg {Object} startConfig A config object to be applied to the `Start` field.
     */
    startConfig             : null,

    /**
     * @cfg {Object} finishConfig A config object to be applied to the `Finish` field.
     */
    finishConfig            : null,

    /**
     * @cfg {Object} calendarConfig A config object to be applied to the `Calendar` field.
     */
    calendarConfig          : null,


    constructor : function(config) {
        config      = config || {};

        var model   = config.taskStore && config.taskStore.projectModel && config.taskStore.projectModel.prototype || Gnt.model.Project.prototype;

        // default field names
        this.fieldNames = {
            calendarIdField         : model.calendarIdField,
            // TODO: get rid of this on #2104 completion
            // readOnlyField           : model.readOnlyField,
            allowDependenciesField  : model.allowDependenciesField,
            startDateField          : model.startDateField,
            endDateField            : model.endDateField,
            nameField               : model.nameField,
            descriptionField        : model.descriptionField
        };

        this.callParent(arguments);

        this.addBodyCls('gnt-projecteditor-projectform');
    },

    // Builds default set of form fields.
    buildFields : function () {
        var me      = this,
            f       = me.fieldNames;

        me.items    = me.items || [];

        me.items.push(
            {
                xtype       : 'fieldset',
                title       : me.L('projectText'),
                layout      : 'vbox',
                defaults    : {
                    allowBlank  : false
                },
                items       : [
                    me.initFieldDefinition({
                        xtype       : 'textfield',
                        fieldLabel  : me.L('nameText'),
                        name        : f.nameField,
                        labelWidth  : 110,
                        flex        : 1,
                        value       : me.getTaskFieldValue(f.nameField)
                    }, me.nameConfig),

/*                    me.initFieldDefinition({
                        xtype       : 'readonlyfield',
                        fieldLabel  : me.L('readOnlyText'),
                        name        : f.readOnlyField,
                        labelWidth  : 110,
                        flex        : 1,
                        value       : me.getTaskFieldValue(f.readOnlyField)
                    }, me.readOnlyConfig),
*/
                    me.initFieldDefinition({
                        xtype       : 'checkboxfield',
                        fieldLabel  : me.L('allowDependenciesText'),
                        name        : f.allowDependenciesField,
                        labelWidth  : 110,
                        flex        : 1,
                        value       : me.getTaskFieldValue(f.allowDependenciesField)
                    }, me.allowDependenciesConfig)
                ]
            },
            me.initFieldDefinition({
                xtype               : 'fieldset',
                title               : me.L('datesText'),
                layout              : 'hbox',
                defaults            : {
                    labelWidth  : 110,
                    allowBlank  : false,
                    margin      : '5 5 5 0'
                },
                items               : [
                    me.initFieldDefinition({
                        xtype       : 'startdatefield',
                        fieldLabel  : me.L('startText'),
                        width       : 260,
                        name        : f.startDateField,
                        value       : me.getTaskFieldValue(f.startDateField)
                    }, me.startConfig),

                    me.initFieldDefinition({
                        xtype       : 'enddatefield',
                        fieldLabel  : me.L('finishText'),
                        flex        : 1,
                        labelWidth  : 110,
                        name        : f.endDateField,
                        value       : me.getTaskFieldValue(f.endDateField)
                    }, me.finishConfig)
                ]
            })
        );

        if (me.showCalendar) {
            me.items.push({
                xtype       : 'fieldset',
                layout      : 'hbox',
                defaults    : {
                    labelWidth  : 110,
                    allowBlank  : false,
                    margin      : '5 0 5 0'
                },
                items       : [
                    me.initFieldDefinition({
                        xtype       : 'calendarfield',
                        fieldLabel  : this.L('calendarText'),
                        width       : 260,
                        name        : f.calendarIdField,
                        value       : me.getTaskFieldValue(f.calendarIdField)
                    }, me.calendarConfig)
                ]
            });
        }
    }

});

/**
 @class Gnt.widget.taskeditor.ProjectEditor
 @extends Gnt.widget.taskeditor.BaseEditor

 A widget used to display and edit project information.
 By default the widget is an Ext.tab.Panel instance which can contain the following tabs:

 - General information
 - Description

 You can easily add new custom tabs using {@link #items} config.

 # General

 Contains a customizable {@link Gnt.widget.ProjectForm form} instance for viewing and editing the following project data:

 - the name of the project
 - the start date of the project
 - the end date of the project
 - the readOnly status of the project
 - the allowDependencies status of the project

 ### Project form customization

 There is a {@link #projectFormConfig} config which can be used to customize the form panel.

        Ext.create('Gnt.widget.taskeditor.ProjectEditor', {
            // Configure the form located in the "General" tab
            projectFormConfig : {
                // turn off fields highlighting
                highlightTaskUpdates : false,
                // alter panel margin
                margin : 20
            }
        });

 ### Fields configuration

 The {@link Gnt.widget.ProjectForm} class has a config for each field presented at the `General` tab.
 And using {@link #projectFormConfig} we can get access for those options to setup fields.
 For example:

        Ext.create('Gnt.widget.taskeditor.ProjectEditor', {
            // setup form located at "General" tab
            projectFormConfig : {
                // set Baseline Finish Date field invisible
                allowDependenciesConfig : {
                    hidden : true
                }
            }
        });

 Here are some more configs for other fields:

 - {@link Gnt.widget.ProjectForm#nameConfig nameConfig} (the name of the project field)
 - {@link Gnt.widget.ProjectForm#startConfig startConfig} (the start date of the project field)
 - {@link Gnt.widget.ProjectForm#finishConfig finishConfig} (the end date of the project field)

 Please see {@link Gnt.widget.ProjectForm} class to see the full list of available config options.

 ### Extending the General field set

 If you want to add a new field to the `General` tab you will have to extend the {@link Gnt.widget.ProjectForm ProjectForm} class.
 After that you will need to configure the project editor to use your extended class:

        // extend standard ProjectForm class
        Ext.define('MyProjectForm', {
            extend : 'Gnt.widget.taskeditor.ProjectForm',

            constructor : function(config) {
                this.callParent(arguments);

                // add some custom field
                this.add({
                    fieldLabel  : 'Foo',
                    name        : 'Name',
                    width       : 200
                });
            }
        });

        // Let task editor know which class to use
        Ext.create('Gnt.widget.taskeditor.ProjectEditor', {
            // to use MyProjectForm to build the "General" tab
            projectFormClass : 'MyProjectForm'
        });

 #Description

 Contains an {@link Ext.form.field.HtmlEditor} HTML editor instance for viewing and editing a freetext description about the Project.

You can enable/disable this tab by setting the {@link #showDescription} option.
To rename this tab you can use the `descriptionText` property of {@link #l10n} config.
Customizing the grid itself can be done via the {@link #descriptionConfig} config.

 */
Ext.define('Gnt.widget.taskeditor.ProjectEditor', {

    extend                  : 'Gnt.widget.taskeditor.BaseEditor',

    alias                   : 'widget.projecteditor',

    requires                : [
        'Gnt.widget.taskeditor.ProjectForm',
        'Ext.form.field.HtmlEditor'
    ],

    alternateClassName      : ['Gnt.widget.ProjectEditor'],

    eventIndicator          : 'project',

    /**
     * @event loadproject
     * Fires after project has been loaded into the editor.
     *
     * This event can be used to do additional data loading if project editor was extended with some extra fields.
     * Also please take a look at {@link #afterupdateproject} event to have an example of how to implement custom data saving.
     *
     * @param {Gnt.widget.taskeditor.ProjectEditor} projectEditor The project editor widget instance.
     * @param {Gnt.model.Project} project The project.
     */

    /**
     * @event beforeupdateproject
     * Fires before project updating occurs. Return `false` to prevent the update.
     * @param {Gnt.widget.taskeditor.ProjectEditor} projectEditor The project editor widget instance.
     * @param {Function} proceedCallback The function which can be called manually to continue project updating. Example:
     */

    /**
     * @event afterupdateproject
     * Fires after a project has been updated.
     *
     * This event can be used to do some extra processing after project was updated by project editor.
     * For example in case when you have some additional fields you can implement saving of them using this event.
     * Also please take a look at {@link #loadproject} event to have an example of how to implement custom data loading.
     *
     * @param {Gnt.widget.taskeditor.ProjectEditor} projectEditor The project editor instance.
     */

    /**
     * @event validate
     * Fires when task validating occurs.
     * @param {Gnt.widget.taskeditor.ProjectEditor} projectEditor The task editor instance.
     * @param {Ext.Component} tabToFocus The tab panel item where one or more invalid fields was detected.
     *
     * Fires during a {@link #method-validate} method call when task validation occurs.
     * Return `false` to make the validation fail, but take care of marking invalid component somehow (to let user know of error)
     * since normally invalid components are being highlighted during validate call.
     */

    /**
     * @cfg {Gnt.model.Project} task The project to edit.
     */

    /**
     * @cfg {String} projectFormClass Class representing the form in the `General` tab.
     *
     * This option supposed to be used to implement a custom form in the `General` tab content.
     */
    projectFormClass           : 'Gnt.widget.taskeditor.ProjectForm',

    /**
     * @cfg {Boolean} showDescription `true` to display a `Description` tab.
     */
    showDescription               : true,

    /**
     * @cfg {Object/Object[]} items A single item, or an array of child Components to be **appended** after default tabs to this container.
     * For example:
     *
     *      var projectEditor = Ext.create('Gnt.widget.taskeditor.ProjectEditor', {
     *          items: [{
     *              title   : "Some custom tab",
     *              items   : [{
     *                  xtype       : 'textfield',
     *                  fieldLabel  : 'Enter your name',
     *                  id          : 'enter-your-name',
     *                  allowBlank  : false,
     *                  blankText   : 'Please enter your name'
     *              }]
     *          }]
     *      });
     */

    /**
     * @cfg {Object} projectFormConfig Configuration options to be supplied to the `General` tab.
     * For possible options take a look at the {@link Gnt.widget.ProjectForm}.
     */
    projectFormConfig          : null,

    /**
     * @cfg {Object} descriptionConfig Configuration options for the HTML-editor placed in the `Description` tab.
     * For possible options take a look at the {@link Ext.form.field.HtmlEditor}.
     */
    descriptionConfig             : null,

    /**
     * @property {Ext.panel.Panel} descriptionPanel The `Description` tab.
     * Please use {@link #descriptionEditor} to access an enclosed HTML-editor.
     */
    descriptionPanel              : null,

    /**
     * @property {Ext.form.field.HtmlEditor} descriptionEditor The HTML-editor presented in the `Description` tab.
     * To specify setting for the HTML-editor please use {@link #descriptionConfig}.
     */
    descriptionEditor             : null,


    /**
     * @property {Gnt.widget.ProjectForm} projectForm The `General` tab project form.
     * By default it's a {@link Gnt.widget.ProjectForm} instance but it might be customized by using {@link #projectFormClass} option.
     */
    projectForm                : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

     - generalText         : 'General',
     - descriptionText     : 'Description',
     */

    buildItems : function () {
        var me      = this,
            items   = [],
            project = this.task;

        // create ProjectForm instance
        me.projectForm  = Ext.create(me.projectFormClass, Ext.applyIf(me.projectFormConfig || {}, {
            task        : project,
            taskStore   : me.taskStore
        }));

        items.push(me.projectForm);

        // create description panel
        if (me.showDescription) {
            // create notes HtmlEditor instance
            me.descriptionEditor = Ext.create('Ext.form.field.HtmlEditor', Ext.apply({
                listeners       : {
                    // we need this to draw content of HtmlEditor properly on very first activation of tab
                    // to gracefully process deferredRender = true
                    afterrender : function (el) {
                        me.descriptionEditor.setValue(me.task.get(me.task.descriptionField));
                    }
                },
                readOnly        : project && !project.isEditable(project.descriptionField),

                isDataChanged   : function() {
                    return this.isDirty();
                }
            }, me.descriptionConfig));

            // we have to wrap it to panel since it's gonna be tab in TabPanel
            // (to avoid some render bugs)
            me.descriptionPanel = Ext.create('Ext.panel.Panel', {
                border          : false,
                layout          : 'fit',
                items           : me.descriptionEditor
            });

            items.push(me.descriptionPanel);
        }

        // make sure that each panel has its title
        if (!me.projectForm.title) me.projectForm.title = me.L('generalText');
        if (me.descriptionPanel && !me.descriptionPanel.title) me.descriptionPanel.title = this.L('descriptionText');

        return items;
    },


    /**
     * Loads project data into the project editor.
     * **Note**, it's an alias for the {@link #loadTask} method.
     * @param {Gnt.model.Project} project Project to load to the editor.
     */
    loadProject : function (project) {
        this.loadTask.apply(this, arguments);
    },


    loadTask : function (project) {
        if (!project) return;

        this.task           = project;

        var projectForm     = this.projectForm;

        // on task loading step let's suppress task updating
        projectForm.setSuppressTaskUpdate(true);
        projectForm.getForm().reset();

        this.callParent(arguments);

        projectForm.loadRecord(project, this.taskBuffer);

        if (this.descriptionEditor) {
            this.descriptionEditor.setValue(project.getDescription());
            this.descriptionEditor.setReadOnly(!project.isEditable(project.descriptionField));
        }

        // enable 'projectupdated' event processing back
        projectForm.setSuppressTaskUpdate(false);

        this.fireEvent('loadproject', this, project);
    },

    /**
     * Persists editor data into the project instance.
     * **Note**, this is an alias for the {@link #updateTask} method.
     * @param {Gnt.model.Project} project Project to load to the editor.
     */
    updateProject : function () {
       this.updateTask();
    },


    // Since we do not need dependencies/assignments and resources copies
    // we override following methods to not fullfil corresponding store clones w/ data
    loadClonedDependencyStore   : Ext.emptyFn,
    loadClonedResourceStore     : Ext.emptyFn,
    loadClonedAssignmentStore   : Ext.emptyFn,


    doValidate : function(invalidComponentsAccFn) {

        var result      = this.callParent(arguments);

        if (this.projectForm && !this.projectForm.isValid()) {
            result = false;
            invalidComponentsAccFn && invalidComponentsAccFn(this.getTabByComponent(this.projectForm));
        }

        return result;
    },

    doUpdateTask : function() {
        var project = this.task;

        this.callParent(arguments);
        this.projectForm       && this.projectForm.updateRecord();
        this.descriptionEditor && project.set(project.descriptionField, this.descriptionEditor.getValue());
    },


    isDataChanged : function (changedComponentsAccFn) {
        var result    = this.callParent(arguments);

        if (this.projectForm && this.projectForm.isDataChanged()) {
            result = true;
            changedComponentsAccFn && changedComponentsAccFn(this.getTabByComponent(this.projectForm));
        }

        if (this.descriptionEditor && this.descriptionEditor.isDataChanged()) {
            result = true;
            changedComponentsAccFn && changedComponentsAccFn(this.getTabByComponent(this.descriptionEditor));
        }

        return result;
    }

});

/**
@class Gnt.plugin.taskeditor.BaseEditor
*/
Ext.define('Gnt.plugin.taskeditor.BaseEditor', {
    extend                      : 'Ext.window.Window',

    requires                    : ['Ext.window.MessageBox'],
    mixins                      : ['Ext.AbstractPlugin', 'Gnt.mixin.Localizable'],

    lockableScope               : 'top',

    /**
    * @cfg {Object} taskEditorCls Class for the {@link Gnt.widget.taskeditor.TaskEditor} instance.
    */
    taskEditorCls               : 'Gnt.widget.taskeditor.TaskEditor',

    /**
     * @property {Boolean} isTaskEditor
     * @readonly
     * Indicates that the class extends {@link Gnt.plugin.taskeditor.BaseEditor} class.
     */
    isTaskEditor                : true,

    /**
     * @property {Gnt.widget.taskeditor.BaseEditor} taskEditor The task editor widget contained by the plugin.
     */
    taskEditor                  : null,

    /**
     * @cfg {Object} panelConfig Configuration for {@link Gnt.widget.taskeditor.BaseEditor} instance.
     */
    panelConfig                 : null,

    height                      : 340,
    width                       : 600,
    layout                      : 'card',
    constrain                   : true,

    /**
     * @cfg {String} triggerEvent
     * The event upon which the editor shall be shown. Defaults to 'taskdblclick'.
     */
    triggerEvent                : 'taskdblclick',

    closeAction                 : 'hide',

    modal                       : true,

    gantt                       : null,

    /**
     * @cfg {Gnt.data.AssignmentStore} assignmentStore A store with assignments.
     * If this config is not provided plugin will try to retrieve assignments store from {@link Gnt.panel.Gantt} instance.
     */
    assignmentStore             : null,

    /**
     * @cfg {Gnt.data.ResourceStore} resourceStore A store with resources.
     * If this config is not provided plugin will try to retrieve resources store from {@link Gnt.panel.Gantt} instance.
     */
    resourceStore               : null,

    /**
     * @cfg {Gnt.data.TaskStore} taskStore A store with tasks.
     * If this config is not provided plugin will try to retrieve tasks store from {@link Gnt.panel.Gantt} instance.
     * **Note:** Task store is required if task doesn't belong to any task store yet.
     */
    taskStore                   : null,

    /**
     * @cfg {Gnt.model.Task} task The task to show in the task editor.
     */

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - title               : 'Task Information',
            - alertCaption        : 'Information',
            - alertText           : 'Please correct marked errors to save changes',
            - okText              : 'Ok',
            - cancelText          : 'Cancel',
     */

    /**
     * @cfg {Boolean} [monitorDataUpdates=false]
     *
     * Whether to actively monitor data updates or not, if set to true then Ok button (if present) will be enabled
     * only if there're data changes introduced in the Task Editor and those changes are valid.
     */
    monitorDataUpdates          : false,

    /**
     * @cfg {Integer} monitorDataUpdatesInterval
     *
     * Timeout to use to monitor data updates.
     */
    monitorDataUpdatesInterval  : 500,

    taskEditorConfigs           : 'l10n,task,taskStore,assignmentStore,resourceStore',

    taskFilters                 : null,


    constructor : function (config) {
        config              = config || {};

        this.taskFilters    = [];

        // we need to apply config to let locale()
        // know about legacy locales since it will check them in 'this'
        Ext.apply(this, config);

        this.title          = this.L('title');

        // by default we make 'Ok', 'Cancel' buttons
        if (!config.buttons) {
            this.buttons    = ['->',
                {
                    itemId  : 'teOkBtn',
                    text    : this.L('okText'),
                    handler : function() {
                        this.completeEditing() || Ext.Msg.alert(this.L('alertCaption'), this.L('alertText'));
                    },
                    scope   : this
                },
                {
                    text    : this.L('cancelText'),
                    handler : this.close,
                    scope   : this
                }
            ];
        }

        this.callParent([config]);
        this.addCls('gnt-taskeditor-window');
    },

    getState : function () {
        if (this.rendered) {
            return this.callParent(arguments);
        }
    },

    init : function (cmp) {
        // if assignmentStore or resourceStore wasn't defined as configuration options
        // during plugin constructing we get them from Gnt.panel.Gantt instance
        this.assignmentStore    = this.assignmentStore || cmp.getAssignmentStore();
        this.resourceStore      = this.resourceStore || cmp.getResourceStore();
        this.taskStore          = this.taskStore || cmp.getTaskStore();

        // let's map some configuration options from plugin to taskEditor
        var cfg     = {
            width   : null,
            height  : null,
            border  : false
        };

        // some confis are mapped from this instance to task editor widget
        Ext.copyTo(cfg, this, this.taskEditorConfigs);

        cfg.showBaseline    = cmp.enableBaseline;

        cfg.showRollup      = cmp.showRollupTasks;

        cfg.allowParentTaskDependencies = cmp.allowParentTaskDependencies;

        this.buildTaskEditor(Ext.apply(cfg, this.panelConfig));

        this.add(this.taskEditor);

        this.mon(cmp, this.triggerEvent, this.onTriggerEvent, this);

        this.gantt          = cmp;
    },


    /**
     * @protected
     * Builds the task editor widget instance being used by the plugin.
     * By default this method creates {@link Gnt.widget.taskeditor.TaskEditor} instance and puts a reference to the instance to {@link #taskEditor} property.
     * Override this if you want to instantiate your custom class instead.
     * @param  {Object} cfg Configuration of the task editor widget being instantiated
     */
    buildTaskEditor : function (cfg) {
        this.taskEditor = Ext.create(this.taskEditorCls, cfg);
    },


    onTriggerEvent : function (gantt, task) {
        this.showTask(task);
    },

    /**
     * Shows window and loads task into the task editor.
     * @param {Gnt.model.Task} task Task to load.
     */
    showTask : function (task) {
        if (this.taskEditor && task && this.matchFilters(task)) {
            this.taskEditor.loadTask(task);
            this.show();
        }
    },


    matchFilters : function (task) {
        if (!task) return;

        for (var i = 0; i < this.taskFilters.length; i++) {
            var filter  = this.taskFilters[i];
            if (!filter.fn.call(filter.scope, task)) return false;
        }

        return true;
    },


    addFilter : function (fn, scope) {
        this.taskFilters.push({
            fn      : fn,
            scope   : scope || this
        });
    },


    validate : function () {
        if (this.taskEditor) {
            return this.taskEditor.validate();
        }
    },

    /**
     * This function is a shorthand for the following typical steps:
     *
     *      if (!taskEditor.validate()) {
     *          Ext.MessageBox.alert('Information', 'Please correct marked errors to save changes');
     *      } else {
     *          if (taskEditor.updateTask()) taskEditor.hide();
     *      }
     *
     * Instead of above code you can write:
     *
     *      if (!taskEditor.completeEditing()) {
     *          Ext.MessageBox.alert('Information', 'Please correct marked errors to save changes');
     *      }
     *
     * @return {Boolean} true if validation successfully passed and record was successfully updated as well.
     */
    completeEditing : function () {

        if (this.taskEditor) {
            var activeTab = this.taskEditor.getActiveTab();

            // Force any active editing to complete first
            if (activeTab.editingPlugin && activeTab.editingPlugin.completeEdit) {
                activeTab.editingPlugin.completeEdit();
            }

            if (!this.taskEditor.validate()) return false;

            if (this.taskEditor.updateTask()) {
                this.hide();
                return true;
            }

            return false;
        }
    },

    /**
     * Persists the values in this task editor into corresponding {@link Gnt.model.Task}
     * object provided to {@link #showTask}.
     * Internally just calls {@link Gnt.widget.taskeditor.TaskEditor#updateTask updateTask} method of task editor panel.
     */
    updateTask : function () {
        if (this.taskEditor) {
            return this.taskEditor.updateTask();
        }
    },


    afterRender : function() {
        var me = this;
        me.callParent(arguments);
        me.startDataUpdatesMonitoring();
    },

    startDataUpdatesMonitoring : function() {
        var me = this,
            okBtn = me.down('#teOkBtn'),
            timerId = true;

        function monitor() {
            if (timerId && okBtn && me.taskEditor) {
                okBtn.setDisabled(!me.taskEditor.isDataChanged() || !me.taskEditor.isDataValid());
                timerId = Ext.Function.defer(monitor, me.monitorDataUpdatesInterval);
            }
        }

        function unmonitor() {
            timerId !== true && clearTimeout(timerId);
            timerId = true;
        }

        if (me.monitorDataUpdates && okBtn) {
            me.on({
                'show'    : monitor,
                'hide'    : unmonitor,
                'destroy' : unmonitor
            });
        }
    }
});

/**

@class Gnt.plugin.taskeditor.TaskEditor
@extends Gnt.plugin.taskeditor.BaseEditor

{@img gantt/images/taskeditor-general.png}

A plugin (ptype = 'gantt_taskeditor') which shows a {@link Gnt.widget.taskeditor.TaskEditor} in a window when a user double-clicks a task bar in the gantt chart.

You can enable this plugin in your Gantt chart like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        ...
        plugins : Ext.create("Gnt.plugin.TaskEditor", {
            // window title
            title : 'Task Editor'
        }),
        ...
    })


{@img gantt/images/taskeditor-general.png}

#Plugin customizing
Essentially this widget extends Ext.window.Window so any regular window configs can be used for it.
Also it supports a lot of configs provided by the {@link Gnt.widget.taskeditor.TaskEditor} class.
So if you want to customize task editor content (task form, resources grid etc.) you can read
the {@link Gnt.widget.taskeditor.TaskEditor} guide and apply corresponding configs to the plugin.

Another way to customize the task editor panel is {@link #panelConfig} config. With it you can
customize any config of the task editor panel, even the ones not translated by this plugin
(like `title`, `width`, `height` etc). For example:

    var plugin = Ext.create("Gnt.plugin.TaskEditor", {
        title       : 'I am window title',
        // some window elements
        items       : [...],
        panelConfig : {
            title   : 'I am panel title'
            // append some tabs to task editor panel
            items   : [...]
        }
    });

* **Note:** Please see {@link Gnt.widget.taskeditor.TaskEditor} class for details on how to customize the components of the tabs.

#Buttons customizing

By default the window has two buttons `Ok` and `Cancel` to apply and rollback changes respectively.
If you want to just rename them you can use {@link #l10n} config. Like this:

    var plugin = Ext.create("Gnt.plugin.TaskEditor", {
        l10n : {
            okText      : 'Apply changes',
            cancelText  : 'Reject changes'
        }
    });

And if you need to implement custom buttons you can easily do it using `buttons` config. Like this:

    var plugin = Ext.create("Gnt.plugin.TaskEditor", {
        buttons : [
            {
                text    : 'Show some alert',
                handler : function() {
                    alert('Some alert');
                }
            }
        ]
    });

And finally if you don't want any buttons at all you can overwrite `buttons` config with an empty array. Like this:

    var plugin = Ext.create("Gnt.plugin.TaskEditor", {
        buttons : []
    });


*/
Ext.define('Gnt.plugin.taskeditor.TaskEditor', {
    extend              : 'Gnt.plugin.taskeditor.BaseEditor',

    alternateClassName  : ['Gnt.plugin.TaskEditor'],

    requires            : [
        'Gnt.widget.taskeditor.TaskEditor'
    ],

    alias               : 'plugin.gantt_taskeditor',
    // ptype isn't filled automatically, because we do not extend AbstractPlugin
    ptype               : 'gantt_taskeditor',

    /**
    * @cfg {Object} taskEditorCls Class for the {@link Gnt.widget.taskeditor.TaskEditor} instance.
    */
    taskEditorCls       : 'Gnt.widget.taskeditor.TaskEditor',

    /**
     * @cfg {String} taskFormClass Class instance of which will represent form in the `General` tab.
     *
     * This option supposed to be used to implement custom form in the `General` tab content.
     */

    /**
     * @cfg {String} advancedFormClass Class instance of which will represent form in the `Advanced` tab.
     *
     * This option supposed to be used to implement custom form in the `Advanced` tab content.
     */

    /**
     * @cfg {Boolean} showAssignmentGrid `true` to display `Resources` tab.
     */

    /**
     * @cfg {Boolean} showDependencyGrid `true` to display `Predecessors` tab.
     */

    /**
     * @cfg {Boolean} allowParentTaskDependencies `false` to hide a `Predecessors` tab for parent tasks
     * (requires {@link #showDependencyGrid} to be `false` as well) and also exclude parent tasks from the list
     * of possible predecessors. Normally this config is read from the {@link Gnt.panel.Gantt#allowParentTaskDependencies}. Defaults to `true`.
     */

    /**
     * @cfg {Boolean} showNotes `true` to display `Notes` tab.
     */

    /**
     * @cfg {Boolean} showAdvancedForm `true` to display `Advanced` tab.
     */

    /**
     * @cfg {Object} taskFormConfig Configuration of task form placed at `General` tab.
     * For possible options take a look at {@link Gnt.widget.TaskForm}.
     */

    /**
     * @cfg {String} dependencyGridClass Class representing the grid panel in the `Predecessor` tab.
     *
     * Override this to provide your own implementation subclassing the {@link Gnt.widget.DependencyGrid} class.
     */
    /**
     * @cfg {Object} dependencyGridConfig Configuration of grid placed at `Predecessors` tab.
     * For possible options take a look at {@link Gnt.widget.DependencyGrid}.
     *
     * **Note:** This grid may not be created if {@link #showDependencyGrid} set to `false`.
     */

    /**
     * @cfg {String} assignmentGridClass Class representing the grid panel in the `Resources` tab.
     *
     * Override this to provide your own implementation subclassing the {@link Gnt.widget.AssignmentEditGrid} class.
     */
    /**
     * @cfg {Object} assignmentGridConfig Configuration of grid placed at `Resources` tab.
     * For possible options take a look at {@link Gnt.widget.AssignmentEditGrid}.
     *
     * **Note:** This grid may not be created if {@link #showAssignmentGrid} set to `false`
     * or {@link #assignmentStore} or {@link #resourceStore} is not specified.
     */

    /**
     * @cfg {Object} advancedFormConfig Configuration of task form placed at `Advanced` tab.
     * For possible options take a look at {@link Gnt.widget.TaskForm}.
     *
     * **Note:** This form may not be created if {@link #showAdvancedForm} set to `false`.
     */

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - title               : 'Task Information',
            - alertCaption        : 'Information',
            - alertText           : 'Please correct marked errors to save changes',
            - okText              : 'Ok',
            - cancelText          : 'Cancel',
            - generalText         : 'General',
            - resourcesText       : 'Resources',
            - dependencyText      : 'Predecessors',
            - addDependencyText   : 'Add new',
            - dropDependencyText  : 'Remove',
            - notesText           : 'Notes',
            - advancedText        : 'Advanced',
            - wbsCodeText         : 'WBS code',
            - addAssignmentText   : 'Add new',
            - dropAssignmentText  : 'Remove'
     */

    taskEditorConfigs   : 'l10n,task,taskStore,assignmentStore,resourceStore,generalText,resourcesText,dependencyText,addDependencyText,'+
        'dropDependencyText,notesText,advancedText,wbsCodeText,addAssignmentText,dropAssignmentText,showAssignmentGrid,showDependencyGrid,'+
        'allowParentTaskDependencies,showNotes,showStyle,showAdvancedForm,taskFormClass,advancedFormClass,taskFormConfig,dependencyGridConfig,'+
        'assignmentGridConfig,advancedFormConfig,styleFormConfig,dependencyGridClass,assignmentGridClass',

    /**
     * @event loadtask
     * Fires after task loading complete.
     * @param {Gnt.widget.taskeditor.TaskEditor} taskEditor Task editor widget instance used for editing.
     * @param {Gnt.model.Task} task The loaded task.
     *
     *
     * This event can be used to do additional data loading if task editor was extended with some extra fields.
     * Also please take a look at {@link #afterupdatetask} event to have an example of how to implement custom data saving.
     *
     *      // some custom user form
     *      var customForm = new Gnt.widget.taskeditor.TaskForm({
     *          title : 'Custom form panel',
     *          xtype : 'taskform',
     *          items : [
     *              {
     *                  fieldLabel  : 'Foo field',
     *                  name        : 'foo',
     *                  allowBlank  : false
     *              }
     *          ],
     *          taskStore   : taskStore
     *      });
     *
     *      var taskEditor = Ext.create('Gnt.plugin.TaskEditor', {
     *          // register custom form as an additional tab
     *          panelConfig : {
     *              items       : customForm
     *          },
     *          listeners   : {
     *              // populate custom form with task values
     *              loadtask : function (taskeditor, task) {
     *                  customForm.loadRecord(task);
     *              },
     *              ....
     *          }
     *      });
     */

    /**
     * @event validate
     * Fires when task validation occurs. Take a look at example of using this event {@link Gnt.widget.taskeditor.TaskEditor#event-validate here}.
     * @param {Gnt.widget.taskeditor.TaskEditor} taskEditor Task editor widget instance.
     */

    /**
     * @event beforeupdatetask
     * Fires before task updating occurs. Return false to prevent the update.
     * @param {Gnt.widget.taskeditor.TaskEditor} taskEditor Task editor widget instance used for editing.
     * @param {Function} proceedCallback The function which can be called manually to continue task updating. Example:
     *
     *      var taskEditor = Ext.create('Gnt.plugin.TaskEditor', {
     *          listeners   : {
     *              beforeupdatetask    : function (taskeditor, proceedCallback) {
     *                  var me  = this;
     *                  Ext.MessageBox.confirm('Confirm', 'Are you sure you want to do that?', function (buttonId) {
     *                      if (buttonId == 'yes') {
     *                          // here we continue updating asynchronously after user click "Yes" button
     *                          proceedCallback();
     *                          me.hide();
     *                      }
     *                  });
     *                  // here we return false to stop updating
     *                  return false;
     *              }
     *          }
     *      });
     *
     */

    /**
     * @event afterupdatetask
     * Fires after task updating is finished.
     * @param {Gnt.widget.taskeditor.TaskEditor} taskEditor Task editor widget instance.
     *
     * This event can be used to do some extra processing after task was updated by task editor.
     * For example in case when you have some additional fields you can implement saving of them using this event.
     * Also please take a look at {@link #loadtask} event to have an example of how to implement custom data loading.
     *
     *      // some custom user form
     *      var customForm = new Gnt.widget.taskeditor.TaskForm({
     *          title : 'Custom form panel',
     *          xtype : 'taskform',
     *          items : [
     *              {
     *                  fieldLabel  : 'Foo field',
     *                  // foo - is the name of custom task field
     *                  name        : 'foo',
     *                  allowBlank  : false
     *              }
     *          ],
     *          taskStore   : taskStore
     *      });
     *
     *      var taskEditor = Ext.create('Gnt.plugin.TaskEditor', {
     *          // register custom form as an additional tab
     *          panelConfig : {
     *              items       : customForm
     *          },
     *          listeners   : {
     *              afterupdatetask : function (taskeditor) {
     *                  // update form fields to loaded task
     *                  customForm.updateRecord();
     *              },
     *              ....
     *          }
     *      });
     */

    constructor : function (config) {
        this.callParent(arguments);
        // filter out project records
        this.addFilter(this.isTask);
    },


    init : function (cmp) {
        this.callParent(arguments);
        // decorate the component with a reference to the plugin
        cmp.taskEditor  = this;
    },


    isTask : function (task) {
        return task && !task.isProject;
    }
});

/**

@class Gnt.plugin.taskeditor.ProjectEditor
@extends Gnt.plugin.taskeditor.BaseEditor

A plugin (ptype = 'gantt_projecteditor') which shows a {@link Gnt.widget.taskeditor.ProjectEditor} in a window when a user double-clicks
{@link Gnt.model.Project a task of project type} bar in the gantt chart.

You can enable this plugin in your Gantt chart like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        ...
        plugins : ['gantt_projecteditor']
        ...
    });

*/
Ext.define('Gnt.plugin.taskeditor.ProjectEditor', {
    extend              : 'Gnt.plugin.taskeditor.BaseEditor',

    alternateClassName  : ['Gnt.plugin.ProjectEditor'],

    requires            : [
        'Gnt.widget.taskeditor.ProjectEditor'
    ],

    alias               : 'plugin.gantt_projecteditor',
    // ptype isn't filled automatically, because we do not extend AbstractPlugin
    ptype               : 'gantt_projecteditor',

    /**
    * @cfg {Object} taskEditorCls Class for the {@link Gnt.widget.taskeditor.ProjectEditor} instance.
    */
    taskEditorCls       : 'Gnt.widget.taskeditor.ProjectEditor',

    /**
     * @cfg {Gnt.model.Task} task The task to show in the task editor.
     */

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - title               : 'Project Information',
            - alertCaption        : 'Information',
            - alertText           : 'Please correct marked errors to save changes',
            - okText              : 'Ok',
            - cancelText          : 'Cancel',
            - generalText         : 'General'
     */

    taskEditorConfigs  : 'l10n,task,taskStore,assignmentStore,resourceStore,projectFormClass,showDescription,projectFormConfig,descriptionConfig',

    /**
     * @event loadproject
     * Fires after project loading complete.
     * @param {Gnt.widget.taskeditor.ProjectEditor} projectEditor Project editor widget instance used for editing.
     * @param {Gnt.model.Project} project The loaded project.
     */

    /**
     * @event validate
     * Fires when project validation occurs. Take a look at example of using this event {@link Gnt.widget.taskeditor.TaskEditor#event-validate here}.
     * @param {Gnt.widget.taskeditor.ProjectEditor} projectEditor Project editor widget instance.
     */

    /**
     * @event beforeupdateproject
     * Fires before project updating occurs. Return false to prevent the update.
     * @param {Gnt.widget.taskeditor.ProjectEditor} projectEditor Project editor widget instance used for editing.
     * @param {Function} proceedCallback The function which can be called manually to continue project updating. Example:
     */

    /**
     * @event afterupdateproject
     * Fires after project updating is finished.
     * @param {Gnt.widget.taskeditor.ProjectEditor} projectEditor Project editor widget instance.
     *
     */

    constructor : function (config) {
        this.callParent(arguments);
        this.addCls('gnt-projecteditor-window');
        // filter out all except project records
        this.addFilter(this.isProject);
    },


    init : function (cmp) {
        this.callParent(arguments);
        // decorate the component with a reference to the plugin
        cmp.projectEditor   = this;
    },


    isProject : function (task) {
        return task && task.isProject;
    }

});

/**

@class Gnt.column.Dependency
@extends Ext.grid.column.Column
@private

An internal private class serving as base class for Predecessor and Successor column classes.

*/
Ext.define("Gnt.column.Dependency", {
    extend      : "Ext.grid.column.Column",

    requires    : [
        'Gnt.field.Dependency'
    ],

    separator   : ';',
    type        : 'predecessors',        // Or 'successors'

    // Reference to the field used by the Editor
    field       : null,

    /**
     * @cfg {Boolean} useSequenceNumber Set to `true` to use auto-generated sequential identifiers
     * to reference other tasks (see {@link Gnt.model.Task#getSequenceNumber} for definition).
     * If value is `false`then the "real" id (that is stored in the database) will be used.
     */
    useSequenceNumber : false,

    constructor : function (config) {
        config      = config || {};

        var field   = config.editor;

        delete config.editor;

        Ext.apply(this, config);

        config.editor   = field || Ext.create('Gnt.field.Dependency', {
            type              : this.type,
            separator         : this.separator,
            useSequenceNumber : this.useSequenceNumber
        });

        if (!(config.editor instanceof Gnt.widget.DependencyField)) {
            config.editor = Ext.ComponentManager.create(config.editor, 'dependencyfield');
        }

        config.field = config.editor;

        this.scope      = this;

        this.callParent([ config ]);

    },

    afterRender : function() {
        var panel = this.up('ganttpanel');

        // Make top Gantt panel aware of the need for refreshing locked grid after changes in the dependency store
        panel.registerLockedDependencyListeners();

        this.callParent(arguments);
    },

    getContainingPanel : function() {
        if (!this.panel) {
            this.panel = this.up('tablepanel');
        }

        return this.panel;
    },

    setDirtyClass : function (meta, task) {
        var view    = this.getContainingPanel().getView();
        if (view.markDirty && this.field.isDirty(task)) {
            meta.tdCls   = view.dirtyCls;
        }
    },

    /**
     * @protected
     * Gantt panel is aware of this method and uses it (if the method is presented)
     * to check if corresponding column is editable.
     * @param  {Gnt.model.Task}  task Task about to being edited
     * @return {Boolean}      Return false to prevent editing
     */
    isEditable : function (task) {
        var panel   = this.gantt || this.up('ganttpanel');

        if (task.isProject) return false;

        return !task.isProject && (panel && panel.allowParentTaskDependencies || task.isLeaf());
    },

    renderer    : function (value, meta, task) {
        if (!task.isEditable(this.dataIndex) || !this.isEditable(task)) {
            meta.tdCls      = (meta.tdCls || '') + ' sch-column-readonly';
        } else {
            this.setDirtyClass(meta, task);
        }

        return this.field.getFieldDisplayValue(task);
    }
});

/**

@class Gnt.column.Successor
@extends Gnt.column.Dependency

A Column showing the successors of a task. The column is editable, however to enable the editing you will need to add a
`Sch.plugin.TreeCellEditing` plugin to your gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        // Setup your grid columns
        columns         : [
            ...
            {
                xtype       : 'successorcolumn',
                width       : 70
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

This column uses a specialized field - {@link Gnt.field.Dependency} which allows the
user to specify multiple successors including lag. Please refer to {@link Gnt.field.Dependency}
documentation for the expected format when editing data in this column.

*/
Ext.define("Gnt.column.Successor", {
    extend      : "Gnt.column.Dependency",

    mixins      : ['Gnt.mixin.Localizable'],

    alias       : [
        "widget.successorcolumn",
        "widget.ganttcolumn.successor"
    ],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - text : 'Successors'
     */

    type        : 'successors',

    constructor : function (config) {
        config = config || {};        

        this.text   = config.text || this.L('text');

        this.callParent(arguments);
    }
});

/**

@class Gnt.column.Predecessor
@extends Gnt.column.Dependency

A Column showing the predecessors of a task. The column is editable when adding a
`Sch.plugin.TreeCellEditing` plugin to your gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        // Setup your grid columns
        columns         : [
            ...
            {
                xtype       : 'predecessorcolumn',
                width       : 70
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

This column uses a specialized field - {@link Gnt.field.Dependency} which allows the
user to specify multiple predecessor including lag. Please refer to {@link Gnt.field.Dependency}
documentation for expected value format.

*/
Ext.define("Gnt.column.Predecessor", {
    extend      : "Gnt.column.Dependency",

    mixins      : ['Gnt.mixin.Localizable'],

    alias       : [
        "widget.predecessorcolumn",
        "widget.ganttcolumn.predecessor"
    ],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - text : 'Predecessors'
     */

    type        : 'predecessors',

    constructor : function (config) {
        config = config || {};        

        this.text   = config.text || this.L('text');

        this.callParent(arguments);
    }
});

/**

@class Gnt.column.Duration
@extends Ext.grid.column.Column

{@img gantt/images/duration-field.png}

A Column representing a `Duration` field of a task. The column is editable, however to enable the editing you will need to add a
`Sch.plugin.TreeCellEditing` plugin to your gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        // Setup your grid columns
        columns         : [
            ...
            {
                xtype       : 'durationcolumn',
                width       : 70
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

This column uses a field - {@link Gnt.field.Duration} which allows the
user to specify not only the duration value, but also the duration units.

When rendering the name of the duration unit, the {@link Sch.util.Date#getReadableNameOfUnit}
method will be used to retrieve the name of the unit.

*/
Ext.define('Gnt.column.Duration', {
    extend                  : 'Ext.grid.column.Column',

    alias                   : [
        'widget.durationcolumn',
        'widget.ganttcolumn.duration'
    ],

    requires                : ['Gnt.field.Duration'],

    mixins                  : ['Gnt.column.mixin.TaskFieldColumn'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

        - text : 'Duration'
     */

    /**
     * @cfg {Number} width The width of the column.
     */
    width                   : 80,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align                   : 'left',

    /**
     * @cfg {Number} decimalPrecision A number of digits to show after the dot when rendering the value of the field or when editing it.
     * When set to 0, the duration values containing decimals part (like "6.5 days") will be considered invalid.
     */
    decimalPrecision        : 2,

    /**
     * @cfg {Boolean} useAbbreviation When set to `true`, the column will render the abbreviated duration unit name, not full. Abbreviation will also be used
     * when editing the value. Useful if the column width is limited.
     */
    useAbbreviation         : false,

    instantUpdate           : true,

    fieldProperty           : 'durationField',

    fieldConfigs            : [ 'instantUpdate', 'useAbbreviation', 'decimalPrecision' ],

    defaultEditorXType      : 'durationfield',

    initComponent : function () {
        this.initTaskFieldColumn();

        this.callParent(arguments);
    },


    getValueToRender : function (value, meta, task) {
        if (!Ext.isNumber(value)) return '';

        return this.field.valueToVisible(value, task.getDurationUnit());
    }
});

/**

@class Gnt.column.Effort
@extends Gnt.column.Duration

{@img gantt/images/duration-field.png}

A Column representing a `Effort` field of a task. The column is editable, however to enable the editing you will need to add a
`Sch.plugin.TreeCellEditing` plugin to your gantt panel. The overall setup will look like this:

    var gantt = Ext.create('Gnt.panel.Gantt', {
        height      : 600,
        width       : 1000,

        // Setup your grid columns
        columns         : [
            ...
            {
                xtype       : 'effortcolumn',
                width       : 70
            }
            ...
        ],

        plugins             : [
            Ext.create('Sch.plugin.TreeCellEditing', {
                clicksToEdit: 1
            })
        ],
        ...
    })

This column uses a field - {@link Gnt.field.Effort} which allows the
user to specify not only the duration value, but also the duration units.

When rendering the name of the duration unit, the {@link Sch.util.Date#getReadableNameOfUnit}
method will be used to retrieve the name of the unit.

*/
Ext.define('Gnt.column.Effort', {
    extend                  : 'Gnt.column.Duration',

    alias                   : [
        'widget.effortcolumn',
        'widget.ganttcolumn.effort'
    ],

    requires                : ['Gnt.field.Effort'],

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

        - text : 'Effort'
     */

    /**
     * @cfg {Number} decimalPrecision A number of digits to show after the dot when rendering the value of the field or when editing it.
     * When set to 0, the effort values containing decimals part (like "6.5 days") will be considered invalid.
     */

    fieldProperty           : 'effortField',

    defaultEditorXType      : 'effortfield',


    getValueToRender : function (value, meta, task) {
        if (!Ext.isNumber(value)) return '';

        return this.field.valueToVisible(value, task.getEffortUnit());
    }

});

/**
 * A Column showing the `ConstraintType` field of a task. The column is editable when adding a
 * `Sch.plugin.TreeCellEditing` plugin to your Gantt panel. The overall setup will look like this:
 *
 * var gantt = Ext.create('Gnt.panel.Gantt', {
 *       height      : 600,
 *       width       : 1000,
 *
 *       columns         : [
 *           ...
 *           {
 *               xtype       : 'constrainttypecolumn',
 *               width       : 80
 *           }
 *           ...
 *       ],
 *
 *       plugins             : [
 *           Ext.create('Sch.plugin.TreeCellEditing', {
 *               clicksToEdit: 1
 *           })
 *       ],
 *       ...
 *   })
 *
 * @class Gnt.column.ConstraintType
 * @extends Ext.grid.column.Column
 */
Ext.define("Gnt.column.ConstraintType", {
    extend              : "Ext.grid.column.Column",

    requires            : ['Gnt.field.ConstraintType'],
    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    alias               : [
        'widget.constrainttypecolumn',
        'widget.ganttcolumn.constrainttype'
    ],

    /**
     * @cfg {Object} l10n A object, purposed for the class localization.
     * @cfg {String} l10n.text Column title
     */

    /**
     * @cfg {Number} width The width of the column.
     */
    width               : 100,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align               : 'left',

    /**
     * @cfg {Array} data The to pass to Constraint Type field to be created in case the column is not configured with one already.
     * @cfg {String} data[][0] Valid constraint type
     * @cfg {String} data[][1] Constraint name
     */
    data                : null,

    // Need to properly obtain the data index if none is given
    fieldProperty       : 'constraintTypeField',

    defaultEditorXType  : 'constrainttypefield',

    initComponent : function () {
        this.initTaskFieldColumn({
            store           : this.data,
            taskField       : this.fieldProperty
        });

        this.callParent(arguments);
    }

});

/**
 *
 * @class Gnt.column.ConstraintDate
 * @extends Ext.grid.column.Date
 *
 * A Column displaying a task's constraint date. The column is editable when adding a
 * `Sch.plugin.TreeCellEditing` plugin to your Gantt panel. The overall setup will look like this:
 *
 *
 *     var gantt = Ext.create('Gnt.panel.Gantt', {
 *         height      : 600,
 *         width       : 1000,
 *
 *         columns         : [
 *             ...
 *             {
 *                 xtype       : 'constraintdatecolumn',
 *                 width       : 80
 *             }
 *             ...
 *         ],
 *         ...
 *     })
 *
 * Note, that this class inherit from [Ext.grid.column.Date](http://docs.sencha.com/ext-js/4-2/#!/api/Ext.grid.column.Date) and supports its configuration options, notably the "format".
*/
Ext.define('Gnt.column.ConstraintDate', {
    extend              : 'Ext.grid.column.Date',

    alias               : [
        'widget.constraintdatecolumn',
        'widget.ganttcolumn.constraintdate'
    ],

    requires            : ['Gnt.field.ConstraintDate'],
    mixins              : ['Gnt.column.mixin.TaskFieldColumn'],

    /**
     * @cfg {string} text The text to show in the column header, defaults to `Mode`
     * @deprecated Please use {@link #l10n l10n} instead.
     */
    /**
     * @cfg {Object} l10n A object, purposed for the class localization.
     * @cfg {String} l10n.text Column title
     */

    /**
     * @cfg {Number} width The width of the column.
     */
    width               : 100,

    /**
     * @cfg {String} align The alignment of the text in the column.
     */
    align               : 'left',

    // Need to properly obtain the data index if none is given
    fieldProperty       : 'constraintDateField',

    defaultEditorXType  : 'constraintdatefield',

    initComponent : function () {
        this.initTaskFieldColumn({
            format      : this.editorFormat || this.format || Ext.Date.defaultFormat,
            taskField   : this.fieldProperty
        });

        this.callParent(arguments);
    },

    getValueToRender : function (value, meta, task) {
        return value && Ext.Date.format(this.field.valueToVisible(value, task), this.format) || '';
    }
});

/**

@class Gnt.widget.Calendar
@extends Ext.picker.Date

{@img gantt/images/widget-calendar.png}

This a very simple subclass of the {@link Ext.picker.Date} which will show holidays and weekends from the provided calendar.
Any non-working time will be shown as disabled dates.

*/
Ext.define('Gnt.widget.Calendar', {
    extend              : 'Ext.picker.Date',

    alias               : 'widget.ganttcalendar',

    requires            : ['Gnt.data.Calendar', 'Sch.util.Date'],

    mixins              : ['Gnt.mixin.Localizable'],

    /**
     * @cfg {Gnt.data.Calendar} calendar An instance of the {@link Gnt.data.Calendar} to read the holidays from
     */
    calendar            : null,

    /**
     * @cfg {Date} startDate The start date of the range to show holidays for.
     */
    startDate           : null,

    /**
     * @cfg {Date} endDate The end date of the range to show holidays for.
     */
    endDate             : null,

    initComponent : function () {
        if (!this.calendar) {
            Ext.Error.raise('Required attribute "calendar" missing during initialization of `Gnt.widget.Calendar`');
        }

        if (!this.startDate) {
            Ext.Error.raise('Required attribute "startDate" missing during initialization of `Gnt.widget.Calendar`');
        }

        if (!this.endDate) {
            this.endDate = Sch.util.Date.add(this.startDate, Sch.util.Date.MONTH, 1);
        }

        this.setCalendar(this.calendar);

        this.minDate        = this.value = this.startDate;

        this.callParent(arguments);
        
        // this method requires "this.format" presense which, starting from 4.2.1 is initialized in the parent "initComponent"
        this.injectDates();
    },

    injectDates : function() {
        var me              = this;
        var disabledDates   = me.disabledDates = [];

        Ext.Array.forEach(me.calendar.getHolidaysRanges(me.startDate, me.endDate), function (range) {
            range.forEachDate(function (date) {
                disabledDates.push(Ext.Date.format(date, me.format));
            });
        });

        me.setDisabledDates(disabledDates);
    },

    /**
     * Sets the calendar for this calendar picker
     *
     * @param {Gnt.data.Calendar} The calendar
     */
    setCalendar : function (calendar) {
        var listeners = {
            update  : this.injectDates,
            remove  : this.injectDates,
            add     : this.injectDates,
            load    : this.injectDates,
            clear   : this.injectDates,
            scope   : this
        };

        if (this.calendar) {
            this.mun(calendar, listeners);
        }

        this.calendar = calendar;

        if (calendar) {
            this.mon(calendar, listeners);
        }
    }
});

Ext.define('Gnt.widget.calendar.ResourceCalendarGrid', {
    extend              : 'Ext.grid.Panel',

    requires            : [
        'Ext.data.Store',
        'Ext.grid.plugin.CellEditing',
        'Sch.util.Date',
        'Gnt.model.Calendar',
        'Gnt.data.Calendar'
    ],

    mixins              : ['Gnt.mixin.Localizable'],

    alias               : 'widget.resourcecalendargrid',

    resourceStore       : null,
    calendarStore       : null,

    /*
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - name      : 'Name',
            - calendar  : 'Calendar'
     */

    cellEditingConfig   : null,

    initComponent   : function() {
        var me = this;

        this.calendarStore = this.calendarStore || {
            xclass : 'Ext.data.Store',
            model  : 'Gnt.model.Calendar'
        };

        if (!(this.calendarStore instanceof Ext.data.Store)) {
            this.calendarStore = Ext.create(this.calendarStore);
        }

        var plugin  = Ext.create('Ext.grid.plugin.CellEditing', Ext.apply({ clicksToEdit : 2 }, this.cellEditingConfig));

        this.mon(plugin, {
            edit    : function (editor, e) {
                this.onCalendarChange(e.record, e.value);
            },

            scope   : this
        });


        Ext.apply(me, {
            store           : me.resourceStore,

            columns: [{
                header      : this.L('name'),
                dataIndex   : 'Name',
                flex        : 1
            }, {
                header      : this.L('calendar'),
                flex        : 1,
                renderer    : function (value, meta, record) {
                    var cal     = record.getCalendar();
                    var fn      = me.calendarStore.getModelById ? 'getModelById' : 'getById';
                    var rec     = me.calendarStore[fn](cal && cal.calendarId);
                    return rec && rec.getName() || value;
                },
                editor      : {
                    xtype           : 'combobox',
                    store           : me.calendarStore,
                    queryMode       : 'local',
                    displayField    : 'Name',
                    valueField      : 'Id',
                    editable        : false,
                    allowBlank      : false
                }
            }],
            border      : true,
            height      : 180,
            plugins     : plugin
        });

        this.calendarStore.loadData(this.getCalendarData());
        this.callParent(arguments);
    },

    getCalendarData : function () {
        var result = [];
        Ext.Array.each(Gnt.data.Calendar.getAllCalendars(), function (cal) {
            result.push({ Id : cal.calendarId, Name : cal.name || cal.calendarId });
        });
        return result;
    },

    onCalendarChange : function (record, calendarId) {
        record.setCalendarId(calendarId);
    }
});

Ext.define('Gnt.widget.calendar.AvailabilityGrid', {
    extend              : 'Ext.grid.Panel',

    requires            : [
        'Ext.Button',
        'Ext.data.Store',
        'Ext.grid.plugin.CellEditing',
        'Ext.window.MessageBox',
        'Gnt.data.Calendar',
        'Sch.util.Date'
    ],

    mixins              : ['Gnt.mixin.Localizable'],

    alias               : 'widget.calendaravailabilitygrid',

    // input
    calendarDay         : null,

    height              : 160,

    addButton           : null,
    removeButton        : null,

    maxIntervalsNum     : 5,

    /*
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - startText         : 'Start',
            - endText           : 'End',
            - addText           : 'Add',
            - removeText        : 'Remove',
            - error             : 'Error'
     */

    initComponent : function() {
        // in ext 5 tbar is null, so apply/applyif wouldn't work
        if (!this.tbar) {
            this.tbar = this.buildToolbar();
        }

        Ext.applyIf(this, {
            store       : new Ext.data.Store({
                fields      : [ 'startTime', 'endTime' ],

                data        : this.calendarDay.getAvailability()
            }),

            plugins     : [ new Ext.grid.plugin.CellEditing({ clicksToEdit: 2 }) ],

            columns     : [
                {
                    xtype       : 'datecolumn',
                    header      : this.L('startText'),

                    format      : 'g:i a',
                    dataIndex   : 'startTime',
                    flex        : 1,
                    editor      : { xtype: 'timefield', allowBlank: false, initDate: '31/12/1899' }
                },
                {
                    xtype       : 'datecolumn',
                    header      : this.L('endText'),

                    format      : 'g:i a',
                    dataIndex   : 'endTime',
                    flex        : 1,
                    editor      : { xtype: 'timefield', allowBlank: false, initDate: '31/12/1899' }
                }
            ],

            listeners : {
                selectionchange : this.onAvailabilityGridSelectionChange,
                scope           : this
            }
        });

        this.callParent(arguments);
    },

    buildToolbar : function() {
        this.addButton      = new Ext.Button({ text: this.L('addText'), iconCls: 'gnt-action-add', handler: this.addAvailability, scope: this });
        this.removeButton   = new Ext.Button({ text: this.L('removeText'), iconCls: 'gnt-action-remove', handler: this.removeAvailability, scope: this, disabled: true });

        return [
            this.addButton,
            this.removeButton
        ];
    },

    onAvailabilityGridSelectionChange : function (selection) {
        this.removeButton.setDisabled(!selection || selection.getSelection().length === 0);
    },


    setAvailability : function (availability) {
        this.store.loadData(availability);

        this.addButton.setDisabled(this.store.getCount() >= this.maxIntervalsNum);
    },


    addAvailability: function () {
        var store = this.getStore(),
            count = store.count();

        if (count >= this.maxIntervalsNum) {
            return;
        }

        store.add({
            startTime       : new Date(0, 0, 0, 12, 0),
            endTime         : new Date(0, 0, 0, 13, 0)
        });

        if (count + 1 >= this.maxIntervalsNum && this.addButton) {
            this.addButton.disable();
        }
    },


    removeAvailability: function() {
        var store       = this.getStore(),
            count       = store.getCount(),
            selection   = this.getSelectionModel().getSelection();

        if (selection.length === 0) {
            return;
        }

        store.remove(selection[ 0 ]);

        if (count < this.maxIntervalsNum && this.addButton) {
            this.addButton.enable();
        }
    },

    // output
    isValid: function (noMessage) {
        try {
            this.calendarDay.verifyAvailability(this.getIntervals());
        } catch (ex) {
            if (!noMessage) {
                Ext.MessageBox.show({
                    title       : this.L('error'),
                    msg         : ex,
                    modal       : true,
                    icon        : Ext.MessageBox.ERROR,
                    buttons     : Ext.MessageBox.OK
                });
            }

            return false;
        }

        return true;
    },


    extractTimeFromDate : function (date) {
        return new Date(0, 0, 0, date.getHours(), date.getMinutes(), date.getSeconds());
    },


    // output
    getIntervals : function () {
        var intervals   = [];
        var me          = this;

        this.getStore().each(function (item) {
            var endTime     = me.extractTimeFromDate(item.get('endTime'));
            
            // 12AM as the end time means 24:00
            if (endTime - new Date(0, 0, 0, 0, 0, 0) === 0) endTime = new Date(0, 0, 1, 0, 0);
            
            intervals.push({ startTime : me.extractTimeFromDate(item.get('startTime')), endTime : endTime });
        });

        return intervals;
    }
});

Ext.define('Gnt.widget.calendar.DayEditor', {
    extend      : 'Gnt.widget.calendar.AvailabilityGrid',

    requires    : [
        'Ext.grid.plugin.CellEditing',
        'Gnt.data.Calendar',
        'Sch.util.Date'
    ],

    mixins      : ['Gnt.mixin.Localizable'],

    alias       : 'widget.calendardayeditor',

    height      : 160,

    /*
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - startText           : 'Start',
            - endText             : 'End',
            - workingTimeText     : 'Working time',
            - nonworkingTimeText  : 'Non-working time'
     */

    initComponent : function() {

        var isWorkingDay        = this.calendarDay.getIsWorkingDay();

        this.dockedItems = this.dockedItems || [
            {
                xtype       : 'radiogroup',
                dock        : 'top',
                name        : 'dayType',
                padding     : "0 5px",
                margin      : 0,
                items       : [
                    { boxLabel : this.L('workingTimeText'), name: 'IsWorkingDay', inputValue : true, checked : isWorkingDay },
                    { boxLabel : this.L('nonworkingTimeText'), name: 'IsWorkingDay', inputValue : false, checked : !isWorkingDay }
                ],

                listeners   : {
                    change      : this.onDayTypeChanged,
                    scope       : this
                }
            }
        ];

        this.on('afterrender', this.myApplyState, this);

        this.callParent(arguments);
    },


    getDayTypeRadioGroup : function(){
        return this.down('radiogroup[name="dayType"]');
    },


    myApplyState : function () {
        if (!this.isWorkingDay()) {
            this.viewSetDisabled(true);
            this.addButton.disable();
        }
    },
    
    // we cannot use view.disable() because it blocks also radio buttons to switch working/non working day modes
    // http://www.sencha.com/forum/showthread.php?291799
    viewSetDisabled : function (disabled) {
        if (disabled) {
            this.getView().getEl().mask();
            this.headerCt.getEl().mask();
        } else {
            this.getView().getEl().unmask();
            this.headerCt.getEl().unmask();
        }
    },

    onDayTypeChanged : function(sender) {
        var value = sender.getValue();

        if (Ext.isArray(value.IsWorkingDay)) return;

        this.viewSetDisabled(!value.IsWorkingDay);

        this.addButton.setDisabled(!value.IsWorkingDay || this.getStore().getCount() >= this.maxIntervalsNum);
    },


    isWorkingDay : function() {
        return this.getDayTypeRadioGroup().getValue().IsWorkingDay;
    },


    isValid: function () {
        if (this.isWorkingDay()) return this.callParent();

        return true;
    },


    getIntervals : function () {
        if (!this.isWorkingDay()) return [];

        return this.callParent();
    }
});

Ext.define('Gnt.widget.calendar.WeekEditor', {
    extend                      : 'Ext.form.Panel',

    requires                    : [
        'Ext.grid.Panel',
        'Gnt.data.Calendar',
        'Sch.util.Date',
        'Gnt.widget.calendar.AvailabilityGrid'
    ],

    mixins                      : ['Gnt.mixin.Localizable'],

    alias                       : 'widget.calendarweekeditor',

    weekName                    : null,
    startDate                   : null,
    endDate                     : null,

    // the availability array for the week being edited
    weekAvailability            : null,

    // the `weekAvailability` of the calendar
    calendarWeekAvailability    : null,
    // the `defaultWeekAvailability` of the calendar
    defaultWeekAvailability     : null,

    backupWeekAvailability      : null,

    layout                      : 'anchor',

    defaults                    : { border: false, anchor: '100%' },

    calendarDayModel            : null,

    /*
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - defaultTimeText    : 'Default time',
            - workingTimeText    : 'Working time',
            - nonworkingTimeText : 'Non-working time',
            - error              : 'Error',
            - noOverrideError    : "Week override contains only 'default' days - can't save it"
     */

    currentDayIndex         : null,

    _weekDaysGrid           : null,
    _availabilityGrid       : null,

    initComponent: function () {

        this.backupWeekAvailability     = [];

        this.items = [
            {
                xtype       : 'radiogroup',
                padding     : "0 5px",
                name        : 'dayType',
                items       : [
                    { boxLabel: this.L('defaultTimeText'), name: 'IsWorkingDay', inputValue: 0 },
                    { boxLabel: this.L('workingTimeText'), name: 'IsWorkingDay', inputValue: 1 },
                    { boxLabel: this.L('nonworkingTimeText'), name: 'IsWorkingDay', inputValue: 2 }
                ],
                listeners   : {
                    change      : this.onDayTypeChanged,
                    scope       : this
                }
            },
            {
                layout      : 'column',
                padding     : '0 0 5px 0',
                defaults    : { border: false },

                items       : [
                    {
                        margin          : '0 10px 0 5px',
                        columnWidth     : 0.5,
                        items           : this.getWeekDaysGrid()
                    },
                    {
                        columnWidth     : 0.5,
                        margin          : '0 5px 0 0',
                        items           : this.getAvailabilityGrid()
                    }
                ]
            }
        ];

        this.callParent(arguments);
    },


    getWeekDaysGrid: function () {
        if (this._weekDaysGrid != null) return this._weekDaysGrid;

        var DN = Ext.Date.dayNames;

        return this._weekDaysGrid = new Ext.grid.Panel({
            hideHeaders     : true,
            height          : 160,
            columns         : [{
                header          : '',
                dataIndex       : 'name',
                flex            : 1
            }],

            store           : new Ext.data.Store({
                fields          :['id', 'name'],
                idProperty      : 'id',
                data            : [
                    { id : 1, name: DN[1] },
                    { id : 2, name: DN[2] },
                    { id : 3, name: DN[3] },
                    { id : 4, name: DN[4] },
                    { id : 5, name: DN[5] },
                    { id : 6, name: DN[6] },
                    { id : 0, name: DN[0] }
                ]
            }),

            listeners: {
                viewready           : this.onWeekDaysListViewReady,
                selectionchange     : this.onWeekDaysListSelectionChange,
                beforeselect        : this.onWeekDaysListBeforeSelect,

                scope               : this
            }
        });
    },


    getAvailabilityGrid: function () {
        if (!this._availabilityGrid) {
            this._availabilityGrid = new Gnt.widget.calendar.AvailabilityGrid({
                calendarDay     : new this.calendarDayModel()
            });
        }

        return this._availabilityGrid;
    },


    getDayTypeRadioGroup : function () {
        if (!this.dayTypeRadioGroup) this.dayTypeRadioGroup = this.down('radiogroup[name="dayType"]');
        return this.dayTypeRadioGroup;
    },


    getWeekAvailability : function () {
        return this.weekAvailability;
    },


    onWeekDaysListViewReady : function () {
        var weekDaysGrid            = this.getWeekDaysGrid(),
            monday                  = weekDaysGrid.getStore().getAt(0);

        this.currentDayIndex        = monday.getId();

        this.readFromData();

        weekDaysGrid.getSelectionModel().select(monday, false, true);
    },


    onWeekDaysListBeforeSelect : function () {
        if (!this.saveToData()) return false;
    },


    applyChanges : function (toWeekAvailability) {
        if (!this.saveToData()) return false;

        var weekAvailability    = this.weekAvailability;

        var hasOverride         = false;

        for (var i = 0; i < 7; i++) {
            var currentAvailability = weekAvailability[ i ];

            if (currentAvailability) hasOverride = true;

            if (!currentAvailability) toWeekAvailability[ i ] = null;

            if (currentAvailability && !toWeekAvailability[ i ]) toWeekAvailability[ i ] = currentAvailability;

            if (currentAvailability && toWeekAvailability[ i ]) {
                toWeekAvailability[ i ].setIsWorkingDay(currentAvailability.getIsWorkingDay());
                toWeekAvailability[ i ].setAvailability(currentAvailability.getAvailability());
            }
        }

        if (!hasOverride) {
            Ext.MessageBox.show({
                title       : this.L('error'),
                msg         : this.L('noOverrideError'),
                modal       : true,
                icon        : Ext.MessageBox.ERROR,
                buttons     : Ext.MessageBox.OK
            });

            return false;
        }

        return true;
    },


    onWeekDaysListSelectionChange: function (view, records) {
        this.currentDayIndex            = records[ 0 ].getId();

        this.readFromData();
    },


    // 0 - default, 1 - working , 2 - non-working
    getCurrentTypeOfWeekDay : function (index) {
        return this.weekAvailability[ index ] ? (this.weekAvailability[ index ].getIsWorkingDay() ? 1 : 2) : 0;
    },


    getCurrentWeekDay : function (index) {
        return this.weekAvailability[ index ] || this.calendarWeekAvailability[ index ] || this.defaultWeekAvailability[ index ];
    },


    saveToData: function () {
        var currentDayIndex         = this.currentDayIndex;
        var type                    = this.getDayTypeRadioGroup().getValue().IsWorkingDay;

        var weekAvailability        = this.weekAvailability;

        // default day - remove the element from `weekAvailability`
        if (type === 0) {
            weekAvailability[ currentDayIndex ] = null;

            return true;
        }

        var availabilityGrid        = this.getAvailabilityGrid();

        // working day
        if (type == 1) {
            if (!availabilityGrid.isValid()) return false;

            if (!weekAvailability[ currentDayIndex ]) weekAvailability[ currentDayIndex ] = this.copyDefaultWeekDay(currentDayIndex);

            weekAvailability[ currentDayIndex ].setIsWorkingDay(true);
            weekAvailability[ currentDayIndex ].setAvailability(availabilityGrid.getIntervals());

            this.backupWeekAvailability[ currentDayIndex ] = null;

            return true;
        }

        // type == 2
        if (!weekAvailability[ currentDayIndex ]) weekAvailability[ currentDayIndex ] = this.copyDefaultWeekDay(currentDayIndex);

        weekAvailability[ currentDayIndex ].setIsWorkingDay(false);
        weekAvailability[ currentDayIndex ].setAvailability([]);

        return true;
    },


    copyDefaultWeekDay : function (index) {
        var copy        = (this.calendarWeekAvailability[ index ] || this.defaultWeekAvailability[ index ]).copy();

        copy.setType('WEEKDAYOVERRIDE');
        copy.setOverrideStartDate(this.startDate);
        copy.setOverrideEndDate(this.endDate);
        copy.setName(this.weekName);

        return copy;
    },


    readFromData : function (intervalsToRestore) {
        var day         = this.getCurrentWeekDay(this.currentDayIndex);
        var type        = this.getCurrentTypeOfWeekDay(this.currentDayIndex);

        var grid = this.getAvailabilityGrid();
        grid.setAvailability(intervalsToRestore || day.getAvailability());

        var group = this.getDayTypeRadioGroup();
        group.suspendEvents();
        group.setValue({ IsWorkingDay: [ type ] });
        group.resumeEvents();

        grid.setDisabled(type != 1);
    },


    onDayTypeChanged : function (sender, newValue, oldValue) {
        var value       = sender.getValue();

        // ignore case when no radio buttons selected?
        // weird call with empty object as "newValue"
        if (value.IsWorkingDay == null || Ext.isArray(value.IsWorkingDay)) return;

        var weekAvailability            = this.weekAvailability;
        var backupWeekAvailability      = this.backupWeekAvailability;
        var currentDayIndex             = this.currentDayIndex;

        var availabilityGrid            = this.getAvailabilityGrid();

        var intervalsToRestore;

        if (oldValue.IsWorkingDay == 1) backupWeekAvailability[ currentDayIndex ] = availabilityGrid.getIntervals();

        switch (value.IsWorkingDay) {
            case 0:
                weekAvailability[ currentDayIndex ] = null;
            break;

            case 1:
                if (!weekAvailability[ currentDayIndex ]) weekAvailability[ currentDayIndex ] = this.copyDefaultWeekDay(currentDayIndex);

                intervalsToRestore = backupWeekAvailability[ currentDayIndex ];

                weekAvailability[ currentDayIndex ].setIsWorkingDay(true);
            break;

            case 2:
                if (!weekAvailability[ currentDayIndex ]) weekAvailability[ currentDayIndex ] = this.copyDefaultWeekDay(currentDayIndex);

                weekAvailability[ currentDayIndex ].setAvailability([]);
                weekAvailability[ currentDayIndex ].setIsWorkingDay(false);
            break;

            default:
                throw "Unrecognized day type";
        }

        this.readFromData(intervalsToRestore);
    }
});

Ext.define('Gnt.widget.calendar.DatePicker', {
    extend      : 'Ext.picker.Date',

    alias       : 'widget.gntdatepicker',

    
    workingDayCls           : 'gnt-datepicker-workingday',
    nonWorkingDayCls        : 'gnt-datepicker-nonworkingday',
    overriddenDayCls        : 'gnt-datepicker-overriddenday',
    overriddenWeekDayCls    : 'gnt-datepicker-overriddenweekday',
    
    weekOverridesStore      : null,
    dayOverridesCalendar    : null,


    // @OVERRIDE
    // Adds custom classes to certain day cells
    update : function () {
        this.callParent(arguments);
        
        this.refreshCssClasses();
    },
    
    
    refreshCssClasses : function () {
        var me      = this,
            cells   = me.cells.elements;
            
        this.removeCustomCls();
        
        for (var i = 0; i < me.numDays; i++) {
            // will contain number of ms since Epoch, so need to convert it into Date on the next line
            var date                = cells[ i ].firstChild.dateValue;
            cells[ i ].className    += ' ' + this.getDateCls(new Date(date));
        }
    },

    
    getDateCls : function (date) {
        var cls         = "";
        
        if (date.getMonth() !== this.getActive().getMonth()) return;
        
        var dayOverridesCalendar   = this.dayOverridesCalendar;

        if (dayOverridesCalendar.getOwnCalendarDay(date)) {
            cls         += " " + this.overriddenDayCls;

            if (!dayOverridesCalendar.isWorkingDay(date)) cls += " " + this.nonWorkingDayCls;
            
        } else {
            // this will be an internal week override model instance from the weekStore
            var week    = null;
            
            this.weekOverridesStore.each(function (internalWeekModel) {
                if (Ext.Date.between(date, internalWeekModel.get('startDate'), internalWeekModel.get('endDate'))) {
                    week = internalWeekModel;
                    return false;
                }
            });

            if (week) {
                cls                     += " " + this.overriddenWeekDayCls;

                var index               = date.getDay(),
                    weekAvailability    = week.get('weekAvailability');

                if (weekAvailability && weekAvailability[ index ] && !weekAvailability[ index ].getIsWorkingDay()) {
                    cls                 += " " + this.nonWorkingDayCls;
                }
                
            } else if (!dayOverridesCalendar.isWorkingDay(date)) {
                cls                     += " " + this.nonWorkingDayCls;
            }
        }

        return cls || this.workingDayCls;
    },

    
    removeCustomCls : function(){
        this.cells.removeCls([ this.overriddenDayCls, this.nonWorkingDayCls, this.workingDayCls, this.overriddenWeekDayCls ]);
    }
});
/**

@class Gnt.widget.calendar.Calendar
@extends Ext.form.Panel
@aside guide gantt_calendars

{@img gantt/images/calendar.png}

This widget can be used to edit the calendar content. As the input it should receive an instance of the {@link Gnt.data.Calendar} class.
Once the editing is done and user is happy with the result the {@link #applyChanges} method should be called. It will apply
all the changes user made in UI to the calendar.

Note, this widget does not have the "Ok", "Apply changes" etc button intentionally, as you might want to combine it with your widgets.
See {@link Gnt.widget.calendar.CalendarWindow} for this widget embedded in the Ext.window.Window instance.


*/
Ext.define('Gnt.widget.calendar.Calendar', {
    extend                      : 'Ext.form.Panel',

    requires                    : [
        'Ext.XTemplate',
        'Ext.data.Store',
        'Ext.grid.Panel',
        'Ext.grid.plugin.CellEditing',
        'Ext.layout.container.HBox',
        'Ext.layout.container.Column',
        'Ext.layout.container.Fit',
        'Gnt.data.Calendar',
        'Gnt.model.Week',
        'Gnt.widget.calendar.DayEditor',
        'Gnt.widget.calendar.WeekEditor',
        'Gnt.widget.calendar.DatePicker'
    ],

    mixins                      : ['Gnt.mixin.Localizable'],

    alias                       : 'widget.calendar',

    defaults                    : { padding: 10, border: false },

    /**
     * @cfg {String} workingDayCls class will be applied to all working days at legend block and datepicker
     */
    workingDayCls               : 'gnt-datepicker-workingday',

    /**
     * @cfg {string} nonWorkingDayCls class will be applied to all non-working days at legend block and datepicker
     */
    nonWorkingDayCls            : 'gnt-datepicker-nonworkingday',

    /**
     * @cfg {String} overriddenDayCls class will be applied to all overridden days at legend block and datepicker
     */
    overriddenDayCls            : 'gnt-datepicker-overriddenday',

    /**
     * @cfg {String} overriddenWeekDayCls class will be applied to all overridden days inside overridden week at legend block and date picker
     */
    overriddenWeekDayCls        : 'gnt-datepicker-overriddenweekday',

    /**
     * @cfg {Gnt.data.Calendar} calendar An instance of the {@link Gnt.data.Calendar} to read/change the holidays from/in.
     */
    calendar                    : null,

    calendarManager             : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

        - dayOverrideNameHeaderText : 'Name',
        - overrideName        : 'Name',
        - startDate           : 'Start Date',
        - endDate             : 'End Date',
        - error               : 'Error',
        - dateText            : 'Date',
        - addText             : 'Add',
        - editText            : 'Edit',
        - removeText          : 'Remove',
        - workingDayText      : 'Working day',
        - weekendsText        : 'Weekends',
        - overriddenDayText   : 'Overridden day',
        - overriddenWeekText  : 'Overridden week',
        - workingTimeText     : 'Working time',
        - nonworkingTimeText  : 'Non-working time',
        - dayOverridesText    : 'Day overrides',
        - weekOverridesText   : 'Week overrides',
        - okText              : 'OK',
        - cancelText          : 'Cancel',
        - parentCalendarText  : 'Parent calendar',
        - noParentText        : 'No parent',
        - selectParentText    : 'Select parent',
        - newDayName          : '[Without name]',
        - calendarNameText    : 'Calendar name',
        - tplTexts            : {
            - tplWorkingHours : 'Working hours for',
            - tplIsNonWorking : 'is non-working',
            - tplOverride     : 'override',
            - tplInCalendar   : 'in calendar',
            - tplDayInCalendar: 'standard day in calendar'
        },
        - overrideErrorText   : 'There is already an override for this day',
        - overrideDateError   : 'There is already week override on this date: {0}',
        - startAfterEndError  : 'Start date should be less than end date',
        - weeksIntersectError : 'Week overrides should not intersect'
     */

    /**
     * @cfg {Object} dayGridConfig A custom config object to use when configuring the Gnt.widget.calendar.DayGrid instance.
     */
    dayGridConfig               : null,

    /**
     * @cfg {Object} weekGridConfig A custom config object to use when configuring the Gnt.widget.calendar.WeekGrid instance.
     */
    weekGridConfig              : null,

    /**
     * @cfg {Object} datePickerConfig A custom config object to use when configuring the Gnt.widget.calendar.DatePicker instance.
     */
    datePickerConfig            : null,

    dayGrid                     : null,
    weekGrid                    : null,
    datePicker                  : null,

    legendTpl                   : '<ul class="gnt-calendar-legend">' +
            '<li class="gnt-calendar-legend-item">' +
                '<div class="gnt-calendar-legend-itemstyle {workingDayCls}"></div>' +
                '<span class="gnt-calendar-legend-itemname">{workingDayText}</span>' +
                '<div style="clear: both"></div>' +
            '</li>' +
            '<li>' +
                '<div class="gnt-calendar-legend-itemstyle {nonWorkingDayCls}"></div>' +
                '<span class="gnt-calendar-legend-itemname">{weekendsText}</span>' +
                '<div style="clear: both"></div>' +
            '</li>' +
            '<li class="gnt-calendar-legend-override">' +
                '<div class="gnt-calendar-legend-itemstyle {overriddenDayCls}">31</div>' +
                '<span class="gnt-calendar-legend-itemname">{overriddenDayText}</span>' +
                '<div style="clear: both"></div>' +
            '</li>' +
            '<li class="gnt-calendar-legend-override">' +
                '<div class="gnt-calendar-legend-itemstyle {overriddenWeekDayCls}">31</div>' +
                '<span class="gnt-calendar-legend-itemname">{overriddenWeekText}</span>' +
                '<div style="clear: both"></div>' +
            '</li>' +
        '</ul>',

    dateInfoTpl                 : null,

    dayOverridesCalendar        : null,
    weekOverridesStore          : null,

    copiesIndexByOriginalId     : null,

    // reference to a window with day override editor used only in tests for now
    currentDayOverrideEditor    : null,

    calendarDayModel            : null,


    initComponent : function() {
        var me = this;

        me.copiesIndexByOriginalId = {};

        // compiles templates
        me.setupTemplates();

        var calendar    = me.calendar;

        if (!calendar && me.calendarManager) {
            calendar    = me.calendarManager.getProjectCalendar() || me.calendarManager.getRoot().firstChild;
        }

        //  we need "calendarDayModel" to build days override grid
        if (!me.calendarDayModel) me.calendarDayModel   = calendar && calendar.getModel && calendar.getModel() || calendar.model;

        // fills the panel "items"
        me.buildItems();

        me.bindListeners();

        me.callParent(arguments);

        // update the panel UI with active calendar data
        me.calendar && me.setCalendar(me.calendar);
    },


    bindListeners : function () {
        var me = this;

        me.on('calendarset', me.onCalendarSet);
        me.on('afterrender', me.onCalendarSet);

        me.dayGrid.on({
            selectionchange : me.onDayGridSelectionChange,
            validateedit    : me.onDayGridValidateEdit,
            edit            : me.onDayGridEdit,
            scope           : me
        });

        me.dayGrid.store.on({
            update          : me.refreshView,
            remove          : me.refreshView,
            add             : me.refreshView,
            scope           : me
        });

        me.weekGrid.on({
            selectionchange : me.onWeekGridSelectionChange,
            validateedit    : me.onWeekGridValidateEdit,
            edit            : me.onWeekGridEdit,
            scope           : me
        });

        me.weekGrid.store.on({
            update          : me.refreshView,
            remove          : me.refreshView,
            add             : me.refreshView,
            scope           : me
        });

        me.datePicker.on({
            select          : me.onDateSelect,
            scope           : me
        });
    },


    buildItems : function () {

        this.dateInfoPanel  = new Ext.Panel({
            cls             : 'gnt-calendar-dateinfo',
            columnWidth     : 0.33,
            border          : false,
            height          : 200
        });

        this.cmbParentCalendar = new Ext.form.field.ComboBox({
            name            : 'cmb_parentCalendar',
            fieldLabel      : this.L('parentCalendarText'),

            store           : new Ext.data.Store({
                fields      : [ 'Id', 'Name' ]
            }),

            queryMode       : 'local',
            displayField    : 'Name',
            valueField      : 'Id',

            editable        : false,
            emptyText       : this.L('selectParentText'),
            flex            : 1
        });

        this.buildWeekGrid();
        this.buildDayGrid();
        this.buildDatePicker();

        this.items = [
            {
                xtype       : 'container',
                layout      : 'hbox',
                pack        : 'start',
                align       : 'stretch',
                items       : [
                    {
                        xtype           : 'textfield',
                        itemId          : 'calendarName',
                        fieldLabel      : this.L('calendarNameText'),
                        margin          : '0 10 0 0',
                        flex            : 1
                    },
                    this.cmbParentCalendar
                ]
            },
            {
                layout      : 'column',
                defaults    : { border : false },
                items       : [
                    {
                        margin          : '0 15px 0 0',
                        columnWidth     : 0.3,
                        html            : this.legendTpl.apply({
                            workingDayText          : this.L('workingDayText'),
                            weekendsText            : this.L('weekendsText'),
                            overriddenDayText       : this.L('overriddenDayText'),
                            overriddenWeekText      : this.L('overriddenWeekText'),
                            workingDayCls           : this.workingDayCls,
                            nonWorkingDayCls        : this.nonWorkingDayCls,
                            overriddenDayCls        : this.overriddenDayCls,
                            overriddenWeekDayCls    : this.overriddenWeekDayCls
                        })
                    },
                    {
                        columnWidth     : 0.37,
                        margin          : '0 5px 0 0',
                        items           : [ this.datePicker ]
                    },
                    this.dateInfoPanel
                ]
            },
            {
                xtype       : 'tabpanel',
                height      : 220,
                items       : [ this.dayGrid, this.weekGrid ]
            }
        ];
    },


    buildDayGrid : function () {
        var calendarDayModel = this.calendarDayModel.prototype;

        // create day overrides grid
        this.dayGrid    = new Ext.grid.Panel(Ext.apply({
            title       : this.L('dayOverridesText'),
            tbar        : [
                {
                    text    : this.L('addText'),
                    itemId  : 'btnAdd',
                    action  : 'add',
                    iconCls : 'gnt-action-add',
                    handler : this.addDay,
                    scope   : this
                },
                {
                    text    : this.L('editText'),
                    itemId  : 'btnEdit',
                    action  : 'edit',
                    iconCls : 'gnt-action-edit',
                    handler : this.editDay,
                    scope: this
                },
                {
                    text    : this.L('removeText'),
                    itemId  : 'btnRemove',
                    action  : 'remove',
                    iconCls : 'gnt-action-remove',
                    handler : this.removeDay,
                    scope   : this
                }
            ],
            store       : new Gnt.data.Calendar(),
            plugins     : [ new Ext.grid.plugin.CellEditing({ clicksToEdit : 2 }) ],
            columns     : [
                {
                    header      : this.L('dayOverrideNameHeaderText'),
                    dataIndex   : calendarDayModel.nameField,
                    flex        : 1,
                    editor      : { allowBlank : false }
                },
                {
                    header      : this.L('dateText'),
                    dataIndex   : calendarDayModel.dateField,
                    width       : 100,
                    xtype       : 'datecolumn',
                    editor      : { xtype : 'datefield' }
                }
            ]
        }, this.dayGridConfig || {}));

        this.dayOverridesCalendar   = this.dayGrid.store;
    },


    updateGrids: function () {
        this.dayGrid && this.fillDaysStore();
        this.weekGrid && this.fillWeeksStore();
    },


    buildWeekGrid : function () {
        // create week overrides grid
        this.weekGrid   = new Ext.grid.Panel(Ext.apply({
            title       : this.L('weekOverridesText'),
            border      : true,

            plugins     : [ new Ext.grid.plugin.CellEditing({ clicksToEdit : 2 }) ],

            store       : new Ext.data.Store({
                model   : 'Gnt.model.Week'
            }),

            tbar        : [
                { text: this.L('addText'), itemId: 'btnAdd', action: 'add', iconCls: 'gnt-action-add', handler: this.addWeek, scope: this },
                { text: this.L('editText'), itemId: 'btnEdit', action: 'edit', iconCls: 'gnt-action-edit', handler: this.editWeek, scope: this },
                { text: this.L('removeText'), itemId: 'btnRemove', action: 'remove', iconCls: 'gnt-action-remove', handler: this.removeWeek, scope: this }
            ],

            columns     : [
                {
                    header      : this.L('overrideName'),
                    dataIndex   : 'name',
                    flex        : 1,
                    editor      : { allowBlank : false }
                },
                {
                    xtype       : 'datecolumn',
                    header      : this.L('startDate'),
                    dataIndex   : 'startDate',
                    width       : 100,
                    editor      : { xtype : 'datefield' }
                },
                {
                    xtype       : 'datecolumn',
                    header      : this.L('endDate'),
                    dataIndex   : 'endDate',
                    width       : 100,
                    editor      : { xtype : 'datefield' }
                }
            ]

        }, this.weekGridConfig || {}));

        this.weekOverridesStore     = this.weekGrid.store;
    },


    buildDatePicker : function() {
        this.datePicker = new Gnt.widget.calendar.DatePicker(Ext.apply({
            dayOverridesCalendar    : this.dayGrid.store,
            weekOverridesStore      : this.weekGrid.store
        }, this.datePickerConfig));
    },


    onCalendarSet: function (calendar) {
        // data is an array of objects and store is considered as containing a modified records
        this.weekOverridesStore.commitChanges();
    },


    setCalendar : function (calendar) {

        if (this.calendar) {
            this.mun(this.calendar, {
                load            : this.onCalendarChange,
                add             : this.onCalendarChange,
                remove          : this.onCalendarChange,
                update          : this.onCalendarChange,
                parentchange    : this.onParentChange,
                scope           : this
            });
        }

        this.calendar = calendar;

        if (calendar) {
            this.mon(this.calendar, {
                load            : this.onCalendarChange,
                add             : this.onCalendarChange,
                remove          : this.onCalendarChange,
                update          : this.onCalendarChange,
                parentchange    : this.onParentChange,
                scope           : this
            });
        }

        this.onCalendarChange();

        this.fireEvent('calendarset', calendar);
    },


    onParentChange : function () {
        this.updateComboBox();
    },


    updateComboBox : function () {
        var me          = this,
            calendars   = [];

        // Collect records for the combobox dropdown list, all calendars except the one being edited

        if (me.calendarManager) {
            var root        = me.calendarManager.getRoot();
            var activeNode  = me.calendarManager.getNodeByCalendar(me.calendar);

            root.cascadeBy(function (item) {
                var calendar = item.getCalendar();

                if (item !== root && item !== activeNode && !activeNode.contains(item)) {
                    calendars.push({ Id : calendar.calendarId, Name : item.getName() || calendar.calendarId });
                }
            });

        } else {
            calendars = me.calendar.getParentableCalendars();
        }

        // fill the combobx store
        this.cmbParentCalendar.store.loadData([{ Id : -1, Name : this.L('noParentText') }].concat(calendars));

        var parent      = this.calendar && this.calendar.parent,
            parentId    = parent && parent.calendarId;

        this.cmbParentCalendar.setValue(parentId || -1);

        // HACK: this ie IE10+ setting value to combo will open dropdown list
        // http://www.sencha.com/forum/showthread.php?296468
        Ext.isIE10p && this.cmbParentCalendar.doQueryTask.cancel();
    },


    onCalendarChange : function () {
        this.updateComboBox();
        this.fillDaysStore();
        this.fillWeeksStore();
        this.refreshView();
    },


    setupTemplates : function () {
        var tplTexts    = this.L('tplTexts');

        if (!this.dateInfoTpl) {
            this.dateInfoTpl = Ext.String.format(
                '<div class="gnt-calendar-overridedate">' +
                    '<tpl if="isWorkingDay">' + tplTexts.tplWorkingHours + ' {date}:<tpl else>{date} ' + tplTexts.tplIsNonWorking + '</tpl>' +
                '</div>' +
                '<ul class="gnt-calendar-availabilities">' +
                    '<tpl for="availability">' +
                        '<li>{.}</li>' +
                    '</tpl>' +
                '</ul>' +
                '<span class="gnt-calendar-overridesource">' + tplTexts.tplBasedOn +': ' +
                    '<tpl if="override">' + tplTexts.tplOverride + ' "{name}" ' + tplTexts.tplInCalendar + ' "{calendarName}"<tpl else>' +
                        tplTexts.tplDayInCalendar + ' "{calendarName}"</tpl>' +
                '</span>'
            );
        }

        if (!(this.dateInfoTpl instanceof Ext.Template))    this.dateInfoTpl    = new Ext.XTemplate(this.dateInfoTpl);
        if (!(this.legendTpl instanceof Ext.Template))      this.legendTpl      = new Ext.XTemplate(this.legendTpl);
    },

    afterRender : function () {
        this.callParent(arguments);

        this.onDateSelect(this.datePicker, new Date());
    },


    fillDaysStore : function () {
        // only filter days with type "DAY" that has "Date" set
        var dataTemp        = Gnt.util.Data.cloneModelSet(this.calendar, function (calendarDay) {
            return (calendarDay.getType() == 'DAY' && calendarDay.getDate());
        });

        this.dayOverridesCalendar.loadData(dataTemp);
    },


    copyCalendarDay : function (calendarDay) {
        var copy            = calendarDay.copy(null);

        copy.__COPYOF__     = calendarDay.getId();

        this.copiesIndexByOriginalId[ calendarDay.getId() ]   = copy.getId();

        return copy;
    },


    fillWeeksStore : function () {
        var me              = this;
        var data            = [];

        this.calendar.forEachNonStandardWeek(function (nonStandardWeek) {
            var week                = Ext.apply({}, nonStandardWeek);

            week.weekAvailability   = Ext.Array.map(week.weekAvailability, function (day) {
                return day && me.copyCalendarDay(day) || null;
            });

            week.mainDay            = me.copyCalendarDay(week.mainDay);

            data.push(week);
        });

        this.weekOverridesStore.loadData(data);
    },


    addDay : function(){
        var date        = this.datePicker.getValue();
        // do not allow duplicate day overrides
        if (this.dayOverridesCalendar.getOwnCalendarDay(date)) {
            this.alert({ msg : this.L('overrideErrorText') });
            return;
        }

        var newDay      = new this.calendar.model ({
            Name            : this.L('newDayName'),
            Type            : 'DAY',
            Date            : date,
            IsWorkingDay    : false
        });

        //this.dayOverridesCalendar.insert(0, newDay);
        this.dayGrid.getStore().insert(0, newDay);
        this.dayGrid.getSelectionModel().select([ newDay ], false, false);
    },


    editDay : function(){
        var me          = this,
            selection   = this.dayGrid.getSelectionModel().getSelection();

        if (selection.length === 0) return;

        var day         = selection[ 0 ];

        var editor      = this.currentDayOverrideEditor = new Gnt.widget.calendar.DayEditor({
            addText             : this.L('addText'),
            removeText          : this.L('removeText'),
            workingTimeText     : this.L('workingTimeText'),
            nonworkingTimeText  : this.L('nonworkingTimeText'),

            calendarDay         : day
        });

        var editorWindow      = Ext.create('Ext.window.Window', {
            title           : this.L('dayOverridesText'),
            modal           : true,

            width           : 280,
            height          : 260,

            layout          : 'fit',
            items           : editor,

            buttons         : [
                {
                    text        : this.L('okText'),
                    handler     : function () {
                        if (editor.isValid()) {
                            var calendarDay = editor.calendarDay;

                            calendarDay.setIsWorkingDay(editor.isWorkingDay());
                            calendarDay.setAvailability(editor.getIntervals());

                            me.applyCalendarDay(calendarDay, day);

                            me.refreshView();

                            editorWindow.close();
                        }
                    }
                },
                {
                    text        : this.L('cancelText'),
                    handler     : function () {
                        editorWindow.close();
                    }
                }
            ]
        });

        editorWindow.show();
    },


    removeDay : function () {
        var grid        = this.dayGrid,
            selection   = grid.getSelectionModel().getSelection();

        if (!selection.length) return;

        grid.getStore().remove(selection[0]);

        this.refreshView();
    },


    refreshView : function () {
        var date        = this.datePicker.getValue(),
            day         = this.getCalendarDay(date),
            weekGrid    = this.weekGrid,
            dayGrid     = this.dayGrid,
            dayOverride = this.dayOverridesCalendar.getOwnCalendarDay(date),
            weekOverride;

        var name;

        // First check if there is an override on day level
        if (dayOverride) {
            dayGrid.getSelectionModel().select([ dayOverride ], false, true);
            name        = dayOverride.getName();
        } else {
            // Now check if there is an override on week level
            weekOverride = this.getWeekOverrideByDate(date);
            if (weekOverride) {
                weekGrid.getSelectionModel().select([ weekOverride ], false, true);
                name    = weekOverride.get('name');
            }
        }

        var dayData = {
            name            : name || day.getName(),
            date            : Ext.Date.format(date, 'M j, Y'),
            calendarName    : this.calendar.name || this.calendar.calendarId,
            availability    : day.getAvailability(true),
            override        : Boolean(dayOverride || weekOverride),
            isWorkingDay    : day.getIsWorkingDay()
        };

        this.dateInfoPanel.update(this.dateInfoTpl.apply(dayData));

        this.down('#calendarName').setValue(this.calendar.name);

        this.datePicker.rendered && this.datePicker.refreshCssClasses();
    },


    onDayGridSelectionChange : function (selection) {
        if (selection.getSelection().length === 0) return;

        var day     = selection.getSelection()[ 0 ];

        this.datePicker.setValue(day.getDate());
        this.refreshView();
    },


    onDayGridEdit : function (editor, context) {
        if (context.field === 'Date') {
            context.grid.getStore().clearCache();
            this.datePicker.setValue(context.value);
        }

        this.refreshView();
    },


    onDayGridValidateEdit : function (editor, context) {
        var calendar = this.dayGrid.store;

        if (context.field === calendar.model.prototype.dateField && calendar.getOwnCalendarDay(context.value) && context.value !== context.originalValue) {
            this.alert({ msg : this.L('overrideErrorText') });
            return false;
        }
    },


    onDateSelect : function (picker, date) {
        this.refreshView();
    },


    getCalendarDay: function (date) {
        var day     = this.dayOverridesCalendar.getOwnCalendarDay(date);

        if (day) return day;

        day         = this.getWeekOverrideDay(date);

        if (day) return day;

        return this.calendar.weekAvailability[ date.getDay() ] || this.calendar.defaultWeekAvailability[ date.getDay() ];
    },


    getWeekOverrideDay : function (date) {
        var dateTime            = new Date(date),
            internalWeekModel   = this.getWeekOverrideByDate(date),
            index               = dateTime.getDay();

        if (internalWeekModel == null) return null;

        var weekAvailability = internalWeekModel.get('weekAvailability');

        if (!weekAvailability) return null;

        return weekAvailability[ index ];
    },


    getWeekOverrideByDate: function(date) {
        var week = null;

        this.weekOverridesStore.each(function (internalWeekModel) {
            if (Ext.Date.between(date, internalWeekModel.get('startDate'), internalWeekModel.get('endDate'))) {
                week = internalWeekModel;
                return false;
            }
        });

        return week;
    },


    intersectsWithCurrentWeeks : function (startDate, endDate, except) {
        var result                          = false;

        this.weekOverridesStore.each(function (internalWeekModel) {
            if (internalWeekModel == except) return;

            var weekStartDate       = internalWeekModel.get('startDate');
            var weekEndDate         = internalWeekModel.get('endDate');

            if (weekStartDate <= startDate && startDate < weekEndDate || weekStartDate < endDate && endDate <= weekEndDate) {
                result      = true;

                // stop the iteration
                return false;
            }
        });

        return result;
    },


    addWeek : function () {
        var weekOverridesStore      = this.weekOverridesStore;
        var startDate               = this.datePicker.getValue();
        var endDate;

        // we are about to create a week override and we need to make sure it does not
        // intersect with already created week overrides. Also we'd like to make it 1w long initially
        // but in case there will be an intersection with current overrides we are ok to shorten it
        for (var duration = 7; duration > 0; duration--) {
            endDate     = Sch.util.Date.add(startDate, Sch.util.Date.DAY, duration);

            if (!this.intersectsWithCurrentWeeks(startDate, endDate)) break;
        }

        if (!duration) {
            this.alert({ msg : Ext.String.format(this.L('overrideDateError'), Ext.Date.format(startDate, 'Y/m/d')) });
            return;
        }

        var mainDay     = new this.calendar.model();

        mainDay.setType('WEEKDAYOVERRIDE');
        mainDay.setName(this.L('newDayName'));
        mainDay.setOverrideStartDate(startDate);
        mainDay.setOverrideEndDate(endDate);
        mainDay.setWeekday(-1);

        var newWeek                 = weekOverridesStore.insert(0, {
            name                : this.L('newDayName'),
            startDate           : startDate,
            endDate             : endDate,

            weekAvailability    : [],
            mainDay             : mainDay
        })[ 0 ];

        this.weekGrid.getSelectionModel().select([ newWeek ], false, false);
    },


    editWeek : function () {
        var selection   = this.weekGrid.getSelectionModel().getSelection(),
            me          = this;

        if (selection.length === 0) return;

        var weekModel   = selection[ 0 ];

        var editor      = new Gnt.widget.calendar.WeekEditor({
            startDate                   : weekModel.get('startDate'),
            endDate                     : weekModel.get('endDate'),
            weekName                    : weekModel.get('name'),
            calendarDayModel            : this.calendar.model,
            // keep the "weekModel" private and pass individual fields to the editor
            weekAvailability            : weekModel.get('weekAvailability'),
            calendarWeekAvailability    : this.calendar.weekAvailability,
            defaultWeekAvailability     : this.calendar.defaultWeekAvailability
        });

        var editorWindow    = Ext.create('Ext.window.Window', {
            title       : this.L('weekOverridesText'),
            modal       : true,
            width       : 370,
            defaults    : { border : false },

            layout      : 'fit',
            items       : editor,

            buttons     : [
                {
                    // this property will be used in test to locate the button
                    action      : 'ok',

                    text        : this.L('okText'),
                    handler     : function () {
                        if (editor.applyChanges(weekModel.get('weekAvailability'))) {
                            me.refreshView();
                            editorWindow.close();
                        }
                    }
                },
                {
                    text        : this.L('cancelText'),
                    handler     : function() {
                        editorWindow.close();
                    }
                }
            ]
        });

        editorWindow.show();
    },


    removeWeek: function () {
        var selection   = this.weekGrid.getSelectionModel().getSelection();

        if (selection.length === 0) return;

        this.weekOverridesStore.remove(selection[ 0 ]);

        this.refreshView();
    },


    onWeekGridSelectionChange : function (selModel){
        var selection       = selModel.getSelection();

        if (selection.length === 0) return;

        this.datePicker.setValue(selection[ 0 ].get('startDate'));
    },


    onWeekGridEdit : function (editor, context){
        var weekModel       = context.record,
            startDate       = weekModel.get('startDate'),
            endDate         = weekModel.get('endDate');

        if (context.field == 'startDate' || context.field == 'endDate') {
            Ext.Array.each(weekModel.get('weekAvailability').concat(weekModel.get('mainDay')), function (weekDay) {
                if (weekDay) {
                    weekDay.setOverrideStartDate(startDate);
                    weekDay.setOverrideEndDate(endDate);
                }
            });

            this.datePicker.setValue(startDate);
        }

//        if (context.field == 'name') {
//            weekModel.setName(weekModel.getName());
//            Ext.Array.each(weekModel.get('weekAvailability').concat(weekModel.get('mainDay')), function (weekDay) {
//                if (weekDay) {
//                    weekDay.setName(weekModel.get('name'));
//                }
//            });
//        }

        this.refreshView();
    },

    alert : function (config) {
        config = config || {};

        Ext.MessageBox.show(Ext.applyIf(config, {
            title       : this.L('error'),
            icon        : Ext.MessageBox.WARNING,
            buttons     : Ext.MessageBox.OK
        }));
    },

    onWeekGridValidateEdit : function (editor, context) {
        var weekModel            = context.record,
            startDate            = context.field == 'startDate' ? context.value : weekModel.get('startDate'),
            endDate              = context.field == 'endDate' ? context.value : weekModel.get('endDate');

        if (startDate > endDate) {
            this.alert({ msg : this.L('startAfterEndError') });
            return false;
        }

        if (this.intersectsWithCurrentWeeks(startDate, endDate, weekModel)) {
            this.alert({ msg : this.L('weeksIntersectError') });
            return false;
        }
    },


    applyCalendarDay : function (from, to){
        to.beginEdit();

        to.setName(from.getName());
        to.setIsWorkingDay(from.getIsWorkingDay());
        to.setDate(from.getDate());
        to.setOverrideStartDate(from.getOverrideStartDate());
        to.setOverrideEndDate(from.getOverrideEndDate());

        var fromAvailability    = from.getAvailability(true);
        var toAvailability      = to.getAvailability(true);

        if (fromAvailability + '' != toAvailability + '') to.setAvailability(from.getAvailability());

        to.endEdit();
    },


    applySingleDay : function (copyDay, toAdd) {
        if (copyDay.__COPYOF__)
            this.applyCalendarDay(copyDay, this.calendar.getModelByInternalId(copyDay.__COPYOF__));
        else {
            if (copyDay.joined) {
                copyDay.unjoin(copyDay.joined[ 0 ]);
            }
            toAdd.push(copyDay);
        }
    },


    /**
     * Call this method when user is satisfied with the current state of the calendar in the UI. It will apply all the changes made in the UI
     * to the original calendar.
     *
     */
    applyChanges : function () {
        var me              = this;
        var calendar        = this.calendar;
        var parent          = this.down('combobox[name="cmb_parentCalendar"]').getValue(),
            newName         = this.down('#calendarName').getValue();

        if (this.calendarManager) {
            var node = this.calendarManager.getModelById(calendar.calendarId);
            if (node) {
                node.setName(newName);
            }
        }

        calendar.suspendEvents(true);
        calendar.suspendCacheUpdate++;

        calendar.name = newName;

        calendar.setParent(parent ? Gnt.data.Calendar.getCalendar(parent) : null);

        if (calendar.proxy.extraParams) {
            calendar.proxy.extraParams.calendarId   = calendar.calendarId;
        }

        // days part
        Gnt.util.Data.applyCloneChanges(this.dayOverridesCalendar, calendar);

        var daysToAdd               = [];
        var daysToRemove            = [];
        var remainingWeekDays       = {};

        // weeks part
        this.weekOverridesStore.each(function (weekModel) {
            Ext.Array.each(weekModel.get('weekAvailability').concat(weekModel.get('mainDay')), function (weekDay) {
                if (weekDay) {
                    if (weekDay.__COPYOF__) remainingWeekDays[ weekDay.__COPYOF__ ] = true;

                    me.applySingleDay(weekDay, daysToAdd);
                }
            });
        });

        calendar.forEachNonStandardWeek(function (originalWeek) {
            Ext.Array.each(originalWeek.weekAvailability.concat(originalWeek.mainDay), function (originalWeekDay) {
                if (originalWeekDay && !remainingWeekDays[ originalWeekDay.getId() ]) daysToRemove.push(originalWeekDay);
            });
        });

        calendar.add(daysToAdd);
        calendar.remove(daysToRemove);

        calendar.suspendCacheUpdate--;
        calendar.clearCache();

        calendar.resumeEvents();

        this.fireEvent('calendarset', calendar);
    },


    hasChanges    : function () {
        if (!this.calendar) return false;

        var dayChanges      = this.dayOverridesCalendar.getModifiedRecords().length || this.dayOverridesCalendar.getRemovedRecords().length,
            weekChanges     = this.weekOverridesStore.getModifiedRecords().length || this.weekOverridesStore.getRemovedRecords().length,
            // isDirty on field wouldn't work correct, so we are going to check it differently
            nameChanged     = this.down('#calendarName').getValue() != this.calendar.name,
            parentId        = this.calendar.parent && this.calendar.parent.calendarId || -1,
            parentChanged   = this.cmbParentCalendar.getValue() != parentId;

        return dayChanges || weekChanges || nameChanged || parentChanged;
    }
});

/**

@class Gnt.widget.calendar.CalendarWindow
@extends Ext.window.Window
@aside guide gantt_calendars

{@img gantt/images/calendar.png}

This is just a {@link Gnt.widget.calendar.Calendar} widget, wrapped with the Ext.window.Window instance.
It proxies the {@link #calendar} config and {@link #applyChanges} method.

*/
Ext.define('Gnt.widget.calendar.CalendarWindow', {
    extend          : 'Ext.window.Window',

    requires        : ['Gnt.widget.calendar.Calendar'],

    mixins          : ['Gnt.mixin.Localizable'],

    alias           : 'widget.calendarwindow',

    /**
     * @cfg {Object} calendarConfig An object to be applied to the newly created instance of the {@link Gnt.widget.calendar.Calendar}
     */
    calendarConfig  : null,

    /**
     * @cfg {Gnt.data.Calendar} calendar An instance of the {@link Gnt.data.Calendar} to read/change the holidays from/in.
     */
    calendar        : null,

    /**
     * @property {Gnt.widget.calendar.Calendar} calendarWidget An underlying calendar widget instance
     */
    calendarWidget  : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - ok         : 'Ok',
            - cancel     : 'Cancel',
     */

    initComponent   : function () {
        Ext.apply(this, {
            width       : 600,

            layout      : 'fit',

            items       : this.calendarWidget = new Gnt.widget.calendar.Calendar(Ext.apply({
                calendar        : this.calendar
            }, this.calendarConfig)),

            buttons     : [
                {
                    text        : this.L('ok'),
                    handler     : function () {
                        this.applyChanges();
                        this.close();
                    },
                    scope       : this
                },
                {
                    text        : this.L('cancel'),
                    handler     : this.close,
                    scope       : this
                }
            ]
        });

        this.callParent(arguments);
    },


    /**
     * Call this method when user is satisfied with the current state of the calendar in the UI. It will apply all the changes made in the UI
     * to the original calendar.
     */
    applyChanges : function () {
        this.calendarWidget.applyChanges();
    },


    setCalendar : function (calendar) {
        this.calendarWidget.setCalendar(calendar);
    }
});

/**

@class Gnt.widget.calendar.CalendarManager
@extends Ext.panel.Panel
@aside guide gantt_calendars

{@img gantt/images/calendar.png}

This widget can be used to manage calendars. As the input it should receive an instance of the {@link Gnt.data.CalendarManager} class.
Displays hierarchy of calendars attached to this CalendarManager and allows to edit calendar itself using {@link Gnt.data.widget.calendar.Calendar}.
Once the editing is done and user is happy with the result the {@link #applyChanges} method should be called. It will apply
all the changes user made in UI to the calendar.
This widget also checks changes in calendar when user navigates through the tree. In case changes were made widget displays confirmation
window with buttons "yes", "no", "cancel".

Note, this widget does not have the "Ok", "Apply changes" etc button intentionally, as you might want to combine it with your widgets.
See {@link Gnt.widget.calendar.CalendarManagerWindow} for this widget embedded in the Ext.window.Window instance.

calendarManager = Ext.create('Gnt.data.CalendarManager', {});

calendarManagerWidget = new Gnt.widget.calendar.CalendarManager({
    calendarManager : calendarManager
});

*/
Ext.define('Gnt.widget.calendar.CalendarManager', {
    extend              : 'Ext.panel.Panel',

    requires            : [
        'Ext.tree.Panel',
        'Ext.menu.Menu',
        'Gnt.widget.calendar.Calendar',
        'Gnt.data.calendar.BusinessTime'
    ],

    mixins              : ['Gnt.mixin.Localizable'],

    alias               : 'widget.calendarmanager',

    /**
     * @cfg {Object} treePanelConfig A configuration for the underlying tree panel
     */
    treePanelConfig     : null,

    /**
     * @property {Ext.tree.Panel} treePanel Underlying tree panel
     */
    treePanel           : null,

    /**
     * @cfg {Object} calendarPanelConfig A configuration for the underlying {@link Gnt.widget.calendar.Calendar calendar widget instance}
     */
    calendarPanelConfig : null,

    /**
     * @cfg {Gnt.data.CalendarManager} calendarManager Store keeping calendars to be shown in the component
     */
    calendarManager     : null,

    /**
     * @property {Gnt.widget.calendar.Calendar} calendarPanel Underlying {@link Gnt.widget.calendar.Calendar calendar widget instance}
     */
    calendarPanel       : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - addText         : 'Add',
            - removeText      : 'Remove',
            - add_child       : 'Add child',
            - add_node        : 'Add calendar',
            - add_sibling     : 'Add sibling',
            - remove          : 'Remove',
            - calendarName    : 'Calendar',
            - confirm_action  : 'Confirm action',
            - confirm_message : 'Calendar has unsaved changes. Would you like to save your changes?'
     */

    layout      : 'border',
    width       : 800,
    height      : 550,

    initComponent : function () {
        var me = this;

        me.cls              = me.cls + ' gnt-calendarmanager';

        me.treePanel        = me.buildTreePanel();

        me.calendarPanel    = new Gnt.widget.calendar.Calendar(Ext.apply({
            region          : 'center',
            calendar        : me.calendar,
            split           : true,
            calendarManager : me.calendarManager
        }, this.calendarPanelConfig));

        me.items            = [this.treePanel, this.calendarPanel];

        this.callParent(arguments);

        this.contextMenu    = this.buildContextMenu();

        var calendarManager = me.calendarManager;

        this.setCalendar(me.calendar || calendarManager.getProjectCalendar() || calendarManager.getRoot().firstChild);

        // for debug purposes
        this.counter = 1;
    },


    buildTreePanel : function () {
        var me = this;

        return new Ext.tree.Panel(Ext.apply({
            split           : true,
            region          : 'west',
            width           : 200,
            store           : me.calendarManager,
            displayField    : me.calendarManager.model.prototype.nameField,
            rootVisible     : false,
            tbar            : [
                {
                    itemId  : 'btnAdd',
                    text    : me.L('addText'),
                    action  : 'add',
                    iconCls : 'gnt-action-add',
                    handler : me.doAddRootNode,
                    scope   : me
                },
                {
                    itemId  : 'btnRemove',
                    text    : me.L('removeText'),
                    action  : 'remove',
                    iconCls : 'gnt-action-remove',
                    handler : me.doRemoveCalendar,
                    scope   : me
                }
            ],
            viewConfig  : {
                plugins     : {
                    ptype               : 'treeviewdragdrop',
                    allowContainerDrops : true,
                    dropZone            : {
                        // we want to always append child node to the hovered one
                        // this behavior isn't supported out of the box by the plugin
                        // so we override a template "onNodeDrop" method
                        onNodeDrop : function (node) {
                            this.valid              = true;
                            this.currentPosition    = 'append';
                            this.overRecord         = this.view.getRecord(node);
                            // call overridden method
                            return this.self.prototype.onNodeDrop.apply(this, arguments);
                        }
                    }
                },
                getRowClass : function (record) {
                    if (me.calendarManager.getProjectCalendar() == record.calendar) {
                        return 'gnt-project-calendar-row';
                    }
                },
                listeners   : {
                    drop    : me.onDrop,
                    scope   : me
                }
            },
            listeners   : {
                containercontextmenu    : me.onContainerContextMenu,
                itemcontextmenu         : me.onItemContextMenu,
                selectionchange         : me.onSelectionChange,
                scope                   : me
            }
        }, me.treePanelConfig));
    },


    buildContextMenu : function () {
        return new Ext.menu.Menu({
            margin  : '0 0 10 0',
            items   : [
                {
                    text    : this.L('add_node'),
                    handler : this.doAddRootNode,
                    itemId  : 'add-node',
                    scope   : this
                },
                {
                    text    : this.L('add_child'),
                    handler : this.doAddChildNode,
                    scope   : this
                },
                {
                    text    : this.L('add_sibling'),
                    handler : this.doAddSiblingCalendar,
                    scope   : this
                },
                {
                    text    : this.L('remove'),
                    handler : this.doRemoveCalendar,
                    scope   : this
                }
            ]
        });
    },


    showContextMenu : function (e, calendar) {
        if (calendar) {
            Ext.each(this.contextMenu.query('menuitem'), function (x) { x.show(); });
            this.contextMenu.down('#add-node').hide();
        } else {
            Ext.each(this.contextMenu.query('menuitem'), function (x) { x.hide(); });
            this.contextMenu.down('#add-node').show();
        }

        e.stopEvent();
        this.contextMenu.showAt(e.getXY());
    },

    onContainerContextMenu : function (view, e) {
        this.showContextMenu(e);
    },

    onItemContextMenu : function (view, calendar, item, index, e) {
        this.showContextMenu(e, calendar);
    },


    hasChanges : function () {
        return this.calendarPanel.hasChanges();
    },


    onSelectionChange       : function (treePanelView, selected, eOpts) {
        // Note, that when this method is called, the selection in the tree actually has already been changed.
        // But, the calendar in the center region has not been updated yet (we do it manually below with
        // calendarPanel.setCalendar() call
        // that is why `calendarPanel.calendar` still contains the data calendar from previously(!) selected calendar row in tree
        var me              = this,
            calendarManager = me.calendarManager,
            calendarPanel   = me.calendarPanel;

        if (selected.length > 0) {
            var selectedCalendar = selected[ 0 ];

            if (calendarPanel.calendar && calendarPanel.hasChanges()) {
                Ext.Msg.show({
                    title      : me.L('confirm_action'),
                    msg        : me.L('confirm_message'),
                    buttons    : Ext.Msg.YESNOCANCEL,
                    icon       : Ext.Msg.QUESTION,
                    fn         : function (btn) {
                        // changes were accepted
                        if (btn == 'yes') {
                            me.applyChanges();
                            calendarPanel.setCalendar(selectedCalendar.getCalendar());

                        // changes were ignored
                        } else if (btn == 'no') {
                            calendarPanel.setCalendar(selectedCalendar.getCalendar());

                        // cancel selection change
                        } else {
                            treePanelView.suspendEvents();
                            // select previous active node
                            treePanelView.select(calendarManager.getNodeByCalendar(calendarPanel.calendar));
                            treePanelView.resumeEvents();
                        }
                    }
                });
            } else {
                calendarPanel.setCalendar(selectedCalendar.getCalendar());
            }
        }
    },


    onDrop : function (node, data, overModel, dropPosition) {
        overModel   = overModel || this.calendarManager.getRootNode();
        // let's expand the node in which we're dropping
        overModel.expand();
    },


    onDestroy : function () {
        this.contextMenu.destroy();
        this.callParent(arguments);
    },


    /**
     * Call this method when user is satisfied with the current state of the calendar in the UI. It will apply all the changes made in the UI
     * to the original calendar.
     * @method applyChanges
     */
    applyChanges : function () {
        this.calendarPanel.applyChanges();
    },


    doAddRootNode : function () {
        this.addCalendar();
    },


    doAddChildNode : function () {
        var selection = this.treePanel.getSelectionModel().getSelection();

        this.addCalendar(selection[0]);
    },


    doAddSiblingCalendar  : function () {
        var selection = this.treePanel.getSelectionModel().getSelection();

        this.addCalendar(selection[0] && selection[0].parentNode);
    },


    doRemoveCalendar : function () {
        var selection   = this.treePanel.getSelectionModel().getSelection();

        this.removeCalendar(selection[0]);
    },


    addCalendar : function (parent) {
        // calendar class prototype
        var calendarProto   = Ext.ClassManager.get(this.calendarManager.calendarClass).prototype;
        // node class prototype
        var nodeProto   = this.calendarManager.model.prototype;
        // extract calendar data to new node config
        var config      = nodeProto.getModelConfig(calendarProto);

        config[nodeProto.nameField] = this.L('calendarName') + this.counter++;
        config.expanded             = true;
        config.leaf                 = true;

        parent = parent || this.treePanel.getRootNode();

        // expand parent node
        parent.data.expanded = true;
        parent.appendChild(config);
    },


    removeCalendar : function (node) {
        var root        = this.treePanel.getRootNode();

        if (node) {
            var next = node.nextSibling || node.previousSibling || (node.parentNode == root ? root.firstChild : node.parentNode);

            if (next) {
                this.treePanel.getSelectionModel().select(next);
            }

            node.remove();
        }
    },


    setCalendar : function (calendar) {
        if (calendar instanceof Gnt.model.Calendar) {
            // set focus in tree
            this.treePanel.setSelection(calendar);

            this.calendarPanel.setCalendar(calendar.getCalendar());
        } else {
            // set focus in tree
            this.treePanel.setSelection(this.calendarManager.getNodeByCalendar(calendar));

            this.calendarPanel.setCalendar(calendar);
        }
    }
});

/**

@class Gnt.widget.calendar.CalendarManagerWindow
@extends Ext.window.Window
@aside guide gantt_calendars

{@img gantt/images/calendar.png}

This is just a {@link Gnt.widget.calendar.CalendarManager} widget, wrapped with the Ext.window.Window instance.
It proxies the {@link #calendar} config and {@link #applyChanges} method.

*/
Ext.define('Gnt.widget.calendar.CalendarManagerWindow', {
    extend          : 'Ext.window.Window',

    requires        : ['Gnt.widget.calendar.CalendarManager'],

    mixins          : ['Gnt.mixin.Localizable'],

    alias           : 'widget.calendarmanagerwindow',

    width           : 800,
    height          : 560,
    layout          : 'fit',
    border          : false,

    /**
     * @cfg {Object} calendarConfig An object to be applied to the newly created instance of the {@link Gnt.widget.calendar.Calendar}
     */
    calendarConfig  : null,

    /**
     * @cfg {Gnt.data.CalendarManager} calendarManager An instance of the {@link Gnt.data.CalendarManager}
     */
    calendarManager : null,

    /**
     * @property {Gnt.widget.calendar.Calendar} panel The underlying calendar widget instance
     */
    panel           : null,

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

            - title           : 'Calendar manager',
            - ok              : 'Ok',
            - cancel          : 'Cancel',
            - confirm_action  : 'Confirm action',
            - confirm_message : 'Calendar has unsaved changes. Would you like to save your changes?'
     */

    initComponent : function () {

        this.panel = new Gnt.widget.calendar.CalendarManager({
            calendarManager : this.calendarManager,
            calendarConfig  : this.calendarConfig
        });

        Ext.apply(this, {
            title       : this.title || this.L('title'),
            items       : [ this.panel ],
            buttons     : [
                {
                    text        : this.L('ok'),
                    handler     : function () {
                        this.applyChanges();
                    },
                    scope       : this
                },
                {
                    text        : this.L('cancel'),
                    handler     : function () {
                        this.close();
                    },
                    scope       : this
                }
            ],

            listeners   : {
                beforeclose : this.onBeforeClose,
                close       : this.onAfterClose
            }
        });

        this.callParent(arguments);
    },

    /**
     * Call this method when user is satisfied with the current state of the calendar in the UI. It will apply all the changes made in the UI
     * to the original calendar.
     */
    applyChanges : function () {
        this.panel.applyChanges();
    },

    onBeforeClose : function () {
        var me      = this;
        var panel   = this.panel;

        if (!me.closing && panel.hasChanges()) {
            Ext.Msg.show({
                title      : me.L('confirm_action'),
                msg        : me.L('confirm_message'),
                buttons    : Ext.Msg.YESNOCANCEL,
                icon       : Ext.Msg.QUESTION,
                fn         : function (btn) {
                    switch (btn) {
                        case 'yes' :
                            panel.applyChanges();
                            me.close();
                            break;
                        case 'no' :
                            // set flag to skip this onBeforeClose processing again when we call me.close()
                            me.closing = true;
                            me.close();
                            break;
                    }
                }
            });

            return false;
        }
    },


    onAfterClose : function () {
        this.closing = false;
    }

});

Ext.define('Gnt.patches.IETreeStore', {
    extend      : 'Sch.util.Patch',

    requires    : ['Gnt.data.TaskStore'],
    target      : 'Gnt.data.TaskStore',

    ieOnly      : true,
    maxVersion : '5.1.0',

    overrides   : {

        // @OVERRIDE
        // Need a hack to protect IE
        onNodeAdded : function (parent, node) {
            var me = this,
                proxy = me.getProxy(),
                reader = proxy.getReader(),
                data = node.raw || node[node.persistenceProperty],
                dataRoot;

            Ext.Array.remove(me.removed, node);
            node.join(me);

            if (!node.isLeaf()) {
                dataRoot = reader.getRoot(data);
                if (dataRoot) {
                    me.fillNode(node, reader.extractData(dataRoot));
                    if (data[reader.root]) {        // MODIFIED, ADDED IF CHECK
                        delete data[reader.root];
                    }
                }
            }

            if (me.autoSync && !me.autoSyncSuspended && (node.phantom || node.dirty)) {
                me.sync();
            }
        }
    }
});

// http://www.sencha.com/forum/showthread.php?295802-5.1-Knightly-Picker-collapses-on-ENTER-key&p=1080010#post1080010
Ext.define('Gnt.patches.CellEditor', {
    extend : 'Sch.util.Patch',

    requires   : ['Ext.grid.CellEditor'],
    target     : 'Ext.grid.CellEditor',
    minVersion : '5.1.0',

    overrides : {
        onHide : function () {
            this.restoreCell();
            this.superclass.onHide.apply(this, arguments);
        }
    }
});
// https://www.sencha.com/forum/showthread.php?301772-Wrong-value-selected-in-combobox-editor
Ext.define('Gnt.patches.CellEditing', {
    extend : 'Sch.util.Patch',

    requires   : ['Ext.grid.plugin.CellEditing'],
    target     : 'Ext.grid.plugin.CellEditing',
    minVersion : '5.1.1',

    overrides : {
        showEditor: function(ed, context, value) {
            // clean lastSelectedRecords cache for combobox if record was changed
            if (ed.context && ed.context.record !== context.record && 
                ed.field instanceof Ext.form.field.ComboBox) {
                ed.field.lastSelectedRecords = null;
            }
            this.callParent(arguments);
        }
    }
});
// https://www.sencha.com/forum/showthread.php?300781
Ext.define('Gnt.patches.Tooltip', {
    extend : 'Sch.util.Patch',

    requires   : ['Ext.tip.ToolTip'],
    target     : 'Ext.tip.ToolTip',
    minVersion : '5.1.0',

    overrides : {
        onDocMouseDown  : function () {
            if (this.isDisabled()) { 
                return; 
            }
            this.callParent(arguments);
        }
    }
});
// https://www.assembla.com/spaces/bryntum/tickets/2127
// https://www.sencha.com/forum/showthread.php?296729
Ext.define('Gnt.patches.RightClick', {
    extend  : 'Sch.util.Patch',

    requires    : ['Gnt.view.Gantt'],
    target      : 'Gnt.view.Gantt',

    minVersion  : '5.1.0',

    overrides   : {
        handleScheduleBarEvent  : function (e) {
            // FF in windows and mac throws click event on right button click, while it shouldn't
            if (Ext.isGecko && e.type === 'click' && e.button === 2) {
                return false;
            }

            return this.callParent(arguments);
        }
    }
});

/**

 @class Gnt.panel.Gantt
 @extends Sch.panel.TimelineTreePanel

 A gantt panel, which allows you to visualize and manage tasks and their dependencies.

 Please refer to the <a href="#!/guide/gantt_getting_started">getting started guide</a> for a detailed introduction.

 {@img gantt/images/gantt-panel.png}

 */
Ext.define("Gnt.panel.Gantt", {
    extend              : "Sch.panel.TimelineTreePanel",

    alias               : ['widget.ganttpanel'],
    alternateClassName  : ['Sch.gantt.GanttPanel'],

    requires            : [
        'Ext.layout.container.Border',
        'Gnt.patches.CellEditor',
        'Gnt.patches.CellEditing',
        'Gnt.data.ResourceStore',
        'Gnt.data.AssignmentStore',
        'Gnt.feature.WorkingTime',
        'Gnt.data.Calendar',
        'Gnt.data.TaskStore',
        'Gnt.data.DependencyStore',
        'Gnt.view.Gantt',
        'Gnt.patches.RightClick',
        'Gnt.plugin.ConstraintResolutionGui',
        'Gnt.plugin.ProjectLines'
    ],

    uses                : [
        'Sch.plugin.CurrentTimeLine'
    ],

    viewType            : 'ganttview',
    layout              : 'border',
    rowLines            : true,
    syncRowHeight       : false,
    useSpacer           : false,
    rowHeight           : 24,

    /**
     * @cfg {String/Object} topLabelField
     * A configuration used to show/edit the field to the top of the task.
     * It can be either string indicating the field name in the data model or a custom object where you can set the following possible properties:
     *
     * - `dataIndex` : String - The field name in the data model
     * - `editor` : Ext.form.Field - The field used to edit the value inline
     * - `renderer` : Function - A renderer method used to render the label. The renderer is called with the 'value' and the record as parameters.
     * - `scope` : Object - The scope in which the renderer is called
     */
    topLabelField       : null,

    /**
     * @cfg {String/Object} leftLabelField
     * A configuration used to show/edit the field to the left of the task.
     * It can be either string indicating the field name in the data model or a custom object where you can set the following possible properties:
     *
     * - `dataIndex` : String - The field name in the data model
     * - `editor` : Ext.form.Field - The field used to edit the value inline
     * - `renderer` : Function - A renderer method used to render the label. The renderer is called with the 'value' and the record as parameters.
     * - `scope` : Object - The scope in which the renderer is called
     */
    leftLabelField      : null,

    /**
     * @cfg {String/Object} bottomLabelField
     * A configuration used to show/edit the field to the bottom of the task.
     * It can be either string indicating the field name in the data model or a custom object where you can set the following possible properties:
     *
     * - `dataIndex` : String - The field name in the data model
     * - `editor` : Ext.form.Field - The field used to edit the value inline
     * - `renderer` : Function - A renderer method used to render the label. The renderer is called with the 'value' and the record as parameters.
     * - `scope` : Object - The scope in which the renderer is called
     */
    bottomLabelField    : null,

    /**
     * @cfg {String/Object} rightLabelField
     * A configuration used to show/edit the field to the right of the task.
     * It can be either string indicating the field name in the data model or a custom object where you can set the following possible properties:
     *
     * - `dataIndex` : String - The field name in the data model
     * - `editor` : Ext.form.Field - The field used to edit the value inline
     * - `renderer` : Function - A renderer method used to render the label. The renderer is called with the 'value' and the record as parameters.
     * - `scope` : Object - The scope in which the renderer is called
     */
    rightLabelField     : null,

    /**
     * @cfg {Boolean} highlightWeekends
     * True (default) to highlight weekends and holidays, using the {@link Gnt.feature.WorkingTime} plugin.
     */
    highlightWeekends   : true,

    /**
     * @cfg {Boolean} weekendsAreWorkdays
     * Set to `true` to treat *all* days as working, effectively removing the concept of non-working time from gantt. Defaults to `false`.
     * This option just will be translated to the {@link Gnt.data.Calendar#weekendsAreWorkdays corresponding option} of the calendar
     */
    weekendsAreWorkdays : false,

    /**
     * @cfg {Boolean} skipWeekendsDuringDragDrop
     * True to skip the weekends/holidays during drag&drop operations (moving/resizing) and also during cascading. Default value is `true`.
     *
     * Note, that holidays will still be excluded from the duration of the tasks. If you need to completely disable holiday skipping you
     * can do that on the gantt level with the {@link #weekendsAreWorkdays} option, or on the task level with the `SchedulingMode` field.
     *
     *
     * This option just will be translated to the {@link Gnt.data.TaskStore#skipWeekendsDuringDragDrop corresponding option} of the task store
     */
    skipWeekendsDuringDragDrop  : true,

    /**
     * @cfg {Boolean} enableTaskDragDrop
     * True to allow drag drop of tasks (defaults to `true`). To customize the behavior of drag and drop, you can use {@link #dragDropConfig} option
     */
    enableTaskDragDrop          : true,

    /**
     * @cfg {Boolean} enableDependencyDragDrop
     * True to allow creation of dependencies by using drag and drop between task terminals (defaults to `true`)
     */
    enableDependencyDragDrop    : true,

    /**
     * @cfg {Boolean} enableProgressBarResize
     * True to allow resizing of the progress bar indicator inside tasks (defaults to `false`)
     */
    enableProgressBarResize     : false,


    /**
     * @cfg {Boolean} toggleParentTasksOnClick
     * True to toggle the collapsed/expanded state when clicking a parent task bar (defaults to `true`)
     */
    toggleParentTasksOnClick    : true,

    /**
     * @cfg {Boolean} addRowOnTab
     * True to automatically insert a new row when tabbing out of the last cell of the last row. Defaults to true.
     */
    addRowOnTab                 : true,

    /**
     * @cfg {Boolean} recalculateParents
     * True to update parent start/end dates after a task has been updated (defaults to `true`). This option just will be translated
     * to the {@link Gnt.data.TaskStore#recalculateParents corresponding option} of the task store
     */
    recalculateParents          : true,

    /**
     * @cfg {Boolean} cascadeChanges
     * True to cascade changes to dependent tasks (defaults to `false`). This option just will be translated
     * to the {@link Gnt.data.TaskStore#cascadeChanges corresponding option} of the task store
     */
    cascadeChanges              : false,

    /**
     * @cfg {Boolean} showTodayLine
     * True to show a line indicating current time. Default value is `false`.
     */
    showTodayLine               : false,


    /**
     * @cfg {Boolean} enableBaseline
     * True to enable showing a base lines for tasks. Baseline information should be provided as the `BaselineStartDate`, `BaselineEndDate` and `BaselinePercentDone` fields.
     * Default value is `false`.
     */
    enableBaseline              : false,

    /**
     * @cfg {Boolean} baselineVisible
     * True to show the baseline in the initial rendering. You can show and hide the baseline programmatically via {@link #showBaseline} and {@link #hideBaseline}.
     * Default value is `false`.
     */
    baselineVisible             : false,

    enableAnimations            : false,
    animate                     : false,

    /**
     * If the {@link #highlightWeekends} option is set to true, you can access the created zones plugin through this property.
     * @property {Sch.plugin.Zones} workingTimePlugin
     */
    workingTimePlugin           : null,
    todayLinePlugin             : null,

    /**
     * @cfg {Boolean} allowParentTaskMove True to allow moving parent tasks. Please note, that when moving a parent task, the
     * {@link Gnt.data.TaskStore#cascadeDelay cascadeDelay} option will not be used and cascading will happen synchronously (if enabled).
     *
     * Also, its possible to move the parent task as a group (along with its child tasks) or as individual task. This can be controlled with
     * {@link Gnt.data.TaskStore#moveParentAsGroup} option.
     */
    allowParentTaskMove         : true,

    /**
     * @cfg {Boolean} allowParentTaskDependencies Set to `false` to exclude parent tasks from the list of possible predecessors/successors.
     */
    allowParentTaskDependencies : true,

    /**
     * @cfg {Boolean} enableDragCreation
     * True to allow dragging to set start and end dates
     */
    enableDragCreation          : true,

    /**
     * @cfg {Function} eventRenderer
     * An empty function by default, but provided so that you can override it. This function is called each time a task
     * is rendered into the gantt grid. The function should return an object with properties that will be applied to the relevant task template.
     * By default, the task templates include placeholders for :
     *
     * - `cls` - CSS class which will be added to the task bar element
     * - `ctcls` - CSS class which will be added to the 'root' element containing the task bar and labels
     * - `style` - inline style declaration for the task bar element
     * - `progressBarStyle` - an inline CSS style to be applied to the progress bar of this task
     * - `leftLabel` - the content for the left label (usually being extracted from the task, using the {@link Gnt.panel.Gantt#leftLabelField leftLabelField} option.
     *   You still need to provide some value for the `leftLabelField` to activate the label rendering
     * - `rightLabel` - the content for the right label (usually being extracted from the task, using the {@link Gnt.panel.Gantt#rightLabelField rightLabelField} option
     *   You still need to provide a value for the `rightLabelField` to activate the label rendering
     * - `topLabel` - the content for the top label (usually being extracted from the task, using the {@link Gnt.panel.Gantt#topLabelField topLabelField} option
     *   You still need to provide a value for the `topLabelField` to activate the label rendering
     * - `bottomLabel` - the content for the bottom label (usually being extracted from the task, using the {@link Gnt.panel.Gantt#bottomLabelField bottomLabelField} option
     *   You still need to provide some value for the `bottomLabelField` to activate the label rendering
     * - `basecls` - a CSS class to be add to the baseline DOM element, only applicable when the {@link Gnt.panel.Gantt#showBaseline showBaseline} option is true and the task contains baseline information
     * - `baseProgressBarStyle` - an inline CSS style to be applied to the baseline progress bar element
     *
     * Here is a sample usage of eventRenderer:

     eventRenderer : function (taskRec) {
            return {
                style : 'background-color:white',        // You can use inline styles too.
                cls   : taskRec.get('Priority'),         // Read a property from the task record, used as a CSS class to style the event
                foo   : 'some value'                     // Some custom value in your own template
            };
        }
     *
     * @param {Gnt.model.Task} taskRecord The task about to be rendered
     * @param {Gnt.data.TaskStore} ds The task store
     * @return {Object} The data which will be applied to the task template, creating the actual HTML
     */
    eventRenderer               : Ext.emptyFn,

    /**
     * @cfg {Object} eventRendererScope The scope (the "this" object)to use for the `eventRenderer` function
     */
    eventRendererScope          : null,

    /**
     * @cfg {Ext.XTemplate} eventTemplate The template used to render leaf tasks in the gantt view.
     * See {@link Ext.XTemplate} for more information, see also {@link Gnt.template.Task} for the definition.
     */
    eventTemplate               : null,

    /**
     * @cfg {Ext.XTemplate} parentEventTemplate The template used to render parent tasks in the gantt view. See {@link Ext.XTemplate} for more information, see also {@link Gnt.template.ParentTask} for the definition
     */
    parentEventTemplate         : null,


    /**
     * @cfg {Ext.XTemplate} rollupTemplate The template used to rollup tasks to the parent in the gantt view. See {@link Ext.XTemplate} for more information, see also {@link Gnt.template.RollupTask} for the definition
     */
    rollupTemplate              : null,

    /**
     * @cfg {Ext.XTemplate} milestoneTemplate The template used to render milestone tasks in the gantt view.
     * See {@link Ext.XTemplate} for more information, see also {@link Gnt.template.Milestone} for the definition.
     */
    milestoneTemplate           : null,

    /**
     * @cfg {String} taskBodyTemplate The markup making up the body of leaf tasks in the gantt view. See also {@link Gnt.template.Task#innerTpl} for the definition.
     */
    taskBodyTemplate            : null,

    /**
     * @cfg {String} parentTaskBodyTemplate The markup making up the body of parent tasks in the gantt view. See also {@link Gnt.template.ParentTask#innerTpl} for the definition.
     */
    parentTaskBodyTemplate      : null,

    /**
     * @cfg {String} milestoneBodyTemplate The markup making up the body of milestone tasks in the gantt view. See also {@link Gnt.template.Milestone#innerTpl} for the definition.
     */
    milestoneBodyTemplate       : null,

    /**
     * @cfg {Boolean} autoHeight Always hardcoded to null, the `true` value is not yet supported (by Ext JS).
     */
    autoHeight                  : null,

    /**
     * @cfg {Gnt.data.Calendar} calendar a {@link Gnt.data.Calendar calendar} instance for this gantt panel. Can be also provided
     * as a {@link Gnt.data.TaskStore#calendar configuration option} of the `taskStore`.
     */
    calendar                    : null,

    /**
     * @cfg {Gnt.data.CrudManager} crudManager The CRUD manager instance controling all the gantt related stores
     *
        var taskStore   = new Gnt.data.TaskStore({
            ...
        });

        var crudManager = new Gnt.data.CrudManager({
            autoLoad    : true,
            taskStore   : taskStore,
            transport   : {
                load    : {
                    url     : 'load.php'
                },
                sync    : {
                    url     : 'save.php'
                }
            }
        });

        var gantt       = new Gnt.panel.Gantt({
            // CRUD manager instance having references to all the related stores
            crudManager : crudManager

            height      : 300,
            width       : 500,
            renderTo    : Ext.getBody(),
            columns     : [
                {
                    xtype : 'namecolumn'
                },
                {
                    xtype : 'startdatecolumn'
                },
                {
                    xtype : 'enddatecolumn'
                }
            ]
        });

     */
    crudManager                 : null,

    /**
     * @cfg {Gnt.data.TaskStore} taskStore The {@link Gnt.data.TaskStore store} holding the tasks to be rendered into the gantt chart (required).
     */
    taskStore                   : null,

    /**
     * @cfg {Gnt.data.DependencyStore} dependencyStore The {@link Gnt.data.DependencyStore store} holding the dependency information (optional).
     * See also {@link Gnt.model.Dependency}
     */
    dependencyStore             : null,

    /**
     * @cfg {Gnt.data.ResourceStore} resourceStore The {@link Gnt.data.ResourceStore store} holding the resources that can be assigned to the tasks in the task store(optional).
     * See also {@link Gnt.model.Resource}
     */
    resourceStore               : null,

    /**
     * @cfg {Gnt.data.AssignmentStore} assignmentStore The {@link Gnt.data.AssignmentStore store} holding the assignments information (optional).
     * See also {@link Gnt.model.Assignment}
     */
    assignmentStore             : null,

    columnLines                 : false,

    /**
     * @cfg {Function} dndValidatorFn
     * An empty function by default, but provided so that you can perform custom validation on
     * the task being dragged. This function is called during the drag and drop process and also after the drop is made.
     *
     * @param {Gnt.model.Task} taskRecord The task record being dragged
     * @param {Date} date The new start date
     * @param {Number} duration The duration of the item being dragged, in minutes
     * @param {Ext.EventObject} e The event object
     *
     * @return {Boolean} true if the drop position is valid, else false to prevent a drop
     */
    dndValidatorFn                      : Ext.emptyFn,

    /**
     * @cfg {Function} createValidatorFn
     * An empty function by default, but provided so that you can perform custom validation when a new task is being scheduled using drag and drop.
     * To indicate the newly scheduled dates of a task are invalid, simply return false from this method.
     *
     * @param {Gnt.model.Task} taskRecord the task
     * @param {Date} startDate The start date
     * @param {Date} endDate The end date
     * @param {Event} e The browser event object
     * @return {Boolean} true if the creation event is valid, else false
     */
    createValidatorFn                   : Ext.emptyFn,

    /**
     * @cfg {String} resizeHandles A string containing one of the following values
     *
     * - `none` - to disable resizing of tasks
     * - `left` - to enable changing of start date only
     * - `right` - to enable changing of end date only
     * - `both` - to enable changing of both start and end dates
     *
     * Default value is `both`. Resizing is performed with the {@link Gnt.feature.TaskResize} plugin.
     * You can customize it with the {@link #resizeConfig} and {@link #resizeValidatorFn} options
     */
    resizeHandles                       : 'both',

    /**
     * @cfg {Function} resizeValidatorFn
     * An empty function by default, but provided so that you can perform custom validation on
     * a task being resized. Simply return false from your function to indicate that the new duration is invalid.
     *
     * @param {Gnt.model.Task} taskRecord The task being resized
     * @param {Date} startDate The new start date
     * @param {Date} endDate The new end date
     * @param {Ext.EventObject} e The event object
     *
     * @return {Boolean} true if the resize state is valid, else false to cancel
     */
    resizeValidatorFn                   : Ext.emptyFn,

    /**
     *  @cfg {Object} resizeConfig A custom config object to pass to the {@link Gnt.feature.TaskResize} feature.
     */
    resizeConfig                        : null,

    /**
     *  @cfg {Object} progressBarResizeConfig A custom config object to pass to the {@link Gnt.feature.ProgressBarResize} feature.
     */
    progressBarResizeConfig             : null,

    /**
     *  @cfg {Object} dragDropConfig A custom config object to pass to the {@link Gnt.feature.TaskDragDrop} feature.
     */
    dragDropConfig                      : null,

    /**
     *  @cfg {Object} createConfig A custom config to pass to the {@link Gnt.feature.DragCreator} instance
     */
    createConfig                        : null,

    /**
     *  @cfg {Boolean} autoFitOnLoad True to change the timeframe of the gantt to fit all the tasks in it after every task store load.
     *
     * See also {@link #zoomToFit}.
     */

    autoFitOnLoad                       : false,

    /**
     *  @cfg {Boolean} showRollupTasks True to rollup information of tasks to their parent task bar.
     *  Only tasks with the `Rollup` field set to true will rollup.
     */
    showRollupTasks                     : false,

    /**
     * @cfg {Boolean} enableConstraintsResolutionGui `true` to enable the plugin, providing the constraint resolution popup window.
     * Enabled by default.
     */
    enableConstraintsResolutionGui      : true,

    /**
     * @cfg {Boolean}
     * `True` to mark project start/end dates with vertical lines using {@link Gnt.plugin.ProjectLines} plugin.
     * Use {@link #projectLinesConfig} to configure the plugin.
     */
    showProjectLines                    : true,

    /**
     * @cfg {Object} projectLinesConfig
     * Config to use for {@link Gnt.plugin.ProjectLines} plugin.
     */
    projectLinesConfig                  : null,

    /**
     * @cfg {Object} constraintResolutionGuiConfig Config to use for {@link Gnt.plugin.ConstraintResolutionGui} plugin.
     */
    constraintResolutionGuiConfig       : null,

    refreshLockedTreeOnDependencyUpdate : false,
    _lockedDependencyListeners          : null,

    earlyStartColumn                    : null,
    earlyEndColumn                      : null,
    lateStartColumn                     : null,
    lateEndColumn                       : null,

    earlyDatesListeners                 : null,
    lateDatesListeners                  : null,
    slackListeners                      : null,

    refreshTimeout                      : 100,

    lastFocusedRecord                   : null,
    lastFocusedRecordFrom               : null,

    //A reference to the editing plugin, if it exists
    ganttEditingPlugin                  : null,

    //If number of affected tasks is below this number, do a per-row update instead of a full refresh
    simpleCascadeThreshold              : 30,

    forceDefineTimeSpanByStore          : true,


    /**
     * This method shows or hides the visual presentation of task's rollups in the view.
     *
     * @param {Boolean} show A boolean value indicating whether the visual presentation of task's rollups should be visible or not.
     */
    setShowRollupTasks : function (show) {
        this.showRollupTasks = show;
        var view = this.getSchedulingView();
        view.setShowRollupTasks(show);
    },

    onCalendarSet : function (store, calendar) {
        if (this.needToTranslateOption('weekendsAreWorkdays')) {
            // may trigger a renormalization of all tasks - need all stores to be defined
            calendar.setWeekendsAreWorkDays(this.weekendsAreWorkdays);
        }

        if (this.workingTimePlugin) {
            this.workingTimePlugin.bindCalendar(calendar);
            this.workingTimePlugin.refresh();
        }

        this.calendar = calendar;
    },

    initStores : function () {

        // if we have CrudManager instance assigned we can grab stores from it
        if (this.crudManager) {
            if (!this.taskStore) this.taskStore = this.crudManager.getTaskStore();
            if (!this.dependencyStore) this.dependencyStore = this.crudManager.getDependencyStore();
            if (!this.resourceStore) this.resourceStore = this.crudManager.getResourceStore();
            if (!this.assignmentStore) this.assignmentStore = this.crudManager.getAssignmentStore();
        }

        if (!this.taskStore) {
            Ext.Error.raise("You must specify a taskStore config.");
        }

        var taskStore = Ext.StoreMgr.lookup(this.taskStore);

        if (!taskStore) {
            Ext.Error.raise("You have provided an incorrect taskStore identifier");
        }

        if (!(taskStore instanceof Gnt.data.TaskStore)) {
            Ext.Error.raise("A `taskStore` should be an instance of `Gnt.data.TaskStore` (or of a subclass)");
        }

        this.mon(taskStore, {
            calendarset : this.onCalendarSet,
            scope       : this
        });

        Ext.apply(this, {
            store     : taskStore,          // For the grid panel API
            taskStore : taskStore
        });

        var calendar = this.calendar = taskStore.calendar;

        if (this.dependencyStore) {
            this.dependencyStore = Ext.StoreMgr.lookup(this.dependencyStore);
            taskStore.setDependencyStore(this.dependencyStore);
        } else {
            this.dependencyStore = taskStore.dependencyStore;
        }

        this.dependencyStore.allowParentTaskDependencies = this.allowParentTaskDependencies;

        if (!(this.dependencyStore instanceof Gnt.data.DependencyStore)) {
            Ext.Error.raise("The Gantt dependency store should be a Gnt.data.DependencyStore, or a subclass thereof.");
        }

        // this resource store will be assigned to the task store in the "bindResourceStore" method
        var resourceStore = this.resourceStore ? Ext.StoreMgr.lookup(this.resourceStore) : taskStore.getResourceStore();

        if (!(resourceStore instanceof Gnt.data.ResourceStore)) {
            Ext.Error.raise("A `ResourceStore` should be an instance of `Gnt.data.ResourceStore` (or of a subclass)");
        }

        // this assignment store will be assigned to the task store in the "bindAssignmentStore" method
        var assignmentStore = this.assignmentStore ? Ext.StoreMgr.lookup(this.assignmentStore) : taskStore.getAssignmentStore();

        if (!(assignmentStore instanceof Gnt.data.AssignmentStore)) {
            Ext.Error.raise("An `assignmentStore` should be an instance of `Gnt.data.AssignmentStore` (or of a subclass)");
        }

        this.bindAssignmentStore(assignmentStore, true);
        this.bindResourceStore(resourceStore, true);

        if (this.needToTranslateOption('weekendsAreWorkdays')) {
            // may trigger a renormalization of all tasks - need all stores to be defined
            calendar.setWeekendsAreWorkDays(this.weekendsAreWorkdays);
        }
    },


    initComponent : function () {
        var me = this;

        // @BackwardsCompat, remove in Gantt 3.0
        if (Ext.isBoolean(this.showBaseline)) {
            this.enableBaseline = this.baselineVisible = this.showBaseline;
            this.showBaseline = Gnt.panel.Gantt.prototype.showBaseline;
        }

        this.autoHeight = false;

        this.initStores();

        if (this.needToTranslateOption('cascadeChanges')) {
            this.setCascadeChanges(this.cascadeChanges);
        }

        if (this.needToTranslateOption('recalculateParents')) {
            this.setRecalculateParents(this.recalculateParents);
        }

        if (this.needToTranslateOption('skipWeekendsDuringDragDrop')) {
            this.setSkipWeekendsDuringDragDrop(this.skipWeekendsDuringDragDrop);
        }

        this.normalViewConfig = this.normalViewConfig || {};

        // Copy some properties to the view instance
        Ext.apply(this.normalViewConfig, {
            taskStore                    : this.taskStore,
            dependencyStore              : this.dependencyStore,
            snapRelativeToEventStartDate : this.snapRelativeToEventStartDate,

            enableDependencyDragDrop : this.enableDependencyDragDrop,
            enableTaskDragDrop       : this.enableTaskDragDrop,
            enableProgressBarResize  : this.enableProgressBarResize,
            enableDragCreation       : this.enableDragCreation,

            allowParentTaskMove         : this.allowParentTaskMove,
            allowParentTaskDependencies : this.allowParentTaskDependencies,
            toggleParentTasksOnClick    : this.toggleParentTasksOnClick,

            resizeHandles  : this.resizeHandles,
            enableBaseline : this.baselineVisible || this.enableBaseline,

            leftLabelField   : this.leftLabelField,
            rightLabelField  : this.rightLabelField,
            topLabelField    : this.topLabelField,
            bottomLabelField : this.bottomLabelField,

            eventTemplate       : this.eventTemplate,
            parentEventTemplate : this.parentEventTemplate,
            milestoneTemplate   : this.milestoneTemplate,
            rollupTemplate      : this.rollupTemplate,

            taskBodyTemplate       : this.taskBodyTemplate,
            parentTaskBodyTemplate : this.parentTaskBodyTemplate,
            milestoneBodyTemplate  : this.milestoneBodyTemplate,

            resizeConfig    : this.resizeConfig,
            dragDropConfig  : this.dragDropConfig,
            showRollupTasks : this.showRollupTasks
        });


        if (this.topLabelField || this.bottomLabelField) {
            this.addCls('sch-gantt-topbottom-labels ' + (this.topLabelField ? 'sch-gantt-top-label' : ''));
            this.normalViewConfig.rowHeight = 52;
        }

        this.configureFunctionality();

        this.mon(this.taskStore, {
            beforecascade : this.onBeforeCascade,
            cascade       : this.onAfterCascade,

            scope : this
        });

        this.callParent(arguments);

        if (this.autoFitOnLoad) {
            // if store already loaded
            if (this.store.getCount()) {
                this.zoomToFit();
            }

            this.mon(this.store, 'load', function () {
                this.zoomToFit();
            }, this);
        }

        this.bodyCls = (this.bodyCls || '') + " sch-ganttpanel-container-body";

        var ganttView = this.getSchedulingView();
//        ganttView.store.calendar = this.calendar;

        this.relayEvents(ganttView, [
            /**
             * @event taskclick
             * Fires when a task is clicked
             *
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The task record
             * @param {Ext.EventObject} e The event object
             */
            'taskclick',

            /**
             * @event taskdblclick
             * Fires when a task is double clicked
             *
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The task record
             * @param {Ext.EventObject} e The event object
             */
            'taskdblclick',

            /**
             * @event taskcontextmenu
             * Fires when contextmenu is activated on a task
             *
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The task record
             * @param {Ext.EventObject} e The event object
             */
            'taskcontextmenu',

            // Resizing events start --------------------------
            /**
             * @event beforetaskresize
             * Fires before a resize starts, return false to stop the execution
             *
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The task about to be resized
             * @param {Ext.EventObject} e The event object
             */
            'beforetaskresize',

            /**
             * @event taskresizestart
             * Fires when resize starts
             *
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The task about to be resized
             */
            'taskresizestart',

            /**
             * @event partialtaskresize
             * Fires during a resize operation and provides information about the current start and end of the resized event
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The task being resized
             * @param {Date} startDate The start date of the task
             * @param {Date} endDate The end date of the task
             * @param {Ext.Element} element The element being resized
             */
            'partialtaskresize',

            /**
             * @event beforetaskresizefinalize
             * Fires before a succesful resize operation is finalized. Return false to finalize the resize at a later time.
             * To finalize the operation, call the 'finalize' method available on the context object. Pass `true` to it to accept drop or false if you want to cancel it
             * NOTE: you should **always** call `finalize` method whether or not drop operation has been canceled
             * @param {Mixed} view The gantt view instance
             * @param {Object} resizeContext An object containing 'record', 'start', 'end', 'finalize' properties.
             * @param {Ext.EventObject} e The event object
             */
            'beforetaskresizefinalize',

            /**
             * @event aftertaskresize
             * Fires after a succesful resize operation
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The task that has been resized
             */
            'aftertaskresize',
            // Resizing events end --------------------------

            // Task progress bar resizing events start --------------------------
            /**
             * @event beforeprogressbarresize
             * Fires before a progress bar resize starts, return false to stop the execution
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The record about to be have its progress bar resized
             */
            'beforeprogressbarresize',

            /**
             * @event progressbarresizestart
             * Fires when a progress bar resize starts
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The record about to be have its progress bar resized
             */
            'progressbarresizestart',

            /**
             * @event afterprogressbarresize
             * Fires after a succesful progress bar resize operation
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord record The updated record
             */
            'afterprogressbarresize',
            // Task progressbar resizing events end --------------------------

            // Dnd events start --------------------------
            /**
             * @event beforetaskdrag
             * Fires before a task drag drop is initiated, return false to cancel it
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The task record that's about to be dragged
             * @param {Ext.EventObject} e The event object
             */
            'beforetaskdrag',

            /**
             * @event taskdragstart
             * Fires when a dnd operation starts
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The record being dragged
             */
            'taskdragstart',

            /**
             * @event beforetaskdropfinalize
             * Fires before a succesful drop operation is finalized. Return false to finalize the drop at a later time.
             * To finalize the operation, call the 'finalize' method available on the context object. Pass `true` to it to accept drop or false if you want to cancel it
             * NOTE: you should **always** call `finalize` method whether or not drop operation has been canceled
             * @param {Mixed} view The gantt view instance
             * @param {Object} dragContext An object containing 'record', 'start', 'duration' (in minutes), 'finalize' properties.
             * @param {Ext.EventObject} e The event object
             */
            'beforetaskdropfinalize',

            /**
             * @event beforedragcreate
             * Fires before a drag create operation starts, return false to prevent the operation
             * @param {Gnt.view.Gantt} gantt The gantt view
             * @param {Gnt.model.Task} task The task record being updated
             * @param {Date} date The date of the drag start point
             * @param {Ext.EventObject} e The event object
             */
            'beforedragcreate',

            /**
             * @event dragcreatestart
             * Fires before a drag starts, return false to stop the operation
             * @param {Gnt.view.Gantt} view The gantt view
             */
            'dragcreatestart',

            /**
             * @event beforedragcreatefinalize
             * Fires before a succesful create operation is finalized. Return false to finalize creating at a later time.
             * To finalize the operation, call the 'finalize' method available on the context object. Pass `true` to it to accept drop or false if you want to cancel it
             * NOTE: you should **always** call `finalize` method whether or not drop operation has been canceled
             * @param {Mixed} view The gantt view instance
             * @param {Object} createContext An object containing 'record', 'start', 'end', 'finalize' properties.
             * @param {Ext.EventObject} e The event object
             */
            'beforedragcreatefinalize',

            /**
             * @event dragcreateend
             * Fires after a successful drag-create operation
             * @param {Gnt.view.Gantt} view The gantt view
             * @param {Gnt.model.Task} task The updated task record
             * @param {Ext.EventObject} e The event object
             */
            'dragcreateend',

            /**
             * @event afterdragcreate
             * Always fires after a drag-create operation
             * @param {Gnt.view.Gantt} view The gantt view
             */
            'afterdragcreate',

            /**
             * @event taskdrop
             * Fires after a succesful drag and drop operation
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The dropped record
             */
            'taskdrop',

            /**
             * @event aftertaskdrop
             * Fires after a drag and drop operation, regardless if the drop valid or invalid
             * @param {Gnt.view.Gantt} gantt The gantt panel instance
             */
            'aftertaskdrop',
            // Dnd events end --------------------------

            /**
             * @event labeledit_beforestartedit
             * Fires before editing is started for a field
             * @param {Gnt.view.Gantt} gantt The gantt view instance
             * @param {Gnt.model.Task} taskRecord The task record
             * @param {Mixed} value The field value being set
             * @param {Gnt.feature.LabelEditor} editor The editor instance
             */
            'labeledit_beforestartedit',

            /**
             * @event labeledit_beforecomplete
             * Fires after a change has been made to a label field, but before the change is reflected in the underlying field.
             * @param {Gnt.view.Gantt} gantt The gantt view instance
             * @param {Mixed} value The current field value
             * @param {Mixed} startValue The original field value
             * @param {Gnt.model.Task} taskRecord The affected record
             * @param {Gnt.feature.LabelEditor} editor The editor instance
             */
            'labeledit_beforecomplete',

            /**
             * @event labeledit_complete
             * Fires after editing is complete and any changed value has been written to the underlying field.
             * @param {Gnt.view.Gantt} gantt The gantt view instance
             * @param {Mixed} value The current field value
             * @param {Mixed} startValue The original field value
             * @param {Gnt.model.Task} taskRecord The affected record
             * @param {Gnt.feature.LabelEditor} editor The editor instance
             */
            'labeledit_complete',

            // Dependency drag drop events --------------------------
            /**
             * @event beforedependencydrag
             * Fires before a dependency drag operation starts (from a "task terminal"). Return false to prevent this operation from starting.
             * @param {Gnt.view.Dependency} gantt The gantt panel instance
             * @param {Gnt.model.Task} taskRecord The source task record
             */
            'beforedependencydrag',

            /**
             * @event dependencydragstart
             * Fires when a dependency drag operation starts
             * @param {Gnt.view.Dependency} gantt The gantt panel instance
             */
            'dependencydragstart',

            /**
             * @event dependencydrop
             * Fires when a dependency drag drop operation has completed successfully and a new dependency has been created.
             * @param {Gnt.view.Dependency} gantt The gantt panel instance
             * @param {Gnt.model.Task} fromRecord The source task record
             * @param {Gnt.model.Task} toRecord The destination task record
             * @param {Number} type The dependency type
             */
            'dependencydrop',

            /**
             * @event afterdependencydragdrop
             * Always fires after a dependency drag-drop operation
             * @param {Gnt.view.Dependency} gantt The gantt panel instance
             */
            'afterdependencydragdrop',

            /**
             * @event dependencyclick
             * Fires after clicking on a dependency line/arrow
             * @param {Gnt.view.Dependency} g The dependency view instance
             * @param {Gnt.model.Dependency} record The dependency record
             * @param {Ext.EventObject} event The event object
             * @param {HTMLElement} target The target of this event
             */
            'dependencyclick',

            /**
             * @event dependencycontextmenu
             * Fires after right clicking on a dependency line/arrow
             * @param {Gnt.view.Dependency} g The dependency view instance
             * @param {Gnt.model.Dependency} record The dependency record
             * @param {Ext.EventObject} event The event object
             * @param {HTMLElement} target The target of this event
             */
            'dependencycontextmenu',

            /**
             * @event dependencydblclick
             * Fires after double clicking on a dependency line/arrow
             * @param {Gnt.view.Dependency} g The dependency view instance
             * @param {Gnt.model.Dependency} record The dependency record
             * @param {Ext.EventObject} event The event object
             * @param {HTMLElement} target The target of this event
             */
            'dependencydblclick',
            // EOF Dependency drag drop events --------------------------

            /**
             * @event scheduleclick
             * Fires after a click on the schedule area
             * @param {Gnt.panel.Gantt} gantt The gantt panel object
             * @param {Date} clickedDate The clicked date
             * @param {Number} rowIndex The row index
             * @param {Ext.EventObject} e The event object
             */
            'scheduleclick',

            /**
             * @event scheduledblclick
             * Fires after a doubleclick on the schedule area
             * @param {Gnt.panel.Gantt} gantt The gantt panel object
             * @param {Date} clickedDate The clicked date
             * @param {Number} rowIndex The row index
             * @param {Ext.EventObject} e The event object
             */
            'scheduledblclick',

            /**
             * @event schedulecontextmenu
             * Fires after a context menu click on the schedule area
             * @param {Gnt.panel.Gantt} gantt The gantt panel object
             * @param {Date} clickedDate The clicked date
             * @param {Number} rowIndex The row index
             * @param {Ext.EventObject} e The event object
             */
            'schedulecontextmenu'
        ]);

        if (this.addRowOnTab) {
            var sm = this.getSelectionModel();

            // HACK overwriting private Ext JS method
            sm.onEditorTab = Ext.Function.createInterceptor(sm.onEditorTab, this.onEditorTabPress, this);
        }

        var view = this.getSchedulingView();
        this.registerRenderer(view.columnRenderer, view);

        var cls = ' sch-ganttpanel sch-horizontal ';

        if (this.highlightWeekends) {
            cls += ' sch-ganttpanel-highlightweekends ';
        }

        if (!this.rtl) {
            cls += ' sch-ltr ';
        }

        this.addCls(cls);

        if (this.eventBorderWidth < 1) {
            this.addCls('sch-gantt-no-task-border');
        }

        if (this.baselineVisible) {
            this.showBaseline();
        }

        // HACK: Editors belong in the locked grid, otherwise they float visibly on top of the normal grid when scrolling the locked grid
        this.on('add', function (me, cmp) {
            if (cmp instanceof Ext.Editor) {
                me.lockedGrid.suspendLayouts();
                me.suspendLayouts();
                me.lockedGrid.add(cmp);
                me.resumeLayouts();
                me.lockedGrid.resumeLayouts();
            }
        });

        this.on('viewready', this.onMyViewReady, this);
    },


    getTimeSpanDefiningStore : function () {
        return this.taskStore;
    },


    bindAutoTimeSpanListeners : function () {
        if (!this.autoFitOnLoad) {
            this.callParent(arguments);
        }
    },


    // Make sure views doesn't react to store changes during cascading
    onBeforeCascade           : function () {
        // HACK no easy way to disable grid view from reacting to the store
        this.lockedGrid.view.onUpdate = this.normalGrid.view.onUpdate = Ext.emptyFn;

        this.suspendLayouts();
    },


    // Re-activate view->store listeners and update views if needed
    onAfterCascade            : function (treeStore, context) {
        var me = this;

        this.lockedGrid.view.onUpdate = this.lockedGrid.view.self.prototype.onUpdate;
        this.normalGrid.view.onUpdate = this.normalGrid.view.self.prototype.onUpdate;

        me.resumeLayouts();

        if (context.nbrAffected > 0) {
            var lockedView = this.lockedGrid.getView();

            // Manual refresh of a few row nodes is way faster in large DOM scenarios where the
            // refresh operation takes too long (read/set scroll position, gridview refreshSize etc)
            if (context.nbrAffected <= me.simpleCascadeThreshold) {
                var view = this.getView();
                var ganttView = this.getSchedulingView();
                var affectedParents = {};

                // let the view finish redrawing all the rows before we are trying to repaint dependencies
                ganttView.suspendEvents(true);

                // "context.affected" will contain parent affected parent tasks as well
                for (var id in context.affected) {
                    var task = context.affected[id];
                    var index = lockedView.store.indexOf(task);

                    // The target task may be inside a collapsed parent, in which case we should ignore updating it
                    if (index >= 0) {
                        view.refreshNode(index);
                    }

                }

                ganttView.resumeEvents();

                return;
            }

            var normalView = this.normalGrid.getView();

            normalView.refreshKeepingScroll(true);

            me.suspendLayouts();

            lockedView.refresh();

            me.resumeLayouts();
        }
    },

    bindFullRefreshListeners : function (column) {
        var me = this;
        var refreshTimeout;

        var refreshColumn = function () {
            if (refreshTimeout) return;

            refreshTimeout = setTimeout(function () {
                refreshTimeout = null;

                me.redrawColumns([ column ]);

            }, me.refreshTimeout);
        };

        column.mon(this.taskStore, {
            nodeappend : refreshColumn,
            nodeinsert : refreshColumn,
            noderemove : refreshColumn,

            scope : this
        });
    },

    bindSequentialDataListeners : function (column) {
        var lockedView = this.lockedGrid.view;
        var taskStore = this.taskStore;

        // the combination of buffered renderer + tree will perform a full refresh on any CRUD,
        // no need to update only some of the cells
        // Update: Seems unreliable
        //if (lockedView.bufferedRenderer) return;

        column.mon(taskStore, {
            nodeappend : function (store, node, index) {
                if (!taskStore.fillCount) this.updateAutoGeneratedCells(column, index);
            },

            nodeinsert : function (store, node, insertedBefore) {
                this.updateAutoGeneratedCells(column, lockedView.store.indexOf(insertedBefore));
            },

            move : function (node, oldParent, newParent) {
                // if there's no record below, then its a move of the last node, which means
                // the refresh already happened in the "insert" or "append" listeners
                if (node.__recordBelow) {
                    var nodeStore = lockedView.store;
                    var lowest = Math.min(nodeStore.indexOf(node), nodeStore.indexOf(node.__recordBelow));

                    // note, that we should not remove the __recordBelow property here, as it can be used in several "move" handlers

                    this.updateAutoGeneratedCells(column, lowest);
                }
            },

            _noderemove : function (store, record, isMove) {

                // In Ext 5 we have no clear picture of where the node was removed from, do a full refresh

                //if (isMove) {
                //    var ctx = record.removeContext;
                //    var recordBelow = ctx.nextSibling || (ctx.parentNode && ctx.parentNode.nextSibling);
                //
                //    // the actual update will happen in one of the listeners above
                //    record.__recordBelow = recordBelow;
                //} else {
                this.updateAutoGeneratedCells(column, this.lockedGrid.view.all.startIndex);
                //}
            },
            scope       : this
        });

        column.mon(this.lockedGrid.getView(), {
            itemremove : function (store, record, isMove) {

                // In Ext 5 we have no clear picture of where the node was removed from, do a full refresh

                //if (isMove) {
                //    var ctx = record.removeContext;
                //    var recordBelow = ctx.nextSibling || (ctx.parentNode && ctx.parentNode.nextSibling);
                //
                //    // the actual update will happen in one of the listeners above
                //    record.__recordBelow = recordBelow;
                //} else {
                this.updateAutoGeneratedCells(column, this.lockedGrid.view.all.startIndex);
                //}
            },
            scope  : this
        });
    },


    bindSlackListeners : function () {
        var updateSlackColumns = Ext.Function.createBuffered(this.updateSlackColumns, this.refreshTimeout, this, []);

        this.slackListeners = this.mon(this.taskStore, {
            resetearlydates : updateSlackColumns,
            resetlatedates  : updateSlackColumns,
            scope           : this,
            destroyable     : true
        });
    },

    bindEarlyDatesListeners : function () {
        var updateEarlyDateColumns = Ext.Function.createBuffered(this.updateEarlyDateColumns, this.refreshTimeout, this, []);

        this.earlyDatesListeners = this.mon(this.taskStore, {
            resetearlydates : updateEarlyDateColumns,
            scope           : this,
            destroyable     : true
        });
    },

    bindLateDatesListeners : function () {
        var updateLateDateColumns = Ext.Function.createBuffered(this.updateLateDateColumns, this.refreshTimeout, this, []);

        this.lateDatesListeners = this.mon(this.taskStore, {
            resetlatedates : updateLateDateColumns,
            scope          : this,
            destroyable    : true
        });
    },

    onEditorTabPress      : function (editingPlugin, e) {
        var headerCt = this.lockedGrid.headerCt,
            record = editingPlugin.getActiveRecord(),
            columnPosition = headerCt.items.indexOf(editingPlugin.getActiveColumn()),
            isLastRow = this.store.indexOf(record) === this.getStore().getCount() - 1,

            isLastColChecker = function (col) {
                return headerCt.items.indexOf(col) > columnPosition && col.isVisible() && col.getEditor();
            };

        // Check if this is the last (visible) column of the last row
        if (isLastRow && headerCt.items.findIndexBy(isLastColChecker) < 0) {
            var newRec = record.addTaskBelow({ leaf : true });

            // HACK: Need to do an extra 'realign' call since the Ext call to show the editor messes up the scrollposition
            // See test 1002_tabbing.t.js
            !Sch.disableOverrides && editingPlugin.on('beforeedit', function(plug, context) {
                var col = context.column;
                var ed = editingPlugin.getEditor(newRec, col);
                var view = this.lockedGrid.view;

                ed.on('startedit', function () {
                    view.scrollCellIntoView(view.getCell(newRec, col));
                }, null, { single : true, delay : 1 });

            }, this, { single : true });
        }
    },

    // this function checks whether the configuration option should be translated to task store or calendar
    // idea is that some configuration option (`cascadeChanges` for example) actually belongs to TaskStore
    // so they are not persisted in the gantt panel (panel only provides accessors which reads/write from/to TaskStore)
    // however the values for those options could also be specified in the prototype of the Gnt.panel.Gantt subclass
    // see #172
    needToTranslateOption : function (optionName) {
        return this.hasOwnProperty(optionName) || this.self.prototype.hasOwnProperty(optionName) && this.self != Gnt.panel.Gantt;
    },

    /**
     * Returns the dependency view instance
     * @return {Gnt.view.Dependency} The dependency view instance
     */
    getDependencyView : function () {
        return this.getSchedulingView().getDependencyView();
    },

    /**
     * Toggles the weekend highlighting on or off
     * @param {Boolean} disabled
     */
    disableWeekendHighlighting : function (disabled) {
        this.workingTimePlugin.setDisabled(disabled);
    },

    /**
     * <p>Returns the task record for a DOM node</p>
     * @param {Ext.Element/HTMLElement} el The DOM node or Ext Element to lookup
     * @return {Gnt.model.Task} The task record
     */
    resolveTaskRecord : function (el) {
        return this.getSchedulingView().resolveTaskRecord(el);
    },

    /**
     * Tries to fit the time columns to the available view width
     */
    fitTimeColumns : function () {
        this.getSchedulingView().fitColumns();
    },

    /**
     * Returns the resource store associated with the Gantt panel instance
     * @return {Gnt.data.ResourceStore}
     */
    getResourceStore : function () {
        return this.getTaskStore().getResourceStore();
    },

    /**
     * Returns the assignment store associated with the Gantt panel instance
     * @return {Gnt.data.AssignmentStore}
     */
    getAssignmentStore : function () {
        return this.getTaskStore().getAssignmentStore();
    },

    /**
     * Returns the associated CRUD manager
     * @return {Gnt.data.CrudManager}
     */
    getCrudManager : function () {
        return this.crudManager;
    },

    /**
     * Returns the associated task store
     * @return {Gnt.data.TaskStore}
     */
    getTaskStore : function () {
        return this.taskStore;
    },

    /**
     * Returns the task store instance
     * @return {Gnt.data.TaskStore}
     */
    getEventStore : function () {
        return this.taskStore;
    },

    /**
     * Returns the associated dependency store
     * @return {Gnt.data.DependencyStore}
     */
    getDependencyStore     : function () {
        return this.dependencyStore;
    },


    // private
    onDragDropStart        : function () {
        if (this.tip) {
            this.tip.hide();
            this.tip.disable();
        }
    },

    // private
    onDragDropEnd          : function () {
        if (this.tip) {
            this.tip.enable();
        }
    },


    // private
    configureFunctionality : function () {
        // Normalize to array
        var plugins = this.plugins = [].concat(this.plugins || []);

        if (this.highlightWeekends) {

            this.workingTimePlugin = Ext.create("Gnt.feature.WorkingTime", {
                calendar : this.calendar
            });

            plugins.push(this.workingTimePlugin);
        }

        if (this.showTodayLine) {
            this.todayLinePlugin = new Sch.plugin.CurrentTimeLine();
            plugins.push(this.todayLinePlugin);
        }

        if (this.enableConstraintsResolutionGui && !Ext.Array.findBy(plugins, function (item) {
                return (item instanceof Gnt.plugin.ConstraintResolutionGui) ||
                       (item.ptype == 'constraintresolutiongui');
            })) {

            plugins.push(Ext.apply(this.constraintResolutionGuiConfig || {}, {
                pluginId : "constraintresolutiongui",
                ptype    : "constraintresolutiongui"
            }));
        }

        if (this.showProjectLines) {
            plugins.push(Ext.apply({
                pluginId    : 'gantt_projectlines',
                ptype       : 'gantt_projectlines'
            }, this.projectLinesConfig));
        }

    },

    /**
     * If configured to highlight non-working time, this method returns the {@link Gnt.feature.WorkingTime workingTime} feature
     * responsible for providing this functionality.
     * @return {Gnt.feature.WorkingTime} workingTime
     */
    getWorkingTimePlugin : function () {
        return this.workingTimePlugin;
    },

    registerLockedDependencyListeners : function () {
        var me = this;
        var depStore = this.getDependencyStore();

        // Need to save these to be able to deregister them properly.
        this._lockedDependencyListeners = this._lockedDependencyListeners || {
            load : function () {
                var taskStore = me.getTaskStore();

                // reset cached early/late dates
                taskStore.resetEarlyDates();
                taskStore.resetLateDates();

                me.lockedGrid.getView().refresh();
            },

            clear : function () {
                var taskStore = me.getTaskStore();

                // reset cached early/late dates
                taskStore.resetEarlyDates();
                taskStore.resetLateDates();

                me.lockedGrid.getView().refresh();
            },

            add : function (depStore, records) {
                for (var i = 0; i < records.length; i++) {
                    me.updateDependencyTasks(records[i]);
                }
            },

            update : function (depStore, record, operation) {
                if (operation != Ext.data.Model.COMMIT) {
                    var view = me.lockedGrid.view;
                    var viewStore = view.store;

                    if (record.previous[record.fromField]) {
                        var prevFromTask = me.taskStore.getModelById(record.previous[record.fromField]);

                        if (prevFromTask) {
                            view.refreshNode(viewStore.indexOf(prevFromTask));
                        }
                    }

                    if (record.previous[record.toField]) {
                        var prevToTask = me.taskStore.getModelById(record.previous[record.toField]);

                        if (prevToTask) {
                            view.refreshNode(viewStore.indexOf(prevToTask));
                        }
                    }

                    me.updateDependencyTasks(record);
                }
            },

            remove : function (depStore, records) {
                Ext.Array.each(records, function (record) {
                    me.updateDependencyTasks(record);
                });
            }
        };

        // This could be called multiple times, if both predecessor and successor columns are used
        this.mun(depStore, this._lockedDependencyListeners);
        this.mon(depStore, this._lockedDependencyListeners);
    },

    updateDependencyTasks : function (depRecord) {
        var sourceTask = depRecord.getSourceTask(this.taskStore);
        var targetTask = depRecord.getTargetTask(this.taskStore);
        var lockedView = this.lockedGrid.getView();
        var sourceIndex = lockedView.store.indexOf(sourceTask);
        var targetIndex = lockedView.store.indexOf(targetTask);

        // we should not refresh node which is being removed
        if (sourceTask && sourceTask.getTreeStore() && sourceIndex >= 0) {
            lockedView.refreshNode(sourceIndex);
        }
        if (targetTask && targetTask.getTreeStore() && targetIndex >= 0) {
            lockedView.refreshNode(targetIndex);
        }
    },

    /**
     * Shows the baseline tasks
     */
    showBaseline : function () {
        this.addCls('sch-ganttpanel-showbaseline');
    },

    /**
     * Hides the baseline tasks
     */
    hideBaseline : function () {
        this.removeCls('sch-ganttpanel-showbaseline');
    },

    /**
     * Toggles the display of the baseline
     */
    toggleBaseline : function () {
        this.toggleCls('sch-ganttpanel-showbaseline');
    },

    /**
     * Changes the timeframe of the gantt chart to fit all the tasks in it. Provide left/right margin if you want to fit also
     * labels.
     * @param {Gnt.model.Task/Gnt.model.Task[]} [tasks] A list of tasks to zoom to. If not specified then the gantt will
     * try to fit all the tasks in the {@link #taskStore task store}.
     * @param {Object} [options] Options object for zooming.
     * @param {Integer} [options.leftMargin] Defines margin in pixel between the first task start date and first visible date
     * @param {Integer} [options.rightMargin] Defines margin in pixel between the last task end date and last visible date
     */
    zoomToFit : function (tasks, options) {
        options = Ext.apply({
            adjustStart : 1,
            adjustEnd   : 1
        }, options);
        // If view is being filtered, only considered the matching results when zooming
        if (!tasks && this.taskStore.isTreeFiltered()) {
            tasks = this.getSchedulingView().store.getRange();
        }

        var span = tasks ? this.taskStore.getTimeSpanForTasks(tasks) : this.taskStore.getTotalTimeSpan();

        if (this.zoomToSpan(span, options) === null) {
            // if no zooming was performed - fit columns to view space
            if (!tasks) this.fitTimeColumns();
        }
    },


    /**
     * "Get" accessor for the `cascadeChanges` option
     */
    getCascadeChanges : function () {
        return this.taskStore.cascadeChanges;
    },


    /**
     * "Set" accessor for the `cascadeChanges` option
     */
    setCascadeChanges : function (value) {
        this.taskStore.cascadeChanges = value;
    },


    /**
     * "Get" accessor for the `recalculateParents` option
     */
    getRecalculateParents : function () {
        return this.taskStore.recalculateParents;
    },


    /**
     * "Set" accessor for the `recalculateParents` option
     */
    setRecalculateParents : function (value) {
        this.taskStore.recalculateParents = value;
    },


    /**
     * "Set" accessor for the `skipWeekendsDuringDragDrop` option
     */
    setSkipWeekendsDuringDragDrop : function (value) {
        this.taskStore.skipWeekendsDuringDragDrop = this.skipWeekendsDuringDragDrop = value;
    },


    /**
     * "Get" accessor for the `skipWeekendsDuringDragDrop` option
     */
    getSkipWeekendsDuringDragDrop : function () {
        return this.taskStore.skipWeekendsDuringDragDrop;
    },

    bindResourceStore : function (resourceStore, initial) {
        var me = this;
        var listeners = {
            scope       : me,
            update      : me.onResourceStoreUpdate,
            datachanged : me.onResourceStoreDataChanged
        };

        if (!initial && me.resourceStore) {
            if (resourceStore !== me.resourceStore && me.resourceStore.autoDestroy) {
                me.resourceStore.destroy();
            }
            else {
                me.mun(me.resourceStore, listeners);
            }
            if (!resourceStore) {
                me.resourceStore = null;
            }
        }
        if (resourceStore) {
            resourceStore = Ext.data.StoreManager.lookup(resourceStore);
            me.mon(resourceStore, listeners);
            this.taskStore.setResourceStore(resourceStore);
        }

        me.resourceStore = resourceStore;

        if (resourceStore && !initial) {
            me.refreshViews();
        }
    },

    refreshViews : function () {
        if (!this.rendered) return;

        var lockedView = this.lockedGrid.getView(),
            scroll = {
                left : lockedView.getScrollX(),
                top  : lockedView.getScrollY()
            };

        lockedView.refresh();

        this.getSchedulingView().refreshKeepingScroll();
        lockedView.setScrollX(scroll.left);
        lockedView.setScrollY(scroll.top);
    },

    bindAssignmentStore   : function (assignmentStore, initial) {
        var me = this;
        var listeners = {
            scope : me,

            beforetaskassignmentschange : me.onBeforeSingleTaskAssignmentChange,
            taskassignmentschanged      : me.onSingleTaskAssignmentChange,

            update      : me.onAssignmentStoreUpdate,
            datachanged : me.onAssignmentStoreDataChanged
        };

        if (!initial && me.assignmentStore) {
            if (assignmentStore !== me.assignmentStore && me.assignmentStore.autoDestroy) {
                me.assignmentStore.destroy();
            }
            else {
                me.mun(me.assignmentStore, listeners);
            }
            if (!assignmentStore) {
                me.assignmentStore = null;
            }
        }
        if (assignmentStore) {
            assignmentStore = Ext.data.StoreManager.lookup(assignmentStore);
            me.mon(assignmentStore, listeners);
            this.taskStore.setAssignmentStore(assignmentStore);
        }

        me.assignmentStore = assignmentStore;

        if (assignmentStore && !initial) {
            me.refreshViews();
        }
    },

    // BEGIN RESOURCE STORE LISTENERS
    onResourceStoreUpdate : function (store, resource) {
        var tasks = resource.getTasks();

        Ext.Array.each(tasks, function (task) {
            var index = this.lockedGrid.view.store.indexOf(task);

            if (index >= 0) {
                this.getView().refreshNode(index);
            }
        }, this);
    },

    onResourceStoreDataChanged   : function () {
        if (this.taskStore.getRootNode().childNodes.length > 0) {
            this.refreshViews();
        }
    },
    // EOF RESOURCE STORE LISTENERS

    // BEGIN ASSIGNMENT STORE LISTENERS
    onAssignmentStoreDataChanged : function () {
        if (this.taskStore.getRootNode().childNodes.length > 0) {
            this.refreshViews();
        }
    },

    onAssignmentStoreUpdate            : function (store, assignment) {
        var task = assignment.getTask();

        if (task) {
            var index = this.lockedGrid.view.store.indexOf(task);

            if (index >= 0) {
                this.getView().refreshNode(index);
            }
        }
    },

    // We should not react to changes in the assignment store when it is happening for a single resource
    // We rely on the "taskassignmentschanged" event for updating the UI
    onBeforeSingleTaskAssignmentChange : function () {
        this.assignmentStore.un('datachanged', this.onAssignmentStoreDataChanged, this);
    },

    onSingleTaskAssignmentChange : function (assignmentStore, taskId, newAssignments) {

        this.assignmentStore.on('datachanged', this.onAssignmentStoreDataChanged, this);

        if (this.rendered) {

            var task = this.taskStore.getModelById(taskId);

            // Make sure task is part of the tree and wasn't just removed
            if (task && task.parentNode) {
                var index = this.taskStore.indexOf(task);

                if (index >= 0) {
                    this.getView().refreshNode(index);
                }
            }
        }
    },
    // EOF ASSIGNMENT STORE LISTENERS

    updateAutoGeneratedCells : function (column, recordIndex) {
        var view = this.lockedGrid.view;
        var startIndex = view.all.startIndex;
        var endIndex = view.all.endIndex;

        if (recordIndex < 0 || recordIndex > endIndex) return;

        for (var i = Math.max(startIndex, recordIndex); i <= endIndex; i++) {
            var rec = view.store.getAt(i);
            var cell = this.getCellDom(view, rec, column);

            if (cell) {
                cell.firstChild.innerHTML = column.renderer(null, null, rec);
            }
        }
    },


    getCellDom : function (view, record, column) {
        var row = view.getNode(record, true);

        return row && Ext.fly(row).down(column.getCellSelector(), true);
    },


    redrawColumns : function (cols) {
        // this method is called a lot from various buffered listeners, need to check
        // if component has not been destroyed
        if (cols.length && !this.isDestroyed) {
            var view = this.lockedGrid.view;

            for (var i = view.all.startIndex; i <= view.all.endIndex; i++) {
                var rec = view.store.getAt(i);

                for (var j = 0, ll = cols.length; j < ll; j++) {

                    var cell = this.getCellDom(view, rec, cols[j]);

                    // cell might be null for a hidden column
                    if (cell) {
                        var out = [];

                        view.renderCell(cols[j], rec, i, cols[j].getIndex(), i, out);

                        cell.innerHTML = out.join('');
                    }
                }
            }
        }
    },

    updateSlackColumns : function () {
        if (this.slackColumn) this.redrawColumns([ this.slackColumn ]);
    },

    updateEarlyDateColumns : function () {
        var cols = [];
        if (this.earlyStartColumn) cols.push(this.earlyStartColumn);
        if (this.earlyEndColumn) cols.push(this.earlyEndColumn);

        if (cols.length) this.redrawColumns(cols);
    },

    updateLateDateColumns : function () {
        var cols = [];
        if (this.lateStartColumn) cols.push(this.lateStartColumn);
        if (this.lateEndColumn) cols.push(this.lateEndColumn);

        if (cols.length) this.redrawColumns(cols);
    },

    onMyViewReady : function () {

        // Prevent editing of non-editable fields
        this.on('beforeedit', function (editor, o) {
            var column  = o.column;
            return !this.isReadOnly() && o.record.isEditable(o.field) &&
                (!column.isEditable || column.isEditable(o.record));
        }, this);

        this.setupColumnListeners();


        /* For clients using the Row Expand plugin */
        var depView = this.getDependencyView();

        this.getView().on({
            expandbody   : depView.renderAllDependencies,
            collapsebody : depView.renderAllDependencies,
            scope        : depView
        });

        var plugs = this.lockedGrid.plugins || [];

        Ext.Array.each(plugs, function (plug) {
            if (Sch.plugin && Sch.plugin.TreeCellEditing && plug instanceof Sch.plugin.TreeCellEditing) {
                this.ganttEditingPlugin = plug;

                return false;
            }
        }, this);

        this.mon(this.taskStore, {
            'nodestore-datachange-start' : this.onFilterChange,
            'filter-clear'               : this.onFilterChange,
            scope                        : this
        });

        var splitter = this.down('splitter');

        if (splitter) {
            // Since Ext JS doesn't handle locked grid sizing, we do this ourselves.
            splitter.on('dragend', function() {
                this.saveState();
            }, this, { delay : 10 });
        }
    },

    onFilterChange : function () {
        this.getSelectionModel().deselectAll();
    },

    setupColumnListeners : function () {
        var me = this;
        var lockedHeader = this.lockedGrid.headerCt;

        lockedHeader.on('add', this.onLockedColumnAdded, this);

        lockedHeader.items.each(function (col) {
            me.onLockedColumnAdded(lockedHeader, col);
        });
    },

    onLockedColumnAdded : function (ct, col) {
        var GntCol = Gnt.column;

        // Gnt.column can be null if no class from that namespace was used/required. We don't require that, so better check
        if (GntCol) {
            if (
                (GntCol.WBS && col instanceof GntCol.WBS) ||
                (GntCol.Sequence && col instanceof GntCol.Sequence)
                ) {
                this.bindSequentialDataListeners(col);
            } else if (GntCol.Dependency && col instanceof GntCol.Dependency && col.useSequenceNumber) {
                this.bindFullRefreshListeners(col);
            } else if (GntCol.EarlyStartDate && col instanceof GntCol.EarlyStartDate) this.earlyStartColumn = col;
            else if (GntCol.EarlyEndDate && col instanceof GntCol.EarlyEndDate) this.earlyEndColumn = col;
            else if (GntCol.LateStartDate && col instanceof GntCol.LateStartDate) this.lateStartColumn = col;
            else if (GntCol.LateEndDate && col instanceof GntCol.LateEndDate) this.lateEndColumn = col;
            else if (GntCol.Slack && col instanceof GntCol.Slack) this.slackColumn = col;
        }

        if (!this.slackListeners && this.slackColumn) {
            this.bindSlackListeners();
        }

        if (!this.earlyDatesListeners && (this.earlyStartColumn || this.earlyEndColumn)) {
            this.bindEarlyDatesListeners();
        }

        if (!this.lateDatesListeners && (this.lateStartColumn || this.lateEndColumn)) {
            this.bindLateDatesListeners();
        }
    },

    getState : function () {
        var me = this,
            state = me.callParent(arguments);

        state.lockedWidth = me.lockedGrid.getWidth();

        return state;
    },

    applyState : function (state) {
        var me = this;

        me.callParent(arguments);

        if (state && state.lockedWidth) {
            me.lockedGrid.setWidth(state.lockedWidth);
        }
    },

    completeEdit : function () {
        this.ganttEditingPlugin && this.ganttEditingPlugin.completeEdit();
    },

    cancelEdit : function () {
        this.ganttEditingPlugin && this.ganttEditingPlugin.cancelEdit();
    },

    setRowHeight : function (height) {
        var rowHeightSelector = '#' + this.getId() + ' .' + Ext.baseCSSPrefix + 'grid-cell';

        if (!Ext.util.CSS.getRule(rowHeightSelector)) {
            // Create panel specific row height rule
            Ext.util.CSS.createStyleSheet(rowHeightSelector + '{ height:' + height + 'px; }');
        } else {
            Ext.util.CSS.updateRule(rowHeightSelector, 'height', height + 'px');
        }

        // Let view know about this too
        this.getSchedulingView().setRowHeight(height);
    },

    // If task is provided returns a proper task editor plugin instance that can be used for editing.
    // Return any task editor instance available when no task is provided.
    getTaskEditor : function (task) {
        var plugins = this.plugins;

        for (var i = 0, l = plugins.length; i < l; i++) {
            var plugin  = plugins[i];

            if (plugin.isTaskEditor && (!task || plugin.matchFilters(task))) return plugin;
        }
    }

});

/**

@class Gnt.panel.ResourceHistogram
@extends Sch.panel.TimelineGridPanel

A histogram panel, which allows you to visualize resource utilization and highlight overallocation.
The panel is a subclass of the Ext.grid.Panel class so any normal grid configs can be applied to it.

#Two ways of using

You can either use this widget as a standalone panel or it can be used together with a {@link Gnt.panel.Gantt gantt panel}.
When using it together with a {@link Gnt.panel.Gantt gantt panel} you need to specify its instance as the {@link Sch.mixin.TimelinePanel#partnerTimelinePanel partnerTimelinePanel} config.

#Predefined columns

The panel has a default set of columns which is used if no `columns` config has been specified.
The default columns include a resource name column and a {@link Gnt.column.Scale scale column} to display a resource utilization scale.

For example in the following code snippet, the histogram will be created with a default set of columns:

    var histogram = Ext.create('Gnt.panel.ResourceHistogram', {
        taskStore           : taskStore,
        resourceStore       : resourceStore,
        viewPreset          : 'weekAndDayLetter',
        startDate           : new Date(2010, 0, 11),
        endDate             : new Date(2010, 1, 11),
        renderTo            : Ext.getBody()
    });


{@img gantt/images/histogram-panel.png}

*/
Ext.define('Gnt.panel.ResourceHistogram', {
    extend                  : 'Sch.panel.TimelineGridPanel',

    requires                : [
        'Ext.XTemplate',
        'Sch.util.Date',
        'Gnt.feature.WorkingTime',
        'Gnt.column.Scale',
        'Gnt.view.ResourceHistogram'
    ],

    mixins                  : ['Gnt.mixin.Localizable'],

    alias                   : 'widget.resourcehistogram',

    viewType                : 'resourcehistogramview',

    layout                  : 'border',

    preserveScrollOnRefresh : true,

    /**
     * @cfg {Ext.XTemplate} barTpl The template used to render the bars in the histogram view.
     *
     * When specifying a custom template please make sure that the bar element must have:
     *
     *  - unique `id` attribute, like this: ... id="{id}" ...
     *  - `gnt-bar-index` attribute defined this way: ... gnt-bar-index="{index}" ...
     *  - support for {@link #barCls} config.
     *  - support bar labels
     *
     * Please take a look at the default markup of this template to see an example of how the above restrictions can be applied:
     *
     *      this.barTpl = new Ext.XTemplate(
     *          '<tpl for=".">',
     *              '<div id="{id}" class="gnt-resourcehistogram-bar '+ (this.barCls || '') +' {cls}" gnt-bar-index="{index}" style="left:{left}px;top:{top}px;height:{height}px;width:{width}px">',
     *                  '<tpl if="text !== \'\'">',
     *                      '<span class="gnt-resourcehistogram-bar-text" style="bottom:' + Math.floor(this.rowHeight/2) + 'px">{text}</span>',
     *                  '</tpl>',
     *              '</div>',
     *          '</tpl>'
     *      );
     *
     * See {@link Ext.XTemplate} for more information on templates syntax.
     */

    /**
     * @cfg {Function} barRenderer When provided this function creates a data object for {@link #barTpl} template.
     *
     *
     *      Ext.create('Gnt.panel.ResourceHistogram', {
     *          crudManager     : crudManager,
     *          viewPreset      : 'weekAndDayLetter',
     *          height          : 300,
     *          width           : 500,
     *          renderTo        : Ext.getBody(),
     *
     *          barTpl          : new Ext.XTemplate(
     *                              '<tpl for=".">',
     *                                  '<div id="{id}" class="gnt-resourcehistogram-bar {cls}" gnt-bar-index="{index}" style="left:{left}px;top:{top}px;height:{height}px;width:{width}px">',
     *                                      '<span class="gnt-resourcehistogram-bar-text" style="bottom:20px">{text}<br>{taskName}</span>',
     *                                  '</div>',
     *                              '</tpl>'
     *                            ),
     *
     *          barRenderer     : function (resourceId, allocationData, tplData) {
     *              var task = allocationData.assignments[0].getTask();
     *
     *              return {
     *                  taskName : task.getName(),
     *                  cls      : 'foo' // provide a custom CSS class for a histogram bar
     *              };
     *          }
     *      });
     *
     *
     * @param {Number} resourceId Id of the current resource
     *
     * @param {Object} allocationData
     * @param {Data} allocationData.startDate Bar start date
     * @param {Data} allocationData.endDate Bar end date
     * @param {Int} allocationData.allocationMS Duration of rendering bar
     * @param {Number} allocationData.totalAllocation Allocation of resource in percent
     * @param {Gnt.model.Assignment[]} allocationData.assignments Assignments for current resource
     *
     * @return {Object} Specify properties you would like to use in your {@link #barTpl template}
     */

    /**
     * @cfg {String} barCls The CSS class to apply to rendered bars in the histogram view.
     * This can be used if you want to implement your own bar styling.
     */

    /**
     * @cfg {Ext.XTemplate} lineTpl The template used to render the scale line in the histogram view.
     */

    /**
     * @cfg {String} lineCls The CSS class to apply to scale lines in the histogram view.
     * This can be used if you want to implement your own line styling.
     */

    /**
     * @cfg {Ext.XTemplate} limitLineTpl The template used to render the maximum resource utilization line in the histogram view.
     */

    /**
     * @cfg {String} limitLineCls The CSS class to apply to the maximum resource utilization lines in the histogram view.
     * This can be used if you want to implement your own line styling.
     */

    /**
     * @cfg {Number} limitLineWidth The width of the maximum resource utilization line. Used for the line coordinates calculations.
     * Should be specified only if the width of that utilization line was changed as result of any custom styling.
     */

    /**
     * @cfg {Mixed} labelMode Defines the type of scale labels to be used or disables labels completely.
     * Possible values are:
     *
     *  - empty string or `false` to disable labels (default).
     *  - `units` - displays the per day allocation in {@link #scaleUnit units}.
     *  - `percent` - displays the per day allocation in percents.
     *  - any other non-empty value will be considered as compiled `Ext.XTemplate` instance.
     */

    /**
     * @cfg {String} labelPercentFormat Defines the label format to use when the {@link #labelMode} is set to `percent`.
     *
     * For more details on format usage please refer to the `Ext.util.Format.number` method description.
     */

    /**
     * @cfg {String} labelUnitsFormat Defines the label format to use when the {@link #labelMode} is set to `units`.
     *
     * For more details on format usage please refer to the `Ext.util.Format.number` method description.
     */

    /**
     * @cfg {Object[]} scalePoints Alternative way of defining the utilization scale.
     * Can be used instead of setting {@link #scaleMin}, {@link #scaleMax}, {@link #scaleStep} configs.
     * When using the default columns, this config will be applied to the {@link Gnt.column.Scale} instance.
     *
     * For usage details please refer to the {@link Gnt.column.Scale#scalePoints scalePoints} property.
     */

    /**
     * @cfg {Boolean} showScaleLines Whether to show scale lines or not.
     */
    showScaleLines          : false,

    /**
     * @cfg {Boolean} showLimitLines
     * Whether to show maximum resource allocation lines or not.
     * See {@link #showVerticalLimitLines} to disable vertical segments of the lines drawing.
     */
    showLimitLines          : true,

    /**
     * @cfg {Number} showLimitLinesThreshold Sets the histogram to show maximum resource allocation lines only wider than specified width in pixels.
     * This option allows to get rid of redundant details during zooming out (which also implicitly raises performance).
     * When line has smaller size than the provided value the histogram will merge it with neighbor segments and approximate its level.
     * Use {@link #showLimitLines} to completely disable resource allocation lines rendering.
     */
    showLimitLinesThreshold : 10,

    /**
     * @cfg {Boolean} showVerticalLimitLines
     * Set this to false to not render vertical segments of maximum resource allocation lines.
     * This implicitly raises performance due to reducing the number of DOM elements being generated.
     */
    showVerticalLimitLines  : true,

    cacheLimitDurationMS    : 0,

    /**
     * @cfg {Number} cacheLimitDuration Combined with {@link #cacheLimitDurationUnit} forces cache to hold only data
     * for visible time span and {@link #cacheLimitDuration} number of {@link #cacheLimitDurationUnit units} to the left/right from it.
     *
     * **Note:** Does not limit the cache size when set to zero `0`.
     */
    cacheLimitDuration      : 6,

    /**
     * @cfg {String} cacheLimitDurationUnit Combined with {@link #cacheLimitDuration} forces cache to hold only data
     * for visible time span and {@link #cacheLimitDuration} number of units to the left/right from it.
     */
    cacheLimitDurationUnit  : 'mo',

    calendarResources       : null,

    calendarListenersHash   : null,

    /**
     * @cfg {Gnt.data.Calendar} calendar A {@link Gnt.data.Calendar calendar} instance for the histogram panel. Can be also provided
     * as a {@link Gnt.data.TaskStore#calendar configuration option} of the `taskStore`.
     *
     * **Please note,** that this option is required if the {@link #taskStore} option is not specified.
     */
    calendar                : null,

    /**
     * @cfg {Gnt.data.TaskStore} taskStore The {@link Gnt.data.TaskStore store} holding the tasks.
     * When using this option, the histogram will instantly reflect any changes made to a task.
     *
     * **Please note,** that this option is required if the {@link #calendar} option is not specified.
     */
    taskStore               : null,

    /**
     * @cfg {Gnt.data.ResourceStore} resourceStore The {@link Gnt.data.ResourceStore store} holding the resources to be rendered into the histogram (required).
     *
     * See also {@link Gnt.model.Resource}
     */
    resourceStore           : null,

    /**
     * @cfg {Gnt.data.AssignmentStore} assignmentStore The {@link Gnt.data.AssignmentStore store} holding the assignments information (optional).
     *
     * If not specified, it will be taken from the {@link #resourceStore} or {@link #taskStore}.
     *
     * See also {@link Gnt.model.Assignment}
     */
    assignmentStore         : null,

    /**
     * @cfg {Date} startDate Defines the start date of this panel.
     *
     * **Note:** This option is **required** if a {@link Sch.mixin.TimelinePanel#partnerTimelinePanel partnerTimelinePanel} is not specified.
     */
    startDate               : null,

    /**
     * @cfg {Date} endDate Defines the end date of this panel.
     *
     * **Note:** This option is **required** if a {@link Sch.mixin.TimelinePanel#partnerTimelinePanel partnerTimelinePanel} is not specified.
     */
    endDate                 : null,

    /**
     * @cfg {Boolean} highlightWeekends `True` to highlight weekends and holidays, using the {@link Gnt.feature.WorkingTime} plugin.
     */
    highlightWeekends       : true,

    allocationData          : null,

    /**
     * @cfg {String} scaleUnit Name of the resource utilization scale unit. `Sch.util.Date` constants can be used, like `Sch.util.Date.HOUR`.
     */
    scaleUnit               : 'HOUR',

    /**
     * @cfg {Number} scaleMin Minimum for the resource utilization scale (required).
     */
    scaleMin                : 0,

    /**
     * @cfg {Number} scaleMax Maximum for the resource utilization scale.
     *
     * **Note:** this option is **required** except in cases when you use {@link #scalePoints} to define utilization scale.
     */
    scaleMax                : 24,

    /**
     * @cfg {Number} scaleLabelStep Defines the interval between two adjacent scale lines which have labels.
     * The histogram itself does not render any labels but corresponding lines will get a specific CSS class for styling purposes.
     */
    scaleLabelStep          : 4,

    /**
     * @cfg {Number} scaleStep Defines the interval between two adjacent scale lines.
     *
     * **Also,** this value is used as a margin between the top scale line (defined by {@lin #scaleMax} option) and the top border of the cell
     * containing the histogram for a resource.
     */
    scaleStep               : 2,

    rowHeight               : 50,

    /**
     * Class name to be used for the scale column creating
     * @cfg {String} scaleColumnClass
     */
    scaleColumnClass        : 'Gnt.column.Scale',

    /**
     * @cfg {String} resourceText The text to show in the resource name column header (which is used for the default columns).
     * @deprecated Please use {@link #l10n} instead
     */

    /**
     * @cfg {Object} l10n
     * A object, purposed for the class localization. Contains the following keys/values:

        - resourceText : 'Resource'
     */

    scaleColumnConfigs      : [ 'scalePoints', 'scaleStep', 'scaleLabelStep', 'scaleMin', 'scaleMax', 'scaleLabelStep', 'scaleStep' ],

    normalViewConfigs       : [
        'barCls', 'barTpl', 'barRenderer', 'lineRenderer', 'limitLineRenderer',
        'lineTpl', 'lineCls', 'limitLineTpl', 'limitLineCls', 'limitLineWidth', 'labelMode', 'labelPercentFormat', 'labelUnitsFormat',
        'scaleMin', 'scaleMax', 'scaleStep', 'scaleLabelStep', 'scalePoints', 'scaleUnit', 'loadMask', 'showLimitLinesThreshold', 'showVerticalLimitLines', 'calendar'
    ],

    cacheUpdateSuspended        : false,

    suspendedCacheUpdatesCount  : 0,


    initComponent : function () {
        // convert "cacheLimitDuration" value to ms
        var dt = new Date();
        this.cacheLimitDurationMS = Sch.util.Date.add(dt, this.cacheLimitDurationUnit, 1) - dt;

        // initialize the allocation cache
        this.resetAllocationDataCache();

        // initialize store references
        this.initStores();

        this.lockedGridConfig   = Ext.applyIf(this.lockedGridConfig || {}, {
            reserveScrollbar    : false,
            width               : 300,
            forceFit            : true
        });

        this.normalViewConfig       = Ext.apply(this.normalViewConfig || {}, {
            histogram               : this,
            trackOver               : false,
            rowHeight               : this.rowHeight,
            preserveScrollOnRefresh : this.preserveScrollOnRefresh
        });

        this.lockedViewConfig       = Ext.apply(this.lockedViewConfig || {}, {
            rowHeight               : this.rowHeight,
            preserveScrollOnRefresh : this.preserveScrollOnRefresh
        });

        // if scale was specified by scalePoints
        if (this.scalePoints) {
            this.scalePoints.sort(function (a, b) { return a.value > b.value ? 1 : -1; });

            this.scaleMin   = this.scalePoints[0].value;
            this.scaleMax   = this.scalePoints[this.scalePoints.length - 1].value;
            this.scaleStep  = (this.scaleMax - this.scaleMin) / 10;
        }

        this.initColumns();

        // transfer some configs to the view instance
        Ext.Array.forEach(this.normalViewConfigs, function (prop) {
            if (prop in this) this.normalViewConfig[prop] = this[prop];
        }, this);

        // if we need to highlight weekends
        if (this.highlightWeekends) {
            this.initWeekendsHightlight();
        }

        this.callParent(arguments);

        var cls     = 'gnt-resourcehistogram sch-horizontal ';

        // if we need to highlight weekends
        if (this.highlightWeekends) {
            cls     += ' gnt-resourcehistogram-highlightweekends ';
        }

        this.addCls(cls);

        // register our renderer
        this.registerRenderer(this.columnRenderer, this);

        var view = this.getSchedulingView();

        this.relayEvents(view, [
            /**
            * @event barclick
            * Fires when a histogram bar is clicked
            *
            * @param {Gnt.view.ResourceHistogram} view The histogram panel view.
            * @param {Object} context Object containing a description of the clicked bar.
            * @param {Gnt.model.Resource} context.resource The resource record.
            * @param {Date} context.startDate Start date of corresponding period.
            * @param {Date} context.endDate End date of corresponding period.
            * @param {Number} context.allocationMS Resource allocation time in milliseconds.
            * @param {Number} context.totalAllocation Resource allocation (in percents).
            * @param {Gnt.model.Assignment[]} context.assignments List of resource assignments for the corresponding period.
            * @param {Ext.EventObject} e The event object
            */
            'barclick',
            /**
            * @event bardblclick
            * Fires when a histogram bar is double clicked
            *
            * @param {Gnt.view.ResourceHistogram} view The histogram panel view.
            * @param {Object} context Object containing description of clicked bar.
            * @param {Gnt.model.Resource} context.resource The resource record.
            * @param {Date} context.startDate Start date of corresponding period.
            * @param {Date} context.endDate End date of corresponding period.
            * @param {Number} context.allocationMS Resource allocation time in milliseconds.
            * @param {Number} context.totalAllocation Resource allocation (in percents).
            * @param {Gnt.model.Assignment[]} context.assignments List of resource assignments for the corresponding period.
            * @param {Ext.EventObject} e The event object
            */
            'bardblclick',
            /**
            * @event barcontextmenu
            * Fires when contextmenu is activated on a histogram bar
            *
            * @param {Gnt.view.ResourceHistogram} view The histogram panel view.
            * @param {Object} context Object containing description of clicked bar.
            * @param {Gnt.model.Resource} context.resource The resource record.
            * @param {Date} context.startDate Start date of corresponding period.
            * @param {Date} context.endDate End date of corresponding period.
            * @param {Number} context.allocationMS Resource allocation time in milliseconds.
            * @param {Number} context.totalAllocation Resource allocation (in percents).
            * @param {Gnt.model.Assignment[]} context.assignments List of resource assignments for the corresponding period.
            * @param {Ext.EventObject} e The event object
            */
            'barcontextmenu'
        ]);

        if (!this.syncRowHeight) this.enableRowHeightInjection(this.lockedGrid.getView(), view);
    },


    initStores : function () {
        var listenersBound = false;

        // if CrudManager is used let's grab store references from it
        if (this.crudManager) {
            this.setCrudManager(this.crudManager);
            // we called bindStores() in setCrudManager() call
            listenersBound = true;
        }

        // resourceStore acts as store for the grid
        this.store      = this.resourceStore;

        this.taskStore  = this.taskStore || this.store.getTaskStore();

        // get project calendar
        this.calendar   = this.calendar || this.taskStore && this.taskStore.getCalendar();

        if (!this.calendar) throw 'Cannot get project calendar instance: please specify either "calendar" or "taskStore" option';

        this.assignmentStore = this.assignmentStore || this.store.getAssignmentStore() || this.taskStore && this.taskStore.getAssignmentStore();

        if (!listenersBound) this.bindStores();
    },


    getCrudManager : function () {
        return this.crudManager;
    },


    setCrudManager : function (crudManager) {
        this.unbindStores();

        // if we set another crud manager unbind from the previous one
        this.crudManagerListeners && this.crudManagerListeners.destroy();

        this.crudManager        = crudManager;

        this.taskStore          = this.crudManager.getTaskStore();
        this.store              = this.resourceStore = this.crudManager.getResourceStore();
        this.assignmentStore    = this.crudManager.getAssignmentStore();

        this.crudManagerListeners = this.mon(this.crudManager, {
            beforeloadapply : {
                fn          : this.beforeCrudManagerLoad,
                // we want to listen to "beforeloadapply" the last one
                // to have some guarantee that the event is not cancelled
                priority    : -999
            },
            load            : this.afterCrudManagerLoad,
            destroyable     : true,
            scope           : this
        });

        this.bindStores();
    },


    beforeCrudManagerLoad : function () {
        // suspend store listeners upon crud manager stores loading
        this.suspendStoreListeners();
    },


    afterCrudManagerLoad : function () {
        // keep showing loading mask
        this.beforeCrudOperationStart(this.crudManager, null, 'load');
        // resume stores listeners and refresh the histogram
        this.resumeStoreListeners(true);
        // hide loading mask
        this.onCrudOperationComplete();
    },


    bindStores  : function () {
        if (this.taskStore) {
            this.mon(this.taskStore, {
                refresh     : this.onTaskStoreRefresh,
                // EtxJS5: tree store doesn't fire 'refresh' on load completion so we listen to 'load' as well
                load        : this.onTaskStoreRefresh,
                update      : this.onTaskUpdate,
                // we listen to append to support twisted case when someone first adds assignment and then adds a task
                nodeappend  : this.onTaskUpdate,

                scope       : this
            });
        }

        if (this.assignmentStore) {
            // on assignments change we update corresponding resource row
            this.mon(this.assignmentStore, {
                refresh : this.onAssignmentsRefresh,
                remove  : this.onAssignmentsChange,
                update  : this.onAssignmentUpdate,
                add     : this.onAssignmentsChange,

                scope   : this
            });
        }

        // track the project calendar changes
        this.calendar && this.mon(this.calendar, {
            calendarchange  : this.onProjectCalendarChange,
            scope           : this
        });

        // bind resource calendars listeners
        this.bindCalendarListeners();

        this.store && this.mon(this.store, {
            update  : this.onResourceUpdate,
            refresh : this.onResourceStoreRefresh,

            scope   : this,
            priority : 100
        });
    },


    unbindStores : function () {
        if (this.taskStore) {
            this.mun(this.taskStore, {
                refresh     : this.onTaskStoreRefresh,
                // EtxJS5: tree store doesn't fire 'refresh' on load completion so we listen to 'load' as well
                load        : this.onTaskStoreRefresh,
                update      : this.onTaskUpdate,
                // we listen to append to support twisted case when someone first adds assignment and then adds a task
                nodeappend  : this.onTaskUpdate,

                scope       : this
            });
        }

        if (this.assignmentStore) {
            // on assignments change we update corresponding resource row
            this.mun(this.assignmentStore, {
                refresh : this.onAssignmentsRefresh,
                remove  : this.onAssignmentsChange,
                update  : this.onAssignmentUpdate,
                add     : this.onAssignmentsChange,

                scope   : this
            });
        }

        this.calendar && this.mun(this.calendar, {
            calendarchange  : this.onProjectCalendarChange,
            scope           : this
        });

        this.unbindCalendarListeners();

        this.store && this.mun(this.store, {
            update  : this.onResourceUpdate,
            refresh : this.onResourceStoreRefresh,

            scope   : this,
            priority : 100
        });
    },


    /**
     * Suspends the histogram stores listeners. Call this method before massive stores data modifications
     * (like data loading) if you want to speed the histogram up.
     * Use {@link #resumeStoreListeners} to restore store listeners back.
     */
    suspendStoreListeners : function () {
        // set flag to avoid cache updating
        this.cacheUpdateSuspended       = true;
        this.suspendedCacheUpdatesCount = 0;

        // unbind stores listeners
        this.unbindStores();
    },

    /**
     * Resumes the histogram stores listeners suspended by {@link #suspendStoreListeners} call.
     * @param {Boolean} [refreshIfAttempted] Pass `true` to refresh the histogram if there were suspended refresh attempts
     */
    resumeStoreListeners : function (refreshIfAttempted) {
        // restore cache recalculations
        this.cacheUpdateSuspended = false;

        // restore listeners
        this.bindStores();

        // refresh if it's asked and there were attempts to update the histogram cache
        if (refreshIfAttempted && this.suspendedCacheUpdatesCount) {
            this.clearCacheAndRefresh();
        }
    },


    // Clears allocation cache for the resource and refreshes corresponding view node
    clearCacheAndRefresh : function (resource) {
        this.resetAllocationDataCache(resource);
        this.refreshIfRendered(resource);
    },


    createDefaultColumns : function () {
        var columns         = [],
            resourceNameCol,
            scaleCol;

        resourceNameCol = this.resourceNameCol = new Ext.grid.column.Column({
            flex        : 1,
            resizable   : false,
            // TODO: remove deprecated "this.resourceText" in 3.0.7 release
            header      : this.resourceText || this.L('resourceText'),
            dataIndex   : this.resourceStore.model.prototype.nameField
        });

        columns.push(resourceNameCol);

        scaleCol        = { width : 40, resizable : false };

        // map some scale column configs from this panel
        Ext.copyTo(scaleCol, this, this.scaleColumnConfigs, true);

        scaleCol = this.scaleCol = Ext.create(this.scaleColumnClass, scaleCol);

        // before column render we'll give it information about row height
        this.mon(scaleCol, {
            beforerender    : function () {
                scaleCol.setAvailableHeight(this.getSchedulingView().getAvailableRowHeight());

                if (this.scalePoints) {
                    // we update scalePoints since it was
                    // filled in with calculated top-coordinates
                    this.scalePoints    = scaleCol.scalePoints;
                }
            },
            scope           : this,
            single          : true
        });

        columns.push(scaleCol);

        return columns;
    },


    initColumns : function () {
        // if no columns provided we'll generate default column set: resource name & scale
        if (!this.columns) {

            this.columns    = this.createDefaultColumns();

            var scaleCol    = this.scaleCol;

            // if scale was specified by scalePoints let's set params equal to scale column ones
            // since they were calculated there
            if (this.scalePoints) {
                this.scaleMin       = scaleCol.scaleMin;
                this.scaleMax       = scaleCol.scaleMax;
                this.scaleStep      = scaleCol.scaleStep;
            }

        // if columns specified we try to find Gnt.column.Scale instances and set its configs
        } else {
            var columns = !Ext.isArray(this.columns) ? [this.columns] : this.columns;

            for (var i = 0; i < columns.length; i++) {
                var col = columns[i];

                if (this.isScaleColumn(col)) {

                    // map some scale column configs from this panel
                    Ext.copyToIf(col, this, this.scaleColumnConfigs);

                    if (!(col instanceof Gnt.column.Scale)) {
                        col = columns[i] = Ext.ComponentManager.create(col, col.xtype);
                    }

                    // before column render let's give it information about row height
                    this.mon(col, {
                        beforerender    : function () {
                            col.setAvailableHeight(this.getSchedulingView().getAvailableRowHeight());
                        },
                        scope           : this,
                        single          : true
                    });
                }
            }
        }
    },


    isScaleColumn : function (col) {
        var proto   = col.xtype && (Ext.ClassManager.getByAlias(col.xtype));
        proto       = proto && proto.prototype;

        return (col instanceof Gnt.column.Scale || (proto && proto instanceof Gnt.column.Scale));
    },


    initWeekendsHightlight : function () {
        // add Gnt.feature.WorkingTime instance
        this.workingTimePlugin = new Gnt.feature.WorkingTime({
            calendar    : this.calendar
        });

        this.plugins = [].concat(this.plugins || []);
        this.plugins.push(this.workingTimePlugin);
    },


    destroy : function () {
        this.unbindStores();
        this.callParent(arguments);
    },


    /**
     * Returns the task store instance
     * @return {Gnt.data.TaskStore}
     */
    getEventStore : function () {
        return this.taskStore;
    },

    getTimeSpanDefiningStore : function () {
        return this.taskStore;
    },

    unbindResourceCalendarListener : function (resource, calendarId) {
        var calendarResources = this.calendarResources[calendarId];

        if (calendarResources) {
            Ext.Array.remove(calendarResources, resource);

            // if no more resources left bound to the calendar
            // destroy the calendar listener
            if (!calendarResources.length) {
                this.calendarListenersHash[calendarId].destroy();
                delete this.calendarListenersHash[calendarId];
                delete this.calendarResources[calendarId];
            }
        }
    },


    bindResourceCalendarListener : function (resource) {
        var me          = this,
            calendar    = resource.getOwnCalendar(),
            calendarId  = calendar.getCalendarId();

        // bind new listener to the calendar if it doesn't have it yet
        if (!me.calendarListenersHash[calendarId]) {
            me.calendarListenersHash[calendarId] = me.mon(calendar, {
                // on calendar load/change we'll recalculate allocation data and redraw resource(s) rows
                load            : me.onCalendarChange,
                calendarchange  : me.onCalendarChange,
                scope           : me,
                destroyable     : true
            });
        }

        if (!me.calendarResources[calendarId]) {
            me.calendarResources[calendarId] = [resource];
        } else if (Ext.Array.indexOf(me.calendarResources, resource) === -1) {
            me.calendarResources[calendarId].push(resource);
        }
        // resource is already bound to this calendar
    },


    bindCalendarListeners : function () {
        var me = this;

        // unbind exisiting listeners (if any)
        me.unbindCalendarListeners();

        me.store.each(function (resource) {
            // if resource has own calendar and it differs from project one
            var calendar    = resource.getOwnCalendar();
            if (calendar && calendar !== me.calendar) {
                me.bindResourceCalendarListener(resource);
            }
        });
    },


    unbindCalendarListeners : function () {
        for (var calendarId in this.calendarListenersHash) {
            this.calendarListenersHash[calendarId].destroy();
        }
        // reset array of listeners
        this.calendarResources      = [];
        this.calendarListenersHash  = {};
    },


    onTaskStoreRefresh : function () {
        this.clearCacheAndRefresh();
    },


    onCalendarChange : function (calendar) {
        var resources   = this.calendarResources[calendar.getCalendarId()];

        if (resources) {
            // reset allocation cache and render row for each resource bound to the calendar
            for (var i = 0; i < resources.length; i++) {
                this.clearCacheAndRefresh(resources[i]);
            }
        }
    },


    onProjectCalendarChange : function () {
        this.clearCacheAndRefresh();
    },


    onTaskUpdate : function (taskStore, task) {
        var assignments;

        if (this.assignmentStore && task.getAssignmentStore() != this.assignmentStore) {
            assignments = this.assignmentStore.getAssignmentsForTask(task.getId());

        } else {
            assignments = task.getAssignments();
        }

        this.onAssignmentsChange(this.assignmentStore, assignments);
    },


    onAssignmentsRefresh : function (assignmentStore) {
        this.onAssignmentsChange(assignmentStore, assignmentStore.getRange());
    },


    onAssignmentUpdate : function (assignmentStore, assignment, operation, modifiedFieldNames) {
        var me              = this,
            resourceIdField = me.assignmentStore.model.prototype.resourceIdField,
            resource;

        if (operation == Ext.data.Model.EDIT) {

            // if the assignment resource has been changed
            if (modifiedFieldNames && Ext.Array.contains(modifiedFieldNames, resourceIdField)) {
                var oldResourceId   = assignment.previous[resourceIdField];

                resource = this.resourceStore.getModelById(oldResourceId);
                if (resource) {
                    // resetting previous resource allocation and refresh corresponding row,
                    // resource allocation data will be updated upon row rendering
                    this.clearCacheAndRefresh(resource);
                }
            }

            // invoke refreshing of rows of all the resources associated w/ the assignment
            me.onAssignmentsChange(assignmentStore, [ assignment ]);
        }
    },


    onAssignmentsChange : function (assignmentStore, assignments) {
        var me = this,
            resource;

        if (!Ext.isArray(assignments)) assignments = [assignments];

        // for each provided assignment
        for (var i = 0, l = assignments.length; i < l; i++) {
            // get assigned resource
            resource = me.resourceStore.getModelById(assignments[i].getResourceId());

            // this might be called as result of resource calendar change
            // if task(s) get realigned, but we don't need this since the histogram also listens
            // to calendar changes and updates resource rows accordingly.
            // So here we skip resources that are in the middle of reacting on their calendar change
            if (resource && !resource.inOnCalendarChange) {
                // resetting resource allocation and refresh corresponding row,
                // resource allocation data will be updated upon row rendering
                me.clearCacheAndRefresh(resource);
            }
        }
    },


    enableRowHeightInjection : function (lockedView, schedulingView) {
        var cellTpl                 = new Ext.XTemplate(
            '{%',
                'this.processCellValues(values);',
                'this.nextTpl.applyOut(values, out, parent);',
            '%}',
            {
                priority            : 1,
                processCellValues   : function (cellValues) {
                    if (schedulingView.orientation == 'horizontal') {
                        var height          = schedulingView.getAvailableRowHeight();

                        cellValues.style    = (cellValues.style || '') + ';height:' + height + 'px;';
                    }
                }
            }
        );

        lockedView.addCellTpl(cellTpl);
        schedulingView.addCellTpl(cellTpl);
    },


    findEndIndex : function (array, endDate) {
        endDate = endDate || this.getEndDate();

        var result  = array.length - 1;

        for (var i = result; i >= 0; i--) {
            if (array[i].startDate < endDate) {
                result = i;
                break;
            }
        }

        return result;
    },

    findStartIndex : function (array, startDate) {
        startDate   = startDate || this.getStartDate();

        var result  = 0;

        for (var i = 0, l = array.length; i < l; i++) {
            if (array[i].endDate > startDate) {
                result = i;
                break;
            }
        }

        return result;
    },

    resetAllocationDataCache : function (resource) {
        var me = this;

        if (!resource) {
            me.allocationData = {};
        }
        else {
            me.allocationData = me.allocationData || {};
            me.allocationData[resource.getId()] = null;
        }
    },


    constrainAllocationDataCache : function (allocData) {
        var me                  = this,
            // minimum allowed cached date
            cacheMinStartDate   = new Date(me.timeAxis.getStart() - this.cacheLimitDurationMS),
            // maximum allowed cached date
            cacheMaxEndDate     = new Date(me.timeAxis.getEnd() - 0 + this.cacheLimitDurationMS),
            maxBarsLastIndex    = allocData.maxBars.length - 1,
            maxBarsFirstIndex   = 0,
            barsLastIndex       = allocData.bars.length - 1,
            barsFirstIndex      = 0,
            trimCache           = false;

        // if right cache border violates its allowed maximum
        if (allocData.cacheEnd > cacheMaxEndDate) {
            maxBarsLastIndex        = me.findEndIndex(allocData.maxBars, cacheMaxEndDate);
            barsLastIndex           = me.findEndIndex(allocData.bars, cacheMaxEndDate);

            allocData.cacheEnd      = cacheMaxEndDate;
            trimCache               = true;
        }

        // if left cache border violates its allowed minimum
        if (allocData.cacheStart < cacheMinStartDate) {
            maxBarsFirstIndex       = me.findStartIndex(allocData.maxBars, cacheMinStartDate);
            barsFirstIndex          = me.findStartIndex(allocData.bars, cacheMinStartDate);

            allocData.cacheStart    = cacheMinStartDate;
            trimCache               = true;
        }

        // truncate caches if needed
        if (trimCache) {
            allocData.maxBars   = Ext.Array.splice(allocData.maxBars, maxBarsFirstIndex, maxBarsLastIndex + 1 - maxBarsFirstIndex);
            allocData.bars      = Ext.Array.splice(allocData.bars, barsFirstIndex, barsLastIndex + 1 - barsFirstIndex);
        }

        return trimCache;
    },


    updateAllocationDataCache : function (resource, start, end) {
        var DATE    = Sch.util.Date,
            me      = this,
            allocData,
            cacheStart, cacheEnd,
            left, right;

        if (me.cacheUpdateSuspended) {
            me.suspendedCacheUpdatesCount++;
            return;
        }

        start = start || me.getStartDate();
        end   = end   || me.getEndDate();

        if (!resource) {
            me.resourceStore.each(function(resource) {
                me.updateAllocationDataCache(resource, start, end);
            });
        }
        else {
            // Update resource cache
            allocData  = me.allocationData[resource.getId()] || {};
            cacheStart = allocData.cacheStart;
            cacheEnd   = allocData.cacheEnd;

            // check if update is needed at all
            if (cacheStart != start || cacheEnd != end) {

                // if we already have cached allocation data for required span or part of it
                if (cacheStart && cacheEnd && DATE.intersectSpans(cacheStart, cacheEnd, start, end)) {
                    // new span starts earlier, calculate missing allocation
                    if (cacheStart > start) {
                        left = me.processAllocationData(resource.getAllocationInfo({
                            startDate               : start,
                            endDate                 : cacheStart,
                            includeResCalIntervals  : true
                        }));

                        // there can be an extra max bar element for span end, that we don't need
                        if (left.maxBars.length) {
                            if (left.maxBars[left.maxBars.length - 1].startDate.getTime() === cacheStart.getTime()) {
                                // extra max bar can appear after merge
                                left.maxBars.pop();
                            }
                        }

                        // we don't split allocation bar element to avoid inconsistency
                        // if last new allocation element is a subset of first cached - we can drop it because it's cached
                        if (left.bars.length && allocData.bars.length) {
                            var lastNewBar = left.bars[left.bars.length - 1];
                            var firstOldBar = allocData.bars[0];

                            if (lastNewBar.startDate >= firstOldBar.startDate && lastNewBar.endDate <= firstOldBar.endDate) {
                                left.bars.pop();
                            }
                        }

                        // clue to previous cache borders
                        left.maxBars.length      && (left.maxBars[left.maxBars.length - 1].endDate = cacheStart);
                        allocData.maxBars.length && (allocData.maxBars[0].startDate                = cacheStart);

                        // insert missing allocation data to the allocation cache beginning
                        allocData.bars              = left.bars.concat(allocData.bars);
                        allocData.maxBars           = left.maxBars.concat(allocData.maxBars);

                        // visible span starts from the very first cached item
                        allocData.maxBarsStartIndex = 0;
                        allocData.barsStartIndex    = 0;

                        allocData.cacheStart = start;
                    }

                    // new span ends later, calculate trailing allocation
                    if (cacheEnd < end) {
                        right = me.processAllocationData(resource.getAllocationInfo({
                            startDate               : cacheEnd,
                            endDate                 : end,
                            includeResCalIntervals  : true
                        }));

                        // there can be an extra max bar element that we don't need
                        if (right.maxBars.length) {
                            var firstBar = right.maxBars[0];

                            if (firstBar.endDate.getTime() === cacheEnd.getTime()) {
                                // extra max bar can appear after merge
                                right.maxBars.shift();
                            } else {
                                firstBar.startDate = cacheEnd;
                            }
                        }

                        // we don't split allocation bar element to avoid inconsistency
                        // if first new allocation element is a subset of last cached - we can drop it because it's cached
                        if (right.bars.length && allocData.bars.length) {
                            var firstNewBar = right.bars[0];
                            var lastOldBar = allocData.bars[allocData.bars.length - 1];

                            if (firstNewBar.startDate >= lastOldBar.startDate && firstNewBar.endDate <= lastOldBar.endDate) {
                                right.bars.shift();
                            }
                        }

                        right.maxBars.length     && (right.maxBars[right.maxBars.length - 1].endDate = end);
                        allocData.maxBars.length && (allocData.maxBars[allocData.maxBars.length - 1].endDate = cacheEnd);

                        allocData.bars            = allocData.bars.concat(right.bars);
                        allocData.maxBars         = allocData.maxBars.concat(right.maxBars);

                        allocData.maxBarsEndIndex = allocData.maxBars.length - 1;
                        allocData.barsEndIndex    = allocData.bars.length - 1;

                        allocData.cacheEnd        = end;
                    }

                    // constrain cached data if needed
                    if (me.cacheLimitDuration > 0) {
                        me.constrainAllocationDataCache(allocData);
                    }

                    // update indexes of first/last visible cache elements
                    allocData.maxBarsStartIndex = me.findStartIndex(allocData.maxBars, start);
                    allocData.barsStartIndex    = me.findStartIndex(allocData.bars, start);
                    allocData.maxBarsEndIndex   = me.findEndIndex(allocData.maxBars, end);
                    allocData.barsEndIndex      = me.findEndIndex(allocData.bars, end);

                // if new timespan does not intersect the cached one data
                } else {
                    allocData = me.processAllocationData(resource.getAllocationInfo({
                        startDate              : start,
                        endDate                : end,
                        includeResCalIntervals : true
                    }));

                    // we completely replace cache so indexes have to wrap whole arrays
                    allocData.maxBarsStartIndex = 0;
                    allocData.maxBarsEndIndex   = allocData.maxBars.length - 1;
                    allocData.barsStartIndex    = 0;
                    allocData.barsEndIndex      = allocData.bars.length - 1;

                    allocData.cacheStart        = start;
                    allocData.cacheEnd          = end;
                }
            }

            me.allocationData[resource.getId()] = allocData;
        }
    },


    // Another set of task started
    isBarAssignmentsChanged : function (context) {
        var bar     = context.bar,
            period  = context.period;

        if (!bar.assignments || !period.inResourceCalendar || !period.totalAllocation || !period.inTasksCalendar) return false;

        for (var i = 0, l = bar.assignments.length; i < l; i++) {
            if (period.assignmentsHash[ bar.assignments[i].getTaskId() ]) return false;
        }

        // no intersection with previous set of tasks
        return true;
    },


    // Opens new bar
    openBar : function (openDate, context) {
        context.bar                 = {
            startDate               : openDate,
            totalAllocation         : context.period.totalAllocation,
            allocationMS            : context.allocationMS,
            assignments             : context.period.assignments,
            totalOverAllocationMS   : context.totalOverAllocationMS
        };

        context.barOpened = true;

        return context.bar;
    },


    // Closes histogram bar
    closeBar : function (closeDate, context) {
        if (!context.barOpened) return false;

        if (closeDate) context.bar.endDate = closeDate;
        context.bars.push(context.bar);

        context.barOpened   = false;
    },


    // Appends zero level limit line
    appendZeroMaxBars : function (fromDate, toDate, context) {
        if (!fromDate) return false;

        var me      = this,
            diff    = Sch.util.Date.getDurationInDays(fromDate, toDate);

        if (diff < 2) return false;

        var add     = true,
            maxBar  = context.maxBar,
            maxBars = context.maxBars;

        // if there is a previous level line
        if (maxBar) {
            if (!maxBar.allocationMS) {
                add     = false;
            // and it's not zero
            } else {
                // let's close it
                maxBar.endDate      = Sch.util.Date.getStartOfNextDay(fromDate, true);
                maxBars.push(maxBar);
            }
        }

        if (add) {
            // ..and start new line with zero level
            context.maxBar      = {
                startDate       : maxBar && maxBar.endDate || me.getStart(),
                allocationMS    : 0
            };
        }

        // update last calculated allocation limit
        context.maxAllocationMS = 0;

        return context.maxBar;
    },


    // This function processes report made by resource.getAllocationInfo() method and build arrays of
    // histogram bars and levels of max resource allocation.
    // Returns:
    //      {
    //        bars: [], // array of histogram bars
    //        maxBars: [] // levels of max resource allocation
    //      }
    processAllocationData : function (data) {
        var period, bar, maxBar, prevDay, closeDate, openDate,
            allocationMS, prevAllocationMS, maxAllocationMS, prevMaxAllocationMS, totalOverAllocationMS, prevTotalOverAllocationMS,
            bars        = [],
            maxBars     = [],
            me          = this,
            context     = {
                bars    : bars,
                maxBars : maxBars
            };


        var newDay  = Ext.Date.clearTime(data[0].startDate, true);

        if (newDay > this.getStartDate()) {
            maxBars.push({
                startDate       : this.getStartDate(),
                endDate         : newDay,
                allocationMS    :  0
            });
        }

        for (var i = 0, l = data.length; i < l; i++) {
            period = context.period = data[i];

            newDay = Ext.Date.clearTime(period.startDate, true);

            // if it's 1st period of a new day
            if (newDay - prevDay !== 0) {
                // if there is a gap between working days in resource calendar
                // we need to fill it with zero level lines
                if (this.showLimitLines) {
                    if (me.appendZeroMaxBars(prevDay, newDay, context)) {
                        maxBar              = context.maxBar;
                    }
                }

                prevDay                     = newDay;

                prevAllocationMS            = context.allocationMS;
                prevTotalOverAllocationMS   = context.totalOverAllocationMS;
                prevMaxAllocationMS         = context.maxAllocationMS;
                // reset allocation time counters
                allocationMS                = 0;
                totalOverAllocationMS       = 0;
                maxAllocationMS             = 0;
                var j = i;
                // let's calculate allocation time for the day
                while (data[j] && Ext.Date.clearTime(data[j].startDate, true) - newDay === 0) {
                    // if it's working time according to resource calendar
                    if (data[j].inResourceCalendar) {
                        // increment maximum possible resource allocation time
                        maxAllocationMS     += data[j].endDate - data[j].startDate;
                        // if it's working time and task is in progress
                        if (data[j].totalAllocation && data[j].inTasksCalendar) {
                            // increment allocation time
                            allocationMS            += data[j].totalAllocationMS || (data[j].endDate - data[j].startDate) * data[j].totalAllocation / 100;
                            totalOverAllocationMS   += data[j].totalOverAllocationMS || 0;
                        }
                    }
                    j++;
                }

                context.allocationMS            = allocationMS;
                context.totalOverAllocationMS   = totalOverAllocationMS;
                context.maxAllocationMS         = maxAllocationMS;

            } else {
                newDay = false;
            }

            // if we need to render limit lines
            if (me.showLimitLines) {
                // here we trace resource max available allocation changes
                if (newDay && maxAllocationMS != prevMaxAllocationMS) {
                    // on change we close existing line
                    if (maxBar) {
                        maxBar.endDate      = newDay;
                        maxBars.push(maxBar);
                    }
                    // ..and start new one with new allocationMS value
                    maxBar = context.maxBar = {
                        startDate       : newDay,
                        allocationMS    : maxAllocationMS
                    };
                }

                // update end of max available allocation line
                maxBar.endDate  = period.endDate;
            }

            // if no bar opened
            if (!context.barOpened) {
                // if period belongs to some task(s)
                // need to open new bar
                if (period.inTask) {
                    bar = me.openBar(new Date(period.startDate), context);
                }

            // bar opened & task is finished
            // need to close opened bar
            } else if (!period.inTask) {
                me.closeBar(null, context);

            // bar opened & task in progress
            } else {

                var splitBar = false;

                // another task(s) started
                if (me.isBarAssignmentsChanged(context)) {

                    closeDate   = bar.endDate;
                    openDate    = new Date(period.startDate);
                    splitBar    = true;
                // if there is a gap we need to close old bar and start new one
                // ("gap" is when we have no periods during day before newDay)
                } else if (newDay && bar.endDate <= Sch.util.Date.add(newDay, Sch.util.Date.DAY, -1)) {

                    // close bar at midnight after bar.endDate
                    closeDate   = Ext.Date.clearTime(bar.endDate, true);
                    if (closeDate < bar.endDate) {
                        closeDate   = Sch.util.Date.add(closeDate, Sch.util.Date.DAY, 1);
                    }

                    // open new bar at midnight before period.startDate
                    openDate    = Ext.Date.clearTime(period.startDate, true);
                    splitBar    = true;

                // if day allocation has changed (due to calendars)
                } else if (newDay && allocationMS !== prevAllocationMS && period.totalAllocation && period.totalAllocation == bar.totalAllocation) {

                    closeDate   = openDate = period.startDate;
                    splitBar    = true;

                // if % of allocation was changed (result of assignments change)
                } else if (period.totalAllocation && period.totalAllocation != bar.totalAllocation) {

                    closeDate   = openDate = period.totalAllocation > bar.totalAllocation ? new Date(period.startDate) : bar.endDate;
                    splitBar    = true;

                }


                if (splitBar) {
                    me.closeBar(closeDate, context);
                    bar = me.openBar(openDate, context);
                }
            }

            // if we have opened bar
            if (context.barOpened) {
                // update its end date
                bar.endDate     = period.endDate;
            }

        }

        // close bar if task goes after timeline end
        me.closeBar(null, context);

        // if we need to render limits lines
        if (me.showLimitLines) {
            // if there is a gap between working days in resource calendar
            // we need to fill it with zero level lines
            if (me.appendZeroMaxBars(prevDay || me.getStart(), me.getEnd(), context)) {
                maxBar  = context.maxBar;
            }

            // push last line to lines array
            if (maxBar) {
                maxBars.push(maxBar);
            }
        }

        return {
            bars    : bars,
            maxBars : maxBars
        };
    },

    onResourceUpdate : function (store, resource, operation, changedFieldNames) {
        // if calendar on resource was changed
        if (Ext.Array.indexOf(changedFieldNames, resource.calendarIdField) > -1) {
            // setting allocation data for resource it will be updated upon next resource row rendering
            // which should happen as the result of update
            this.resetAllocationDataCache(resource);

            // unbind old listeners from resource calendar
            var oldCalendarId = resource.previous[resource.calendarIdField];
            this.unbindResourceCalendarListener(resource, oldCalendarId);

            // if new resource calendar differs from the project one
            var calendar    = resource.getOwnCalendar();
            if (calendar && calendar !== this.calendar) {
                // bind listener on it
                this.bindResourceCalendarListener(resource);
            }
        }
    },

    onResourceStoreRefresh : function () {
        var me = this;
        // Reset all allocations data and refresh view
        me.clearCacheAndRefresh();
        // bind listeners to resources calendars
        me.bindCalendarListeners();
    },

    refreshIfRendered : function(resource) {
        var me = this;

        if (me.rendered && me.resourceStore && resource) {
            me.getView().refreshNode(me.resourceStore.indexOf(resource));
        }
        else if (me.rendered) {
            me.getView().refresh();
        }
    },

    columnRenderer : function (val, meta, resource, rowIndex, colIndex) {
        var me          = this,
            resourceId  = resource.getId(),
            view        = this.normalGrid.getView(),
            data, bars, maxBars;

        // The method is protected against unneeded recalculation
        me.updateAllocationDataCache(resource);

        data    = me.allocationData[resourceId];
        bars    = data && data.bars;
        maxBars = data && data.maxBars;

        // if visible window for the histogram bars is less than all cached bars
        // let's cut this array to pass only related data
        if (bars && (data.barsStartIndex > 0 || data.barsEndIndex < bars.length - 1)) {
            bars    = Ext.Array.slice(bars, data.barsStartIndex, data.barsEndIndex + 1);
        }

        // if visible window for the resource limit lines is less than all cached limit lines info
        // let's cut this array to pass only related data
        if (maxBars && (data.maxBarsStartIndex > 0 || data.maxBarsEndIndex < maxBars.length - 1)) {
            maxBars = Ext.Array.slice(maxBars, data.maxBarsStartIndex, data.maxBarsEndIndex + 1);
        }

        // render: scale lines (if requested),
        return (me.showScaleLines ? view.renderLines() : '') +
            // histogram bars,
            view.renderBars(bars, resourceId) +
            // max resource allocation line (if requested)
            (me.showLimitLines ? view.renderLimitLines(maxBars) : '');
    }
});

